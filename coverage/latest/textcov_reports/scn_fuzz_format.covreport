_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    736|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  4.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  10.7M|{
 3803|  10.7M|    if constexpr (sizeof(U) == 1) {
 3804|  10.7M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  10.7M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  10.7M|{
 3767|  10.7M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  10.7M|    SCN_GCC_COMPAT_PUSH
 3770|  10.7M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  10.7M|    constexpr char lengths[] =
 3772|  10.7M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  10.7M|        "\1\1\1\1\1\1\1\1"
 3774|  10.7M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  10.7M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  10.7M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  10.7M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  10.7M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  10.7M|    SCN_GCC_COMPAT_POP
 3781|  10.7M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  9.91M|{
 4009|  9.91M|    if constexpr (sizeof(CharT) == 1) {
 4010|  9.91M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  9.91M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  9.91M|{
 3822|  9.91M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  9.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  9.91M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  9.91M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  9.91M|    };
 3827|       |
 3828|  9.91M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 8.87M, False: 1.03M]
  ------------------
 3829|  8.87M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 132, False: 8.87M]
  ------------------
 3830|    132|            SCN_UNLIKELY_ATTR
 3831|    132|            return invalid_code_point;
 3832|    132|        }
 3833|  8.87M|        return static_cast<char32_t>(input[0]);
 3834|  8.87M|    }
 3835|       |
 3836|  1.03M|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 951k, False: 87.6k]
  ------------------
 3837|   951k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 24, False: 951k]
  ------------------
 3838|     24|            SCN_UNLIKELY_ATTR
 3839|     24|            return invalid_code_point;
 3840|     24|        }
 3841|   951k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 30.1k, False: 921k]
  ------------------
 3842|  30.1k|            SCN_UNLIKELY_ATTR
 3843|  30.1k|            return invalid_code_point;
 3844|  30.1k|        }
 3845|       |
 3846|   921k|        char32_t cp{};
 3847|   921k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   921k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   921k|        return cp;
 3850|   951k|    }
 3851|       |
 3852|  87.6k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 63.5k, False: 24.1k]
  ------------------
 3853|  63.5k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 18, False: 63.5k]
  ------------------
 3854|     18|            SCN_UNLIKELY_ATTR
 3855|     18|            return invalid_code_point;
 3856|     18|        }
 3857|  63.5k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 11.7k, False: 51.7k]
  ------------------
 3858|  63.5k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 532, False: 51.2k]
  ------------------
 3859|  12.2k|            SCN_UNLIKELY_ATTR
 3860|  12.2k|            return invalid_code_point;
 3861|  12.2k|        }
 3862|       |
 3863|  51.2k|        char32_t cp{};
 3864|  51.2k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  51.2k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  51.2k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  51.2k|        return cp;
 3868|  63.5k|    }
 3869|       |
 3870|  24.1k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 24.1k, False: 0]
  ------------------
 3871|  24.1k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 24.1k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  24.1k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 1.56k, False: 22.5k]
  ------------------
 3876|  1.56k|            SCN_UNLIKELY_ATTR
 3877|  1.56k|            return invalid_code_point;
 3878|  1.56k|        }
 3879|  22.5k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 16.2k, False: 6.34k]
  ------------------
 3880|  22.5k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 479, False: 5.86k]
  ------------------
 3881|  22.5k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 467, False: 5.39k]
  ------------------
 3882|  17.1k|            SCN_UNLIKELY_ATTR
 3883|  17.1k|            return invalid_code_point;
 3884|  17.1k|        }
 3885|       |
 3886|  5.39k|        char32_t cp{};
 3887|  5.39k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  5.39k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  5.39k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  5.39k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  5.39k|        return cp;
 3892|  22.5k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  1.10M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  1.10M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  1.10M|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  5.22M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  5.22M|    else {
 3701|  5.22M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  5.22M|                                       to_address(first), to_address(last)))};
 3703|  5.22M|    }
 3704|  5.22M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  15.7M|{
  326|  15.7M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  15.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  15.7M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  15.8M|{
  304|  15.8M|    return p;
  305|  15.8M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  3.96M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  3.96M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  3.96M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  3.96M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  3.96M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  3.96M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8876|  11.9k|{
 8877|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  11.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  11.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5405|  23.9k|{
 5406|  23.9k|    detail::check_scan_arg_types<Args...>();
 5407|  23.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  23.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5144|  23.9k|{
 5145|  23.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  23.9k|                  "Scan argument types must be default constructible");
 5147|  23.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  23.9k|                  "Scan argument types must be Destructible");
 5149|  23.9k|    static_assert(
 5150|  23.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  23.9k|        "Scan argument types must not be references");
 5152|  23.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5357|  23.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  23.9k|    {
 5359|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  23.9k|    {
 5370|  23.9k|        return {detail::make_arg<
 5371|  23.9k|            kind, Context,
 5372|  23.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  23.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  23.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5179|  23.9k|{
 5180|  23.9k|    return make_value<Context>(value).ref_value;
 5181|  23.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5129|  23.9k|{
 5130|  23.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  23.9k|                                  needs_context_tag>) {
 5134|  23.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  23.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4997|  23.9k|    {
 4998|       |        if constexpr (std::is_same_v<char_type, char> &&
 4999|  23.9k|                      !is_type_disabled<char_type>) {
 5000|  23.9k|            return val;
 5001|       |        }
 5002|       |        else if constexpr (is_type_disabled<char_type>) {
 5003|       |            return unscannable_disabled{val};
 5004|       |        }
 5005|       |        else {
 5006|       |            SCN_UNUSED(val);
 5007|       |            return unscannable_char{};
 5008|       |        }
 5009|  23.9k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5098|  23.9k|{
 5099|  23.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  23.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  23.9k|    constexpr bool scannable_char =
 5103|  23.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  23.9k|    static_assert(scannable_char,
 5105|  23.9k|                  "Cannot scan an argument of an unsupported character "
 5106|  23.9k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  23.9k|    constexpr bool scannable_const =
 5109|  23.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  23.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  23.9k|    constexpr bool scannable_disabled =
 5113|  23.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  23.9k|    static_assert(scannable_disabled,
 5115|  23.9k|                  "Cannot scan an argument that has been disabled by "
 5116|  23.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  23.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  23.9k|    static_assert(
 5120|  23.9k|        scannable,
 5121|  23.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  23.9k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  23.9k|    return arg_value{arg};
 5125|  23.9k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4909|  23.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  23.9k|    {
 4911|  23.9k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8663|   107k|{
 8664|   107k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8665|   107k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8600|   107k|{
 8601|   107k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   107k|    auto result = vscan_impl(buffer, format, args);
 8604|   107k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 2.29k]
  |  |  ------------------
  ------------------
 8605|   105k|        return unexpected(result.error());
 8606|   105k|    }
 8607|  2.29k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   107k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4728|   215k|{
 4729|   215k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   215k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   215k|                  "\n"
 4733|   215k|                  "Unsupported range type given as input to a scanning "
 4734|   215k|                  "function.\n"
 4735|   215k|                  "A range needs to have a character type (value type) "
 4736|   215k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   215k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   215k|                  "to be included.\n"
 4739|   215k|                  "See the scnlib documentation for more details.");
 4740|   215k|    static_assert(
 4741|   215k|        !std::is_same_v<T, custom_char_traits>,
 4742|   215k|        "\n"
 4743|   215k|        "Unsupported range type given as input to a scanning "
 4744|   215k|        "function.\n"
 4745|   215k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   215k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   215k|        "not supported.");
 4748|   215k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   215k|                  "\n"
 4750|   215k|                  "Unsupported range type given as input to a scanning "
 4751|   215k|                  "function.\n"
 4752|   215k|                  "file_marker_found cannot be used as an "
 4753|   215k|                  "source range type to scn::scan.\n"
 4754|   215k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   215k|                  "and do not provide an explicit source range, "
 4756|   215k|                  "or use scn::scan with a FILE* directly.");
 4757|   215k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   215k|                  "\n"
 4759|   215k|                  "Unsupported range type given as input to a scanning "
 4760|   215k|                  "function.\n"
 4761|   215k|                  "In order to be scannable, a range needs to satisfy "
 4762|   215k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   215k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   215k|                  "\n"
 4765|   215k|                  "Unsupported range type given as input to a scanning "
 4766|   215k|                  "function.\n"
 4767|   215k|                  "A range needs to model forward_range and have a valid "
 4768|   215k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   215k|                  "Examples of scannable ranges are std::string, "
 4770|   215k|                  "std::string_view, "
 4771|   215k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   215k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   215k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   215k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4620|   215k|{
 4621|   215k|    if constexpr (is_valid_char_type<CharT>) {
 4622|   215k|        return r;
 4623|       |        // return make_string_scan_buffer(r);
 4624|       |    }
 4625|       |    else {
 4626|       |        return invalid_char_type{};
 4627|       |    }
 4628|   215k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   649k|    {
 1598|   649k|        return has_value();
 1599|   649k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.29M|    {
  485|  1.29M|        return m_has_value;
  486|  1.29M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   643k|    {
 1604|   643k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   643k|        return this->get_unexpected().error();
 1606|   643k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   643k|    {
  468|   643k|        return m_unexpected;
  469|   643k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  3.91M|    {
  361|  3.91M|        return m_unexpected;
  362|  3.91M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  2.20M|        : m_unexpected(std::forward<Err>(e))
  346|  2.20M|    {
  347|  2.20M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.20M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.20M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   210k|        : base(unexpect, std::move(e.error())),
 1474|   210k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   210k|    {
 1476|   210k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   210k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   210k|          m_has_value(false)
  446|   210k|    {
  447|   210k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  2.27M|        : m_unexpected(std::forward<Args>(args)...)
  355|  2.27M|    {
  356|  2.27M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.27M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.27M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   215k|    {
 1177|   215k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5932|  4.59k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  4.59k|                      ranges::iterator_t<SourceRange>>) {
 5935|  4.59k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  4.59k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  4.59k|    {
 2724|  4.59k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  4.59k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  4.59k|    {
 2705|  4.59k|        return decay_copy(t.begin());
 2706|  4.59k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  83.3k|{
 1949|  83.3k|    return SCN_FWD(t);
  ------------------
  |  |  930|  83.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  83.3k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5919|  4.59k|{
 5920|  4.59k|    return ranges::end(source);
 5921|  4.59k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  4.59k|    {
 2781|  4.59k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  4.59k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  4.59k|    {
 2763|  4.59k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  4.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  4.59k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  1.28M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.28M|    static_cast<    \
  |  |  929|  1.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.28M|    static_cast<    \
  |  |  929|  1.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.28M|    {
 3312|  1.28M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  6.53k|    {
 1653|  6.53k|        return value();
 1654|  6.53k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  6.53k|    {
 1627|  6.53k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.53k|        return this->get_value();
 1629|  6.53k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  6.53k|    {
  451|  6.53k|        return m_value;
  452|  6.53k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  4.59k|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.59k|    {
 1430|  4.59k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  4.59k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.59k|    {
  437|  4.59k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7984|  23.9k|    {
 7985|  23.9k|        return m_str;
 7986|  23.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  23.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  23.9k|    {
 5436|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5388|  23.9k|    {
 5389|  23.9k|        return m_argptrs;
 5390|  23.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   215k|        : m_desc(desc), m_builtin_values(data)
 5487|   215k|    {
 5488|   215k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  23.9k|{
 8830|  23.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.7k, False: 218]
  |  |  ------------------
  ------------------
 8831|  23.7k|        return unexpected(result.error());
 8832|  23.7k|    }
 8833|    218|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    218|    static_cast<    \
  |  |  929|    218|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    218|    static_cast<    \
  |  |  929|    218|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  23.9k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   215k|    {
 1598|   215k|        return has_value();
 1599|   215k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   430k|    {
  485|   430k|        return m_has_value;
  486|   430k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   210k|    {
 1604|   210k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   210k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   210k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   210k|        return this->get_unexpected().error();
 1606|   210k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   210k|    {
  468|   210k|        return m_unexpected;
  469|   210k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  23.7k|        : base(unexpect, std::move(e.error())),
 1474|  23.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.7k|    {
 1476|  23.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  23.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.7k|          m_has_value(false)
  446|  23.7k|    {
  447|  23.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.9k|    {
 1177|  23.9k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  4.59k|    {
 1653|  4.59k|        return value();
 1654|  4.59k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  4.59k|    {
 1627|  4.59k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.59k|        return this->get_value();
 1629|  4.59k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.59k|    {
  451|  4.59k|        return m_value;
  452|  4.59k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5838|    218|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    218|    static_cast<    \
  |  |  929|    218|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    218|    static_cast<    \
  |  |  929|    218|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    218|    {
 5840|    218|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|  4.59k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  4.59k|    static_cast<    \
  |  |  929|  4.59k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  4.59k|    {
 5691|  4.59k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5624|    218|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|    218|    static_cast<    \
  |  |  929|    218|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|    218|    {
 5626|    218|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    218|        : base(std::in_place, std::forward<U>(val)),
 1428|    218|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    218|    {
 1430|    218|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    218|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    218|    {
  437|    218|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5383|  23.9k|    {
 5384|  23.9k|        return m_args;
 5385|  23.9k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7700|   215k|{
 7701|   215k|    return s;
 7702|   215k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7677|   215k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  23.9k|        : m_str(r.str)
 7980|  23.9k|    {
 7981|  23.9k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8943|  11.9k|{
 8944|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  11.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  11.9k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8681|   107k|{
 8682|   107k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8683|   107k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8616|   107k|{
 8617|   107k|#if !SCN_DISABLE_LOCALE
 8618|   107k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   107k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   107k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   107k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   107k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 2.29k]
  |  |  ------------------
  ------------------
 8625|   105k|        return unexpected(result.error());
 8626|   105k|    }
 8627|  2.29k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   107k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8876|  11.9k|{
 8877|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  11.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  11.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5405|  23.9k|{
 5406|  23.9k|    detail::check_scan_arg_types<Args...>();
 5407|  23.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  23.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5144|  71.7k|{
 5145|  71.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  71.7k|                  "Scan argument types must be default constructible");
 5147|  71.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  71.7k|                  "Scan argument types must be Destructible");
 5149|  71.7k|    static_assert(
 5150|  71.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  71.7k|        "Scan argument types must not be references");
 5152|  71.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5357|  23.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  23.9k|    {
 5359|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  23.9k|    {
 5370|  23.9k|        return {detail::make_arg<
 5371|  23.9k|            kind, Context,
 5372|  23.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  23.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  23.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|  23.9k|{
 5180|  23.9k|    return make_value<Context>(value).ref_value;
 5181|  23.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5129|  23.9k|{
 5130|  23.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  23.9k|                                  needs_context_tag>) {
 5134|  23.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  23.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4968|  23.9k|    {                                                                        \
 4969|  23.9k|        return val;                                                          \
 4970|  23.9k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5098|  71.7k|{
 5099|  71.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  71.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  71.7k|    constexpr bool scannable_char =
 5103|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  71.7k|    static_assert(scannable_char,
 5105|  71.7k|                  "Cannot scan an argument of an unsupported character "
 5106|  71.7k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  71.7k|    constexpr bool scannable_const =
 5109|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  71.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  71.7k|    constexpr bool scannable_disabled =
 5113|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  71.7k|    static_assert(scannable_disabled,
 5115|  71.7k|                  "Cannot scan an argument that has been disabled by "
 5116|  71.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  71.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  71.7k|    static_assert(
 5120|  71.7k|        scannable,
 5121|  71.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  71.7k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  71.7k|    return arg_value{arg};
 5125|  71.7k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4909|  71.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  71.7k|    {
 4911|  71.7k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7984|  23.9k|    {
 7985|  23.9k|        return m_str;
 7986|  23.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  23.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  23.9k|    {
 5436|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5388|  23.9k|    {
 5389|  23.9k|        return m_argptrs;
 5390|  23.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  23.9k|{
 8830|  23.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.9k, False: 0]
  |  |  ------------------
  ------------------
 8831|  23.9k|        return unexpected(result.error());
 8832|  23.9k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  23.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  23.9k|        : base(unexpect, std::move(e.error())),
 1474|  23.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.9k|    {
 1476|  23.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  23.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.9k|          m_has_value(false)
  446|  23.9k|    {
  447|  23.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.9k|    {
 1177|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5383|  23.9k|    {
 5384|  23.9k|        return m_args;
 5385|  23.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  23.9k|        : m_str(r.str)
 7980|  23.9k|    {
 7981|  23.9k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8943|  11.9k|{
 8944|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  11.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  11.9k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8876|  11.9k|{
 8877|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  11.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  11.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5405|  23.9k|{
 5406|  23.9k|    detail::check_scan_arg_types<Args...>();
 5407|  23.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  23.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5144|  71.7k|{
 5145|  71.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  71.7k|                  "Scan argument types must be default constructible");
 5147|  71.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  71.7k|                  "Scan argument types must be Destructible");
 5149|  71.7k|    static_assert(
 5150|  71.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  71.7k|        "Scan argument types must not be references");
 5152|  71.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5357|  23.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  23.9k|    {
 5359|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  23.9k|    {
 5370|  23.9k|        return {detail::make_arg<
 5371|  23.9k|            kind, Context,
 5372|  23.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  23.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  23.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|  23.9k|{
 5180|  23.9k|    return make_value<Context>(value).ref_value;
 5181|  23.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5129|  23.9k|{
 5130|  23.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  23.9k|                                  needs_context_tag>) {
 5134|  23.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  23.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4968|  23.9k|    {                                                                        \
 4969|  23.9k|        return val;                                                          \
 4970|  23.9k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5098|  71.7k|{
 5099|  71.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  71.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  71.7k|    constexpr bool scannable_char =
 5103|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  71.7k|    static_assert(scannable_char,
 5105|  71.7k|                  "Cannot scan an argument of an unsupported character "
 5106|  71.7k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  71.7k|    constexpr bool scannable_const =
 5109|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  71.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  71.7k|    constexpr bool scannable_disabled =
 5113|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  71.7k|    static_assert(scannable_disabled,
 5115|  71.7k|                  "Cannot scan an argument that has been disabled by "
 5116|  71.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  71.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  71.7k|    static_assert(
 5120|  71.7k|        scannable,
 5121|  71.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  71.7k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  71.7k|    return arg_value{arg};
 5125|  71.7k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4909|  71.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  71.7k|    {
 4911|  71.7k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7984|  23.9k|    {
 7985|  23.9k|        return m_str;
 7986|  23.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  23.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  23.9k|    {
 5436|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5388|  23.9k|    {
 5389|  23.9k|        return m_argptrs;
 5390|  23.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  23.9k|{
 8830|  23.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.9k, False: 0]
  |  |  ------------------
  ------------------
 8831|  23.9k|        return unexpected(result.error());
 8832|  23.9k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  23.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  23.9k|        : base(unexpect, std::move(e.error())),
 1474|  23.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.9k|    {
 1476|  23.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  23.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.9k|          m_has_value(false)
  446|  23.9k|    {
  447|  23.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.9k|    {
 1177|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5383|  23.9k|    {
 5384|  23.9k|        return m_args;
 5385|  23.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  23.9k|        : m_str(r.str)
 7980|  23.9k|    {
 7981|  23.9k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8943|  11.9k|{
 8944|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  11.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  11.9k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8876|  11.9k|{
 8877|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  11.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  11.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5405|  23.9k|{
 5406|  23.9k|    detail::check_scan_arg_types<Args...>();
 5407|  23.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  23.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5144|  71.7k|{
 5145|  71.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  71.7k|                  "Scan argument types must be default constructible");
 5147|  71.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  71.7k|                  "Scan argument types must be Destructible");
 5149|  71.7k|    static_assert(
 5150|  71.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  71.7k|        "Scan argument types must not be references");
 5152|  71.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5357|  23.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  23.9k|    {
 5359|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  23.9k|    {
 5370|  23.9k|        return {detail::make_arg<
 5371|  23.9k|            kind, Context,
 5372|  23.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  23.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  23.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|  23.9k|{
 5180|  23.9k|    return make_value<Context>(value).ref_value;
 5181|  23.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5129|  23.9k|{
 5130|  23.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  23.9k|                                  needs_context_tag>) {
 5134|  23.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  23.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4968|  23.9k|    {                                                                        \
 4969|  23.9k|        return val;                                                          \
 4970|  23.9k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5098|  71.7k|{
 5099|  71.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  71.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  71.7k|    constexpr bool scannable_char =
 5103|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  71.7k|    static_assert(scannable_char,
 5105|  71.7k|                  "Cannot scan an argument of an unsupported character "
 5106|  71.7k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  71.7k|    constexpr bool scannable_const =
 5109|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  71.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  71.7k|    constexpr bool scannable_disabled =
 5113|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  71.7k|    static_assert(scannable_disabled,
 5115|  71.7k|                  "Cannot scan an argument that has been disabled by "
 5116|  71.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  71.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  71.7k|    static_assert(
 5120|  71.7k|        scannable,
 5121|  71.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  71.7k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  71.7k|    return arg_value{arg};
 5125|  71.7k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4909|  71.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  71.7k|    {
 4911|  71.7k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7984|  23.9k|    {
 7985|  23.9k|        return m_str;
 7986|  23.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  23.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  23.9k|    {
 5436|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5388|  23.9k|    {
 5389|  23.9k|        return m_argptrs;
 5390|  23.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  23.9k|{
 8830|  23.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.9k, False: 0]
  |  |  ------------------
  ------------------
 8831|  23.9k|        return unexpected(result.error());
 8832|  23.9k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  23.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  23.9k|        : base(unexpect, std::move(e.error())),
 1474|  23.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.9k|    {
 1476|  23.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  23.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.9k|          m_has_value(false)
  446|  23.9k|    {
  447|  23.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.9k|    {
 1177|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5383|  23.9k|    {
 5384|  23.9k|        return m_args;
 5385|  23.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  23.9k|        : m_str(r.str)
 7980|  23.9k|    {
 7981|  23.9k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8943|  11.9k|{
 8944|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  11.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  11.9k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8876|  11.9k|{
 8877|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  11.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  11.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5405|  23.9k|{
 5406|  23.9k|    detail::check_scan_arg_types<Args...>();
 5407|  23.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  23.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5144|  71.7k|{
 5145|  71.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  71.7k|                  "Scan argument types must be default constructible");
 5147|  71.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  71.7k|                  "Scan argument types must be Destructible");
 5149|  71.7k|    static_assert(
 5150|  71.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  71.7k|        "Scan argument types must not be references");
 5152|  71.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5357|  23.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  23.9k|    {
 5359|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  23.9k|    {
 5370|  23.9k|        return {detail::make_arg<
 5371|  23.9k|            kind, Context,
 5372|  23.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  23.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  23.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5179|  23.9k|{
 5180|  23.9k|    return make_value<Context>(value).ref_value;
 5181|  23.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5129|  23.9k|{
 5130|  23.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  23.9k|                                  needs_context_tag>) {
 5134|  23.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  23.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4968|  23.9k|    {                                                                        \
 4969|  23.9k|        return val;                                                          \
 4970|  23.9k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5098|  71.7k|{
 5099|  71.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  71.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  71.7k|    constexpr bool scannable_char =
 5103|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  71.7k|    static_assert(scannable_char,
 5105|  71.7k|                  "Cannot scan an argument of an unsupported character "
 5106|  71.7k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  71.7k|    constexpr bool scannable_const =
 5109|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  71.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  71.7k|    constexpr bool scannable_disabled =
 5113|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  71.7k|    static_assert(scannable_disabled,
 5115|  71.7k|                  "Cannot scan an argument that has been disabled by "
 5116|  71.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  71.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  71.7k|    static_assert(
 5120|  71.7k|        scannable,
 5121|  71.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  71.7k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  71.7k|    return arg_value{arg};
 5125|  71.7k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4909|  71.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  71.7k|    {
 4911|  71.7k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7984|  23.9k|    {
 7985|  23.9k|        return m_str;
 7986|  23.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  23.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  23.9k|    {
 5436|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5388|  23.9k|    {
 5389|  23.9k|        return m_argptrs;
 5390|  23.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  23.9k|{
 8830|  23.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.9k, False: 0]
  |  |  ------------------
  ------------------
 8831|  23.9k|        return unexpected(result.error());
 8832|  23.9k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  23.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  23.9k|        : base(unexpect, std::move(e.error())),
 1474|  23.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.9k|    {
 1476|  23.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  23.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.9k|          m_has_value(false)
  446|  23.9k|    {
  447|  23.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.9k|    {
 1177|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5383|  23.9k|    {
 5384|  23.9k|        return m_args;
 5385|  23.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  23.9k|        : m_str(r.str)
 7980|  23.9k|    {
 7981|  23.9k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8943|  11.9k|{
 8944|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  11.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  11.9k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8876|  11.9k|{
 8877|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  11.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  11.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5405|  23.9k|{
 5406|  23.9k|    detail::check_scan_arg_types<Args...>();
 5407|  23.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  23.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5144|  71.7k|{
 5145|  71.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  71.7k|                  "Scan argument types must be default constructible");
 5147|  71.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  71.7k|                  "Scan argument types must be Destructible");
 5149|  71.7k|    static_assert(
 5150|  71.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  71.7k|        "Scan argument types must not be references");
 5152|  71.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5357|  23.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  23.9k|    {
 5359|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5369|  23.9k|    {
 5370|  23.9k|        return {detail::make_arg<
 5371|  23.9k|            kind, Context,
 5372|  23.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  23.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  23.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5179|  23.9k|{
 5180|  23.9k|    return make_value<Context>(value).ref_value;
 5181|  23.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5129|  23.9k|{
 5130|  23.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  23.9k|                                  needs_context_tag>) {
 5134|  23.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  23.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4968|  23.9k|    {                                                                        \
 4969|  23.9k|        return val;                                                          \
 4970|  23.9k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5098|  71.7k|{
 5099|  71.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  71.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  71.7k|    constexpr bool scannable_char =
 5103|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  71.7k|    static_assert(scannable_char,
 5105|  71.7k|                  "Cannot scan an argument of an unsupported character "
 5106|  71.7k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  71.7k|    constexpr bool scannable_const =
 5109|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  71.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  71.7k|    constexpr bool scannable_disabled =
 5113|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  71.7k|    static_assert(scannable_disabled,
 5115|  71.7k|                  "Cannot scan an argument that has been disabled by "
 5116|  71.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  71.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  71.7k|    static_assert(
 5120|  71.7k|        scannable,
 5121|  71.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  71.7k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  71.7k|    return arg_value{arg};
 5125|  71.7k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4909|  71.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  71.7k|    {
 4911|  71.7k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7984|  23.9k|    {
 7985|  23.9k|        return m_str;
 7986|  23.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  23.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  23.9k|    {
 5436|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5388|  23.9k|    {
 5389|  23.9k|        return m_argptrs;
 5390|  23.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8829|  23.9k|{
 8830|  23.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.9k, False: 0]
  |  |  ------------------
  ------------------
 8831|  23.9k|        return unexpected(result.error());
 8832|  23.9k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  23.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1473|  23.9k|        : base(unexpect, std::move(e.error())),
 1474|  23.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.9k|    {
 1476|  23.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  444|  23.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.9k|          m_has_value(false)
  446|  23.9k|    {
  447|  23.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.9k|    {
 1177|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5383|  23.9k|    {
 5384|  23.9k|        return m_args;
 5385|  23.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  23.9k|        : m_str(r.str)
 7980|  23.9k|    {
 7981|  23.9k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8943|  11.9k|{
 8944|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  11.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  11.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8876|  11.9k|{
 8877|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  11.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  11.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|  23.9k|{
 5406|  23.9k|    detail::check_scan_arg_types<Args...>();
 5407|  23.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  23.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5144|  71.7k|{
 5145|  71.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  71.7k|                  "Scan argument types must be default constructible");
 5147|  71.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  71.7k|                  "Scan argument types must be Destructible");
 5149|  71.7k|    static_assert(
 5150|  71.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  71.7k|        "Scan argument types must not be references");
 5152|  71.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|  23.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  23.9k|    {
 5359|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  23.9k|    {
 5370|  23.9k|        return {detail::make_arg<
 5371|  23.9k|            kind, Context,
 5372|  23.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  23.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  23.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|  23.9k|{
 5180|  23.9k|    return make_value<Context>(value).ref_value;
 5181|  23.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|  23.9k|{
 5130|  23.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  23.9k|                                  needs_context_tag>) {
 5134|  23.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  23.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|  23.9k|    {                                                                        \
 4969|  23.9k|        return val;                                                          \
 4970|  23.9k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5098|  71.7k|{
 5099|  71.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  71.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  71.7k|    constexpr bool scannable_char =
 5103|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  71.7k|    static_assert(scannable_char,
 5105|  71.7k|                  "Cannot scan an argument of an unsupported character "
 5106|  71.7k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  71.7k|    constexpr bool scannable_const =
 5109|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  71.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  71.7k|    constexpr bool scannable_disabled =
 5113|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  71.7k|    static_assert(scannable_disabled,
 5115|  71.7k|                  "Cannot scan an argument that has been disabled by "
 5116|  71.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  71.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  71.7k|    static_assert(
 5120|  71.7k|        scannable,
 5121|  71.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  71.7k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  71.7k|    return arg_value{arg};
 5125|  71.7k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4909|  71.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  71.7k|    {
 4911|  71.7k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7984|  23.9k|    {
 7985|  23.9k|        return m_str;
 7986|  23.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  23.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  23.9k|    {
 5436|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|  23.9k|    {
 5389|  23.9k|        return m_argptrs;
 5390|  23.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8829|  23.9k|{
 8830|  23.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.4k, False: 1.46k]
  |  |  ------------------
  ------------------
 8831|  22.4k|        return unexpected(result.error());
 8832|  22.4k|    }
 8833|  1.46k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  23.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  22.4k|        : base(unexpect, std::move(e.error())),
 1474|  22.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  22.4k|    {
 1476|  22.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  22.4k|        : m_has_value(false)
  625|  22.4k|    {
  626|  22.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  22.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  22.4k|    {
  689|  22.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  22.4k|                                  std::forward<Args>(args)...);
  691|  22.4k|        m_has_value = false;
  692|  22.4k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|   139k|{
  392|   139k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   139k|        T(std::forward<Args>(args)...);
  394|   139k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  44.9k|    {
  718|  44.9k|        return reinterpret_cast<unexpected<E>*>(
  719|  44.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  44.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  44.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.9k|    {
 1177|  23.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|  1.46k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  1.46k|    {
 5840|  1.46k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  2.07k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  2.07k|    static_cast<    \
  |  |  929|  2.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  2.07k|    {
 5626|  2.07k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.46k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.46k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.46k|    {
 1430|  1.46k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|  1.46k|        : m_has_value(true)
  615|  1.46k|    {
  616|  1.46k|        construct(std::forward<Args>(args)...);
  617|  1.46k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.46k|    {
  682|  1.46k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.46k|        m_has_value = true;
  684|  1.46k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.46k|{
  392|  1.46k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.46k|        T(std::forward<Args>(args)...);
  394|  1.46k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|  1.46k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.92k|    {
  706|  2.92k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.92k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.92k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|  2.92k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|  23.9k|    {
 5384|  23.9k|        return m_args;
 5385|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|  23.9k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  23.9k|        : m_str(r.str)
 7980|  23.9k|    {
 7981|  23.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  23.9k|    {
  631|  23.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.46k, False: 22.4k]
  ------------------
  632|  1.46k|            destroy_value();
  633|  1.46k|        }
  634|  22.4k|        else {
  635|  22.4k|            destroy_unexpected();
  636|  22.4k|        }
  637|  23.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  23.9k|    {
  675|  23.9k|        return m_has_value;
  676|  23.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.46k|    {
  696|  1.46k|        scn::detail::destroy_at(value_ptr());
  697|  1.46k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|  1.46k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  1.46k|    else {
  404|  1.46k|        p->~T();
  405|  1.46k|    }
  406|  1.46k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  22.4k|    {
  700|  22.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  22.4k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|   139k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   139k|    else {
  404|   139k|        p->~T();
  405|   139k|    }
  406|   139k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8943|  11.9k|{
 8944|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  11.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  11.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8876|  11.9k|{
 8877|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  11.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  11.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  23.9k|{
 5406|  23.9k|    detail::check_scan_arg_types<Args...>();
 5407|  23.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  23.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5144|  71.7k|{
 5145|  71.7k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  71.7k|                  "Scan argument types must be default constructible");
 5147|  71.7k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  71.7k|                  "Scan argument types must be Destructible");
 5149|  71.7k|    static_assert(
 5150|  71.7k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  71.7k|        "Scan argument types must not be references");
 5152|  71.7k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  23.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  23.9k|    {
 5359|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  23.9k|    {
 5370|  23.9k|        return {detail::make_arg<
 5371|  23.9k|            kind, Context,
 5372|  23.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  23.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  23.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  23.9k|{
 5180|  23.9k|    return make_value<Context>(value).ref_value;
 5181|  23.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  23.9k|{
 5130|  23.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  23.9k|                                  needs_context_tag>) {
 5134|  23.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  23.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  23.9k|    {                                                                        \
 4969|  23.9k|        return val;                                                          \
 4970|  23.9k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5098|  71.7k|{
 5099|  71.7k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  71.7k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  71.7k|    constexpr bool scannable_char =
 5103|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  71.7k|    static_assert(scannable_char,
 5105|  71.7k|                  "Cannot scan an argument of an unsupported character "
 5106|  71.7k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  71.7k|    constexpr bool scannable_const =
 5109|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  71.7k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  71.7k|    constexpr bool scannable_disabled =
 5113|  71.7k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  71.7k|    static_assert(scannable_disabled,
 5115|  71.7k|                  "Cannot scan an argument that has been disabled by "
 5116|  71.7k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  71.7k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  71.7k|    static_assert(
 5120|  71.7k|        scannable,
 5121|  71.7k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  71.7k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  71.7k|    return arg_value{arg};
 5125|  71.7k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4909|  71.7k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  71.7k|    {
 4911|  71.7k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7984|  23.9k|    {
 7985|  23.9k|        return m_str;
 7986|  23.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  23.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  23.9k|    {
 5436|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  23.9k|    {
 5389|  23.9k|        return m_argptrs;
 5390|  23.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8829|  23.9k|{
 8830|  23.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.4k, False: 1.46k]
  |  |  ------------------
  ------------------
 8831|  22.4k|        return unexpected(result.error());
 8832|  22.4k|    }
 8833|  1.46k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  23.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  22.4k|        : base(unexpect, std::move(e.error())),
 1474|  22.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  22.4k|    {
 1476|  22.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  22.4k|        : m_has_value(false)
  625|  22.4k|    {
  626|  22.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  22.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  22.4k|    {
  689|  22.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  22.4k|                                  std::forward<Args>(args)...);
  691|  22.4k|        m_has_value = false;
  692|  22.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  44.9k|    {
  718|  44.9k|        return reinterpret_cast<unexpected<E>*>(
  719|  44.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  44.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  44.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.9k|    {
 1177|  23.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|  1.46k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  1.46k|    {
 5840|  1.46k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  2.07k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  2.07k|    static_cast<    \
  |  |  929|  2.07k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  2.07k|    {
 5626|  2.07k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.46k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.46k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.46k|    {
 1430|  1.46k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|  1.46k|        : m_has_value(true)
  615|  1.46k|    {
  616|  1.46k|        construct(std::forward<Args>(args)...);
  617|  1.46k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.46k|    {
  682|  1.46k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.46k|        m_has_value = true;
  684|  1.46k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.46k|{
  392|  1.46k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.46k|        T(std::forward<Args>(args)...);
  394|  1.46k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|  1.46k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.92k|    {
  706|  2.92k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.92k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.92k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|  2.92k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  23.9k|    {
 5384|  23.9k|        return m_args;
 5385|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  23.9k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  23.9k|        : m_str(r.str)
 7980|  23.9k|    {
 7981|  23.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  23.9k|    {
  631|  23.9k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.46k, False: 22.4k]
  ------------------
  632|  1.46k|            destroy_value();
  633|  1.46k|        }
  634|  22.4k|        else {
  635|  22.4k|            destroy_unexpected();
  636|  22.4k|        }
  637|  23.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  23.9k|    {
  675|  23.9k|        return m_has_value;
  676|  23.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.46k|    {
  696|  1.46k|        scn::detail::destroy_at(value_ptr());
  697|  1.46k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  1.46k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  1.46k|    else {
  404|  1.46k|        p->~T();
  405|  1.46k|    }
  406|  1.46k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  22.4k|    {
  700|  22.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  22.4k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8943|  11.9k|{
 8944|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  11.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  11.9k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8876|  11.9k|{
 8877|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8878|  11.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|  11.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5405|  23.9k|{
 5406|  23.9k|    detail::check_scan_arg_types<Args...>();
 5407|  23.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  23.9k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5144|  23.9k|{
 5145|  23.9k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  23.9k|                  "Scan argument types must be default constructible");
 5147|  23.9k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  23.9k|                  "Scan argument types must be Destructible");
 5149|  23.9k|    static_assert(
 5150|  23.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  23.9k|        "Scan argument types must not be references");
 5152|  23.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5357|  23.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  23.9k|    {
 5359|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  23.9k|    {
 5370|  23.9k|        return {detail::make_arg<
 5371|  23.9k|            kind, Context,
 5372|  23.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  23.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  23.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5179|  23.9k|{
 5180|  23.9k|    return make_value<Context>(value).ref_value;
 5181|  23.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5129|  23.9k|{
 5130|  23.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  23.9k|                                  needs_context_tag>) {
 5134|  23.9k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  23.9k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4968|  23.9k|    {                                                                        \
 4969|  23.9k|        return val;                                                          \
 4970|  23.9k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5098|  23.9k|{
 5099|  23.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  23.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  23.9k|    constexpr bool scannable_char =
 5103|  23.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  23.9k|    static_assert(scannable_char,
 5105|  23.9k|                  "Cannot scan an argument of an unsupported character "
 5106|  23.9k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  23.9k|    constexpr bool scannable_const =
 5109|  23.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  23.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  23.9k|    constexpr bool scannable_disabled =
 5113|  23.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  23.9k|    static_assert(scannable_disabled,
 5115|  23.9k|                  "Cannot scan an argument that has been disabled by "
 5116|  23.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  23.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  23.9k|    static_assert(
 5120|  23.9k|        scannable,
 5121|  23.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  23.9k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  23.9k|    return arg_value{arg};
 5125|  23.9k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4909|  23.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  23.9k|    {
 4911|  23.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7984|  23.9k|    {
 7985|  23.9k|        return m_str;
 7986|  23.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  23.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  23.9k|    {
 5436|  23.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5388|  23.9k|    {
 5389|  23.9k|        return m_argptrs;
 5390|  23.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8829|  23.9k|{
 8830|  23.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.4k, False: 1.46k]
  |  |  ------------------
  ------------------
 8831|  22.4k|        return unexpected(result.error());
 8832|  22.4k|    }
 8833|  1.46k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  23.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  22.4k|        : base(unexpect, std::move(e.error())),
 1474|  22.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  22.4k|    {
 1476|  22.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  22.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  22.4k|          m_has_value(false)
  446|  22.4k|    {
  447|  22.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.9k|    {
 1177|  23.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|  1.46k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  1.46k|    {
 5840|  1.46k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|  1.46k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.46k|    static_cast<    \
  |  |  929|  1.46k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.46k|    {
 5626|  1.46k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|  1.46k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.46k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.46k|    {
 1430|  1.46k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|  1.46k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.46k|    {
  437|  1.46k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5383|  23.9k|    {
 5384|  23.9k|        return m_args;
 5385|  23.9k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|  23.9k|        : m_str(r.str)
 7980|  23.9k|    {
 7981|  23.9k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8943|  11.9k|{
 8944|  11.9k|    auto args = make_scan_args<scan_context, Args...>();
 8945|  11.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|  11.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.9k|    static_cast<    \
  |  |  929|  11.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|  11.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5405|  47.8k|{
 5406|  47.8k|    detail::check_scan_arg_types<Args...>();
 5407|  47.8k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  47.8k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5144|  47.8k|{
 5145|  47.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  47.8k|                  "Scan argument types must be default constructible");
 5147|  47.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  47.8k|                  "Scan argument types must be Destructible");
 5149|  47.8k|    static_assert(
 5150|  47.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  47.8k|        "Scan argument types must not be references");
 5152|  47.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5357|  47.8k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  47.8k|    {
 5359|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  47.8k|    {
 5370|  47.8k|        return {detail::make_arg<
 5371|  47.8k|            kind, Context,
 5372|  47.8k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  47.8k|                                 typename Context::char_type>::value>(args)...};
 5374|  47.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5179|  47.8k|{
 5180|  47.8k|    return make_value<Context>(value).ref_value;
 5181|  47.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5129|  47.8k|{
 5130|  47.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  47.8k|                                  needs_context_tag>) {
 5134|  47.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  47.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4968|  47.8k|    {                                                                        \
 4969|  47.8k|        return val;                                                          \
 4970|  47.8k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5098|  47.8k|{
 5099|  47.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  47.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  47.8k|    constexpr bool scannable_char =
 5103|  47.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  47.8k|    static_assert(scannable_char,
 5105|  47.8k|                  "Cannot scan an argument of an unsupported character "
 5106|  47.8k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  47.8k|    constexpr bool scannable_const =
 5109|  47.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  47.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  47.8k|    constexpr bool scannable_disabled =
 5113|  47.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  47.8k|    static_assert(scannable_disabled,
 5115|  47.8k|                  "Cannot scan an argument that has been disabled by "
 5116|  47.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  47.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  47.8k|    static_assert(
 5120|  47.8k|        scannable,
 5121|  47.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  47.8k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  47.8k|    return arg_value{arg};
 5125|  47.8k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4909|  47.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  47.8k|    {
 4911|  47.8k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8600|   215k|{
 8601|   215k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   215k|    auto result = vscan_impl(buffer, format, args);
 8604|   215k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214k, False: 966]
  |  |  ------------------
  ------------------
 8605|   214k|        return unexpected(result.error());
 8606|   214k|    }
 8607|    966|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    966|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   215k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4728|   430k|{
 4729|   430k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   430k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   430k|                  "\n"
 4733|   430k|                  "Unsupported range type given as input to a scanning "
 4734|   430k|                  "function.\n"
 4735|   430k|                  "A range needs to have a character type (value type) "
 4736|   430k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   430k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   430k|                  "to be included.\n"
 4739|   430k|                  "See the scnlib documentation for more details.");
 4740|   430k|    static_assert(
 4741|   430k|        !std::is_same_v<T, custom_char_traits>,
 4742|   430k|        "\n"
 4743|   430k|        "Unsupported range type given as input to a scanning "
 4744|   430k|        "function.\n"
 4745|   430k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   430k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   430k|        "not supported.");
 4748|   430k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   430k|                  "\n"
 4750|   430k|                  "Unsupported range type given as input to a scanning "
 4751|   430k|                  "function.\n"
 4752|   430k|                  "file_marker_found cannot be used as an "
 4753|   430k|                  "source range type to scn::scan.\n"
 4754|   430k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   430k|                  "and do not provide an explicit source range, "
 4756|   430k|                  "or use scn::scan with a FILE* directly.");
 4757|   430k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   430k|                  "\n"
 4759|   430k|                  "Unsupported range type given as input to a scanning "
 4760|   430k|                  "function.\n"
 4761|   430k|                  "In order to be scannable, a range needs to satisfy "
 4762|   430k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   430k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   430k|                  "\n"
 4765|   430k|                  "Unsupported range type given as input to a scanning "
 4766|   430k|                  "function.\n"
 4767|   430k|                  "A range needs to model forward_range and have a valid "
 4768|   430k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   430k|                  "Examples of scannable ranges are std::string, "
 4770|   430k|                  "std::string_view, "
 4771|   430k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   430k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   430k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   430k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4620|   430k|{
 4621|   430k|    if constexpr (is_valid_char_type<CharT>) {
 4622|   430k|        return r;
 4623|       |        // return make_string_scan_buffer(r);
 4624|       |    }
 4625|       |    else {
 4626|       |        return invalid_char_type{};
 4627|       |    }
 4628|   430k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   428k|        : base(unexpect, std::move(e.error())),
 1474|   428k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   428k|    {
 1476|   428k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   428k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   428k|          m_has_value(false)
  446|   428k|    {
  447|   428k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   430k|    {
 1177|   430k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5932|  1.93k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.93k|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.93k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.93k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.93k|    {
 2724|  1.93k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.93k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.93k|    {
 2705|  1.93k|        return decay_copy(t.begin());
 2706|  1.93k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  42.4k|{
 1949|  42.4k|    return SCN_FWD(t);
  ------------------
  |  |  930|  42.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  42.4k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5919|  1.93k|{
 5920|  1.93k|    return ranges::end(source);
 5921|  1.93k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.93k|    {
 2781|  1.93k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.93k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.93k|    {
 2763|  1.93k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.93k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|   656k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   656k|    static_cast<    \
  |  |  929|   656k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   656k|    static_cast<    \
  |  |  929|   656k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   656k|    {
 3312|   656k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.93k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.93k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.93k|    {
 1430|  1.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.93k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.93k|    {
  437|  1.93k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7984|  47.8k|    {
 7985|  47.8k|        return m_str;
 7986|  47.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  47.8k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  47.8k|    {
 5436|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5388|  47.8k|    {
 5389|  47.8k|        return m_argptrs;
 5390|  47.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|   430k|        : m_desc(desc), m_builtin_values(data)
 5487|   430k|    {
 5488|   430k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  47.8k|{
 8830|  47.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.7k, False: 102]
  |  |  ------------------
  ------------------
 8831|  47.7k|        return unexpected(result.error());
 8832|  47.7k|    }
 8833|    102|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    102|    static_cast<    \
  |  |  929|    102|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    102|    static_cast<    \
  |  |  929|    102|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  47.8k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   430k|    {
 1598|   430k|        return has_value();
 1599|   430k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   861k|    {
  485|   861k|        return m_has_value;
  486|   861k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   428k|    {
 1604|   428k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   428k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   428k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   428k|        return this->get_unexpected().error();
 1606|   428k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   428k|    {
  468|   428k|        return m_unexpected;
  469|   428k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  47.7k|        : base(unexpect, std::move(e.error())),
 1474|  47.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  47.7k|    {
 1476|  47.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  47.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  47.7k|          m_has_value(false)
  446|  47.7k|    {
  447|  47.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  47.8k|    {
 1177|  47.8k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.93k|    {
 1653|  1.93k|        return value();
 1654|  1.93k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.93k|    {
 1627|  1.93k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.93k|        return this->get_value();
 1629|  1.93k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.93k|    {
  451|  1.93k|        return m_value;
  452|  1.93k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5838|    102|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    102|    static_cast<    \
  |  |  929|    102|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    102|    static_cast<    \
  |  |  929|    102|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    102|    {
 5840|    102|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  1.93k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.93k|    static_cast<    \
  |  |  929|  1.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.93k|    {
 5691|  1.93k|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5624|    102|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|    102|    static_cast<    \
  |  |  929|    102|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|    102|    {
 5626|    102|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    102|        : base(std::in_place, std::forward<U>(val)),
 1428|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    102|    {
 1430|    102|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    102|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    102|    {
  437|    102|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5383|  47.8k|    {
 5384|  47.8k|        return m_args;
 5385|  47.8k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7705|   430k|{
 7706|   430k|    return s;
 7707|   430k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7677|   430k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  47.8k|        : m_str(r.str)
 7980|  47.8k|    {
 7981|  47.8k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8616|   215k|{
 8617|   215k|#if !SCN_DISABLE_LOCALE
 8618|   215k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   215k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   215k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   215k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   215k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214k, False: 966]
  |  |  ------------------
  ------------------
 8625|   214k|        return unexpected(result.error());
 8626|   214k|    }
 8627|    966|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    966|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   215k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5405|  47.8k|{
 5406|  47.8k|    detail::check_scan_arg_types<Args...>();
 5407|  47.8k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  47.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5357|  47.8k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  47.8k|    {
 5359|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  47.8k|    {
 5370|  47.8k|        return {detail::make_arg<
 5371|  47.8k|            kind, Context,
 5372|  47.8k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  47.8k|                                 typename Context::char_type>::value>(args)...};
 5374|  47.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|  47.8k|{
 5180|  47.8k|    return make_value<Context>(value).ref_value;
 5181|  47.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5129|  47.8k|{
 5130|  47.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  47.8k|                                  needs_context_tag>) {
 5134|  47.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  47.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4968|  47.8k|    {                                                                        \
 4969|  47.8k|        return val;                                                          \
 4970|  47.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7984|  47.8k|    {
 7985|  47.8k|        return m_str;
 7986|  47.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  47.8k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  47.8k|    {
 5436|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5388|  47.8k|    {
 5389|  47.8k|        return m_argptrs;
 5390|  47.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  47.8k|{
 8830|  47.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.8k, False: 0]
  |  |  ------------------
  ------------------
 8831|  47.8k|        return unexpected(result.error());
 8832|  47.8k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  47.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  47.8k|        : base(unexpect, std::move(e.error())),
 1474|  47.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  47.8k|    {
 1476|  47.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  47.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  47.8k|          m_has_value(false)
  446|  47.8k|    {
  447|  47.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  47.8k|    {
 1177|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5383|  47.8k|    {
 5384|  47.8k|        return m_args;
 5385|  47.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  47.8k|        : m_str(r.str)
 7980|  47.8k|    {
 7981|  47.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5405|  47.8k|{
 5406|  47.8k|    detail::check_scan_arg_types<Args...>();
 5407|  47.8k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  47.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5357|  47.8k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  47.8k|    {
 5359|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  47.8k|    {
 5370|  47.8k|        return {detail::make_arg<
 5371|  47.8k|            kind, Context,
 5372|  47.8k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  47.8k|                                 typename Context::char_type>::value>(args)...};
 5374|  47.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|  47.8k|{
 5180|  47.8k|    return make_value<Context>(value).ref_value;
 5181|  47.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5129|  47.8k|{
 5130|  47.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  47.8k|                                  needs_context_tag>) {
 5134|  47.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  47.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4968|  47.8k|    {                                                                        \
 4969|  47.8k|        return val;                                                          \
 4970|  47.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7984|  47.8k|    {
 7985|  47.8k|        return m_str;
 7986|  47.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  47.8k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  47.8k|    {
 5436|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5388|  47.8k|    {
 5389|  47.8k|        return m_argptrs;
 5390|  47.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  47.8k|{
 8830|  47.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.8k, False: 0]
  |  |  ------------------
  ------------------
 8831|  47.8k|        return unexpected(result.error());
 8832|  47.8k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  47.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  47.8k|        : base(unexpect, std::move(e.error())),
 1474|  47.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  47.8k|    {
 1476|  47.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  47.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  47.8k|          m_has_value(false)
  446|  47.8k|    {
  447|  47.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  47.8k|    {
 1177|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5383|  47.8k|    {
 5384|  47.8k|        return m_args;
 5385|  47.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  47.8k|        : m_str(r.str)
 7980|  47.8k|    {
 7981|  47.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5405|  47.8k|{
 5406|  47.8k|    detail::check_scan_arg_types<Args...>();
 5407|  47.8k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  47.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5357|  47.8k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  47.8k|    {
 5359|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  47.8k|    {
 5370|  47.8k|        return {detail::make_arg<
 5371|  47.8k|            kind, Context,
 5372|  47.8k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  47.8k|                                 typename Context::char_type>::value>(args)...};
 5374|  47.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|  47.8k|{
 5180|  47.8k|    return make_value<Context>(value).ref_value;
 5181|  47.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5129|  47.8k|{
 5130|  47.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  47.8k|                                  needs_context_tag>) {
 5134|  47.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  47.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4968|  47.8k|    {                                                                        \
 4969|  47.8k|        return val;                                                          \
 4970|  47.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7984|  47.8k|    {
 7985|  47.8k|        return m_str;
 7986|  47.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  47.8k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  47.8k|    {
 5436|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5388|  47.8k|    {
 5389|  47.8k|        return m_argptrs;
 5390|  47.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  47.8k|{
 8830|  47.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.8k, False: 0]
  |  |  ------------------
  ------------------
 8831|  47.8k|        return unexpected(result.error());
 8832|  47.8k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  47.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  47.8k|        : base(unexpect, std::move(e.error())),
 1474|  47.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  47.8k|    {
 1476|  47.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  47.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  47.8k|          m_has_value(false)
  446|  47.8k|    {
  447|  47.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  47.8k|    {
 1177|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5383|  47.8k|    {
 5384|  47.8k|        return m_args;
 5385|  47.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  47.8k|        : m_str(r.str)
 7980|  47.8k|    {
 7981|  47.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5405|  47.8k|{
 5406|  47.8k|    detail::check_scan_arg_types<Args...>();
 5407|  47.8k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  47.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5357|  47.8k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  47.8k|    {
 5359|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  47.8k|    {
 5370|  47.8k|        return {detail::make_arg<
 5371|  47.8k|            kind, Context,
 5372|  47.8k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  47.8k|                                 typename Context::char_type>::value>(args)...};
 5374|  47.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5179|  47.8k|{
 5180|  47.8k|    return make_value<Context>(value).ref_value;
 5181|  47.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5129|  47.8k|{
 5130|  47.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  47.8k|                                  needs_context_tag>) {
 5134|  47.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  47.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4968|  47.8k|    {                                                                        \
 4969|  47.8k|        return val;                                                          \
 4970|  47.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7984|  47.8k|    {
 7985|  47.8k|        return m_str;
 7986|  47.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  47.8k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  47.8k|    {
 5436|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5388|  47.8k|    {
 5389|  47.8k|        return m_argptrs;
 5390|  47.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8829|  47.8k|{
 8830|  47.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.8k, False: 0]
  |  |  ------------------
  ------------------
 8831|  47.8k|        return unexpected(result.error());
 8832|  47.8k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  47.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  47.8k|        : base(unexpect, std::move(e.error())),
 1474|  47.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  47.8k|    {
 1476|  47.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  47.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  47.8k|          m_has_value(false)
  446|  47.8k|    {
  447|  47.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  47.8k|    {
 1177|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5383|  47.8k|    {
 5384|  47.8k|        return m_args;
 5385|  47.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  47.8k|        : m_str(r.str)
 7980|  47.8k|    {
 7981|  47.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5405|  47.8k|{
 5406|  47.8k|    detail::check_scan_arg_types<Args...>();
 5407|  47.8k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  47.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5357|  47.8k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  47.8k|    {
 5359|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5369|  47.8k|    {
 5370|  47.8k|        return {detail::make_arg<
 5371|  47.8k|            kind, Context,
 5372|  47.8k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  47.8k|                                 typename Context::char_type>::value>(args)...};
 5374|  47.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5179|  47.8k|{
 5180|  47.8k|    return make_value<Context>(value).ref_value;
 5181|  47.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5129|  47.8k|{
 5130|  47.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  47.8k|                                  needs_context_tag>) {
 5134|  47.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  47.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4968|  47.8k|    {                                                                        \
 4969|  47.8k|        return val;                                                          \
 4970|  47.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7984|  47.8k|    {
 7985|  47.8k|        return m_str;
 7986|  47.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  47.8k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  47.8k|    {
 5436|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5388|  47.8k|    {
 5389|  47.8k|        return m_argptrs;
 5390|  47.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8829|  47.8k|{
 8830|  47.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.8k, False: 0]
  |  |  ------------------
  ------------------
 8831|  47.8k|        return unexpected(result.error());
 8832|  47.8k|    }
 8833|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  47.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISC_OT_EEvE4typeELSA_0ETnPNSG_IXsr3stdE16is_convertible_vISI_SC_EEvE4typeELSA_0EEEONS0_10unexpectedISH_EE:
 1473|  47.8k|        : base(unexpect, std::move(e.error())),
 1474|  47.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  47.8k|    {
 1476|  47.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  444|  47.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  47.8k|          m_has_value(false)
  446|  47.8k|    {
  447|  47.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  47.8k|    {
 1177|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5383|  47.8k|    {
 5384|  47.8k|        return m_args;
 5385|  47.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  47.8k|        : m_str(r.str)
 7980|  47.8k|    {
 7981|  47.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|  47.8k|{
 5406|  47.8k|    detail::check_scan_arg_types<Args...>();
 5407|  47.8k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  47.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|  47.8k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  47.8k|    {
 5359|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  47.8k|    {
 5370|  47.8k|        return {detail::make_arg<
 5371|  47.8k|            kind, Context,
 5372|  47.8k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  47.8k|                                 typename Context::char_type>::value>(args)...};
 5374|  47.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|  47.8k|{
 5180|  47.8k|    return make_value<Context>(value).ref_value;
 5181|  47.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|  47.8k|{
 5130|  47.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  47.8k|                                  needs_context_tag>) {
 5134|  47.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  47.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|  47.8k|    {                                                                        \
 4969|  47.8k|        return val;                                                          \
 4970|  47.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7984|  47.8k|    {
 7985|  47.8k|        return m_str;
 7986|  47.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  47.8k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  47.8k|    {
 5436|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|  47.8k|    {
 5389|  47.8k|        return m_argptrs;
 5390|  47.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8829|  47.8k|{
 8830|  47.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.2k, False: 610]
  |  |  ------------------
  ------------------
 8831|  47.2k|        return unexpected(result.error());
 8832|  47.2k|    }
 8833|    610|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  47.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  47.2k|        : base(unexpect, std::move(e.error())),
 1474|  47.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  47.2k|    {
 1476|  47.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  47.2k|        : m_has_value(false)
  625|  47.2k|    {
  626|  47.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  47.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  47.2k|    {
  689|  47.2k|        scn::detail::construct_at(unexpected_ptr(),
  690|  47.2k|                                  std::forward<Args>(args)...);
  691|  47.2k|        m_has_value = false;
  692|  47.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  94.4k|    {
  718|  94.4k|        return reinterpret_cast<unexpected<E>*>(
  719|  94.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  94.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  94.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  47.8k|    {
 1177|  47.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|    610|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    610|    {
 5840|    610|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    610|        : base(std::in_place, std::forward<U>(val)),
 1428|    610|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    610|    {
 1430|    610|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|    610|        : m_has_value(true)
  615|    610|    {
  616|    610|        construct(std::forward<Args>(args)...);
  617|    610|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    610|    {
  682|    610|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    610|        m_has_value = true;
  684|    610|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    610|{
  392|    610|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    610|        T(std::forward<Args>(args)...);
  394|    610|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|    610|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.22k|    {
  706|  1.22k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.22k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.22k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|  1.22k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|  47.8k|    {
 5384|  47.8k|        return m_args;
 5385|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|  47.8k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  47.8k|        : m_str(r.str)
 7980|  47.8k|    {
 7981|  47.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  47.8k|    {
  631|  47.8k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 610, False: 47.2k]
  ------------------
  632|    610|            destroy_value();
  633|    610|        }
  634|  47.2k|        else {
  635|  47.2k|            destroy_unexpected();
  636|  47.2k|        }
  637|  47.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  47.8k|    {
  675|  47.8k|        return m_has_value;
  676|  47.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    610|    {
  696|    610|        scn::detail::destroy_at(value_ptr());
  697|    610|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    610|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    610|    else {
  404|    610|        p->~T();
  405|    610|    }
  406|    610|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  47.2k|    {
  700|  47.2k|        scn::detail::destroy_at(unexpected_ptr());
  701|  47.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  47.8k|{
 5406|  47.8k|    detail::check_scan_arg_types<Args...>();
 5407|  47.8k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  47.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  47.8k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  47.8k|    {
 5359|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  47.8k|    {
 5370|  47.8k|        return {detail::make_arg<
 5371|  47.8k|            kind, Context,
 5372|  47.8k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  47.8k|                                 typename Context::char_type>::value>(args)...};
 5374|  47.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  47.8k|{
 5180|  47.8k|    return make_value<Context>(value).ref_value;
 5181|  47.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  47.8k|{
 5130|  47.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  47.8k|                                  needs_context_tag>) {
 5134|  47.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  47.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  47.8k|    {                                                                        \
 4969|  47.8k|        return val;                                                          \
 4970|  47.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7984|  47.8k|    {
 7985|  47.8k|        return m_str;
 7986|  47.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  47.8k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  47.8k|    {
 5436|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  47.8k|    {
 5389|  47.8k|        return m_argptrs;
 5390|  47.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8829|  47.8k|{
 8830|  47.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.2k, False: 610]
  |  |  ------------------
  ------------------
 8831|  47.2k|        return unexpected(result.error());
 8832|  47.2k|    }
 8833|    610|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  47.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  47.2k|        : base(unexpect, std::move(e.error())),
 1474|  47.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  47.2k|    {
 1476|  47.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  47.2k|        : m_has_value(false)
  625|  47.2k|    {
  626|  47.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  47.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  47.2k|    {
  689|  47.2k|        scn::detail::construct_at(unexpected_ptr(),
  690|  47.2k|                                  std::forward<Args>(args)...);
  691|  47.2k|        m_has_value = false;
  692|  47.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  94.4k|    {
  718|  94.4k|        return reinterpret_cast<unexpected<E>*>(
  719|  94.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  94.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  94.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  47.8k|    {
 1177|  47.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|    610|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    610|    {
 5840|    610|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    610|        : base(std::in_place, std::forward<U>(val)),
 1428|    610|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    610|    {
 1430|    610|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|    610|        : m_has_value(true)
  615|    610|    {
  616|    610|        construct(std::forward<Args>(args)...);
  617|    610|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    610|    {
  682|    610|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    610|        m_has_value = true;
  684|    610|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    610|{
  392|    610|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    610|        T(std::forward<Args>(args)...);
  394|    610|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|    610|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.22k|    {
  706|  1.22k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.22k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.22k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|  1.22k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  47.8k|    {
 5384|  47.8k|        return m_args;
 5385|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  47.8k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  47.8k|        : m_str(r.str)
 7980|  47.8k|    {
 7981|  47.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  47.8k|    {
  631|  47.8k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 610, False: 47.2k]
  ------------------
  632|    610|            destroy_value();
  633|    610|        }
  634|  47.2k|        else {
  635|  47.2k|            destroy_unexpected();
  636|  47.2k|        }
  637|  47.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  47.8k|    {
  675|  47.8k|        return m_has_value;
  676|  47.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    610|    {
  696|    610|        scn::detail::destroy_at(value_ptr());
  697|    610|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    610|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    610|    else {
  404|    610|        p->~T();
  405|    610|    }
  406|    610|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  47.2k|    {
  700|  47.2k|        scn::detail::destroy_at(unexpected_ptr());
  701|  47.2k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5405|  47.8k|{
 5406|  47.8k|    detail::check_scan_arg_types<Args...>();
 5407|  47.8k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  47.8k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5144|  47.8k|{
 5145|  47.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  47.8k|                  "Scan argument types must be default constructible");
 5147|  47.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  47.8k|                  "Scan argument types must be Destructible");
 5149|  47.8k|    static_assert(
 5150|  47.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  47.8k|        "Scan argument types must not be references");
 5152|  47.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5357|  47.8k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  47.8k|    {
 5359|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  47.8k|    {
 5370|  47.8k|        return {detail::make_arg<
 5371|  47.8k|            kind, Context,
 5372|  47.8k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  47.8k|                                 typename Context::char_type>::value>(args)...};
 5374|  47.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5179|  47.8k|{
 5180|  47.8k|    return make_value<Context>(value).ref_value;
 5181|  47.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5129|  47.8k|{
 5130|  47.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  47.8k|                                  needs_context_tag>) {
 5134|  47.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  47.8k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4968|  47.8k|    {                                                                        \
 4969|  47.8k|        return val;                                                          \
 4970|  47.8k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5098|  47.8k|{
 5099|  47.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  47.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  47.8k|    constexpr bool scannable_char =
 5103|  47.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  47.8k|    static_assert(scannable_char,
 5105|  47.8k|                  "Cannot scan an argument of an unsupported character "
 5106|  47.8k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  47.8k|    constexpr bool scannable_const =
 5109|  47.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  47.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  47.8k|    constexpr bool scannable_disabled =
 5113|  47.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  47.8k|    static_assert(scannable_disabled,
 5115|  47.8k|                  "Cannot scan an argument that has been disabled by "
 5116|  47.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  47.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  47.8k|    static_assert(
 5120|  47.8k|        scannable,
 5121|  47.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  47.8k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  47.8k|    return arg_value{arg};
 5125|  47.8k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4909|  47.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  47.8k|    {
 4911|  47.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7984|  47.8k|    {
 7985|  47.8k|        return m_str;
 7986|  47.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  47.8k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  47.8k|    {
 5436|  47.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5388|  47.8k|    {
 5389|  47.8k|        return m_argptrs;
 5390|  47.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8829|  47.8k|{
 8830|  47.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.2k, False: 610]
  |  |  ------------------
  ------------------
 8831|  47.2k|        return unexpected(result.error());
 8832|  47.2k|    }
 8833|    610|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  47.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  47.2k|        : base(unexpect, std::move(e.error())),
 1474|  47.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  47.2k|    {
 1476|  47.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  47.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  47.2k|          m_has_value(false)
  446|  47.2k|    {
  447|  47.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  47.8k|    {
 1177|  47.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|    610|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    610|    {
 5840|    610|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|    610|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|    610|    static_cast<    \
  |  |  929|    610|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|    610|    {
 5626|    610|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|    610|        : base(std::in_place, std::forward<U>(val)),
 1428|    610|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    610|    {
 1430|    610|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|    610|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    610|    {
  437|    610|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5383|  47.8k|    {
 5384|  47.8k|        return m_args;
 5385|  47.8k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  47.8k|        : m_str(r.str)
 7980|  47.8k|    {
 7981|  47.8k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|  1.17M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|  1.17M|    {
 3564|  1.17M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  1.17M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|  1.17M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  5.79M|    {
 3570|  5.79M|        return m_code == good;
 3571|  5.79M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   189k|    {
 3581|   189k|        return m_code;
 3582|   189k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6190|  7.94k|    {
 6191|  7.94k|        return m_size;
 6192|  7.94k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6231|  4.85k|    {
 6232|  4.85k|        SCN_GCC_COMPAT_PUSH
 6233|  4.85k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6234|  4.85k|        switch (type) {
 6235|  2.12k|            case presentation_type::none:
  ------------------
  |  Branch (6235:13): [True: 2.12k, False: 2.72k]
  ------------------
 6236|  2.12k|                return 10;
 6237|     74|            case presentation_type::int_generic:
  ------------------
  |  Branch (6237:13): [True: 74, False: 4.77k]
  ------------------
 6238|     74|                return 0;
 6239|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6239:13): [True: 0, False: 4.85k]
  ------------------
 6240|      0|                return arbitrary_base;
 6241|       |
 6242|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6242:13): [True: 38, False: 4.81k]
  ------------------
 6243|     38|                return 2;
 6244|    134|            case presentation_type::int_octal:
  ------------------
  |  Branch (6244:13): [True: 134, False: 4.71k]
  ------------------
 6245|    134|                return 8;
 6246|     40|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6246:13): [True: 40, False: 4.81k]
  ------------------
 6247|     84|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6247:13): [True: 44, False: 4.80k]
  ------------------
 6248|     84|                return 10;
 6249|  2.39k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6249:13): [True: 2.39k, False: 2.45k]
  ------------------
 6250|  2.39k|                return 16;
 6251|       |
 6252|      0|            default:
  ------------------
  |  Branch (6252:13): [True: 0, False: 4.85k]
  ------------------
 6253|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6254|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6255|  4.85k|        }
 6256|  4.85k|        SCN_GCC_COMPAT_POP
 6257|  4.85k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|   200k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6272|  20.8k|    {
 6273|  20.8k|        m_specs.align = align;
 6274|  20.8k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6281|    656|    {
 6282|    656|        if constexpr (!SCN_DISABLE_LOCALE) {
 6283|    656|            m_specs.localized = true;
 6284|       |        }
 6285|       |        else {
 6286|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6287|       |        }
 6288|    656|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6291|  30.2k|    {
 6292|  30.2k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6292:13): [True: 0, False: 30.2k]
  |  Branch (6292:39): [True: 0, False: 0]
  ------------------
 6293|       |            // clang-format off
 6294|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|      0|        }
 6297|       |
 6298|  30.2k|        m_specs.width = width;
 6299|  30.2k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6301|  16.3k|    {
 6302|  16.3k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6302:13): [True: 68, False: 16.2k]
  ------------------
 6303|       |            // clang-format off
 6304|     68|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6305|       |            // clang-format on
 6306|     68|        }
 6307|       |
 6308|  16.2k|        m_specs.precision = prec;
 6309|  16.2k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6312|   343k|    {
 6313|   343k|        m_specs.type = type;
 6314|   343k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6317|  3.14M|    {
 6318|  3.14M|        const auto cp_value = static_cast<unsigned>(cp);
 6319|  3.14M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  3.14M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.67M, False: 468k]
  |  |  ------------------
  ------------------
 6320|  2.67M|            m_specs.charset_literals[cp_value / 8] |=
 6321|  2.67M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6322|  2.67M|        }
 6323|   468k|        else {
 6324|   468k|            m_specs.charset_has_nonascii = true;
 6325|   468k|        }
 6326|  3.14M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6329|  17.4k|    {
 6330|  17.4k|        const auto begin_value = static_cast<unsigned>(begin);
 6331|  17.4k|        const auto end_value = static_cast<unsigned>(end);
 6332|  17.4k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  17.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6333|       |
 6334|  17.4k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  17.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.97k, False: 7.50k]
  |  |  ------------------
  ------------------
 6335|       |            // No need to bit-twiddle with a mask, because with the
 6336|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6337|  9.97k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  9.97k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6338|   616k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6338:40): [True: 607k, False: 9.97k]
  ------------------
 6339|   607k|                m_specs.charset_literals[v / 8] |=
 6340|   607k|                    static_cast<unsigned char>(1ul << (v % 8));
 6341|   607k|            }
 6342|  9.97k|        }
 6343|  7.50k|        else {
 6344|  7.50k|            m_specs.charset_has_nonascii = true;
 6345|  7.50k|        }
 6346|  17.4k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6349|  3.61k|    {
 6350|  3.61k|        m_specs.charset_is_inverted = true;
 6351|  3.61k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6368|   159k|    {
 6369|   159k|        m_specs.regexp_flags = flags;
 6370|   159k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6374|  12.1k|    {
 6375|  12.1k|        SCN_UNLIKELY_ATTR
 6376|  12.1k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6377|  12.1k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6385|  3.37M|    {
 6386|  3.37M|        return static_cast<bool>(m_error);
 6387|  3.37M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   189k|{
 3605|   189k|    return a.code() == b;
 3606|   189k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   189k|{
 3609|   189k|    return !(a == b);
 3610|   189k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3903|   303k|{
 3904|   303k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3905|       |
 3906|   303k|    const auto is_trailing_code_unit = [](char ch) {
 3907|   303k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|   303k|    };
 3909|       |
 3910|   303k|    if (input.size() == 1) {
  ------------------
  |  Branch (3910:9): [True: 263k, False: 40.5k]
  ------------------
 3911|   263k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   263k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   263k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3912|   263k|        return static_cast<char32_t>(input[0]);
 3913|   263k|    }
 3914|       |
 3915|  40.5k|    if (input.size() == 2) {
  ------------------
  |  Branch (3915:9): [True: 37.5k, False: 2.93k]
  ------------------
 3916|  37.5k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  37.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3917|  37.5k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  37.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3918|       |
 3919|  37.5k|        char32_t cp{};
 3920|  37.5k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3921|  37.5k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3922|  37.5k|        return cp;
 3923|  37.5k|    }
 3924|       |
 3925|  2.93k|    if (input.size() == 3) {
  ------------------
  |  Branch (3925:9): [True: 2.70k, False: 226]
  ------------------
 3926|  2.70k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|  2.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3927|  2.70k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  2.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3928|  2.70k|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|  2.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3929|       |
 3930|  2.70k|        char32_t cp{};
 3931|  2.70k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3932|  2.70k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3933|  2.70k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3934|  2.70k|        return cp;
 3935|  2.70k|    }
 3936|       |
 3937|    226|    if (input.size() == 4) {
  ------------------
  |  Branch (3937:9): [True: 226, False: 0]
  ------------------
 3938|    226|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    226|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    226|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3939|    226|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    226|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    226|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3940|    226|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    226|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    226|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3941|    226|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    226|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    226|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3942|    226|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    226|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    226|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|       |
 3944|    226|        char32_t cp{};
 3945|    226|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3946|    226|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3947|    226|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3948|    226|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3949|    226|        return cp;
 3950|    226|    }
 3951|       |
 3952|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3953|       |    // gcc 7 thinks we'll get here, even when we won't
 3954|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3955|      0|#endif
 3956|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3957|      0|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|   492k|{
 4043|       |    // Pattern_White_Space property
 4044|   492k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 375k, False: 116k]
  |  Branch (4044:27): [True: 20.5k, False: 355k]
  ------------------
 4045|   492k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 7.05k, False: 465k]
  ------------------
 4046|   492k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 14.2k, False: 450k]
  ------------------
 4047|   492k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 3.10k, False: 447k]
  ------------------
 4048|   492k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 5.95k, False: 441k]
  ------------------
 4049|   492k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 1.40k, False: 440k]
  ------------------
 4050|   492k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 172, False: 440k]
  ------------------
 4051|   492k|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6120|   237k|{
 6121|   237k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6122|   237k|                                    static_cast<unsigned>(b));
 6123|   237k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6125|  32.0k|{
 6126|  32.0k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6127|  32.0k|                                    static_cast<unsigned>(b));
 6128|  32.0k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6140|  32.0k|{
 6141|  32.0k|    return a = a | b;
 6142|  32.0k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7072|  1.59k|{
 7073|  1.59k|    switch (type) {
 7074|    118|        case arg_type::none_type:
  ------------------
  |  Branch (7074:9): [True: 118, False: 1.47k]
  ------------------
 7075|    118|            return arg_type_category::none;
 7076|       |
 7077|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.59k]
  ------------------
 7078|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.59k]
  ------------------
 7079|    164|        case arg_type::int_type:
  ------------------
  |  Branch (7079:9): [True: 164, False: 1.43k]
  ------------------
 7080|    164|        case arg_type::long_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 1.59k]
  ------------------
 7081|    164|        case arg_type::llong_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 1.59k]
  ------------------
 7082|    164|            return arg_type_category::integer;
 7083|       |
 7084|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7084:9): [True: 0, False: 1.59k]
  ------------------
 7085|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 1.59k]
  ------------------
 7086|    164|        case arg_type::uint_type:
  ------------------
  |  Branch (7086:9): [True: 164, False: 1.43k]
  ------------------
 7087|    164|        case arg_type::ulong_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.59k]
  ------------------
 7088|    164|        case arg_type::ullong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 1.59k]
  ------------------
 7089|    164|            return arg_type_category::unsigned_integer;
 7090|       |
 7091|    164|        case arg_type::pointer_type:
  ------------------
  |  Branch (7091:9): [True: 164, False: 1.43k]
  ------------------
 7092|    164|            return arg_type_category::pointer;
 7093|    164|        case arg_type::bool_type:
  ------------------
  |  Branch (7093:9): [True: 164, False: 1.43k]
  ------------------
 7094|    164|            return arg_type_category::boolean;
 7095|     98|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7095:9): [True: 98, False: 1.49k]
  ------------------
 7096|    164|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7096:9): [True: 66, False: 1.52k]
  ------------------
 7097|    164|        case arg_type::code_point_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 1.59k]
  ------------------
 7098|    164|            return arg_type_category::character;
 7099|       |
 7100|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7100:9): [True: 0, False: 1.59k]
  ------------------
 7101|    164|        case arg_type::double_type:
  ------------------
  |  Branch (7101:9): [True: 164, False: 1.43k]
  ------------------
 7102|    164|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7102:9): [True: 0, False: 1.59k]
  ------------------
 7103|    164|            return arg_type_category::floating;
 7104|       |
 7105|     98|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7105:9): [True: 98, False: 1.49k]
  ------------------
 7106|    262|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7106:9): [True: 164, False: 1.43k]
  ------------------
 7107|    328|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7107:9): [True: 66, False: 1.52k]
  ------------------
 7108|    492|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7108:9): [True: 164, False: 1.43k]
  ------------------
 7109|    492|            return arg_type_category::string;
 7110|       |
 7111|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7111:9): [True: 0, False: 1.59k]
  ------------------
 7112|      0|            return arg_type_category::custom;
 7113|       |
 7114|      0|            SCN_CLANG_PUSH
 7115|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7116|      0|        default:
  ------------------
  |  Branch (7116:9): [True: 0, False: 1.59k]
  ------------------
 7117|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7118|  1.59k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7119|  1.59k|            SCN_CLANG_POP
 7120|  1.59k|    }
 7121|       |
 7122|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7123|  1.59k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  1.56k|{
 3650|  1.56k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.56k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7158|  43.1k|{
 7159|  43.1k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  43.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40.6k, False: 2.50k]
  |  |  ------------------
  ------------------
 7160|  40.6k|        return handler.on_error("Invalid type specifier for integer type");
 7161|  40.6k|    }
 7162|  2.50k|    if (specs.localized) {
  ------------------
  |  Branch (7162:9): [True: 212, False: 2.28k]
  ------------------
 7163|    212|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    212|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 204]
  |  |  ------------------
  ------------------
 7164|       |            // clang-format off
 7165|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7166|       |            // clang-format on
 7167|      8|            return;
 7168|      8|        }
 7169|    204|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 204]
  |  |  ------------------
  ------------------
 7170|       |            // clang-format off
 7171|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7172|       |            // clang-format on
 7173|      0|        }
 7174|    204|    }
 7175|  2.50k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  3.39k|{
 3650|  3.39k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  3.39k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7202|  21.5k|{
 7203|  21.5k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7203:9): [True: 20.4k, False: 1.08k]
  ------------------
 7204|  21.5k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7204:10): [True: 164, False: 20.3k]
  ------------------
 7205|  20.4k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7205:10): [True: 20.2k, False: 102]
  ------------------
 7206|  20.3k|        SCN_UNLIKELY_ATTR
 7207|  20.3k|        return handler.on_error("Invalid type specifier for float type");
 7208|  20.3k|    }
 7209|  21.5k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|   102k|    {
  485|   102k|        return m_has_value;
  486|   102k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  51.4k|    {
 1598|  51.4k|        return has_value();
 1599|  51.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  51.4k|    {
  451|  51.4k|        return m_value;
  452|  51.4k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  51.4k|    {
 1627|  51.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  51.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  51.4k|        return this->get_value();
 1629|  51.4k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  51.4k|    {
 1663|  51.4k|        return std::move(value());
 1664|  51.4k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3649|  28.5k|{
 3650|  28.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  28.5k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3649|  14.8k|{
 3650|  14.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  14.8k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3649|    642|{
 3650|    642|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    642|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    642|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3649|  1.76k|{
 3650|  1.76k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.76k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  1.69k|{
 3650|  1.69k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.69k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.69k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7214|  64.2k|{
 7215|  64.2k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7215:9): [True: 3.14k, False: 61.0k]
  ------------------
 7216|  64.2k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7216:9): [True: 858, False: 60.2k]
  ------------------
 7217|  64.2k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7217:9): [True: 6.25k, False: 53.9k]
  ------------------
 7218|  64.2k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7218:9): [True: 46.6k, False: 7.31k]
  ------------------
 7219|  64.2k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7219:9): [True: 6.54k, False: 768]
  ------------------
 7220|  63.4k|        return;
 7221|  63.4k|    }
 7222|    768|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7222:9): [True: 156, False: 612]
  ------------------
 7223|    156|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 144]
  |  |  ------------------
  ------------------
 7224|       |            // clang-format off
 7225|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7226|       |            // clang-format on
 7227|     12|        }
 7228|    144|        return;
 7229|    156|    }
 7230|    612|    SCN_UNLIKELY_ATTR
 7231|    612|    handler.on_error("Invalid type specifier for string");
 7232|    612|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3649|  5.10k|{
 3650|  5.10k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  5.10k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3649|     74|{
 3650|     74|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     74|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7248|  21.5k|{
 7249|  21.5k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7249:9): [True: 20.4k, False: 1.08k]
  ------------------
 7250|  21.5k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7250:9): [True: 20.1k, False: 322]
  ------------------
 7251|  21.5k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7251:9): [True: 20.1k, False: 30]
  ------------------
 7252|  21.5k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7252:9): [True: 20.0k, False: 24]
  ------------------
 7253|  21.5k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7253:9): [True: 20.0k, False: 18]
  ------------------
 7254|  21.5k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7254:9): [True: 20.0k, False: 16]
  ------------------
 7255|  21.5k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7255:9): [True: 19.9k, False: 60]
  ------------------
 7256|  21.5k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7256:9): [True: 19.9k, False: 16]
  ------------------
 7257|  19.9k|        SCN_UNLIKELY_ATTR
 7258|  19.9k|        return handler.on_error("Invalid type specifier for boolean");
 7259|  19.9k|    }
 7260|  21.5k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7180|  21.4k|{
 7181|  21.4k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7181:9): [True: 20.2k, False: 1.14k]
  ------------------
 7182|  21.4k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7182:9): [True: 0, False: 1.14k]
  ------------------
 7183|  20.2k|        SCN_UNLIKELY_ATTR
 7184|  20.2k|        return handler.on_error("Invalid type specifier for character type");
 7185|  20.2k|    }
 7186|  21.4k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7237|  21.4k|{
 7238|  21.4k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7238:9): [True: 20.3k, False: 1.04k]
  ------------------
 7239|  21.4k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7239:9): [True: 20.3k, False: 14]
  ------------------
 7240|  20.3k|        SCN_UNLIKELY_ATTR
 7241|  20.3k|        return handler.on_error("Invalid type specifier for pointer");
 7242|  20.3k|    }
 7243|  21.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3649|     88|{
 3650|     88|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     88|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|     88|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   208k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   208k|    else {
 3716|   208k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   208k|    }
 3718|   208k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   251k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   251k|    else {
 3716|   251k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   251k|    }
 3718|   251k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  2.90M|    {
 3326|  2.90M|        return m_iterator;
 3327|  2.90M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  3.06M|    {
 3330|  3.06M|        return m_sentinel;
 3331|  3.06M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   928k|    {
 3326|   928k|        return m_iterator;
 3327|   928k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   707k|    {
 3330|   707k|        return m_sentinel;
 3331|   707k|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8000|   331k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    174|{
 1211|    174|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    174|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.21k|    {
  361|  2.21k|        return m_unexpected;
  362|  2.21k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3649|  5.77k|{
 3650|  5.77k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  5.77k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|  65.4k|        : m_unexpected(std::forward<Err>(e))
  346|  65.4k|    {
  347|  65.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  65.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  65.4k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   244k|        : base(unexpect, std::move(e.error())),
 1474|   244k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   244k|    {
 1476|   244k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   245k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   245k|          m_has_value(false)
  446|   245k|    {
  447|   245k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   289k|    {
 1177|   289k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  40.4k|        : base(std::in_place, std::forward<U>(val)),
 1428|  40.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  40.4k|    {
 1430|  40.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  40.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  40.4k|    {
  437|  40.4k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   290k|    {
 1598|   290k|        return has_value();
 1599|   290k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   578k|    {
  485|   578k|        return m_has_value;
  486|   578k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   244k|    {
 1604|   244k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   244k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   244k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   244k|        return this->get_unexpected().error();
 1606|   244k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   244k|    {
  468|   244k|        return m_unexpected;
  469|   244k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  28.9k|    {
 1663|  28.9k|        return std::move(value());
 1664|  28.9k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  42.9k|    {
 1627|  42.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  42.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  42.9k|        return this->get_value();
 1629|  42.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  42.9k|    {
  451|  42.9k|        return m_value;
  452|  42.9k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  97.4k|        : base(unexpect, std::move(e.error())),
 1474|  97.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  97.4k|    {
 1476|  97.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  98.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  98.4k|          m_has_value(false)
  446|  98.4k|    {
  447|  98.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   129k|    {
 1177|   129k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  30.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  30.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  30.5k|    {
 1430|  30.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  30.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  30.5k|    {
  437|  30.5k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   130k|    {
 1598|   130k|        return has_value();
 1599|   130k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   257k|    {
  485|   257k|        return m_has_value;
  486|   257k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  97.4k|    {
 1604|  97.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  97.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  97.4k|        return this->get_unexpected().error();
 1606|  97.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  97.4k|    {
  468|  97.4k|        return m_unexpected;
  469|  97.4k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  24.9k|    {
 1663|  24.9k|        return std::move(value());
 1664|  24.9k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  29.9k|    {
 1627|  29.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  29.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  29.9k|        return this->get_value();
 1629|  29.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  29.9k|    {
  451|  29.9k|        return m_value;
  452|  29.9k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  8.87k|    {
 1837|  8.87k|        return detail::transform_error_impl(std::move(*this),
 1838|  8.87k|                                            std::forward<F>(f));
 1839|  8.87k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  8.87k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  8.87k|    else {
 1333|  8.87k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  8.87k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.87k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.87k, False: 0]
  |  |  ------------------
  ------------------
 1335|  8.87k|                   ? result(*std::forward<Exp>(exp))
 1336|  8.87k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  8.87k|    }
 1340|  8.87k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  80.2k|    {
  485|  80.2k|        return m_has_value;
  486|  80.2k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  10.9k|    {
 1663|  10.9k|        return std::move(value());
 1664|  10.9k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  36.9k|    {
 1627|  36.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  36.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  36.9k|        return this->get_value();
 1629|  36.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  36.9k|    {
  451|  36.9k|        return m_value;
  452|  36.9k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|    978|        : base(unexpect, std::forward<Args>(args)...),
 1484|    978|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    978|    {
 1486|    978|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|   952k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6196|  6.13k|    {
 6197|  6.13k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  6.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6198|  6.13k|        CharT r{};
 6199|  6.13k|        std::memcpy(&r, m_data, m_size);
 6200|  6.13k|        return r;
 6201|  6.13k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|  1.14k|        : m_unexpected(std::forward<Err>(e))
  346|  1.14k|    {
  347|  1.14k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.14k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.14k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  1.31k|        : m_unexpected(std::forward<Args>(args)...)
  355|  1.31k|    {
  356|  1.31k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.31k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.31k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6205|    872|    {
 6206|    872|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6207|    872|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|    174|        : m_unexpected(std::forward<Err>(e))
  346|    174|    {
  347|    174|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    174|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    174|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|      8|        : m_unexpected(std::forward<Err>(e))
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  20.6k|    {
  361|  20.6k|        return m_unexpected;
  362|  20.6k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  3.89k|        : m_unexpected(std::forward<Args>(args)...)
  355|  3.89k|    {
  356|  3.89k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.89k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.89k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  31.9k|        : m_unexpected(std::forward<Err>(e))
  346|  31.9k|    {
  347|  31.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  31.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  31.9k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  31.9k|    {
  361|  31.9k|        return m_unexpected;
  362|  31.9k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  31.9k|        : m_unexpected(std::forward<Args>(args)...)
  355|  31.9k|    {
  356|  31.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  31.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  31.9k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    722|{
 1211|    722|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    722|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  3.16k|        : m_unexpected(std::forward<Err>(e))
  346|  3.16k|    {
  347|  3.16k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.16k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  1.44k|{
 1211|  1.44k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  1.44k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  88.7k|{
  326|  88.7k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  88.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  88.7k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  84.8k|    {
 3342|  84.8k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  84.8k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|    440|        : base(unexpect, std::move(e.error())),
 1474|    440|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    440|    {
 1476|    440|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|    440|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    440|          m_has_value(false)
  446|    440|    {
  447|    440|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  43.1k|    {
 1177|  43.1k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  42.7k|        : base(std::in_place, std::forward<U>(val)),
 1428|  42.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  42.7k|    {
 1430|  42.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  42.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  42.7k|    {
  437|  42.7k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  32.1k|    {
 1598|  32.1k|        return has_value();
 1599|  32.1k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  26.0k|    {
 1653|  26.0k|        return value();
 1654|  26.0k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1427|  6.96k|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.96k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.96k|    {
 1430|  6.96k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  6.96k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.96k|    {
  437|  6.96k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.31k|    {
 1177|  7.31k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    348|        : base(unexpect, std::move(e.error())),
 1474|    348|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    348|    {
 1476|    348|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    348|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    348|          m_has_value(false)
  446|    348|    {
  447|    348|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  4.50k|    {
 1598|  4.50k|        return has_value();
 1599|  4.50k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  12.9k|    {
  485|  12.9k|        return m_has_value;
  486|  12.9k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|  2.79k|    {
 1653|  2.79k|        return value();
 1654|  2.79k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  5.27k|    {
 1627|  5.27k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.27k|        return this->get_value();
 1629|  5.27k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  5.27k|    {
  451|  5.27k|        return m_value;
  452|  5.27k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    174|        : base(unexpect, std::move(e.error())),
 1474|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    174|    {
 1476|    174|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    174|          m_has_value(false)
  446|    174|    {
  447|    174|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.79k|    {
 1177|  5.79k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  5.61k|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.61k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.61k|    {
 1430|  5.61k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  435|  5.61k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.61k|    {
  437|  5.61k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    830|    {
 1837|    830|        return detail::transform_error_impl(std::move(*this),
 1838|    830|                                            std::forward<F>(f));
 1839|    830|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    830|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    830|    else {
 1333|    830|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    830|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    830|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 830, False: 0]
  |  |  ------------------
  ------------------
 1335|    830|                   ? result(*std::forward<Exp>(exp))
 1336|    830|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    830|    }
 1340|    830|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.48k|    {
 1663|  2.48k|        return std::move(value());
 1664|  2.48k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1427|  2.37k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.37k|    {
 1430|  2.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  2.37k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.37k|    {
  437|  2.37k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.6k|    {
 1177|  11.6k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    320|    {
 1614|    320|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    320|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    320|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    320|        return std::move(this->get_unexpected().error());
 1616|    320|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    320|    {
  468|    320|        return m_unexpected;
  469|    320|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.48k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.48k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.48k|    {
 1486|  1.48k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  8.51k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.51k|          m_has_value(false)
  446|  8.51k|    {
  447|  8.51k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.85k|    {
 2724|  1.85k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.85k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.85k|    {
 2705|  1.85k|        return decay_copy(t.begin());
 2706|  1.85k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  4.00k|{
 1949|  4.00k|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.00k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3325|  1.85k|    {
 3326|  1.85k|        return m_iterator;
 3327|  1.85k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.85k|    {
 2781|  1.85k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.85k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.85k|    {
 2763|  1.85k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.85k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3329|  1.85k|    {
 3330|  1.85k|        return m_sentinel;
 3331|  1.85k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3310|  1.85k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.85k|    static_cast<    \
  |  |  929|  1.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.85k|    static_cast<    \
  |  |  929|  1.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.85k|    {
 3312|  1.85k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  5.79k|    {
 1598|  5.79k|        return has_value();
 1599|  5.79k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  11.5k|    {
  485|  11.5k|        return m_has_value;
  486|  11.5k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  5.61k|    {
 1663|  5.61k|        return std::move(value());
 1664|  5.61k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  5.61k|    {
 1627|  5.61k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.61k|        return this->get_value();
 1629|  5.61k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  5.61k|    {
  451|  5.61k|        return m_value;
  452|  5.61k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  52.2k|    {
 1177|  52.2k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  52.2k|        : base(std::in_place, std::forward<U>(val)),
 1428|  52.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  52.2k|    {
 1430|  52.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  52.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  52.2k|    {
  437|  52.2k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  52.2k|    {
 1598|  52.2k|        return has_value();
 1599|  52.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   104k|    {
  485|   104k|        return m_has_value;
  486|   104k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  52.2k|    {
 1663|  52.2k|        return std::move(value());
 1664|  52.2k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  52.2k|    {
 1627|  52.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  52.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  52.2k|        return this->get_value();
 1629|  52.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  52.2k|    {
  451|  52.2k|        return m_value;
  452|  52.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  7.03k|        : base(unexpect, std::move(e.error())),
 1474|  7.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  7.03k|    {
 1476|  7.03k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    618|        : base(unexpect, std::move(e.error())),
 1474|    618|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    618|    {
 1476|    618|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    938|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    938|          m_has_value(false)
  446|    938|    {
  447|    938|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.31k|    {
 1177|  7.31k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  4.71k|        : base(unexpect, std::move(e.error())),
 1474|  4.71k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.71k|    {
 1476|  4.71k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  4.71k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.71k|          m_has_value(false)
  446|  4.71k|    {
  447|  4.71k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  6.72k|    {
 1598|  6.72k|        return has_value();
 1599|  6.72k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  13.1k|    {
  485|  13.1k|        return m_has_value;
  486|  13.1k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  2.41k|    {
 1604|  2.41k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.41k|        return this->get_unexpected().error();
 1606|  2.41k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  3.30k|    {
  468|  3.30k|        return m_unexpected;
  469|  3.30k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1427|  1.20k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.20k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.20k|    {
 1430|  1.20k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|  1.20k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.20k|    {
  437|  1.20k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.20k|    {
 1177|  1.20k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.65k|    {
 1627|  1.65k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.65k|        return this->get_value();
 1629|  1.65k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.65k|    {
  451|  1.65k|        return m_value;
  452|  1.65k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    906|    {
 1598|    906|        return has_value();
 1599|    906|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  2.40k|    {
  485|  2.40k|        return m_has_value;
  486|  2.40k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    906|    {
 1177|    906|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|  1.20k|    {
 1663|  1.20k|        return std::move(value());
 1664|  1.20k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  1.20k|    {
 1627|  1.20k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.20k|        return this->get_value();
 1629|  1.20k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.20k|    {
  451|  1.20k|        return m_value;
  452|  1.20k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|   119k|    {
 3330|   119k|        return m_sentinel;
 3331|   119k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.97k|    {
 1837|  1.97k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.97k|                                            std::forward<F>(f));
 1839|  1.97k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|  1.97k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.97k|    else {
 1333|  1.97k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.97k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.97k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.65k, False: 320]
  |  |  ------------------
  ------------------
 1335|  1.97k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.97k|                   : result(unexpect,
 1337|    320|                            trivial_invoke(std::forward<F>(f),
 1338|    320|                                           std::forward<Exp>(exp).error()));
 1339|  1.97k|    }
 1340|  1.97k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1427|  1.65k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.65k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.65k|    {
 1430|  1.65k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  1.65k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.65k|    {
  437|  1.65k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    320|        : base(unexpect, std::forward<Args>(args)...),
 1484|    320|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    320|    {
 1486|    320|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.65k|    {
 1663|  1.65k|        return std::move(value());
 1664|  1.65k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|   171k|    {
 3326|   171k|        return m_iterator;
 3327|   171k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1427|    906|        : base(std::in_place, std::forward<U>(val)),
 1428|    906|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    906|    {
 1430|    906|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    906|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    906|    {
  437|    906|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    906|    {
 1837|    906|        return detail::transform_error_impl(std::move(*this),
 1838|    906|                                            std::forward<F>(f));
 1839|    906|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1322|    906|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    906|    else {
 1333|    906|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    906|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    906|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 906, False: 0]
  |  |  ------------------
  ------------------
 1335|    906|                   ? result(*std::forward<Exp>(exp))
 1336|    906|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    906|    }
 1340|    906|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.81k|    {
  485|  1.81k|        return m_has_value;
  486|  1.81k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    906|    {
 1663|    906|        return std::move(value());
 1664|    906|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    906|    {
 1627|    906|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    906|        return this->get_value();
 1629|    906|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    906|    {
  451|    906|        return m_value;
  452|    906|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1427|    906|        : base(std::in_place, std::forward<U>(val)),
 1428|    906|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    906|    {
 1430|    906|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    906|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    906|    {
  437|    906|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    906|    {
 1177|    906|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    906|    {
 1598|    906|        return has_value();
 1599|    906|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.81k|    {
  485|  1.81k|        return m_has_value;
  486|  1.81k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    906|    {
 1663|    906|        return std::move(value());
 1664|    906|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    906|    {
 1627|    906|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    906|        return this->get_value();
 1629|    906|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    906|    {
  451|    906|        return m_value;
  452|    906|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    886|    {
 1837|    886|        return detail::transform_error_impl(std::move(*this),
 1838|    886|                                            std::forward<F>(f));
 1839|    886|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    886|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    886|    else {
 1333|    886|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    886|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    886|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 886]
  |  |  ------------------
  ------------------
 1335|    886|                   ? result(*std::forward<Exp>(exp))
 1336|    886|                   : result(unexpect,
 1337|    886|                            trivial_invoke(std::forward<F>(f),
 1338|    886|                                           std::forward<Exp>(exp).error()));
 1339|    886|    }
 1340|    886|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|    886|    {
 1614|    886|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    886|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    886|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    886|        return std::move(this->get_unexpected().error());
 1616|    886|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3642|  1.48k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.48k|    static_cast<    \
  |  |  929|  1.48k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.48k|    {
 3644|  1.48k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3310|  68.2k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  68.2k|    static_cast<    \
  |  |  929|  68.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  68.2k|    static_cast<    \
  |  |  929|  68.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  68.2k|    {
 3312|  68.2k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|     20|        : base(unexpect, std::move(e.error())),
 1474|     20|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     20|    {
 1476|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  624|     20|        : m_has_value(false)
  625|     20|    {
  626|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     20|    {
  689|     20|        scn::detail::construct_at(unexpected_ptr(),
  690|     20|                                  std::forward<Args>(args)...);
  691|     20|        m_has_value = false;
  692|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     60|    {
  718|     60|        return reinterpret_cast<unexpected<E>*>(
  719|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     60|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     20|    {
 1177|     20|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     20|    {
 1598|     20|        return has_value();
 1599|     20|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     60|    {
  675|     60|        return m_has_value;
  676|     60|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     20|    {
 1604|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     20|        return this->get_unexpected().error();
 1606|     20|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     20|    {
  658|     20|        return *unexpected_ptr();
  659|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     20|    {
  631|     20|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 20]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     20|        else {
  635|     20|            destroy_unexpected();
  636|     20|        }
  637|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     20|    {
  700|     20|        scn::detail::destroy_at(unexpected_ptr());
  701|     20|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  11.9k|    {
 1598|  11.9k|        return has_value();
 1599|  11.9k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  23.3k|    {
  485|  23.3k|        return m_has_value;
  486|  23.3k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  8.21k|    {
 1604|  8.21k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  8.21k|        return this->get_unexpected().error();
 1606|  8.21k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  8.21k|    {
  468|  8.21k|        return m_unexpected;
  469|  8.21k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.37k|    {
 1663|  2.37k|        return std::move(value());
 1664|  2.37k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  3.14k|    {
 1627|  3.14k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.14k|        return this->get_value();
 1629|  3.14k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.14k|    {
  451|  3.14k|        return m_value;
  452|  3.14k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.06k|        : base(unexpect, std::move(e.error())),
 1474|  1.06k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.06k|    {
 1476|  1.06k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.16k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.16k|          m_has_value(false)
  446|  1.16k|    {
  447|  1.16k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.1k|    {
 1177|  15.1k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  11.9k|        : base(unexpect, std::move(e.error())),
 1474|  11.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.9k|    {
 1476|  11.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  11.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.9k|          m_has_value(false)
  446|  11.9k|    {
  447|  11.9k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  16.1k|    {
 1598|  16.1k|        return has_value();
 1599|  16.1k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  25.0k|    {
  485|  25.0k|        return m_has_value;
  486|  25.0k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  5.88k|    {
 1604|  5.88k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.88k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.88k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.88k|        return this->get_unexpected().error();
 1606|  5.88k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  5.88k|    {
  468|  5.88k|        return m_unexpected;
  469|  5.88k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  3.85k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.85k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.85k|    {
 1430|  3.85k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  3.85k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.85k|    {
  437|  3.85k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.85k|    {
 1177|  3.85k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.03k|    {
 1627|  2.03k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.03k|        return this->get_value();
 1629|  2.03k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.03k|    {
  451|  2.03k|        return m_value;
  452|  2.03k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.89k|    {
 1598|  2.89k|        return has_value();
 1599|  2.89k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.70k|    {
  485|  7.70k|        return m_has_value;
  486|  7.70k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.89k|    {
 1177|  2.89k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  3.85k|    {
 1663|  3.85k|        return std::move(value());
 1664|  3.85k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  3.85k|    {
 1627|  3.85k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.85k|        return this->get_value();
 1629|  3.85k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.85k|    {
  451|  3.85k|        return m_value;
  452|  3.85k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  74.1k|    {
 3221|  74.1k|        return detail::to_address(ranges::begin(derived()));
 3222|  74.1k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  74.2k|    {
 2724|  74.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  74.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  74.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  74.2k|    {
 2705|  74.2k|        return decay_copy(t.begin());
 2706|  74.2k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  74.1k|    {
 3180|  74.1k|        return static_cast<D&>(*this);
 3181|  74.1k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  2.03k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.03k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.03k|    {
 1430|  2.03k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.03k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.03k|    {
  437|  2.03k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|  2.89k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.89k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.89k|    {
 1430|  2.89k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.89k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.89k|    {
  437|  2.89k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.89k|    {
 1837|  2.89k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.89k|                                            std::forward<F>(f));
 1839|  2.89k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|  2.89k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.89k|    else {
 1333|  2.89k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.89k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.89k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.89k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.89k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.89k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.89k|    }
 1340|  2.89k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.79k|    {
  485|  5.79k|        return m_has_value;
  486|  5.79k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.89k|    {
 1663|  2.89k|        return std::move(value());
 1664|  2.89k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.89k|    {
 1627|  2.89k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.89k|        return this->get_value();
 1629|  2.89k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.89k|    {
  451|  2.89k|        return m_value;
  452|  2.89k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  2.89k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.89k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.89k|    {
 1430|  2.89k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  2.89k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.89k|    {
  437|  2.89k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.89k|    {
 1177|  2.89k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.89k|    {
 1598|  2.89k|        return has_value();
 1599|  2.89k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.79k|    {
  485|  5.79k|        return m_has_value;
  486|  5.79k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.89k|    {
 1663|  2.89k|        return std::move(value());
 1664|  2.89k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.89k|    {
 1627|  2.89k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.89k|        return this->get_value();
 1629|  2.89k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.89k|    {
  451|  2.89k|        return m_value;
  452|  2.89k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1473|     92|        : base(unexpect, std::move(e.error())),
 1474|     92|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     92|    {
 1476|     92|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  624|     92|        : m_has_value(false)
  625|     92|    {
  626|     92|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     92|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     92|    {
  689|     92|        scn::detail::construct_at(unexpected_ptr(),
  690|     92|                                  std::forward<Args>(args)...);
  691|     92|        m_has_value = false;
  692|     92|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    276|    {
  718|    276|        return reinterpret_cast<unexpected<E>*>(
  719|    276|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    276|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    276|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     92|    {
 1177|     92|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     92|    {
 1598|     92|        return has_value();
 1599|     92|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|    276|    {
  675|    276|        return m_has_value;
  676|    276|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     92|    {
 1604|     92|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     92|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     92|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     92|        return this->get_unexpected().error();
 1606|     92|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     92|    {
  658|     92|        return *unexpected_ptr();
  659|     92|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     92|    {
  631|     92|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 92]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     92|        else {
  635|     92|            destroy_unexpected();
  636|     92|        }
  637|     92|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     92|    {
  700|     92|        scn::detail::destroy_at(unexpected_ptr());
  701|     92|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  39.0k|    {
 2855|  39.0k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  39.0k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  39.0k|    {
 2836|  39.0k|        return t.data();
 2837|  39.0k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   643k|        : base(unexpect, std::move(e.error())),
 1474|   643k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   643k|    {
 1476|   643k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   643k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   643k|          m_has_value(false)
  446|   643k|    {
  447|   643k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   649k|    {
 1177|   649k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  6.53k|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.53k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.53k|    {
 1430|  6.53k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  6.53k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.53k|    {
  437|  6.53k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  2.96k|{
 1211|  2.96k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  2.96k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    298|    {
 1837|    298|        return detail::transform_error_impl(std::move(*this),
 1838|    298|                                            std::forward<F>(f));
 1839|    298|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1322|    298|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    298|    else {
 1333|    298|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    298|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    298|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 298, False: 0]
  |  |  ------------------
  ------------------
 1335|    298|                   ? result(*std::forward<Exp>(exp))
 1336|    298|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    298|    }
 1340|    298|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1427|    298|        : base(std::in_place, std::forward<U>(val)),
 1428|    298|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    298|    {
 1430|    298|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    298|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    298|    {
  437|    298|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    298|    {
 1177|    298|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    298|    {
 1598|    298|        return has_value();
 1599|    298|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    596|    {
  485|    596|        return m_has_value;
  486|    596|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    298|    {
 1663|    298|        return std::move(value());
 1664|    298|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    298|    {
 1627|    298|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    298|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    298|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    298|        return this->get_value();
 1629|    298|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    298|    {
  451|    298|        return m_value;
  452|    298|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    596|    {
 1823|    596|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    596|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSI_OT0_:
 1322|    596|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    596|    else {
 1333|    596|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    596|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    596|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 596]
  |  |  ------------------
  ------------------
 1335|    596|                   ? result(*std::forward<Exp>(exp))
 1336|    596|                   : result(unexpect,
 1337|    596|                            trivial_invoke(std::forward<F>(f),
 1338|    596|                                           std::forward<Exp>(exp).error()));
 1339|    596|    }
 1340|    596|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|    774|    {
 1653|    774|        return value();
 1654|    774|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      4|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    294|    {
 2724|    294|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    294|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    294|    {
 2705|    294|        return decay_copy(t.begin());
 2706|    294|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|    952|    {
 1837|    952|        return detail::transform_error_impl(std::move(*this),
 1838|    952|                                            std::forward<F>(f));
 1839|    952|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|    952|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    952|    else {
 1333|    952|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    952|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    952|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 952, False: 0]
  |  |  ------------------
  ------------------
 1335|    952|                   ? result(*std::forward<Exp>(exp))
 1336|    952|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    952|    }
 1340|    952|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|    952|        : base(std::in_place, std::forward<U>(val)),
 1428|    952|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    952|    {
 1430|    952|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|    952|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    952|    {
  437|    952|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    952|    {
 1177|    952|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    952|    {
 1598|    952|        return has_value();
 1599|    952|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.90k|    {
  485|  1.90k|        return m_has_value;
  486|  1.90k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|    952|    {
 1663|    952|        return std::move(value());
 1664|    952|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|    952|    {
 1627|    952|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    952|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    952|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    952|        return this->get_value();
 1629|    952|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    952|    {
  451|    952|        return m_value;
  452|    952|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|    978|    {
 1823|    978|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    978|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|    978|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    978|    else {
 1333|    978|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    978|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    978|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 978]
  |  |  ------------------
  ------------------
 1335|    978|                   ? result(*std::forward<Exp>(exp))
 1336|    978|                   : result(unexpect,
 1337|    978|                            trivial_invoke(std::forward<F>(f),
 1338|    978|                                           std::forward<Exp>(exp).error()));
 1339|    978|    }
 1340|    978|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|    978|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    978|    static_cast<    \
  |  |  929|    978|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|    978|    {
 3644|    978|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  13.9k|    {
 1653|  13.9k|        return value();
 1654|  13.9k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6706|  4.87k|{
 6707|  4.87k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  4.87k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  4.87k|    auto start = begin;
 6711|  4.87k|    ++begin;
 6712|       |
 6713|  4.87k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.87k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|      0|        return {};
 6718|      0|    }
 6719|  4.87k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 408, False: 4.46k]
  ------------------
 6720|    408|        handler.on_charset_inverted();
 6721|    408|        ++begin;
 6722|    408|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 408]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|      0|            return {};
 6727|      0|        }
 6728|    408|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 6, False: 402]
  ------------------
 6729|      6|            handler.on_charset_single(char32_t{']'});
 6730|      6|            ++begin;
 6731|      6|        }
 6732|    408|    }
 6733|  4.46k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 0, False: 4.46k]
  ------------------
 6734|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|      0|    }
 6736|       |
 6737|  1.04M|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 1.04M, False: 0]
  ------------------
 6738|  1.04M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 6739|      0|            break;
 6740|      0|        }
 6741|       |
 6742|  1.04M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 4.87k, False: 1.04M]
  ------------------
 6743|  4.87k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  4.87k|        }
 6745|       |
 6746|  1.04M|        parse_presentation_set_literal(begin, end, handler);
 6747|  1.04M|    }
 6748|       |
 6749|      0|    SCN_UNLIKELY_ATTR
 6750|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6751|      0|    return {};
 6752|  4.87k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6670|  1.04M|{
 6671|  1.04M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  1.04M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  1.04M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 6675|      0|        return;
 6676|      0|    }
 6677|       |
 6678|  1.04M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 1.04M, False: 0]
  |  Branch (6678:25): [True: 5.27k, False: 1.03M]
  |  Branch (6678:49): [True: 5.27k, False: 0]
  ------------------
 6679|  1.04M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 5.10k, False: 174]
  ------------------
 6680|  5.10k|        ++begin;
 6681|       |
 6682|  5.10k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  5.10k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  5.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.10k]
  |  |  ------------------
  ------------------
 6684|      0|            return;
 6685|      0|        }
 6686|       |
 6687|  5.10k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  5.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.10k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|      0|            return;
 6692|      0|        }
 6693|       |
 6694|  5.10k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  5.10k|        return;
 6696|  5.10k|    }
 6697|       |
 6698|  1.03M|    handler.on_charset_single(cp_first);
 6699|  1.03M|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6646|  1.04M|{
 6647|  1.04M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  1.04M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  1.04M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  2.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  |  Branch (859:45): [True: 0, False: 1.04M]
  |  |  |  Branch (859:45): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  1.04M|    const auto cp =
 6656|  1.04M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  1.04M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 6658|      0|        handler.on_error("Invalid encoding in format string");
 6659|      0|        return invalid_code_point;
 6660|      0|    }
 6661|       |
 6662|  1.04M|    begin += len;
 6663|  1.04M|    return cp;
 6664|  1.04M|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  51.4k|    {
 1177|  51.4k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1427|  51.4k|        : base(std::in_place, std::forward<U>(val)),
 1428|  51.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  51.4k|    {
 1430|  51.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  435|  51.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  51.4k|    {
  437|  51.4k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6261|  43.4k|    {
 6262|  43.4k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6263|  43.4k|                charset_string_size};
 6264|  43.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1427|    774|        : base(std::in_place, std::forward<U>(val)),
 1428|    774|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    774|    {
 1430|    774|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  435|    774|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    774|    {
  437|    774|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|  3.42k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.42k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.42k|    {
 1430|  3.42k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.42k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.42k|    {
  437|  3.42k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4028|   303k|{
 4029|   303k|    if constexpr (sizeof(CharT) == 1) {
 4030|   303k|        return decode_utf8_code_point_exhaustive_valid(input);
 4031|       |    }
 4032|       |    else if constexpr (sizeof(CharT) == 2) {
 4033|       |        return decode_utf16_code_point_exhaustive_valid(input);
 4034|       |    }
 4035|       |    else {
 4036|       |        SCN_EXPECT(input.size() == 1);
 4037|       |        return static_cast<char32_t>(input.front());
 4038|       |    }
 4039|   303k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3906|  43.6k|    const auto is_trailing_code_unit = [](char ch) {
 3907|  43.6k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3908|  43.6k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6196|    944|    {
 6197|    944|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    944|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    944|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6198|    944|        CharT r{};
 6199|    944|        std::memcpy(&r, m_data, m_size);
 6200|    944|        return r;
 6201|    944|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   468k|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   468k|    else {
 3810|       |        // utf-32
 3811|   468k|        static_assert(sizeof(U) == 4);
 3812|   468k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   468k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   468k|        return 1;
 3814|   468k|    }
 3815|   468k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   427k|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   427k|    else {
 4016|   427k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   427k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   427k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   427k|        auto cp = static_cast<char32_t>(input.front());
 4018|   427k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 187k, False: 239k]
  |  |  ------------------
  ------------------
 4019|   187k|            return invalid_code_point;
 4020|   187k|        }
 4021|   239k|        return cp;
 4022|   427k|    }
 4023|   427k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  79.6k|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  79.6k|    else {
 3701|  79.6k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  79.6k|                                       to_address(first), to_address(last)))};
 3703|  79.6k|    }
 3704|  79.6k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   252k|{
  326|   252k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   252k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   293k|{
  304|   293k|    return p;
  305|   293k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  8.27k|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  8.27k|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  8.27k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  8.27k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  8.27k|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  8.27k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  40.3k|{
  326|  40.3k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  40.3k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  32.2k|    {
 3342|  32.2k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  32.2k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|    138|        : base(unexpect, std::move(e.error())),
 1474|    138|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    138|    {
 1476|    138|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|    138|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    138|          m_has_value(false)
  446|    138|    {
  447|    138|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.0k|    {
 1177|  23.0k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  22.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  22.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  22.8k|    {
 1430|  22.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  22.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  22.8k|    {
  437|  22.8k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  6.08k|    {
 1598|  6.08k|        return has_value();
 1599|  6.08k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  39.9k|    {
  485|  39.9k|        return m_has_value;
  486|  39.9k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  16.7k|    {
 1627|  16.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  16.7k|        return this->get_value();
 1629|  16.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  16.7k|    {
  451|  16.7k|        return m_value;
  452|  16.7k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1427|  2.82k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.82k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.82k|    {
 1430|  2.82k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  2.82k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.82k|    {
  437|  2.82k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.98k|    {
 1177|  2.98k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    162|        : base(unexpect, std::move(e.error())),
 1474|    162|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    162|    {
 1476|    162|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    162|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    162|          m_has_value(false)
  446|    162|    {
  447|    162|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|  1.24k|    {
 1598|  1.24k|        return has_value();
 1599|  1.24k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.72k|    {
  485|  4.72k|        return m_has_value;
  486|  4.72k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.58k|    {
 1627|  1.58k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.58k|        return this->get_value();
 1629|  1.58k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.58k|    {
  451|  1.58k|        return m_value;
  452|  1.58k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.19k|    {
 1177|  2.19k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  2.19k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.19k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.19k|    {
 1430|  2.19k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  435|  2.19k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.19k|    {
  437|  2.19k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    502|    {
 1837|    502|        return detail::transform_error_impl(std::move(*this),
 1838|    502|                                            std::forward<F>(f));
 1839|    502|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|    502|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    502|    else {
 1333|    502|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    502|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    502|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 502, False: 0]
  |  |  ------------------
  ------------------
 1335|    502|                   ? result(*std::forward<Exp>(exp))
 1336|    502|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    502|    }
 1340|    502|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.58k|    {
 1663|  1.58k|        return std::move(value());
 1664|  1.58k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1427|  1.24k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.24k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.24k|    {
 1430|  1.24k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  1.24k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.24k|    {
  437|  1.24k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.71k|    {
 1177|  4.71k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    162|    {
 1614|    162|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    162|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    162|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    162|        return std::move(this->get_unexpected().error());
 1616|    162|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    162|    {
  468|    162|        return m_unexpected;
  469|    162|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    940|        : base(unexpect, std::forward<Args>(args)...),
 1484|    940|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    940|    {
 1486|    940|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  3.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.18k|          m_has_value(false)
  446|  3.18k|    {
  447|  3.18k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    618|    {
 2724|    618|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    618|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    618|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    618|    {
 2705|    618|        return decay_copy(t.begin());
 2706|    618|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|  1.42k|{
 1949|  1.42k|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.42k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.42k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3325|    618|    {
 3326|    618|        return m_iterator;
 3327|    618|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    618|    {
 2781|    618|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    618|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    618|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    618|    {
 2763|    618|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    618|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    618|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3329|    618|    {
 3330|    618|        return m_sentinel;
 3331|    618|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESF_SA_:
 3310|    618|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|    618|    static_cast<    \
  |  |  929|    618|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|    618|    static_cast<    \
  |  |  929|    618|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|    618|    {
 3312|    618|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  2.19k|    {
 1598|  2.19k|        return has_value();
 1599|  2.19k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.38k|    {
  485|  4.38k|        return m_has_value;
  486|  4.38k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  2.19k|    {
 1663|  2.19k|        return std::move(value());
 1664|  2.19k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  2.19k|    {
 1627|  2.19k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.19k|        return this->get_value();
 1629|  2.19k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.19k|    {
  451|  2.19k|        return m_value;
  452|  2.19k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  22.1k|    {
 1177|  22.1k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  22.1k|        : base(std::in_place, std::forward<U>(val)),
 1428|  22.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  22.1k|    {
 1430|  22.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  22.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  22.1k|    {
  437|  22.1k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  10.7k|    {
 1837|  10.7k|        return detail::transform_error_impl(std::move(*this),
 1838|  10.7k|                                            std::forward<F>(f));
 1839|  10.7k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  10.7k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  10.7k|    else {
 1333|  10.7k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  10.7k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  10.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 10.7k, False: 0]
  |  |  ------------------
  ------------------
 1335|  10.7k|                   ? result(*std::forward<Exp>(exp))
 1336|  10.7k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  10.7k|    }
 1340|  10.7k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  16.7k|    {
 1663|  16.7k|        return std::move(value());
 1664|  16.7k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    138|    {
 1614|    138|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    138|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    138|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    138|        return std::move(this->get_unexpected().error());
 1616|    138|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    138|    {
  468|    138|        return m_unexpected;
  469|    138|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.01k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.01k|    {
 1486|  1.01k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  22.1k|    {
 1598|  22.1k|        return has_value();
 1599|  22.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  44.3k|    {
  485|  44.3k|        return m_has_value;
  486|  44.3k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  22.1k|    {
 1663|  22.1k|        return std::move(value());
 1664|  22.1k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  22.1k|    {
 1627|  22.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  22.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  22.1k|        return this->get_value();
 1629|  22.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  22.1k|    {
  451|  22.1k|        return m_value;
  452|  22.1k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.24k|        : base(unexpect, std::move(e.error())),
 1474|  2.24k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.24k|    {
 1476|  2.24k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S8_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    352|        : base(unexpect, std::move(e.error())),
 1474|    352|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    352|    {
 1476|    352|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    514|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    514|          m_has_value(false)
  446|    514|    {
  447|    514|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.69k|    {
 1177|  4.69k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS8_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S8_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  3.10k|        : base(unexpect, std::move(e.error())),
 1474|  3.10k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.10k|    {
 1476|  3.10k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.10k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.10k|          m_has_value(false)
  446|  3.10k|    {
  447|  3.10k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  4.32k|    {
 1598|  4.32k|        return has_value();
 1599|  4.32k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  8.42k|    {
  485|  8.42k|        return m_has_value;
  486|  8.42k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|  1.52k|    {
 1604|  1.52k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.52k|        return this->get_unexpected().error();
 1606|  1.52k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  2.08k|    {
  468|  2.08k|        return m_unexpected;
  469|  2.08k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1427|    790|        : base(std::in_place, std::forward<U>(val)),
 1428|    790|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    790|    {
 1430|    790|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    790|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    790|    {
  437|    790|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    790|    {
 1177|    790|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.07k|    {
 1627|  1.07k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.07k|        return this->get_value();
 1629|  1.07k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.07k|    {
  451|  1.07k|        return m_value;
  452|  1.07k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    600|    {
 1598|    600|        return has_value();
 1599|    600|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  1.58k|    {
  485|  1.58k|        return m_has_value;
  486|  1.58k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    600|    {
 1177|    600|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    790|    {
 1663|    790|        return std::move(value());
 1664|    790|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    790|    {
 1627|    790|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    790|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    790|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    790|        return this->get_value();
 1629|    790|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    790|    {
  451|    790|        return m_value;
  452|    790|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3329|  54.2k|    {
 3330|  54.2k|        return m_sentinel;
 3331|  54.2k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.24k|    {
 1837|  1.24k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.24k|                                            std::forward<F>(f));
 1839|  1.24k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|  1.24k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.24k|    else {
 1333|  1.24k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.24k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.24k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.07k, False: 162]
  |  |  ------------------
  ------------------
 1335|  1.24k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.24k|                   : result(unexpect,
 1337|    162|                            trivial_invoke(std::forward<F>(f),
 1338|    162|                                           std::forward<Exp>(exp).error()));
 1339|  1.24k|    }
 1340|  1.24k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1427|  1.07k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.07k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.07k|    {
 1430|  1.07k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|  1.07k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.07k|    {
  437|  1.07k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1483|    162|        : base(unexpect, std::forward<Args>(args)...),
 1484|    162|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    162|    {
 1486|    162|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.07k|    {
 1663|  1.07k|        return std::move(value());
 1664|  1.07k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3325|  59.4k|    {
 3326|  59.4k|        return m_iterator;
 3327|  59.4k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1427|    600|        : base(std::in_place, std::forward<U>(val)),
 1428|    600|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    600|    {
 1430|    600|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    600|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    600|    {
  437|    600|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    600|    {
 1837|    600|        return detail::transform_error_impl(std::move(*this),
 1838|    600|                                            std::forward<F>(f));
 1839|    600|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSJ_OT0_:
 1322|    600|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    600|    else {
 1333|    600|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    600|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    600|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 600, False: 0]
  |  |  ------------------
  ------------------
 1335|    600|                   ? result(*std::forward<Exp>(exp))
 1336|    600|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    600|    }
 1340|    600|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.20k|    {
  485|  1.20k|        return m_has_value;
  486|  1.20k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    600|    {
 1663|    600|        return std::move(value());
 1664|    600|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    600|    {
 1627|    600|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    600|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    600|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    600|        return this->get_value();
 1629|    600|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    600|    {
  451|    600|        return m_value;
  452|    600|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1427|    600|        : base(std::in_place, std::forward<U>(val)),
 1428|    600|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    600|    {
 1430|    600|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  435|    600|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    600|    {
  437|    600|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    600|    {
 1177|    600|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    600|    {
 1598|    600|        return has_value();
 1599|    600|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.20k|    {
  485|  1.20k|        return m_has_value;
  486|  1.20k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|    600|    {
 1663|    600|        return std::move(value());
 1664|    600|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|    600|    {
 1627|    600|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    600|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    600|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    600|        return this->get_value();
 1629|    600|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    600|    {
  451|    600|        return m_value;
  452|    600|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    560|    {
 1837|    560|        return detail::transform_error_impl(std::move(*this),
 1838|    560|                                            std::forward<F>(f));
 1839|    560|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSJ_OT0_:
 1322|    560|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    560|    else {
 1333|    560|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    560|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    560|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 560]
  |  |  ------------------
  ------------------
 1335|    560|                   ? result(*std::forward<Exp>(exp))
 1336|    560|                   : result(unexpect,
 1337|    560|                            trivial_invoke(std::forward<F>(f),
 1338|    560|                                           std::forward<Exp>(exp).error()));
 1339|    560|    }
 1340|    560|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    560|    {
 1614|    560|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    560|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    560|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    560|        return std::move(this->get_unexpected().error());
 1616|    560|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3642|    940|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|    940|    static_cast<    \
  |  |  929|    940|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|    940|    {
 3644|    940|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SA_EEvE4typeELPv0EEESK_SF_:
 3310|  20.2k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  20.2k|    static_cast<    \
  |  |  929|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  20.2k|    static_cast<    \
  |  |  929|  20.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  20.2k|    {
 3312|  20.2k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISK_OT_EEvE4typeELPv0ETnPNSN_IXsr3stdE16is_convertible_vISP_SK_EEvE4typeELST_0EEEONS0_10unexpectedISO_EE:
 1473|     40|        : base(unexpect, std::move(e.error())),
 1474|     40|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     40|    {
 1476|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  624|     40|        : m_has_value(false)
  625|     40|    {
  626|     40|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     40|    {
  689|     40|        scn::detail::construct_at(unexpected_ptr(),
  690|     40|                                  std::forward<Args>(args)...);
  691|     40|        m_has_value = false;
  692|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    120|    {
  718|    120|        return reinterpret_cast<unexpected<E>*>(
  719|    120|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    120|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    120|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     40|    {
 1177|     40|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     40|    {
 1598|     40|        return has_value();
 1599|     40|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    120|    {
  675|    120|        return m_has_value;
  676|    120|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     40|    {
 1604|     40|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     40|        return this->get_unexpected().error();
 1606|     40|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     40|    {
  658|     40|        return *unexpected_ptr();
  659|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     40|    {
  631|     40|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 40]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     40|        else {
  635|     40|            destroy_unexpected();
  636|     40|        }
  637|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     40|    {
  700|     40|        scn::detail::destroy_at(unexpected_ptr());
  701|     40|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  4.90k|    {
 1598|  4.90k|        return has_value();
 1599|  4.90k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  9.43k|    {
  485|  9.43k|        return m_has_value;
  486|  9.43k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  2.99k|    {
 1604|  2.99k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.99k|        return this->get_unexpected().error();
 1606|  2.99k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.99k|    {
  468|  2.99k|        return m_unexpected;
  469|  2.99k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.24k|    {
 1663|  1.24k|        return std::move(value());
 1664|  1.24k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.53k|    {
 1627|  1.53k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.53k|        return this->get_value();
 1629|  1.53k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.53k|    {
  451|  1.53k|        return m_value;
  452|  1.53k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.14k|        : base(unexpect, std::move(e.error())),
 1474|  1.14k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.14k|    {
 1476|  1.14k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.27k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.27k|          m_has_value(false)
  446|  1.27k|    {
  447|  1.27k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.3k|    {
 1177|  19.3k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  12.1k|        : base(unexpect, std::move(e.error())),
 1474|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.1k|    {
 1476|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.1k|          m_has_value(false)
  446|  12.1k|    {
  447|  12.1k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  20.3k|    {
 1598|  20.3k|        return has_value();
 1599|  20.3k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  33.5k|    {
  485|  33.5k|        return m_has_value;
  486|  33.5k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  6.17k|    {
 1604|  6.17k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.17k|        return this->get_unexpected().error();
 1606|  6.17k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  6.17k|    {
  468|  6.17k|        return m_unexpected;
  469|  6.17k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  4.02k|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.02k|    {
 1430|  4.02k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  4.02k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.02k|    {
  437|  4.02k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.02k|    {
 1177|  4.02k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  5.99k|    {
 1627|  5.99k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.99k|        return this->get_value();
 1629|  5.99k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  5.99k|    {
  451|  5.99k|        return m_value;
  452|  5.99k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  3.02k|    {
 1598|  3.02k|        return has_value();
 1599|  3.02k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  8.04k|    {
  485|  8.04k|        return m_has_value;
  486|  8.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.02k|    {
 1177|  3.02k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  4.02k|    {
 1663|  4.02k|        return std::move(value());
 1664|  4.02k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  4.02k|    {
 1627|  4.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.02k|        return this->get_value();
 1629|  4.02k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  4.02k|    {
  451|  4.02k|        return m_value;
  452|  4.02k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  6.13k|    {
 1837|  6.13k|        return detail::transform_error_impl(std::move(*this),
 1838|  6.13k|                                            std::forward<F>(f));
 1839|  6.13k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  6.13k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  6.13k|    else {
 1333|  6.13k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  6.13k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.99k, False: 138]
  |  |  ------------------
  ------------------
 1335|  6.13k|                   ? result(*std::forward<Exp>(exp))
 1336|  6.13k|                   : result(unexpect,
 1337|    138|                            trivial_invoke(std::forward<F>(f),
 1338|    138|                                           std::forward<Exp>(exp).error()));
 1339|  6.13k|    }
 1340|  6.13k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  5.99k|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.99k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.99k|    {
 1430|  5.99k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  5.99k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.99k|    {
  437|  5.99k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|    138|        : base(unexpect, std::forward<Args>(args)...),
 1484|    138|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    138|    {
 1486|    138|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  5.99k|    {
 1663|  5.99k|        return std::move(value());
 1664|  5.99k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|  3.02k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.02k|    {
 1430|  3.02k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  3.02k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.02k|    {
  437|  3.02k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.02k|    {
 1837|  3.02k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.02k|                                            std::forward<F>(f));
 1839|  3.02k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|  3.02k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  3.02k|    else {
 1333|  3.02k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.02k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.02k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.02k, False: 0]
  |  |  ------------------
  ------------------
 1335|  3.02k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.02k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  3.02k|    }
 1340|  3.02k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  6.04k|    {
  485|  6.04k|        return m_has_value;
  486|  6.04k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  3.02k|    {
 1663|  3.02k|        return std::move(value());
 1664|  3.02k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  3.02k|    {
 1627|  3.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.02k|        return this->get_value();
 1629|  3.02k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.02k|    {
  451|  3.02k|        return m_value;
  452|  3.02k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  3.02k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.02k|    {
 1430|  3.02k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|  3.02k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.02k|    {
  437|  3.02k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.02k|    {
 1177|  3.02k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  3.02k|    {
 1598|  3.02k|        return has_value();
 1599|  3.02k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.04k|    {
  485|  6.04k|        return m_has_value;
  486|  6.04k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  3.02k|    {
 1663|  3.02k|        return std::move(value());
 1664|  3.02k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  3.02k|    {
 1627|  3.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.02k|        return this->get_value();
 1629|  3.02k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.02k|    {
  451|  3.02k|        return m_value;
  452|  3.02k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|     52|        : base(unexpect, std::move(e.error())),
 1474|     52|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     52|    {
 1476|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  624|     52|        : m_has_value(false)
  625|     52|    {
  626|     52|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     52|    {
  689|     52|        scn::detail::construct_at(unexpected_ptr(),
  690|     52|                                  std::forward<Args>(args)...);
  691|     52|        m_has_value = false;
  692|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    156|    {
  718|    156|        return reinterpret_cast<unexpected<E>*>(
  719|    156|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    156|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    156|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     52|    {
 1177|     52|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     52|    {
 1598|     52|        return has_value();
 1599|     52|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    156|    {
  675|    156|        return m_has_value;
  676|    156|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     52|    {
 1604|     52|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     52|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     52|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     52|        return this->get_unexpected().error();
 1606|     52|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     52|    {
  658|     52|        return *unexpected_ptr();
  659|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     52|    {
  631|     52|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 52]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     52|        else {
  635|     52|            destroy_unexpected();
  636|     52|        }
  637|     52|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     52|    {
  700|     52|        scn::detail::destroy_at(unexpected_ptr());
  701|     52|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  16.6k|    {
 2855|  16.6k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  16.6k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  16.6k|    {
 2836|  16.6k|        return t.data();
 2837|  16.6k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  38.5k|    {
 3221|  38.5k|        return detail::to_address(ranges::begin(derived()));
 3222|  38.5k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  38.5k|    {
 2724|  38.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  38.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  38.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  38.5k|    {
 2705|  38.5k|        return decay_copy(t.begin());
 2706|  38.5k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  38.5k|    {
 3180|  38.5k|        return static_cast<D&>(*this);
 3181|  38.5k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    190|    {
 1837|    190|        return detail::transform_error_impl(std::move(*this),
 1838|    190|                                            std::forward<F>(f));
 1839|    190|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESG_EEDaOSK_OT0_:
 1322|    190|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    190|    else {
 1333|    190|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    190|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    190|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 190, False: 0]
  |  |  ------------------
  ------------------
 1335|    190|                   ? result(*std::forward<Exp>(exp))
 1336|    190|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    190|    }
 1340|    190|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1427|    190|        : base(std::in_place, std::forward<U>(val)),
 1428|    190|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    190|    {
 1430|    190|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  435|    190|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    190|    {
  437|    190|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    190|    {
 1177|    190|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    190|    {
 1598|    190|        return has_value();
 1599|    190|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    380|    {
  485|    380|        return m_has_value;
  486|    380|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSG_v:
 1662|    190|    {
 1663|    190|        return std::move(value());
 1664|    190|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    190|    {
 1627|    190|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    190|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    190|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    190|        return this->get_value();
 1629|    190|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    190|    {
  451|    190|        return m_value;
  452|    190|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    380|    {
 1823|    380|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    380|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSK_OT0_:
 1322|    380|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|    380|    else {
 1333|    380|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    380|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    380|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 380]
  |  |  ------------------
  ------------------
 1335|    380|                   ? result(*std::forward<Exp>(exp))
 1336|    380|                   : result(unexpect,
 1337|    380|                            trivial_invoke(std::forward<F>(f),
 1338|    380|                                           std::forward<Exp>(exp).error()));
 1339|    380|    }
 1340|    380|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1652|    294|    {
 1653|    294|        return value();
 1654|    294|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    184|    {
 2724|    184|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    184|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    184|    {
 2705|    184|        return decay_copy(t.begin());
 2706|    184|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3663|    176|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.00k|    {
 1837|  1.00k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.00k|                                            std::forward<F>(f));
 1839|  1.00k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|  1.00k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.00k|    else {
 1333|  1.00k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.00k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.00k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.00k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.00k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.00k|    }
 1340|  1.00k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.00k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.00k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.00k|    {
 1430|  1.00k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.00k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.00k|    {
  437|  1.00k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.00k|    {
 1177|  1.00k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.00k|    {
 1598|  1.00k|        return has_value();
 1599|  1.00k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.00k|    {
  485|  2.00k|        return m_has_value;
  486|  2.00k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.00k|    {
 1663|  1.00k|        return std::move(value());
 1664|  1.00k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.00k|    {
 1627|  1.00k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.00k|        return this->get_value();
 1629|  1.00k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.00k|    {
  451|  1.00k|        return m_value;
  452|  1.00k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|  1.01k|    {
 1823|  1.01k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.01k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|  1.01k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.01k|    else {
 1333|  1.01k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.01k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.01k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.01k]
  |  |  ------------------
  ------------------
 1335|  1.01k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.01k|                   : result(unexpect,
 1337|  1.01k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.01k|                                           std::forward<Exp>(exp).error()));
 1339|  1.01k|    }
 1340|  1.01k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|  1.01k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.01k|    static_cast<    \
  |  |  929|  1.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.01k|    {
 3644|  1.01k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  5.00k|    {
 1653|  5.00k|        return value();
 1654|  5.00k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6706|    582|{
 6707|    582|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    582|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    582|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|    582|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    582|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    582|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|    582|    auto start = begin;
 6711|    582|    ++begin;
 6712|       |
 6713|    582|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    582|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 582]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|      0|        return {};
 6718|      0|    }
 6719|    582|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 312, False: 270]
  ------------------
 6720|    312|        handler.on_charset_inverted();
 6721|    312|        ++begin;
 6722|    312|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    312|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 312]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|      0|            return {};
 6727|      0|        }
 6728|    312|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 6, False: 306]
  ------------------
 6729|      6|            handler.on_charset_single(char32_t{']'});
 6730|      6|            ++begin;
 6731|      6|        }
 6732|    312|    }
 6733|    270|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 0, False: 270]
  ------------------
 6734|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|      0|    }
 6736|       |
 6737|  6.50k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 6.50k, False: 0]
  ------------------
 6738|  6.50k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  6.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.50k]
  |  |  ------------------
  ------------------
 6739|      0|            break;
 6740|      0|        }
 6741|       |
 6742|  6.50k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 582, False: 5.92k]
  ------------------
 6743|    582|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|    582|        }
 6745|       |
 6746|  5.92k|        parse_presentation_set_literal(begin, end, handler);
 6747|  5.92k|    }
 6748|       |
 6749|      0|    SCN_UNLIKELY_ATTR
 6750|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6751|      0|    return {};
 6752|    582|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6670|  5.92k|{
 6671|  5.92k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  5.92k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  5.92k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.92k]
  |  |  ------------------
  ------------------
 6675|      0|        return;
 6676|      0|    }
 6677|       |
 6678|  5.92k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 5.92k, False: 0]
  |  Branch (6678:25): [True: 258, False: 5.66k]
  |  Branch (6678:49): [True: 258, False: 0]
  ------------------
 6679|  5.92k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 252, False: 6]
  ------------------
 6680|    252|        ++begin;
 6681|       |
 6682|    252|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|    252|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 6684|      0|            return;
 6685|      0|        }
 6686|       |
 6687|    252|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|      0|            return;
 6692|      0|        }
 6693|       |
 6694|    252|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|    252|        return;
 6696|    252|    }
 6697|       |
 6698|  5.67k|    handler.on_charset_single(cp_first);
 6699|  5.67k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6646|  6.17k|{
 6647|  6.17k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  6.17k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  6.17k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.17k]
  |  |  |  Branch (859:45): [True: 0, False: 6.17k]
  |  |  |  Branch (859:45): [True: 0, False: 6.17k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  6.17k|    const auto cp =
 6656|  6.17k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  6.17k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  6.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.17k]
  |  |  ------------------
  ------------------
 6658|      0|        handler.on_error("Invalid encoding in format string");
 6659|      0|        return invalid_code_point;
 6660|      0|    }
 6661|       |
 6662|  6.17k|    begin += len;
 6663|  6.17k|    return cp;
 6664|  6.17k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6261|  15.2k|    {
 6262|  15.2k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6263|  15.2k|                charset_string_size};
 6264|  15.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1427|    294|        : base(std::in_place, std::forward<U>(val)),
 1428|    294|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    294|    {
 1430|    294|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  435|    294|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    294|    {
  437|    294|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|    396|        : base(std::in_place, std::forward<U>(val)),
 1428|    396|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    396|    {
 1430|    396|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|    396|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    396|    {
  437|    396|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|  1.92k|{
 3650|  1.92k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  1.92k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  9.20k|    {
 2855|  9.20k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  9.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  9.20k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  9.20k|    {
 2836|  9.20k|        return t.data();
 2837|  9.20k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   215k|    {
 5476|   215k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 215k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   215k|        return static_cast<std::size_t>(m_desc &
 5481|   215k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   215k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|   366k|    {
 5501|   366k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   366k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|   151k|    {
 5444|   151k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 151k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   151k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 230, False: 150k]
  |  |  ------------------
  ------------------
 5452|    230|            return {};
 5453|    230|        }
 5454|       |
 5455|   150k|        const auto t = type(id);
 5456|   150k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 149k]
  |  |  ------------------
  ------------------
 5457|  1.48k|            return {};
 5458|  1.48k|        }
 5459|       |
 5460|   149k|        basic_scan_arg<Context> arg;
 5461|   149k|        arg.m_type = t;
 5462|   149k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 149k, False: 0]
  ------------------
 5463|   149k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   149k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   149k|        return arg;
 5469|   150k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|   151k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|   213k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|   150k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   150k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   150k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   150k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   150k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|   149k|    {
 5505|   149k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   149k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|   297k|    {
 5257|   297k|        return m_type != detail::arg_type::none_type;
 5258|   297k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  5.94k|{
 8427|  5.94k|#define SCN_VISIT(Type)                                         \
 8428|  5.94k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  5.94k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  5.94k|    }                                                           \
 8431|  5.94k|    else {                                                      \
 8432|  5.94k|        return vis(monostate_val);                              \
 8433|  5.94k|    }
 8434|       |
 8435|  5.94k|    monostate monostate_val{};
 8436|       |
 8437|  5.94k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.94k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.94k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|    660|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 660, False: 5.28k]
  ------------------
 8443|    660|            SCN_VISIT(int);
  ------------------
  |  | 8428|    660|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    660|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    660|    }                                                           \
  |  | 8431|    660|    else {                                                      \
  |  | 8432|    660|        return vis(monostate_val);                              \
  |  | 8433|    660|    }
  ------------------
 8444|    660|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.94k]
  ------------------
 8445|    660|            SCN_VISIT(long);
  ------------------
  |  | 8428|    660|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    660|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    660|    }                                                           \
  |  | 8431|    660|    else {                                                      \
  |  | 8432|    660|        return vis(monostate_val);                              \
  |  | 8433|    660|    }
  ------------------
 8446|    660|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.94k]
  ------------------
 8447|    660|            SCN_VISIT(long long);
  ------------------
  |  | 8428|    660|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    660|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    660|    }                                                           \
  |  | 8431|    660|    else {                                                      \
  |  | 8432|    660|        return vis(monostate_val);                              \
  |  | 8433|    660|    }
  ------------------
 8448|    660|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 5.94k]
  ------------------
 8449|    660|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|    660|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    660|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    660|    }                                                           \
  |  | 8431|    660|    else {                                                      \
  |  | 8432|    660|        return vis(monostate_val);                              \
  |  | 8433|    660|    }
  ------------------
 8450|    660|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 5.94k]
  ------------------
 8451|    660|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|    660|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    660|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    660|    }                                                           \
  |  | 8431|    660|    else {                                                      \
  |  | 8432|    660|        return vis(monostate_val);                              \
  |  | 8433|    660|    }
  ------------------
 8452|  1.32k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 660, False: 5.28k]
  ------------------
 8453|  1.32k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|  1.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.32k|    }                                                           \
  |  | 8431|  1.32k|    else {                                                      \
  |  | 8432|  1.32k|        return vis(monostate_val);                              \
  |  | 8433|  1.32k|    }
  ------------------
 8454|  1.32k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 5.94k]
  ------------------
 8455|  1.32k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|  1.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.32k|    }                                                           \
  |  | 8431|  1.32k|    else {                                                      \
  |  | 8432|  1.32k|        return vis(monostate_val);                              \
  |  | 8433|  1.32k|    }
  ------------------
 8456|  1.32k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.94k]
  ------------------
 8457|  1.32k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|  1.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.32k|    }                                                           \
  |  | 8431|  1.32k|    else {                                                      \
  |  | 8432|  1.32k|        return vis(monostate_val);                              \
  |  | 8433|  1.32k|    }
  ------------------
 8458|  1.98k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 660, False: 5.28k]
  ------------------
 8459|  1.98k|            SCN_VISIT(void*);
  ------------------
  |  | 8428|  1.98k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.98k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.98k|    }                                                           \
  |  | 8431|  1.98k|    else {                                                      \
  |  | 8432|  1.98k|        return vis(monostate_val);                              \
  |  | 8433|  1.98k|    }
  ------------------
 8460|  2.64k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 660, False: 5.28k]
  ------------------
 8461|  2.64k|            SCN_VISIT(bool);
  ------------------
  |  | 8428|  2.64k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  2.64k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  2.64k|    }                                                           \
  |  | 8431|  2.64k|    else {                                                      \
  |  | 8432|  2.64k|        return vis(monostate_val);                              \
  |  | 8433|  2.64k|    }
  ------------------
 8462|  3.30k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 660, False: 5.28k]
  ------------------
 8463|  3.30k|            SCN_VISIT(char);
  ------------------
  |  | 8428|  3.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.30k|    }                                                           \
  |  | 8431|  3.30k|    else {                                                      \
  |  | 8432|  3.30k|        return vis(monostate_val);                              \
  |  | 8433|  3.30k|    }
  ------------------
 8464|  3.30k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 5.94k]
  ------------------
 8465|  3.30k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|  3.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.30k|    }                                                           \
  |  | 8431|  3.30k|    else {                                                      \
  |  | 8432|  3.30k|        return vis(monostate_val);                              \
  |  | 8433|  3.30k|    }
  ------------------
 8466|  3.30k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 5.94k]
  ------------------
 8467|  3.30k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|  3.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.30k|    }                                                           \
  |  | 8431|  3.30k|    else {                                                      \
  |  | 8432|  3.30k|        return vis(monostate_val);                              \
  |  | 8433|  3.30k|    }
  ------------------
 8468|  3.30k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 5.94k]
  ------------------
 8469|  3.30k|            SCN_VISIT(float);
  ------------------
  |  | 8428|  3.30k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.30k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.30k|    }                                                           \
  |  | 8431|  3.30k|    else {                                                      \
  |  | 8432|  3.30k|        return vis(monostate_val);                              \
  |  | 8433|  3.30k|    }
  ------------------
 8470|  3.96k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 660, False: 5.28k]
  ------------------
 8471|  3.96k|            SCN_VISIT(double);
  ------------------
  |  | 8428|  3.96k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.96k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.96k|    }                                                           \
  |  | 8431|  3.96k|    else {                                                      \
  |  | 8432|  3.96k|        return vis(monostate_val);                              \
  |  | 8433|  3.96k|    }
  ------------------
 8472|  3.96k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.94k]
  ------------------
 8473|  3.96k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|  3.96k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.96k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.96k|    }                                                           \
  |  | 8431|  3.96k|    else {                                                      \
  |  | 8432|  3.96k|        return vis(monostate_val);                              \
  |  | 8433|  3.96k|    }
  ------------------
 8474|  4.62k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 660, False: 5.28k]
  ------------------
 8475|  4.62k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|  4.62k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  4.62k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  4.62k|    }                                                           \
  |  | 8431|  4.62k|    else {                                                      \
  |  | 8432|  4.62k|        return vis(monostate_val);                              \
  |  | 8433|  4.62k|    }
  ------------------
 8476|  5.28k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 660, False: 5.28k]
  ------------------
 8477|  5.28k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|  5.28k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.28k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.28k|    }                                                           \
  |  | 8431|  5.28k|    else {                                                      \
  |  | 8432|  5.28k|        return vis(monostate_val);                              \
  |  | 8433|  5.28k|    }
  ------------------
 8478|  5.28k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 5.94k]
  ------------------
 8479|  5.28k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  5.28k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.28k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.28k|    }                                                           \
  |  | 8431|  5.28k|    else {                                                      \
  |  | 8432|  5.28k|        return vis(monostate_val);                              \
  |  | 8433|  5.28k|    }
  ------------------
 8480|  5.94k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 660, False: 5.28k]
  ------------------
 8481|  5.94k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  5.94k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.94k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.94k|    }                                                           \
  |  | 8431|  5.94k|    else {                                                      \
  |  | 8432|  5.94k|        return vis(monostate_val);                              \
  |  | 8433|  5.94k|    }
  ------------------
 8482|  5.94k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 5.94k]
  ------------------
 8483|  5.94k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  5.94k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.94k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.94k|    }                                                           \
  |  | 8431|  5.94k|    else {                                                      \
  |  | 8432|  5.94k|        return vis(monostate_val);                              \
  |  | 8433|  5.94k|    }
  ------------------
 8484|  5.94k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 5.94k]
  ------------------
 8485|  5.94k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  5.94k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.94k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.94k|    }                                                           \
  |  | 8431|  5.94k|    else {                                                      \
  |  | 8432|  5.94k|        return vis(monostate_val);                              \
  |  | 8433|  5.94k|    }
  ------------------
 8486|       |
 8487|  5.94k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 5.94k]
  ------------------
 8488|  5.94k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  5.94k|            return vis(
 8490|  5.94k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 5.94k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 5.94k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  5.94k|            SCN_CLANG_POP
 8505|  5.94k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.13k|    {
 1837|  2.13k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.13k|                                            std::forward<F>(f));
 1839|  2.13k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  2.13k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.13k|    else {
 1333|  2.13k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.13k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.03k, False: 102]
  |  |  ------------------
  ------------------
 1335|  2.13k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.13k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  2.13k|    }
 1340|  2.13k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|    102|        : base(unexpect, std::forward<Args>(args)...),
 1484|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  2.03k|    {
 1663|  2.03k|        return std::move(value());
 1664|  2.03k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   215k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   215k|    {
 5555|   215k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8064|   215k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   215k|    static_cast<    \
  |  |  929|   215k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   215k|    static_cast<    \
  |  |  929|   215k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8065|   215k|    {
 8066|   215k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|   215k|{
 7054|   215k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|   215k|    handler.check_args_exhausted();
 7056|   215k|    return handler.get_error();
 7057|   215k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|   215k|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|   215k|    auto begin = format.data();
 7023|   215k|    auto it = begin;
 7024|   215k|    const auto end = format.data() + format.size();
 7025|       |
 7026|   441k|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 431k, False: 10.1k]
  ------------------
 7027|   431k|        const auto ch = *it++;
 7028|   431k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 219k, False: 211k]
  ------------------
 7029|   219k|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|   219k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|   219k|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 203k, False: 16.2k]
  ------------------
 7033|   203k|                return;
 7034|   203k|            }
 7035|   219k|        }
 7036|   211k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 3.89k, False: 208k]
  ------------------
 7037|  3.89k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  7.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.03k, False: 1.85k]
  |  |  |  Branch (859:45): [True: 354, False: 3.53k]
  |  |  |  Branch (859:45): [True: 1.68k, False: 1.85k]
  |  |  ------------------
  ------------------
 7038|  2.03k|                handler.on_error("Unmatched '}' in format string");
 7039|  2.03k|                return;
 7040|  2.03k|            }
 7041|       |
 7042|  1.85k|            handler.on_literal_text(begin, it);
 7043|  1.85k|            begin = ++it;
 7044|  1.85k|        }
 7045|   431k|    }
 7046|       |
 7047|  10.1k|    handler.on_literal_text(begin, end);
 7048|  10.1k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6951|   219k|{
 6952|   219k|    struct id_adapter {
 6953|   219k|        constexpr void operator()()
 6954|   219k|        {
 6955|   219k|            arg_id = handler.on_arg_id();
 6956|   219k|        }
 6957|   219k|        constexpr void operator()(std::size_t id)
 6958|   219k|        {
 6959|   219k|            arg_id = handler.on_arg_id(id);
 6960|   219k|        }
 6961|       |
 6962|   219k|        constexpr void on_error(const char* msg)
 6963|   219k|        {
 6964|   219k|            SCN_UNLIKELY_ATTR
 6965|   219k|            handler.on_error(msg);
 6966|   219k|        }
 6967|       |
 6968|   219k|        Handler& handler;
 6969|   219k|        std::size_t arg_id;
 6970|   219k|    };
 6971|       |
 6972|   219k|    ++begin;
 6973|   219k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 134, False: 219k]
  |  |  ------------------
  ------------------
 6974|    134|        handler.on_error("Unexpected end of replacement field");
 6975|    134|        return begin;
 6976|    134|    }
 6977|       |
 6978|   219k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 5.92k, False: 213k]
  ------------------
 6979|  5.92k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|  5.92k|    }
 6981|   213k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 5.90k, False: 207k]
  ------------------
 6982|  5.90k|        handler.on_literal_text(begin, begin + 1);
 6983|  5.90k|    }
 6984|   207k|    else {
 6985|   207k|        auto adapter = id_adapter{handler, 0};
 6986|   207k|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|   207k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 207k]
  |  |  ------------------
  ------------------
 6989|    110|            handler.on_error("Missing '}' in format string");
 6990|    110|            return begin;
 6991|    110|        }
 6992|       |
 6993|   207k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 302, False: 206k]
  ------------------
 6994|    302|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|    302|        }
 6996|   206k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 144k, False: 61.9k]
  ------------------
 6997|   144k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 144k]
  |  |  ------------------
  ------------------
 6998|     74|                handler.on_error("Unexpected end of replacement field");
 6999|     74|                return begin;
 7000|     74|            }
 7001|   144k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|   144k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.88k, False: 141k]
  |  |  |  Branch (859:45): [True: 0, False: 144k]
  |  |  |  Branch (859:45): [True: 3.88k, False: 141k]
  |  |  ------------------
  ------------------
 7003|  3.88k|                handler.on_error("Unknown format specifier");
 7004|  3.88k|                return begin;
 7005|  3.88k|            }
 7006|   144k|        }
 7007|  61.9k|        else {
 7008|  61.9k|            SCN_UNLIKELY_ATTR
 7009|  61.9k|            handler.on_error("Missing '}' in format string");
 7010|  61.9k|            return begin;
 7011|  61.9k|        }
 7012|   207k|    }
 7013|   153k|    return begin + 1;
 7014|   219k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8048|   151k|    {
 8049|   151k|        return m_args.get(id);
 8050|   151k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8053|  6.22k|    {
 8054|  6.22k|        return m_args;
 8055|  6.22k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8058|   146k|    {
 8059|   146k|        return m_locale;
 8060|   146k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|   142k|    {
 5576|   142k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 141k]
  |  |  ------------------
  ------------------
 5577|     42|            on_error(
 5578|     42|                "Cannot switch from manual to automatic argument indexing");
 5579|     42|            return 0;
 5580|     42|        }
 5581|       |
 5582|   141k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   141k|        do_check_arg_id(id);
 5584|   141k|        return id;
 5585|   142k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5599|    112|    {
 5600|    112|        return detail::handle_error(
 5601|    112|            scan_error{scan_error::invalid_format_string, msg});
 5602|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|   151k|{
 6064|   151k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   151k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   151k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|   207k|{
 6453|   207k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   207k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   207k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|   207k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 207k, False: 0]
  |  Branch (6454:26): [True: 71.2k, False: 136k]
  ------------------
 6455|  71.2k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  71.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|  71.2k|    }
 6457|       |
 6458|   136k|    handler();
 6459|   136k|    return begin;
 6460|   207k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6422|  71.2k|{
 6423|  71.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  71.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6424|       |
 6425|  71.2k|    CharT c = *begin;
 6426|  71.2k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6426:9): [True: 61.4k, False: 9.80k]
  |  Branch (6426:27): [True: 106, False: 9.70k]
  ------------------
 6427|  61.5k|        handler.on_error("Invalid argument ID");
 6428|  61.5k|        return begin;
 6429|  61.5k|    }
 6430|       |
 6431|  9.70k|    int idx = 0;
 6432|  9.70k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6432:9): [True: 588, False: 9.11k]
  ------------------
 6433|    588|        idx = parse_simple_int(begin, end);
 6434|    588|    }
 6435|  9.11k|    else {
 6436|  9.11k|        ++begin;
 6437|  9.11k|    }
 6438|       |
 6439|  9.70k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6439:9): [True: 110, False: 9.59k]
  |  Branch (6439:26): [True: 9.29k, False: 302]
  |  Branch (6439:50): [True: 432, False: 8.85k]
  ------------------
 6440|    542|        handler.on_error("Invalid argument ID");
 6441|    542|        return begin;
 6442|    542|    }
 6443|  9.16k|    handler(idx);
 6444|       |
 6445|  9.16k|    return begin;
 6446|  9.70k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6963|  62.0k|        {
 6964|  62.0k|            SCN_UNLIKELY_ATTR
 6965|  62.0k|            handler.on_error(msg);
 6966|  62.0k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6401|  18.4k|{
 6402|  18.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6403|  18.4k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  18.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|       |
 6405|  18.4k|    unsigned long long value = 0;
 6406|  44.2k|    do {
 6407|  44.2k|        value *= 10;
 6408|  44.2k|        value += static_cast<unsigned long long>(*begin - '0');
 6409|  44.2k|        if (value >
  ------------------
  |  Branch (6409:13): [True: 116, False: 44.1k]
  ------------------
 6410|  44.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6411|    116|            return -1;
 6412|    116|        }
 6413|  44.1k|        ++begin;
 6414|  44.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6414:14): [True: 43.8k, False: 294]
  |  Branch (6414:30): [True: 36.3k, False: 7.48k]
  |  Branch (6414:47): [True: 25.7k, False: 10.5k]
  ------------------
 6415|  18.3k|    return static_cast<int>(value);
 6416|  18.4k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6958|  9.16k|        {
 6959|  9.16k|            arg_id = handler.on_arg_id(id);
 6960|  9.16k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5588|  9.16k|    {
 5589|  9.16k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  9.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 9.09k]
  |  |  ------------------
  ------------------
 5590|     70|            on_error(
 5591|     70|                "Cannot switch from manual to automatic argument indexing");
 5592|     70|            return;
 5593|     70|        }
 5594|  9.09k|        m_next_arg_id = -1;
 5595|  9.09k|        do_check_arg_id(id);
 5596|  9.09k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|   136k|        {
 6955|   136k|            arg_id = handler.on_arg_id();
 6956|   136k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|   289k|    {
 5262|   289k|        return m_type;
 5263|   289k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|   140k|    {
 5571|   140k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   140k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|   285k|    {
 5560|   285k|        return m_format.data();
 5561|   285k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7130|   144k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|   144k|    {
 7132|   144k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|   144k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6867|   144k|{
 6868|   144k|    auto do_presentation = [&]() -> const CharT* {
 6869|   144k|        if (*begin == CharT{'['}) {
 6870|   144k|            auto set = parse_presentation_set(begin, end, handler);
 6871|   144k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|   144k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|   144k|                return begin;
 6876|   144k|            }
 6877|   144k|            handler.on_character_set_string(set);
 6878|   144k|            return begin;
 6879|   144k|        }
 6880|   144k|        if (*begin == CharT{'/'}) {
 6881|   144k|            return parse_presentation_regex(begin, end, handler);
 6882|   144k|        }
 6883|   144k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   144k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|   144k|            handler.on_error("Invalid type specifier in format string");
 6886|   144k|            return begin;
 6887|   144k|        }
 6888|   144k|        handler.on_type(type);
 6889|   144k|        return begin;
 6890|   144k|    };
 6891|       |
 6892|   144k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 143k, False: 1.08k]
  |  Branch (6892:28): [True: 2.51k, False: 141k]
  ------------------
 6893|   144k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 914, False: 1.59k]
  |  Branch (6893:36): [True: 862, False: 52]
  ------------------
 6894|    862|        return do_presentation();
 6895|    862|    }
 6896|       |
 6897|   144k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|   144k|    begin = parse_align(begin, end, handler);
 6903|   144k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 143k]
  |  |  ------------------
  ------------------
 6904|    126|        handler.on_error("Unexpected end of format string");
 6905|    126|        return begin;
 6906|    126|    }
 6907|       |
 6908|   143k|    begin = parse_width(begin, end, handler);
 6909|   143k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 143k]
  |  |  ------------------
  ------------------
 6910|    102|        handler.on_error("Unexpected end of format string");
 6911|    102|        return begin;
 6912|    102|    }
 6913|       |
 6914|   143k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 12.7k, False: 131k]
  ------------------
 6915|  12.7k|        ++begin;
 6916|  12.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 12.6k]
  |  |  ------------------
  ------------------
 6917|     40|            handler.on_error("Unexpected end of format string");
 6918|     40|            return begin;
 6919|     40|        }
 6920|  12.6k|        begin = parse_precision(begin, end, handler);
 6921|  12.6k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 12.5k]
  |  |  ------------------
  ------------------
 6922|    114|            handler.on_error("Unexpected end of format string");
 6923|    114|            return begin;
 6924|    114|        }
 6925|  12.6k|    }
 6926|       |
 6927|   143k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 932, False: 142k]
  ------------------
 6928|    932|        handler.on_localized();
 6929|    932|        ++begin;
 6930|    932|    }
 6931|   143k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 143k]
  |  |  ------------------
  ------------------
 6932|     52|        handler.on_error("Unexpected end of format string");
 6933|     52|        return begin;
 6934|     52|    }
 6935|       |
 6936|   143k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 143k, False: 0]
  |  Branch (6936:25): [True: 138k, False: 5.05k]
  ------------------
 6937|   138k|        do_presentation();
 6938|   138k|    }
 6939|   143k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.12k, False: 141k]
  |  |  ------------------
  ------------------
 6940|  2.12k|        handler.on_error("Unexpected end of format string");
 6941|  2.12k|        return begin;
 6942|  2.12k|    }
 6943|       |
 6944|   141k|    return begin;
 6945|   143k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6516|  2.51k|{
 6517|  2.51k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6517:13): [True: 860, False: 1.65k]
  |  Branch (6517:33): [True: 808, False: 52]
  ------------------
 6518|  2.51k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6518:13): [True: 340, False: 1.36k]
  |  Branch (6518:33): [True: 106, False: 234]
  ------------------
 6519|  2.51k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6868|   139k|    auto do_presentation = [&]() -> const CharT* {
 6869|   139k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 17.3k, False: 122k]
  ------------------
 6870|  17.3k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  17.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 816, False: 16.4k]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|    816|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|    816|                return begin;
 6876|    816|            }
 6877|  16.4k|            handler.on_character_set_string(set);
 6878|  16.4k|            return begin;
 6879|  17.3k|        }
 6880|   122k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 116k, False: 5.80k]
  ------------------
 6881|   116k|            return parse_presentation_regex(begin, end, handler);
 6882|   116k|        }
 6883|  5.80k|        presentation_type type = parse_presentation_type(*begin++);
 6884|  5.80k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  5.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.08k, False: 4.72k]
  |  |  ------------------
  ------------------
 6885|  1.08k|            handler.on_error("Invalid type specifier in format string");
 6886|  1.08k|            return begin;
 6887|  1.08k|        }
 6888|  4.72k|        handler.on_type(type);
 6889|  4.72k|        return begin;
 6890|  5.80k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6706|  17.3k|{
 6707|  17.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  17.3k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  17.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  17.3k|    auto start = begin;
 6711|  17.3k|    ++begin;
 6712|       |
 6713|  17.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 17.2k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|     42|        return {};
 6718|     42|    }
 6719|  17.2k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 2.17k, False: 15.0k]
  ------------------
 6720|  2.17k|        handler.on_charset_inverted();
 6721|  2.17k|        ++begin;
 6722|  2.17k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.13k]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|     34|            return {};
 6727|     34|        }
 6728|  2.13k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 52, False: 2.08k]
  ------------------
 6729|     52|            handler.on_charset_single(char32_t{']'});
 6730|     52|            ++begin;
 6731|     52|        }
 6732|  2.13k|    }
 6733|  15.0k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 34, False: 15.0k]
  ------------------
 6734|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|     34|    }
 6736|       |
 6737|  3.15M|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 3.15M, False: 484]
  ------------------
 6738|  3.15M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  3.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 222, False: 3.15M]
  |  |  ------------------
  ------------------
 6739|    222|            break;
 6740|    222|        }
 6741|       |
 6742|  3.15M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 16.4k, False: 3.13M]
  ------------------
 6743|  16.4k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  16.4k|        }
 6745|       |
 6746|  3.13M|        parse_presentation_set_literal(begin, end, handler);
 6747|  3.13M|    }
 6748|       |
 6749|    706|    SCN_UNLIKELY_ATTR
 6750|    706|    handler.on_error("Invalid [character set] specifier in format string");
 6751|    706|    return {};
 6752|  17.1k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6670|  3.13M|{
 6671|  3.13M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  3.13M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  3.13M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  3.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100, False: 3.13M]
  |  |  ------------------
  ------------------
 6675|    100|        return;
 6676|    100|    }
 6677|       |
 6678|  3.13M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 3.13M, False: 188]
  |  Branch (6678:25): [True: 17.0k, False: 3.11M]
  |  Branch (6678:49): [True: 17.0k, False: 34]
  ------------------
 6679|  3.13M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 16.4k, False: 556]
  ------------------
 6680|  16.4k|        ++begin;
 6681|       |
 6682|  16.4k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  16.4k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 16.3k]
  |  |  ------------------
  ------------------
 6684|     70|            return;
 6685|     70|        }
 6686|       |
 6687|  16.3k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 16.3k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|     34|            return;
 6692|     34|        }
 6693|       |
 6694|  16.3k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  16.3k|        return;
 6696|  16.3k|    }
 6697|       |
 6698|  3.11M|    handler.on_charset_single(cp_first);
 6699|  3.11M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6646|  3.15M|{
 6647|  3.15M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  3.15M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  3.15M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  6.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 3.15M]
  |  |  |  Branch (859:45): [True: 70, False: 3.15M]
  |  |  |  Branch (859:45): [True: 26, False: 3.15M]
  |  |  ------------------
  ------------------
 6651|     96|        handler.on_error("Invalid encoding in format string");
 6652|     96|        return invalid_code_point;
 6653|     96|    }
 6654|       |
 6655|  3.15M|    const auto cp =
 6656|  3.15M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  3.15M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  3.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 3.15M]
  |  |  ------------------
  ------------------
 6658|     74|        handler.on_error("Invalid encoding in format string");
 6659|     74|        return invalid_code_point;
 6660|     74|    }
 6661|       |
 6662|  3.15M|    begin += len;
 6663|  3.15M|    return cp;
 6664|  3.15M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6355|  16.4k|    {
 6356|  16.4k|        m_specs.charset_string_data = fmt.data();
 6357|  16.4k|        m_specs.charset_string_size = fmt.size();
 6358|  16.4k|        on_type(presentation_type::string_set);
 6359|  16.4k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6758|   116k|{
 6759|   116k|#if !SCN_DISABLE_REGEX
 6760|   116k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   116k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   116k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6761|   116k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|   116k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   116k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6762|       |
 6763|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 6764|       |                  std::is_same_v<CharT, wchar_t>) {
 6765|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 6766|       |        return begin;
 6767|       |    }
 6768|       |
 6769|   116k|    auto start = begin;
 6770|   116k|    ++begin;
 6771|       |
 6772|   116k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 116k]
  |  |  ------------------
  ------------------
 6773|     34|        handler.on_error("Unexpected end of regex in format string");
 6774|     34|        return begin;
 6775|     34|    }
 6776|       |
 6777|   116k|    handler.on_type(presentation_type::regex);
 6778|  41.2M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6778:12): [True: 41.2M, False: 272]
  ------------------
 6779|  41.2M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6779:13): [True: 259k, False: 40.9M]
  ------------------
 6780|   259k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6780:17): [True: 115k, False: 143k]
  ------------------
 6781|   115k|                break;
 6782|   115k|            }
 6783|   143k|            else {
 6784|   143k|                handler.on_type(presentation_type::regex_escaped);
 6785|   143k|            }
 6786|   259k|        }
 6787|  41.2M|    }
 6788|   116k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 272, False: 115k]
  |  |  ------------------
  ------------------
 6789|    272|        handler.on_error("Unexpected end of regex in format string");
 6790|    272|        return begin;
 6791|    272|    }
 6792|       |
 6793|   115k|    auto regex_end = begin;
 6794|   115k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6795|   115k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 115k]
  |  |  ------------------
  ------------------
 6796|     34|        handler.on_error("Invalid (empty) regex in format string");
 6797|     34|        return begin;
 6798|     34|    }
 6799|   115k|    handler.on_regex_pattern(regex_pattern);
 6800|   115k|    ++begin;
 6801|       |
 6802|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 115k]
  |  |  ------------------
  ------------------
 6803|     34|        handler.on_error("Unexpected end of regex in format string");
 6804|     34|        return begin;
 6805|     34|    }
 6806|       |
 6807|   115k|    regex_flags flags{regex_flags::none};
 6808|   115k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6809|   115k|        {{'m', regex_flags::multiline},
 6810|   115k|         {'s', regex_flags::singleline},
 6811|   115k|         {'i', regex_flags::nocase},
 6812|   115k|         {'n', regex_flags::nocapture}}};
 6813|   140k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6813:12): [True: 140k, False: 58]
  ------------------
 6814|   140k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6814:13): [True: 115k, False: 25.2k]
  ------------------
 6815|   115k|            break;
 6816|   115k|        }
 6817|  25.2k|        bool found_flag = false;
 6818|  70.5k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6818:24): [True: 70.5k, False: 196]
  ------------------
 6819|  70.5k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6819:17): [True: 45.4k, False: 25.0k]
  ------------------
 6820|  45.4k|                continue;
 6821|  45.4k|            }
 6822|  25.0k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6822:17): [True: 34, False: 25.0k]
  ------------------
 6823|     34|                handler.on_error("Flag set multiple times in regex");
 6824|     34|                return begin;
 6825|     34|            }
 6826|  25.0k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6827|  25.0k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6827:17): [True: 48, False: 24.9k]
  ------------------
 6828|       |                // clang-format off
 6829|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6830|       |                // clang-format on
 6831|     48|            }
 6832|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6833|       |            if (*begin == CharT{'m'}) {
 6834|       |                // clang-format off
 6835|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6836|       |                // clang-format on
 6837|       |            }
 6838|       |#endif
 6839|  25.0k|#endif
 6840|  25.0k|            flags |= flag.second;
 6841|  25.0k|            found_flag = true;
 6842|  25.0k|            break;
 6843|  25.0k|        }
 6844|  25.2k|        if (!found_flag) {
  ------------------
  |  Branch (6844:13): [True: 196, False: 25.0k]
  ------------------
 6845|    196|            handler.on_error("Invalid flag in regex");
 6846|    196|            return begin;
 6847|    196|        }
 6848|  25.2k|    }
 6849|   115k|    handler.on_regex_flags(flags);
 6850|       |
 6851|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 115k]
  |  |  ------------------
  ------------------
 6852|     58|        handler.on_error("Unexpected end of regex in format string");
 6853|     58|        return begin;
 6854|     58|    }
 6855|       |
 6856|   115k|    return begin;
 6857|       |#else
 6858|       |    handler.on_error("Regular expression support is disabled");
 6859|       |    return {};
 6860|       |#endif
 6861|   115k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6363|   115k|    {
 6364|   115k|        m_specs.charset_string_data = pattern.data();
 6365|   115k|        m_specs.charset_string_size = pattern.size();
 6366|   115k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6464|  5.80k|{
 6465|  5.80k|    switch (type) {
 6466|    106|        case 'b':
  ------------------
  |  Branch (6466:9): [True: 106, False: 5.70k]
  ------------------
 6467|    158|        case 'B':
  ------------------
  |  Branch (6467:9): [True: 52, False: 5.75k]
  ------------------
 6468|    158|            return presentation_type::int_binary;
 6469|    108|        case 'd':
  ------------------
  |  Branch (6469:9): [True: 108, False: 5.70k]
  ------------------
 6470|    108|            return presentation_type::int_decimal;
 6471|    178|        case 'i':
  ------------------
  |  Branch (6471:9): [True: 178, False: 5.63k]
  ------------------
 6472|    178|            return presentation_type::int_generic;
 6473|     70|        case 'u':
  ------------------
  |  Branch (6473:9): [True: 70, False: 5.73k]
  ------------------
 6474|     70|            return presentation_type::int_unsigned_decimal;
 6475|    484|        case 'o':
  ------------------
  |  Branch (6475:9): [True: 484, False: 5.32k]
  ------------------
 6476|    484|            return presentation_type::int_octal;
 6477|    116|        case 'x':
  ------------------
  |  Branch (6477:9): [True: 116, False: 5.69k]
  ------------------
 6478|    168|        case 'X':
  ------------------
  |  Branch (6478:9): [True: 52, False: 5.75k]
  ------------------
 6479|    168|            return presentation_type::int_hex;
 6480|     34|        case 'r':
  ------------------
  |  Branch (6480:9): [True: 34, False: 5.77k]
  ------------------
 6481|     68|        case 'R':
  ------------------
  |  Branch (6481:9): [True: 34, False: 5.77k]
  ------------------
 6482|     68|            return presentation_type::int_arbitrary_base;
 6483|    106|        case 'a':
  ------------------
  |  Branch (6483:9): [True: 106, False: 5.70k]
  ------------------
 6484|    194|        case 'A':
  ------------------
  |  Branch (6484:9): [True: 88, False: 5.72k]
  ------------------
 6485|    194|            return presentation_type::float_hex;
 6486|     70|        case 'e':
  ------------------
  |  Branch (6486:9): [True: 70, False: 5.73k]
  ------------------
 6487|    140|        case 'E':
  ------------------
  |  Branch (6487:9): [True: 70, False: 5.73k]
  ------------------
 6488|    140|            return presentation_type::float_scientific;
 6489|    232|        case 'f':
  ------------------
  |  Branch (6489:9): [True: 232, False: 5.57k]
  ------------------
 6490|    338|        case 'F':
  ------------------
  |  Branch (6490:9): [True: 106, False: 5.70k]
  ------------------
 6491|    338|            return presentation_type::float_fixed;
 6492|    150|        case 'g':
  ------------------
  |  Branch (6492:9): [True: 150, False: 5.65k]
  ------------------
 6493|    208|        case 'G':
  ------------------
  |  Branch (6493:9): [True: 58, False: 5.75k]
  ------------------
 6494|    208|            return presentation_type::float_general;
 6495|  2.15k|        case 's':
  ------------------
  |  Branch (6495:9): [True: 2.15k, False: 3.65k]
  ------------------
 6496|  2.15k|            return presentation_type::string;
 6497|    340|        case 'c':
  ------------------
  |  Branch (6497:9): [True: 340, False: 5.46k]
  ------------------
 6498|    340|            return presentation_type::character;
 6499|     34|        case '?':
  ------------------
  |  Branch (6499:9): [True: 34, False: 5.77k]
  ------------------
 6500|     34|            return presentation_type::escaped_character;
 6501|     78|        case 'p':
  ------------------
  |  Branch (6501:9): [True: 78, False: 5.73k]
  ------------------
 6502|     78|            return presentation_type::pointer;
 6503|      0|        case '[':
  ------------------
  |  Branch (6503:9): [True: 0, False: 5.80k]
  ------------------
 6504|      0|        case '/':
  ------------------
  |  Branch (6504:9): [True: 0, False: 5.80k]
  ------------------
 6505|       |            // Should be handled by parse_presentation_set and
 6506|       |            // parse_presentation_regex
 6507|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6508|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6509|  1.08k|        default:
  ------------------
  |  Branch (6509:9): [True: 1.08k, False: 4.72k]
  ------------------
 6510|  1.08k|            return presentation_type::none;
 6511|  5.80k|    }
 6512|  5.80k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6541|   144k|{
 6542|   144k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|   144k|    auto check_align = [](wchar_t ch) {
 6545|   144k|        switch (ch) {
 6546|   144k|            case L'<':
 6547|   144k|                return align_type::left;
 6548|   144k|            case L'>':
 6549|   144k|                return align_type::right;
 6550|   144k|            case L'^':
 6551|   144k|                return align_type::center;
 6552|   144k|            default:
 6553|   144k|                return align_type::none;
 6554|   144k|        }
 6555|   144k|    };
 6556|       |
 6557|   144k|    auto potential_fill_len = code_point_length(begin, end);
 6558|   144k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 143k]
  |  |  |  Branch (859:45): [True: 38, False: 143k]
  |  |  |  Branch (859:45): [True: 4, False: 143k]
  |  |  ------------------
  ------------------
 6559|   144k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|     42|        handler.on_error("Invalid encoding in fill character");
 6561|     42|        return begin;
 6562|     42|    }
 6563|       |
 6564|   143k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|   143k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|   143k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|   143k|    const auto begin_before_fill = begin;
 6569|   143k|    begin += potential_fill_len;
 6570|       |
 6571|   143k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 1.04k, False: 142k]
  ------------------
 6572|  1.04k|        return begin_before_fill;
 6573|  1.04k|    }
 6574|       |
 6575|   142k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|   142k|    const auto begin_after_fill = begin;
 6577|   142k|    ++begin;
 6578|       |
 6579|   142k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 141k, False: 1.43k]
  ------------------
 6580|   141k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 141k]
  |  |  ------------------
  ------------------
 6581|     60|            handler.on_error("Invalid fill character '{' in format string");
 6582|     60|            return begin;
 6583|     60|        }
 6584|   141k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 13.5k, False: 127k]
  ------------------
 6585|  13.5k|            return begin_before_fill;
 6586|  13.5k|        }
 6587|   141k|    }
 6588|       |
 6589|   129k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 118k, False: 10.7k]
  ------------------
 6590|   118k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 7.68k, False: 110k]
  ------------------
 6591|  7.68k|            handler.on_align(potential_align_on_fill);
 6592|  7.68k|            return begin_after_fill;
 6593|  7.68k|        }
 6594|   110k|        return begin_before_fill;
 6595|   118k|    }
 6596|       |
 6597|  10.7k|    handler.on_fill(potential_fill);
 6598|  10.7k|    handler.on_align(potential_align_after_fill);
 6599|  10.7k|    return begin;
 6600|   129k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6523|   144k|{
 6524|   144k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6525|       |    if constexpr (sizeof(CharT) != 1) {
 6526|       |        return 1;
 6527|       |    }
 6528|   144k|    else {
 6529|   144k|        const auto lengths =
 6530|   144k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6531|   144k|            "\3\4";
 6532|   144k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6533|   144k|        return len;
 6534|   144k|    }
 6535|   144k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6544|   286k|    auto check_align = [](wchar_t ch) {
 6545|   286k|        switch (ch) {
 6546|  1.52k|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 1.52k, False: 285k]
  ------------------
 6547|  1.52k|                return align_type::left;
 6548|  1.53k|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 1.53k, False: 285k]
  ------------------
 6549|  1.53k|                return align_type::right;
 6550|  16.6k|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 16.6k, False: 270k]
  ------------------
 6551|  16.6k|                return align_type::center;
 6552|   267k|            default:
  ------------------
  |  Branch (6552:13): [True: 267k, False: 19.6k]
  ------------------
 6553|   267k|                return align_type::none;
 6554|   286k|        }
 6555|   286k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6277|  10.7k|    {
 6278|  10.7k|        m_specs.fill = fill;
 6279|  10.7k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6158|  10.7k|    {
 6159|  10.7k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6160|  10.7k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6161|  10.7k|        if constexpr (sizeof(CharT) == 1) {
 6162|  23.8k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6162:32): [True: 13.0k, False: 10.7k]
  ------------------
 6163|  13.0k|                SCN_GCC_PUSH
 6164|  13.0k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6165|  13.0k|                m_data[i] = s[i];
 6166|  13.0k|                SCN_GCC_POP
 6167|  13.0k|            }
 6168|  10.7k|            m_size = static_cast<unsigned char>(s.size());
 6169|       |        }
 6170|       |        else if constexpr (sizeof(CharT) == 2) {
 6171|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6172|       |            m_data[1] =
 6173|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6174|       |            if (s.size() == 1) {
 6175|       |                return;
 6176|       |            }
 6177|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6178|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6179|       |        }
 6180|       |        else {
 6181|       |            const auto front = static_cast<unsigned>(s.front());
 6182|       |            m_data[0] = static_cast<char>(front);
 6183|       |            m_data[1] = static_cast<char>(front >> 8);
 6184|       |            m_data[2] = static_cast<char>(front >> 16);
 6185|       |            m_data[3] = static_cast<char>(front >> 24);
 6186|       |        }
 6187|  10.7k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6606|   143k|{
 6607|   143k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|   143k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 21.6k, False: 122k]
  |  Branch (6609:33): [True: 5.40k, False: 16.2k]
  ------------------
 6610|  5.40k|        int width = parse_simple_int(begin, end);
 6611|  5.40k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  5.40k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.37k, False: 34]
  |  |  ------------------
  ------------------
 6612|  5.37k|            handler.on_width(width);
 6613|  5.37k|        }
 6614|     34|        else {
 6615|     34|            handler.on_error("Invalid field width");
 6616|     34|            return begin;
 6617|     34|        }
 6618|  5.40k|    }
 6619|   143k|    return begin;
 6620|   143k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6626|  12.6k|{
 6627|  12.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6628|       |
 6629|  12.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6629:9): [True: 12.5k, False: 160]
  |  Branch (6629:33): [True: 12.4k, False: 52]
  ------------------
 6630|  12.4k|        int prec = parse_simple_int(begin, end);
 6631|  12.4k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  12.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 12.4k, False: 48]
  |  |  ------------------
  ------------------
 6632|  12.4k|            handler.on_precision(prec);
 6633|  12.4k|        }
 6634|     48|        else {
 6635|     48|            handler.on_error("Invalid field precision");
 6636|     48|            return begin;
 6637|     48|        }
 6638|  12.4k|    }
 6639|  12.6k|    return begin;
 6640|  12.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7136|    932|    {
 7137|    932|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|    932|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 834, False: 98]
  ------------------
 7139|    932|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 736, False: 98]
  ------------------
 7140|    932|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 638, False: 98]
  ------------------
 7141|    932|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 540, False: 98]
  ------------------
 7142|    540|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|    540|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|    540|        }
 7147|       |
 7148|    392|        Handler::on_localized();
 7149|    392|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   140k|{
 8427|   140k|#define SCN_VISIT(Type)                                         \
 8428|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   140k|    }                                                           \
 8431|   140k|    else {                                                      \
 8432|   140k|        return vis(monostate_val);                              \
 8433|   140k|    }
 8434|       |
 8435|   140k|    monostate monostate_val{};
 8436|       |
 8437|   140k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 140k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 140k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|  15.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 15.6k, False: 124k]
  ------------------
 8443|  15.6k|            SCN_VISIT(int);
  ------------------
  |  | 8428|  15.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  15.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  15.6k|    }                                                           \
  |  | 8431|  15.6k|    else {                                                      \
  |  | 8432|  15.6k|        return vis(monostate_val);                              \
  |  | 8433|  15.6k|    }
  ------------------
 8444|  15.6k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 140k]
  ------------------
 8445|  15.6k|            SCN_VISIT(long);
  ------------------
  |  | 8428|  15.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  15.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  15.6k|    }                                                           \
  |  | 8431|  15.6k|    else {                                                      \
  |  | 8432|  15.6k|        return vis(monostate_val);                              \
  |  | 8433|  15.6k|    }
  ------------------
 8446|  15.6k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 140k]
  ------------------
 8447|  15.6k|            SCN_VISIT(long long);
  ------------------
  |  | 8428|  15.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  15.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  15.6k|    }                                                           \
  |  | 8431|  15.6k|    else {                                                      \
  |  | 8432|  15.6k|        return vis(monostate_val);                              \
  |  | 8433|  15.6k|    }
  ------------------
 8448|  15.6k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 140k]
  ------------------
 8449|  15.6k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|  15.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  15.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  15.6k|    }                                                           \
  |  | 8431|  15.6k|    else {                                                      \
  |  | 8432|  15.6k|        return vis(monostate_val);                              \
  |  | 8433|  15.6k|    }
  ------------------
 8450|  15.6k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 140k]
  ------------------
 8451|  15.6k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|  15.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  15.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  15.6k|    }                                                           \
  |  | 8431|  15.6k|    else {                                                      \
  |  | 8432|  15.6k|        return vis(monostate_val);                              \
  |  | 8433|  15.6k|    }
  ------------------
 8452|  31.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 15.6k, False: 124k]
  ------------------
 8453|  31.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|  31.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  31.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  31.3k|    }                                                           \
  |  | 8431|  31.3k|    else {                                                      \
  |  | 8432|  31.3k|        return vis(monostate_val);                              \
  |  | 8433|  31.3k|    }
  ------------------
 8454|  31.3k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 140k]
  ------------------
 8455|  31.3k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|  31.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  31.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  31.3k|    }                                                           \
  |  | 8431|  31.3k|    else {                                                      \
  |  | 8432|  31.3k|        return vis(monostate_val);                              \
  |  | 8433|  31.3k|    }
  ------------------
 8456|  31.3k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 140k]
  ------------------
 8457|  31.3k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|  31.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  31.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  31.3k|    }                                                           \
  |  | 8431|  31.3k|    else {                                                      \
  |  | 8432|  31.3k|        return vis(monostate_val);                              \
  |  | 8433|  31.3k|    }
  ------------------
 8458|  46.9k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 15.5k, False: 124k]
  ------------------
 8459|  46.9k|            SCN_VISIT(void*);
  ------------------
  |  | 8428|  46.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  46.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  46.9k|    }                                                           \
  |  | 8431|  46.9k|    else {                                                      \
  |  | 8432|  46.9k|        return vis(monostate_val);                              \
  |  | 8433|  46.9k|    }
  ------------------
 8460|  62.5k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 15.6k, False: 124k]
  ------------------
 8461|  62.5k|            SCN_VISIT(bool);
  ------------------
  |  | 8428|  62.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  62.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  62.5k|    }                                                           \
  |  | 8431|  62.5k|    else {                                                      \
  |  | 8432|  62.5k|        return vis(monostate_val);                              \
  |  | 8433|  62.5k|    }
  ------------------
 8462|  78.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 15.5k, False: 124k]
  ------------------
 8463|  78.1k|            SCN_VISIT(char);
  ------------------
  |  | 8428|  78.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  78.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  78.1k|    }                                                           \
  |  | 8431|  78.1k|    else {                                                      \
  |  | 8432|  78.1k|        return vis(monostate_val);                              \
  |  | 8433|  78.1k|    }
  ------------------
 8464|  78.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 140k]
  ------------------
 8465|  78.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|  78.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  78.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  78.1k|    }                                                           \
  |  | 8431|  78.1k|    else {                                                      \
  |  | 8432|  78.1k|        return vis(monostate_val);                              \
  |  | 8433|  78.1k|    }
  ------------------
 8466|  78.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 140k]
  ------------------
 8467|  78.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|  78.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  78.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  78.1k|    }                                                           \
  |  | 8431|  78.1k|    else {                                                      \
  |  | 8432|  78.1k|        return vis(monostate_val);                              \
  |  | 8433|  78.1k|    }
  ------------------
 8468|  78.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 140k]
  ------------------
 8469|  78.1k|            SCN_VISIT(float);
  ------------------
  |  | 8428|  78.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  78.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  78.1k|    }                                                           \
  |  | 8431|  78.1k|    else {                                                      \
  |  | 8432|  78.1k|        return vis(monostate_val);                              \
  |  | 8433|  78.1k|    }
  ------------------
 8470|  93.8k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 15.6k, False: 124k]
  ------------------
 8471|  93.8k|            SCN_VISIT(double);
  ------------------
  |  | 8428|  93.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  93.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  93.8k|    }                                                           \
  |  | 8431|  93.8k|    else {                                                      \
  |  | 8432|  93.8k|        return vis(monostate_val);                              \
  |  | 8433|  93.8k|    }
  ------------------
 8472|  93.8k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 140k]
  ------------------
 8473|  93.8k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|  93.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  93.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  93.8k|    }                                                           \
  |  | 8431|  93.8k|    else {                                                      \
  |  | 8432|  93.8k|        return vis(monostate_val);                              \
  |  | 8433|  93.8k|    }
  ------------------
 8474|   109k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 15.5k, False: 124k]
  ------------------
 8475|   109k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   109k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   109k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   109k|    }                                                           \
  |  | 8431|   109k|    else {                                                      \
  |  | 8432|   109k|        return vis(monostate_val);                              \
  |  | 8433|   109k|    }
  ------------------
 8476|   124k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 15.5k, False: 124k]
  ------------------
 8477|   124k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   124k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   124k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   124k|    }                                                           \
  |  | 8431|   124k|    else {                                                      \
  |  | 8432|   124k|        return vis(monostate_val);                              \
  |  | 8433|   124k|    }
  ------------------
 8478|   124k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 140k]
  ------------------
 8479|   124k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   124k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   124k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   124k|    }                                                           \
  |  | 8431|   124k|    else {                                                      \
  |  | 8432|   124k|        return vis(monostate_val);                              \
  |  | 8433|   124k|    }
  ------------------
 8480|   140k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 15.5k, False: 124k]
  ------------------
 8481|   140k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   140k|    }                                                           \
  |  | 8431|   140k|    else {                                                      \
  |  | 8432|   140k|        return vis(monostate_val);                              \
  |  | 8433|   140k|    }
  ------------------
 8482|   140k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 140k]
  ------------------
 8483|   140k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   140k|    }                                                           \
  |  | 8431|   140k|    else {                                                      \
  |  | 8432|   140k|        return vis(monostate_val);                              \
  |  | 8433|   140k|    }
  ------------------
 8484|   140k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 140k]
  ------------------
 8485|   140k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   140k|    }                                                           \
  |  | 8431|   140k|    else {                                                      \
  |  | 8432|   140k|        return vis(monostate_val);                              \
  |  | 8433|   140k|    }
  ------------------
 8486|       |
 8487|   140k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 140k]
  ------------------
 8488|   140k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   140k|            return vis(
 8490|   140k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 140k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 140k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   140k|            SCN_CLANG_POP
 8505|   140k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3325|  12.2k|    {
 3326|  12.2k|        return m_iterator;
 3327|  12.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1427|  2.23k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.23k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.23k|    {
 1430|  2.23k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  2.23k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.23k|    {
  437|  2.23k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.46k|    {
 1177|  2.46k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3329|  7.09k|    {
 3330|  7.09k|        return m_sentinel;
 3331|  7.09k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSM_IXsr3stdE16is_convertible_vISO_SI_EEvE4typeELSS_0EEEONS0_10unexpectedISN_EE:
 1473|    226|        : base(unexpect, std::move(e.error())),
 1474|    226|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    226|    {
 1476|    226|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  444|    226|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    226|          m_has_value(false)
  446|    226|    {
  447|    226|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3310|  5.72k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.72k|    static_cast<    \
  |  |  929|  5.72k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.72k|    static_cast<    \
  |  |  929|  5.72k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  5.72k|    {
 3312|  5.72k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    278|    {
 1598|    278|        return has_value();
 1599|    278|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.87k|    {
  485|  4.87k|        return m_has_value;
  486|  4.87k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1652|    226|    {
 1653|    226|        return value();
 1654|    226|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  2.23k|    {
 1627|  2.23k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.23k|        return this->get_value();
 1629|  2.23k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.23k|    {
  451|  2.23k|        return m_value;
  452|  2.23k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  2.18k|    {
 1837|  2.18k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.18k|                                            std::forward<F>(f));
 1839|  2.18k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1322|  2.18k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.18k|    else {
 1333|  2.18k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.18k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.18k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.01k, False: 174]
  |  |  ------------------
  ------------------
 1335|  2.18k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.18k|                   : result(unexpect,
 1337|    174|                            trivial_invoke(std::forward<F>(f),
 1338|    174|                                           std::forward<Exp>(exp).error()));
 1339|  2.18k|    }
 1340|  2.18k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  2.01k|    {
 1663|  2.01k|        return std::move(value());
 1664|  2.01k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  2.01k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.01k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.01k|    {
 1430|  2.01k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  2.01k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.01k|    {
  437|  2.01k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.18k|    {
 1177|  2.18k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    174|    {
 1614|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    174|        return std::move(this->get_unexpected().error());
 1616|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1483|    174|        : base(unexpect, std::forward<Args>(args)...),
 1484|    174|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|    174|    {
 1486|    174|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  444|    174|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    174|          m_has_value(false)
  446|    174|    {
  447|    174|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  2.18k|    {
 1598|  2.18k|        return has_value();
 1599|  2.18k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.36k|    {
  485|  4.36k|        return m_has_value;
  486|  4.36k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    174|    {
 1604|    174|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    174|        return this->get_unexpected().error();
 1606|    174|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    174|    {
  468|    174|        return m_unexpected;
  469|    174|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  2.01k|    {
 1663|  2.01k|        return std::move(value());
 1664|  2.01k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  2.01k|    {
 1627|  2.01k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.01k|        return this->get_value();
 1629|  2.01k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.01k|    {
  451|  2.01k|        return m_value;
  452|  2.01k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|   430k|    {
 5476|   430k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 430k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   430k|        return static_cast<std::size_t>(m_desc &
 5481|   430k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   430k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|   492k|    {
 5501|   492k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   492k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  62.1k|    {
 5444|  62.1k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 62.1k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  62.1k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 62.0k]
  |  |  ------------------
  ------------------
 5452|     68|            return {};
 5453|     68|        }
 5454|       |
 5455|  62.0k|        const auto t = type(id);
 5456|  62.0k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  62.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.40k, False: 60.6k]
  |  |  ------------------
  ------------------
 5457|  1.40k|            return {};
 5458|  1.40k|        }
 5459|       |
 5460|  60.6k|        basic_scan_arg<Context> arg;
 5461|  60.6k|        arg.m_type = t;
 5462|  60.6k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 60.6k, False: 0]
  ------------------
 5463|  60.6k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  60.6k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  60.6k|        return arg;
 5469|  62.0k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  62.1k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  62.0k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  62.0k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  62.0k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  62.0k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  62.0k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  60.6k|    {
 5505|  60.6k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  60.6k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|   120k|    {
 5257|   120k|        return m_type != detail::arg_type::none_type;
 5258|   120k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  5.65k|{
 8427|  5.65k|#define SCN_VISIT(Type)                                         \
 8428|  5.65k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  5.65k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  5.65k|    }                                                           \
 8431|  5.65k|    else {                                                      \
 8432|  5.65k|        return vis(monostate_val);                              \
 8433|  5.65k|    }
 8434|       |
 8435|  5.65k|    monostate monostate_val{};
 8436|       |
 8437|  5.65k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.65k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.65k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|    628|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 628, False: 5.02k]
  ------------------
 8443|    628|            SCN_VISIT(int);
  ------------------
  |  | 8428|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    628|    }                                                           \
  |  | 8431|    628|    else {                                                      \
  |  | 8432|    628|        return vis(monostate_val);                              \
  |  | 8433|    628|    }
  ------------------
 8444|    628|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.65k]
  ------------------
 8445|    628|            SCN_VISIT(long);
  ------------------
  |  | 8428|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    628|    }                                                           \
  |  | 8431|    628|    else {                                                      \
  |  | 8432|    628|        return vis(monostate_val);                              \
  |  | 8433|    628|    }
  ------------------
 8446|    628|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.65k]
  ------------------
 8447|    628|            SCN_VISIT(long long);
  ------------------
  |  | 8428|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    628|    }                                                           \
  |  | 8431|    628|    else {                                                      \
  |  | 8432|    628|        return vis(monostate_val);                              \
  |  | 8433|    628|    }
  ------------------
 8448|    628|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 5.65k]
  ------------------
 8449|    628|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    628|    }                                                           \
  |  | 8431|    628|    else {                                                      \
  |  | 8432|    628|        return vis(monostate_val);                              \
  |  | 8433|    628|    }
  ------------------
 8450|    628|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 5.65k]
  ------------------
 8451|    628|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|    628|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|    628|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|    628|    }                                                           \
  |  | 8431|    628|    else {                                                      \
  |  | 8432|    628|        return vis(monostate_val);                              \
  |  | 8433|    628|    }
  ------------------
 8452|  1.25k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 628, False: 5.02k]
  ------------------
 8453|  1.25k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|  1.25k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.25k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.25k|    }                                                           \
  |  | 8431|  1.25k|    else {                                                      \
  |  | 8432|  1.25k|        return vis(monostate_val);                              \
  |  | 8433|  1.25k|    }
  ------------------
 8454|  1.25k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 5.65k]
  ------------------
 8455|  1.25k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|  1.25k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.25k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.25k|    }                                                           \
  |  | 8431|  1.25k|    else {                                                      \
  |  | 8432|  1.25k|        return vis(monostate_val);                              \
  |  | 8433|  1.25k|    }
  ------------------
 8456|  1.25k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.65k]
  ------------------
 8457|  1.25k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|  1.25k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.25k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.25k|    }                                                           \
  |  | 8431|  1.25k|    else {                                                      \
  |  | 8432|  1.25k|        return vis(monostate_val);                              \
  |  | 8433|  1.25k|    }
  ------------------
 8458|  1.88k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 628, False: 5.02k]
  ------------------
 8459|  1.88k|            SCN_VISIT(void*);
  ------------------
  |  | 8428|  1.88k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.88k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.88k|    }                                                           \
  |  | 8431|  1.88k|    else {                                                      \
  |  | 8432|  1.88k|        return vis(monostate_val);                              \
  |  | 8433|  1.88k|    }
  ------------------
 8460|  2.51k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 628, False: 5.02k]
  ------------------
 8461|  2.51k|            SCN_VISIT(bool);
  ------------------
  |  | 8428|  2.51k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  2.51k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  2.51k|    }                                                           \
  |  | 8431|  2.51k|    else {                                                      \
  |  | 8432|  2.51k|        return vis(monostate_val);                              \
  |  | 8433|  2.51k|    }
  ------------------
 8462|  2.51k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 5.65k]
  ------------------
 8463|  2.51k|            SCN_VISIT(char);
  ------------------
  |  | 8428|  2.51k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  2.51k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  2.51k|    }                                                           \
  |  | 8431|  2.51k|    else {                                                      \
  |  | 8432|  2.51k|        return vis(monostate_val);                              \
  |  | 8433|  2.51k|    }
  ------------------
 8464|  3.14k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 628, False: 5.02k]
  ------------------
 8465|  3.14k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|  3.14k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.14k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.14k|    }                                                           \
  |  | 8431|  3.14k|    else {                                                      \
  |  | 8432|  3.14k|        return vis(monostate_val);                              \
  |  | 8433|  3.14k|    }
  ------------------
 8466|  3.14k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 5.65k]
  ------------------
 8467|  3.14k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|  3.14k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.14k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.14k|    }                                                           \
  |  | 8431|  3.14k|    else {                                                      \
  |  | 8432|  3.14k|        return vis(monostate_val);                              \
  |  | 8433|  3.14k|    }
  ------------------
 8468|  3.14k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 5.65k]
  ------------------
 8469|  3.14k|            SCN_VISIT(float);
  ------------------
  |  | 8428|  3.14k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.14k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.14k|    }                                                           \
  |  | 8431|  3.14k|    else {                                                      \
  |  | 8432|  3.14k|        return vis(monostate_val);                              \
  |  | 8433|  3.14k|    }
  ------------------
 8470|  3.76k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 628, False: 5.02k]
  ------------------
 8471|  3.76k|            SCN_VISIT(double);
  ------------------
  |  | 8428|  3.76k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.76k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.76k|    }                                                           \
  |  | 8431|  3.76k|    else {                                                      \
  |  | 8432|  3.76k|        return vis(monostate_val);                              \
  |  | 8433|  3.76k|    }
  ------------------
 8472|  3.76k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.65k]
  ------------------
 8473|  3.76k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|  3.76k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.76k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.76k|    }                                                           \
  |  | 8431|  3.76k|    else {                                                      \
  |  | 8432|  3.76k|        return vis(monostate_val);                              \
  |  | 8433|  3.76k|    }
  ------------------
 8474|  3.76k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 5.65k]
  ------------------
 8475|  3.76k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|  3.76k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.76k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.76k|    }                                                           \
  |  | 8431|  3.76k|    else {                                                      \
  |  | 8432|  3.76k|        return vis(monostate_val);                              \
  |  | 8433|  3.76k|    }
  ------------------
 8476|  4.39k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 628, False: 5.02k]
  ------------------
 8477|  4.39k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|  4.39k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  4.39k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  4.39k|    }                                                           \
  |  | 8431|  4.39k|    else {                                                      \
  |  | 8432|  4.39k|        return vis(monostate_val);                              \
  |  | 8433|  4.39k|    }
  ------------------
 8478|  5.02k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 628, False: 5.02k]
  ------------------
 8479|  5.02k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  5.02k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.02k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.02k|    }                                                           \
  |  | 8431|  5.02k|    else {                                                      \
  |  | 8432|  5.02k|        return vis(monostate_val);                              \
  |  | 8433|  5.02k|    }
  ------------------
 8480|  5.65k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 628, False: 5.02k]
  ------------------
 8481|  5.65k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  5.65k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.65k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.65k|    }                                                           \
  |  | 8431|  5.65k|    else {                                                      \
  |  | 8432|  5.65k|        return vis(monostate_val);                              \
  |  | 8433|  5.65k|    }
  ------------------
 8482|  5.65k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 5.65k]
  ------------------
 8483|  5.65k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  5.65k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.65k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.65k|    }                                                           \
  |  | 8431|  5.65k|    else {                                                      \
  |  | 8432|  5.65k|        return vis(monostate_val);                              \
  |  | 8433|  5.65k|    }
  ------------------
 8484|  5.65k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 5.65k]
  ------------------
 8485|  5.65k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  5.65k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.65k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.65k|    }                                                           \
  |  | 8431|  5.65k|    else {                                                      \
  |  | 8432|  5.65k|        return vis(monostate_val);                              \
  |  | 8433|  5.65k|    }
  ------------------
 8486|       |
 8487|  5.65k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 5.65k]
  ------------------
 8488|  5.65k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  5.65k|            return vis(
 8490|  5.65k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 5.65k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 5.65k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  5.65k|            SCN_CLANG_POP
 8505|  5.65k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|   430k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   430k|    {
 5555|   430k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8064|   430k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   430k|    static_cast<    \
  |  |  929|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   430k|    static_cast<    \
  |  |  929|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8065|   430k|    {
 8066|   430k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|   430k|{
 7054|   430k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|   430k|    handler.check_args_exhausted();
 7056|   430k|    return handler.get_error();
 7057|   430k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|   430k|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|   430k|    auto begin = format.data();
 7023|   430k|    auto it = begin;
 7024|   430k|    const auto end = format.data() + format.size();
 7025|       |
 7026|   893M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 893M, False: 154k]
  ------------------
 7027|   893M|        const auto ch = *it++;
 7028|   893M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 63.5k, False: 893M]
  ------------------
 7029|  63.5k|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|  63.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|  63.5k|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 58.6k, False: 4.84k]
  ------------------
 7033|  58.6k|                return;
 7034|  58.6k|            }
 7035|  63.5k|        }
 7036|   893M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 221k, False: 893M]
  ------------------
 7037|   221k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 217k, False: 4.34k]
  |  |  |  Branch (859:45): [True: 816, False: 220k]
  |  |  |  Branch (859:45): [True: 216k, False: 4.34k]
  |  |  ------------------
  ------------------
 7038|   217k|                handler.on_error("Unmatched '}' in format string");
 7039|   217k|                return;
 7040|   217k|            }
 7041|       |
 7042|  4.34k|            handler.on_literal_text(begin, it);
 7043|  4.34k|            begin = ++it;
 7044|  4.34k|        }
 7045|   893M|    }
 7046|       |
 7047|   154k|    handler.on_literal_text(begin, end);
 7048|   154k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6951|  63.5k|{
 6952|  63.5k|    struct id_adapter {
 6953|  63.5k|        constexpr void operator()()
 6954|  63.5k|        {
 6955|  63.5k|            arg_id = handler.on_arg_id();
 6956|  63.5k|        }
 6957|  63.5k|        constexpr void operator()(std::size_t id)
 6958|  63.5k|        {
 6959|  63.5k|            arg_id = handler.on_arg_id(id);
 6960|  63.5k|        }
 6961|       |
 6962|  63.5k|        constexpr void on_error(const char* msg)
 6963|  63.5k|        {
 6964|  63.5k|            SCN_UNLIKELY_ATTR
 6965|  63.5k|            handler.on_error(msg);
 6966|  63.5k|        }
 6967|       |
 6968|  63.5k|        Handler& handler;
 6969|  63.5k|        std::size_t arg_id;
 6970|  63.5k|    };
 6971|       |
 6972|  63.5k|    ++begin;
 6973|  63.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  63.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 63.4k]
  |  |  ------------------
  ------------------
 6974|     70|        handler.on_error("Unexpected end of replacement field");
 6975|     70|        return begin;
 6976|     70|    }
 6977|       |
 6978|  63.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 5.72k, False: 57.7k]
  ------------------
 6979|  5.72k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|  5.72k|    }
 6981|  57.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 294, False: 57.4k]
  ------------------
 6982|    294|        handler.on_literal_text(begin, begin + 1);
 6983|    294|    }
 6984|  57.4k|    else {
 6985|  57.4k|        auto adapter = id_adapter{handler, 0};
 6986|  57.4k|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|  57.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  57.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 57.2k]
  |  |  ------------------
  ------------------
 6989|    120|            handler.on_error("Missing '}' in format string");
 6990|    120|            return begin;
 6991|    120|        }
 6992|       |
 6993|  57.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 312, False: 56.9k]
  ------------------
 6994|    312|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|    312|        }
 6996|  56.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 56.1k, False: 870]
  ------------------
 6997|  56.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  56.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 56.0k]
  |  |  ------------------
  ------------------
 6998|     50|                handler.on_error("Unexpected end of replacement field");
 6999|     50|                return begin;
 7000|     50|            }
 7001|  56.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|  56.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 53.2k]
  |  |  |  Branch (859:45): [True: 0, False: 56.0k]
  |  |  |  Branch (859:45): [True: 2.77k, False: 53.2k]
  |  |  ------------------
  ------------------
 7003|  2.77k|                handler.on_error("Unknown format specifier");
 7004|  2.77k|                return begin;
 7005|  2.77k|            }
 7006|  56.0k|        }
 7007|    870|        else {
 7008|    870|            SCN_UNLIKELY_ATTR
 7009|    870|            handler.on_error("Missing '}' in format string");
 7010|    870|            return begin;
 7011|    870|        }
 7012|  57.2k|    }
 7013|  59.6k|    return begin + 1;
 7014|  63.4k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8048|  62.1k|    {
 8049|  62.1k|        return m_args.get(id);
 8050|  62.1k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8053|  6.03k|    {
 8054|  6.03k|        return m_args;
 8055|  6.03k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8058|  58.9k|    {
 8059|  58.9k|        return m_locale;
 8060|  58.9k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|  61.5k|    {
 5576|  61.5k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 61.5k]
  |  |  ------------------
  ------------------
 5577|     40|            on_error(
 5578|     40|                "Cannot switch from manual to automatic argument indexing");
 5579|     40|            return 0;
 5580|     40|        }
 5581|       |
 5582|  61.5k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  61.5k|        do_check_arg_id(id);
 5584|  61.5k|        return id;
 5585|  61.5k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5599|    128|    {
 5600|    128|        return detail::handle_error(
 5601|    128|            scan_error{scan_error::invalid_format_string, msg});
 5602|    128|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|  62.0k|{
 6064|  62.0k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  62.0k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  62.0k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|  57.4k|{
 6453|  57.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  57.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|  57.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 57.4k, False: 0]
  |  Branch (6454:26): [True: 1.60k, False: 55.8k]
  ------------------
 6455|  1.60k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  1.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|  1.60k|    }
 6457|       |
 6458|  55.8k|    handler();
 6459|  55.8k|    return begin;
 6460|  57.4k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6422|  1.60k|{
 6423|  1.60k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6424|       |
 6425|  1.60k|    CharT c = *begin;
 6426|  1.60k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6426:9): [True: 180, False: 1.42k]
  |  Branch (6426:27): [True: 614, False: 806]
  ------------------
 6427|    794|        handler.on_error("Invalid argument ID");
 6428|    794|        return begin;
 6429|    794|    }
 6430|       |
 6431|    806|    int idx = 0;
 6432|    806|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6432:9): [True: 450, False: 356]
  ------------------
 6433|    450|        idx = parse_simple_int(begin, end);
 6434|    450|    }
 6435|    356|    else {
 6436|    356|        ++begin;
 6437|    356|    }
 6438|       |
 6439|    806|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6439:9): [True: 120, False: 686]
  |  Branch (6439:26): [True: 374, False: 312]
  |  Branch (6439:50): [True: 76, False: 298]
  ------------------
 6440|    196|        handler.on_error("Invalid argument ID");
 6441|    196|        return begin;
 6442|    196|    }
 6443|    610|    handler(idx);
 6444|       |
 6445|    610|    return begin;
 6446|    806|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6963|    990|        {
 6964|    990|            SCN_UNLIKELY_ATTR
 6965|    990|            handler.on_error(msg);
 6966|    990|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6401|  29.3k|{
 6402|  29.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  29.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6403|  29.3k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  29.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|       |
 6405|  29.3k|    unsigned long long value = 0;
 6406|  32.8k|    do {
 6407|  32.8k|        value *= 10;
 6408|  32.8k|        value += static_cast<unsigned long long>(*begin - '0');
 6409|  32.8k|        if (value >
  ------------------
  |  Branch (6409:13): [True: 82, False: 32.7k]
  ------------------
 6410|  32.8k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6411|     82|            return -1;
 6412|     82|        }
 6413|  32.7k|        ++begin;
 6414|  32.7k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6414:14): [True: 32.4k, False: 310]
  |  Branch (6414:30): [True: 9.95k, False: 22.4k]
  |  Branch (6414:47): [True: 3.52k, False: 6.43k]
  ------------------
 6415|  29.2k|    return static_cast<int>(value);
 6416|  29.3k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6958|    610|        {
 6959|    610|            arg_id = handler.on_arg_id(id);
 6960|    610|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5588|    610|    {
 5589|    610|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    610|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88, False: 522]
  |  |  ------------------
  ------------------
 5590|     88|            on_error(
 5591|     88|                "Cannot switch from manual to automatic argument indexing");
 5592|     88|            return;
 5593|     88|        }
 5594|    522|        m_next_arg_id = -1;
 5595|    522|        do_check_arg_id(id);
 5596|    522|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|  55.8k|        {
 6955|  55.8k|            arg_id = handler.on_arg_id();
 6956|  55.8k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|   112k|    {
 5262|   112k|        return m_type;
 5263|   112k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|  52.8k|    {
 5571|  52.8k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  52.8k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|   108k|    {
 5560|   108k|        return m_format.data();
 5561|   108k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7130|  56.0k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  56.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|  56.0k|    {
 7132|  56.0k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  56.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|  56.0k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6867|  56.0k|{
 6868|  56.0k|    auto do_presentation = [&]() -> const CharT* {
 6869|  56.0k|        if (*begin == CharT{'['}) {
 6870|  56.0k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  56.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|  56.0k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|  56.0k|                return begin;
 6876|  56.0k|            }
 6877|  56.0k|            handler.on_character_set_string(set);
 6878|  56.0k|            return begin;
 6879|  56.0k|        }
 6880|  56.0k|        if (*begin == CharT{'/'}) {
 6881|  56.0k|            return parse_presentation_regex(begin, end, handler);
 6882|  56.0k|        }
 6883|  56.0k|        presentation_type type = parse_presentation_type(*begin++);
 6884|  56.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|  56.0k|            handler.on_error("Invalid type specifier in format string");
 6886|  56.0k|            return begin;
 6887|  56.0k|        }
 6888|  56.0k|        handler.on_type(type);
 6889|  56.0k|        return begin;
 6890|  56.0k|    };
 6891|       |
 6892|  56.0k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 55.0k, False: 994]
  |  Branch (6892:28): [True: 2.84k, False: 52.2k]
  ------------------
 6893|  56.0k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 320, False: 2.52k]
  |  Branch (6893:36): [True: 232, False: 88]
  ------------------
 6894|    232|        return do_presentation();
 6895|    232|    }
 6896|       |
 6897|  55.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  55.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 55.8k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|  55.8k|    begin = parse_align(begin, end, handler);
 6903|  55.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  55.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 55.7k]
  |  |  ------------------
  ------------------
 6904|    102|        handler.on_error("Unexpected end of format string");
 6905|    102|        return begin;
 6906|    102|    }
 6907|       |
 6908|  55.7k|    begin = parse_width(begin, end, handler);
 6909|  55.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 55.6k]
  |  |  ------------------
  ------------------
 6910|     98|        handler.on_error("Unexpected end of format string");
 6911|     98|        return begin;
 6912|     98|    }
 6913|       |
 6914|  55.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 4.22k, False: 51.4k]
  ------------------
 6915|  4.22k|        ++begin;
 6916|  4.22k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.22k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 4.18k]
  |  |  ------------------
  ------------------
 6917|     34|            handler.on_error("Unexpected end of format string");
 6918|     34|            return begin;
 6919|     34|        }
 6920|  4.18k|        begin = parse_precision(begin, end, handler);
 6921|  4.18k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 4.07k]
  |  |  ------------------
  ------------------
 6922|    118|            handler.on_error("Unexpected end of format string");
 6923|    118|            return begin;
 6924|    118|        }
 6925|  4.18k|    }
 6926|       |
 6927|  55.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 662, False: 54.8k]
  ------------------
 6928|    662|        handler.on_localized();
 6929|    662|        ++begin;
 6930|    662|    }
 6931|  55.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 55.4k]
  |  |  ------------------
  ------------------
 6932|     52|        handler.on_error("Unexpected end of format string");
 6933|     52|        return begin;
 6934|     52|    }
 6935|       |
 6936|  55.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 55.4k, False: 0]
  |  Branch (6936:25): [True: 50.5k, False: 4.89k]
  ------------------
 6937|  50.5k|        do_presentation();
 6938|  50.5k|    }
 6939|  55.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.79k, False: 53.6k]
  |  |  ------------------
  ------------------
 6940|  1.79k|        handler.on_error("Unexpected end of format string");
 6941|  1.79k|        return begin;
 6942|  1.79k|    }
 6943|       |
 6944|  53.6k|    return begin;
 6945|  55.4k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6516|  2.84k|{
 6517|  2.84k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6517:13): [True: 230, False: 2.61k]
  |  Branch (6517:33): [True: 196, False: 34]
  ------------------
 6518|  2.84k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6518:13): [True: 194, False: 2.45k]
  |  Branch (6518:33): [True: 124, False: 70]
  ------------------
 6519|  2.84k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6868|  50.7k|    auto do_presentation = [&]() -> const CharT* {
 6869|  50.7k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 3.08k, False: 47.6k]
  ------------------
 6870|  3.08k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  3.08k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 608, False: 2.47k]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|    608|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|    608|                return begin;
 6876|    608|            }
 6877|  2.47k|            handler.on_character_set_string(set);
 6878|  2.47k|            return begin;
 6879|  3.08k|        }
 6880|  47.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 44.4k, False: 3.26k]
  ------------------
 6881|  44.4k|            return parse_presentation_regex(begin, end, handler);
 6882|  44.4k|        }
 6883|  3.26k|        presentation_type type = parse_presentation_type(*begin++);
 6884|  3.26k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  3.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 672, False: 2.58k]
  |  |  ------------------
  ------------------
 6885|    672|            handler.on_error("Invalid type specifier in format string");
 6886|    672|            return begin;
 6887|    672|        }
 6888|  2.58k|        handler.on_type(type);
 6889|  2.58k|        return begin;
 6890|  3.26k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6706|  3.08k|{
 6707|  3.08k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  3.08k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  3.08k|    auto start = begin;
 6711|  3.08k|    ++begin;
 6712|       |
 6713|  3.08k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 3.04k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|     34|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|     34|        return {};
 6718|     34|    }
 6719|  3.04k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 1.44k, False: 1.60k]
  ------------------
 6720|  1.44k|        handler.on_charset_inverted();
 6721|  1.44k|        ++begin;
 6722|  1.44k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.40k]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|     34|            return {};
 6727|     34|        }
 6728|  1.40k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 52, False: 1.35k]
  ------------------
 6729|     52|            handler.on_charset_single(char32_t{']'});
 6730|     52|            ++begin;
 6731|     52|        }
 6732|  1.40k|    }
 6733|  1.60k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 36, False: 1.56k]
  ------------------
 6734|     36|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|     36|    }
 6736|       |
 6737|  25.1k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 24.8k, False: 322]
  ------------------
 6738|  24.8k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 182, False: 24.6k]
  |  |  ------------------
  ------------------
 6739|    182|            break;
 6740|    182|        }
 6741|       |
 6742|  24.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 2.47k, False: 22.1k]
  ------------------
 6743|  2.47k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  2.47k|        }
 6745|       |
 6746|  22.1k|        parse_presentation_set_literal(begin, end, handler);
 6747|  22.1k|    }
 6748|       |
 6749|    504|    SCN_UNLIKELY_ATTR
 6750|    504|    handler.on_error("Invalid [character set] specifier in format string");
 6751|    504|    return {};
 6752|  2.97k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6670|  22.1k|{
 6671|  22.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  22.1k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  22.1k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  22.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 146, False: 22.0k]
  |  |  ------------------
  ------------------
 6675|    146|        return;
 6676|    146|    }
 6677|       |
 6678|  22.0k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 21.9k, False: 96]
  |  Branch (6678:25): [True: 1.28k, False: 20.6k]
  |  Branch (6678:49): [True: 1.24k, False: 34]
  ------------------
 6679|  22.0k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 1.19k, False: 52]
  ------------------
 6680|  1.19k|        ++begin;
 6681|       |
 6682|  1.19k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  1.19k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  1.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.16k]
  |  |  ------------------
  ------------------
 6684|     34|            return;
 6685|     34|        }
 6686|       |
 6687|  1.16k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  1.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 1.12k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|     34|            return;
 6692|     34|        }
 6693|       |
 6694|  1.12k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  1.12k|        return;
 6696|  1.16k|    }
 6697|       |
 6698|  20.8k|    handler.on_charset_single(cp_first);
 6699|  20.8k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6646|  23.3k|{
 6647|  23.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  23.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  23.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.3k]
  |  |  |  Branch (859:45): [True: 0, False: 23.3k]
  |  |  |  Branch (859:45): [True: 0, False: 23.3k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  23.3k|    const auto cp =
 6656|  23.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  23.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 23.1k]
  |  |  ------------------
  ------------------
 6658|    180|        handler.on_error("Invalid encoding in format string");
 6659|    180|        return invalid_code_point;
 6660|    180|    }
 6661|       |
 6662|  23.1k|    begin += len;
 6663|  23.1k|    return cp;
 6664|  23.3k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6355|  2.47k|    {
 6356|  2.47k|        m_specs.charset_string_data = fmt.data();
 6357|  2.47k|        m_specs.charset_string_size = fmt.size();
 6358|  2.47k|        on_type(presentation_type::string_set);
 6359|  2.47k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6758|  44.4k|{
 6759|  44.4k|#if !SCN_DISABLE_REGEX
 6760|  44.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  44.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6761|  44.4k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  44.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6762|       |
 6763|       |    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 6764|       |                  std::is_same_v<CharT, wchar_t>) {
 6765|       |        handler.on_error("Regex backend doesn't support wide strings as input");
 6766|       |        return begin;
 6767|       |    }
 6768|       |
 6769|  44.4k|    auto start = begin;
 6770|  44.4k|    ++begin;
 6771|       |
 6772|  44.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  44.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 44.3k]
  |  |  ------------------
  ------------------
 6773|     34|        handler.on_error("Unexpected end of regex in format string");
 6774|     34|        return begin;
 6775|     34|    }
 6776|       |
 6777|  44.3k|    handler.on_type(presentation_type::regex);
 6778|  4.48M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6778:12): [True: 4.48M, False: 190]
  ------------------
 6779|  4.48M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6779:13): [True: 57.1k, False: 4.42M]
  ------------------
 6780|  57.1k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6780:17): [True: 44.2k, False: 12.9k]
  ------------------
 6781|  44.2k|                break;
 6782|  44.2k|            }
 6783|  12.9k|            else {
 6784|  12.9k|                handler.on_type(presentation_type::regex_escaped);
 6785|  12.9k|            }
 6786|  57.1k|        }
 6787|  4.48M|    }
 6788|  44.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  44.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 190, False: 44.2k]
  |  |  ------------------
  ------------------
 6789|    190|        handler.on_error("Unexpected end of regex in format string");
 6790|    190|        return begin;
 6791|    190|    }
 6792|       |
 6793|  44.2k|    auto regex_end = begin;
 6794|  44.2k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6795|  44.2k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  44.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 44.1k]
  |  |  ------------------
  ------------------
 6796|     34|        handler.on_error("Invalid (empty) regex in format string");
 6797|     34|        return begin;
 6798|     34|    }
 6799|  44.1k|    handler.on_regex_pattern(regex_pattern);
 6800|  44.1k|    ++begin;
 6801|       |
 6802|  44.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 44.1k]
  |  |  ------------------
  ------------------
 6803|     34|        handler.on_error("Unexpected end of regex in format string");
 6804|     34|        return begin;
 6805|     34|    }
 6806|       |
 6807|  44.1k|    regex_flags flags{regex_flags::none};
 6808|  44.1k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6809|  44.1k|        {{'m', regex_flags::multiline},
 6810|  44.1k|         {'s', regex_flags::singleline},
 6811|  44.1k|         {'i', regex_flags::nocase},
 6812|  44.1k|         {'n', regex_flags::nocapture}}};
 6813|  51.1k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6813:12): [True: 51.1k, False: 44]
  ------------------
 6814|  51.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6814:13): [True: 43.9k, False: 7.14k]
  ------------------
 6815|  43.9k|            break;
 6816|  43.9k|        }
 6817|  7.14k|        bool found_flag = false;
 6818|  19.8k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6818:24): [True: 19.8k, False: 66]
  ------------------
 6819|  19.8k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6819:17): [True: 12.7k, False: 7.08k]
  ------------------
 6820|  12.7k|                continue;
 6821|  12.7k|            }
 6822|  7.08k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6822:17): [True: 40, False: 7.04k]
  ------------------
 6823|     40|                handler.on_error("Flag set multiple times in regex");
 6824|     40|                return begin;
 6825|     40|            }
 6826|  7.04k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6827|  7.04k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6827:17): [True: 46, False: 6.99k]
  ------------------
 6828|       |                // clang-format off
 6829|     46|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6830|       |                // clang-format on
 6831|     46|            }
 6832|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6833|       |            if (*begin == CharT{'m'}) {
 6834|       |                // clang-format off
 6835|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6836|       |                // clang-format on
 6837|       |            }
 6838|       |#endif
 6839|  7.04k|#endif
 6840|  7.04k|            flags |= flag.second;
 6841|  7.04k|            found_flag = true;
 6842|  7.04k|            break;
 6843|  7.08k|        }
 6844|  7.10k|        if (!found_flag) {
  ------------------
  |  Branch (6844:13): [True: 66, False: 7.04k]
  ------------------
 6845|     66|            handler.on_error("Invalid flag in regex");
 6846|     66|            return begin;
 6847|     66|        }
 6848|  7.10k|    }
 6849|  44.0k|    handler.on_regex_flags(flags);
 6850|       |
 6851|  44.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  44.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 43.9k]
  |  |  ------------------
  ------------------
 6852|     44|        handler.on_error("Unexpected end of regex in format string");
 6853|     44|        return begin;
 6854|     44|    }
 6855|       |
 6856|  43.9k|    return begin;
 6857|       |#else
 6858|       |    handler.on_error("Regular expression support is disabled");
 6859|       |    return {};
 6860|       |#endif
 6861|  44.0k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6363|  44.1k|    {
 6364|  44.1k|        m_specs.charset_string_data = pattern.data();
 6365|  44.1k|        m_specs.charset_string_size = pattern.size();
 6366|  44.1k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6464|  3.26k|{
 6465|  3.26k|    switch (type) {
 6466|     88|        case 'b':
  ------------------
  |  Branch (6466:9): [True: 88, False: 3.17k]
  ------------------
 6467|    122|        case 'B':
  ------------------
  |  Branch (6467:9): [True: 34, False: 3.22k]
  ------------------
 6468|    122|            return presentation_type::int_binary;
 6469|    106|        case 'd':
  ------------------
  |  Branch (6469:9): [True: 106, False: 3.15k]
  ------------------
 6470|    106|            return presentation_type::int_decimal;
 6471|    160|        case 'i':
  ------------------
  |  Branch (6471:9): [True: 160, False: 3.10k]
  ------------------
 6472|    160|            return presentation_type::int_generic;
 6473|    124|        case 'u':
  ------------------
  |  Branch (6473:9): [True: 124, False: 3.13k]
  ------------------
 6474|    124|            return presentation_type::int_unsigned_decimal;
 6475|    124|        case 'o':
  ------------------
  |  Branch (6475:9): [True: 124, False: 3.13k]
  ------------------
 6476|    124|            return presentation_type::int_octal;
 6477|    106|        case 'x':
  ------------------
  |  Branch (6477:9): [True: 106, False: 3.15k]
  ------------------
 6478|    166|        case 'X':
  ------------------
  |  Branch (6478:9): [True: 60, False: 3.20k]
  ------------------
 6479|    166|            return presentation_type::int_hex;
 6480|     34|        case 'r':
  ------------------
  |  Branch (6480:9): [True: 34, False: 3.22k]
  ------------------
 6481|     74|        case 'R':
  ------------------
  |  Branch (6481:9): [True: 40, False: 3.22k]
  ------------------
 6482|     74|            return presentation_type::int_arbitrary_base;
 6483|    150|        case 'a':
  ------------------
  |  Branch (6483:9): [True: 150, False: 3.11k]
  ------------------
 6484|    238|        case 'A':
  ------------------
  |  Branch (6484:9): [True: 88, False: 3.17k]
  ------------------
 6485|    238|            return presentation_type::float_hex;
 6486|     70|        case 'e':
  ------------------
  |  Branch (6486:9): [True: 70, False: 3.19k]
  ------------------
 6487|    104|        case 'E':
  ------------------
  |  Branch (6487:9): [True: 34, False: 3.22k]
  ------------------
 6488|    104|            return presentation_type::float_scientific;
 6489|     52|        case 'f':
  ------------------
  |  Branch (6489:9): [True: 52, False: 3.20k]
  ------------------
 6490|    140|        case 'F':
  ------------------
  |  Branch (6490:9): [True: 88, False: 3.17k]
  ------------------
 6491|    140|            return presentation_type::float_fixed;
 6492|     34|        case 'g':
  ------------------
  |  Branch (6492:9): [True: 34, False: 3.22k]
  ------------------
 6493|    104|        case 'G':
  ------------------
  |  Branch (6493:9): [True: 70, False: 3.19k]
  ------------------
 6494|    104|            return presentation_type::float_general;
 6495|    790|        case 's':
  ------------------
  |  Branch (6495:9): [True: 790, False: 2.47k]
  ------------------
 6496|    790|            return presentation_type::string;
 6497|    196|        case 'c':
  ------------------
  |  Branch (6497:9): [True: 196, False: 3.06k]
  ------------------
 6498|    196|            return presentation_type::character;
 6499|     34|        case '?':
  ------------------
  |  Branch (6499:9): [True: 34, False: 3.22k]
  ------------------
 6500|     34|            return presentation_type::escaped_character;
 6501|    106|        case 'p':
  ------------------
  |  Branch (6501:9): [True: 106, False: 3.15k]
  ------------------
 6502|    106|            return presentation_type::pointer;
 6503|      0|        case '[':
  ------------------
  |  Branch (6503:9): [True: 0, False: 3.26k]
  ------------------
 6504|      0|        case '/':
  ------------------
  |  Branch (6504:9): [True: 0, False: 3.26k]
  ------------------
 6505|       |            // Should be handled by parse_presentation_set and
 6506|       |            // parse_presentation_regex
 6507|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6508|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6509|    672|        default:
  ------------------
  |  Branch (6509:9): [True: 672, False: 2.58k]
  ------------------
 6510|    672|            return presentation_type::none;
 6511|  3.26k|    }
 6512|  3.26k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6541|  55.8k|{
 6542|  55.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  55.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|  55.8k|    auto check_align = [](wchar_t ch) {
 6545|  55.8k|        switch (ch) {
 6546|  55.8k|            case L'<':
 6547|  55.8k|                return align_type::left;
 6548|  55.8k|            case L'>':
 6549|  55.8k|                return align_type::right;
 6550|  55.8k|            case L'^':
 6551|  55.8k|                return align_type::center;
 6552|  55.8k|            default:
 6553|  55.8k|                return align_type::none;
 6554|  55.8k|        }
 6555|  55.8k|    };
 6556|       |
 6557|  55.8k|    auto potential_fill_len = code_point_length(begin, end);
 6558|  55.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 55.8k]
  |  |  |  Branch (859:45): [True: 0, False: 55.8k]
  |  |  |  Branch (859:45): [True: 0, False: 55.8k]
  |  |  ------------------
  ------------------
 6559|  55.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|  55.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|  55.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|  55.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|  55.8k|    const auto begin_before_fill = begin;
 6569|  55.8k|    begin += potential_fill_len;
 6570|       |
 6571|  55.8k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 994, False: 54.8k]
  ------------------
 6572|    994|        return begin_before_fill;
 6573|    994|    }
 6574|       |
 6575|  54.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|  54.8k|    const auto begin_after_fill = begin;
 6577|  54.8k|    ++begin;
 6578|       |
 6579|  54.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 54.8k, False: 0]
  ------------------
 6580|  54.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 54.7k]
  |  |  ------------------
  ------------------
 6581|     42|            handler.on_error("Invalid fill character '{' in format string");
 6582|     42|            return begin;
 6583|     42|        }
 6584|  54.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 1.69k, False: 53.1k]
  ------------------
 6585|  1.69k|            return begin_before_fill;
 6586|  1.69k|        }
 6587|  54.7k|    }
 6588|       |
 6589|  53.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 51.9k, False: 1.12k]
  ------------------
 6590|  51.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 1.28k, False: 50.6k]
  ------------------
 6591|  1.28k|            handler.on_align(potential_align_on_fill);
 6592|  1.28k|            return begin_after_fill;
 6593|  1.28k|        }
 6594|  50.6k|        return begin_before_fill;
 6595|  51.9k|    }
 6596|       |
 6597|  1.12k|    handler.on_fill(potential_fill);
 6598|  1.12k|    handler.on_align(potential_align_after_fill);
 6599|  1.12k|    return begin;
 6600|  53.1k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6523|  55.8k|{
 6524|  55.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  55.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6525|  55.8k|    if constexpr (sizeof(CharT) != 1) {
 6526|  55.8k|        return 1;
 6527|       |    }
 6528|       |    else {
 6529|       |        const auto lengths =
 6530|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6531|       |            "\3\4";
 6532|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6533|       |        return len;
 6534|       |    }
 6535|  55.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6544|   110k|    auto check_align = [](wchar_t ch) {
 6545|   110k|        switch (ch) {
 6546|  1.23k|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 1.23k, False: 109k]
  ------------------
 6547|  1.23k|                return align_type::left;
 6548|    230|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 230, False: 110k]
  ------------------
 6549|    230|                return align_type::right;
 6550|  1.37k|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 1.37k, False: 109k]
  ------------------
 6551|  1.37k|                return align_type::center;
 6552|   107k|            default:
  ------------------
  |  Branch (6552:13): [True: 107k, False: 2.84k]
  ------------------
 6553|   107k|                return align_type::none;
 6554|   110k|        }
 6555|   110k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6277|  1.12k|    {
 6278|  1.12k|        m_specs.fill = fill;
 6279|  1.12k|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6158|  1.12k|    {
 6159|  1.12k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6160|  1.12k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6161|       |        if constexpr (sizeof(CharT) == 1) {
 6162|       |            for (size_t i = 0; i < s.size(); ++i) {
 6163|       |                SCN_GCC_PUSH
 6164|       |                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6165|       |                m_data[i] = s[i];
 6166|       |                SCN_GCC_POP
 6167|       |            }
 6168|       |            m_size = static_cast<unsigned char>(s.size());
 6169|       |        }
 6170|       |        else if constexpr (sizeof(CharT) == 2) {
 6171|       |            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6172|       |            m_data[1] =
 6173|       |                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6174|       |            if (s.size() == 1) {
 6175|       |                return;
 6176|       |            }
 6177|       |            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6178|       |            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6179|       |        }
 6180|  1.12k|        else {
 6181|  1.12k|            const auto front = static_cast<unsigned>(s.front());
 6182|  1.12k|            m_data[0] = static_cast<char>(front);
 6183|  1.12k|            m_data[1] = static_cast<char>(front >> 8);
 6184|  1.12k|            m_data[2] = static_cast<char>(front >> 16);
 6185|  1.12k|            m_data[3] = static_cast<char>(front >> 24);
 6186|  1.12k|        }
 6187|  1.12k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6606|  55.7k|{
 6607|  55.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  55.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|  55.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 29.1k, False: 26.6k]
  |  Branch (6609:33): [True: 24.9k, False: 4.19k]
  ------------------
 6610|  24.9k|        int width = parse_simple_int(begin, end);
 6611|  24.9k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  24.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 24.8k, False: 54]
  |  |  ------------------
  ------------------
 6612|  24.8k|            handler.on_width(width);
 6613|  24.8k|        }
 6614|     54|        else {
 6615|     54|            handler.on_error("Invalid field width");
 6616|     54|            return begin;
 6617|     54|        }
 6618|  24.9k|    }
 6619|  55.6k|    return begin;
 6620|  55.7k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6626|  4.18k|{
 6627|  4.18k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6628|       |
 6629|  4.18k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6629:9): [True: 4.15k, False: 34]
  |  Branch (6629:33): [True: 3.94k, False: 214]
  ------------------
 6630|  3.94k|        int prec = parse_simple_int(begin, end);
 6631|  3.94k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  3.94k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.94k, False: 0]
  |  |  ------------------
  ------------------
 6632|  3.94k|            handler.on_precision(prec);
 6633|  3.94k|        }
 6634|      0|        else {
 6635|      0|            handler.on_error("Invalid field precision");
 6636|      0|            return begin;
 6637|      0|        }
 6638|  3.94k|    }
 6639|  4.18k|    return begin;
 6640|  4.18k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7136|    662|    {
 7137|    662|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|    662|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 596, False: 66]
  ------------------
 7139|    662|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 530, False: 66]
  ------------------
 7140|    662|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 464, False: 66]
  ------------------
 7141|    662|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 398, False: 66]
  ------------------
 7142|    398|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|    398|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|    398|        }
 7147|       |
 7148|    264|        Handler::on_localized();
 7149|    264|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  52.6k|{
 8427|  52.6k|#define SCN_VISIT(Type)                                         \
 8428|  52.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  52.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  52.6k|    }                                                           \
 8431|  52.6k|    else {                                                      \
 8432|  52.6k|        return vis(monostate_val);                              \
 8433|  52.6k|    }
 8434|       |
 8435|  52.6k|    monostate monostate_val{};
 8436|       |
 8437|  52.6k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 52.6k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 52.6k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|  5.88k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 5.88k, False: 46.7k]
  ------------------
 8443|  5.88k|            SCN_VISIT(int);
  ------------------
  |  | 8428|  5.88k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.88k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.88k|    }                                                           \
  |  | 8431|  5.88k|    else {                                                      \
  |  | 8432|  5.88k|        return vis(monostate_val);                              \
  |  | 8433|  5.88k|    }
  ------------------
 8444|  5.88k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 52.6k]
  ------------------
 8445|  5.88k|            SCN_VISIT(long);
  ------------------
  |  | 8428|  5.88k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.88k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.88k|    }                                                           \
  |  | 8431|  5.88k|    else {                                                      \
  |  | 8432|  5.88k|        return vis(monostate_val);                              \
  |  | 8433|  5.88k|    }
  ------------------
 8446|  5.88k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 52.6k]
  ------------------
 8447|  5.88k|            SCN_VISIT(long long);
  ------------------
  |  | 8428|  5.88k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.88k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.88k|    }                                                           \
  |  | 8431|  5.88k|    else {                                                      \
  |  | 8432|  5.88k|        return vis(monostate_val);                              \
  |  | 8433|  5.88k|    }
  ------------------
 8448|  5.88k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 52.6k]
  ------------------
 8449|  5.88k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|  5.88k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.88k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.88k|    }                                                           \
  |  | 8431|  5.88k|    else {                                                      \
  |  | 8432|  5.88k|        return vis(monostate_val);                              \
  |  | 8433|  5.88k|    }
  ------------------
 8450|  5.88k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 52.6k]
  ------------------
 8451|  5.88k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|  5.88k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  5.88k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  5.88k|    }                                                           \
  |  | 8431|  5.88k|    else {                                                      \
  |  | 8432|  5.88k|        return vis(monostate_val);                              \
  |  | 8433|  5.88k|    }
  ------------------
 8452|  11.7k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 5.88k, False: 46.7k]
  ------------------
 8453|  11.7k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|  11.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  11.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  11.7k|    }                                                           \
  |  | 8431|  11.7k|    else {                                                      \
  |  | 8432|  11.7k|        return vis(monostate_val);                              \
  |  | 8433|  11.7k|    }
  ------------------
 8454|  11.7k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 52.6k]
  ------------------
 8455|  11.7k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|  11.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  11.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  11.7k|    }                                                           \
  |  | 8431|  11.7k|    else {                                                      \
  |  | 8432|  11.7k|        return vis(monostate_val);                              \
  |  | 8433|  11.7k|    }
  ------------------
 8456|  11.7k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 52.6k]
  ------------------
 8457|  11.7k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|  11.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  11.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  11.7k|    }                                                           \
  |  | 8431|  11.7k|    else {                                                      \
  |  | 8432|  11.7k|        return vis(monostate_val);                              \
  |  | 8433|  11.7k|    }
  ------------------
 8458|  17.6k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 5.82k, False: 46.8k]
  ------------------
 8459|  17.6k|            SCN_VISIT(void*);
  ------------------
  |  | 8428|  17.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  17.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  17.6k|    }                                                           \
  |  | 8431|  17.6k|    else {                                                      \
  |  | 8432|  17.6k|        return vis(monostate_val);                              \
  |  | 8433|  17.6k|    }
  ------------------
 8460|  23.4k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 5.88k, False: 46.7k]
  ------------------
 8461|  23.4k|            SCN_VISIT(bool);
  ------------------
  |  | 8428|  23.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  23.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  23.4k|    }                                                           \
  |  | 8431|  23.4k|    else {                                                      \
  |  | 8432|  23.4k|        return vis(monostate_val);                              \
  |  | 8433|  23.4k|    }
  ------------------
 8462|  23.4k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 52.6k]
  ------------------
 8463|  23.4k|            SCN_VISIT(char);
  ------------------
  |  | 8428|  23.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  23.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  23.4k|    }                                                           \
  |  | 8431|  23.4k|    else {                                                      \
  |  | 8432|  23.4k|        return vis(monostate_val);                              \
  |  | 8433|  23.4k|    }
  ------------------
 8464|  29.3k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 5.82k, False: 46.8k]
  ------------------
 8465|  29.3k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|  29.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  29.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  29.3k|    }                                                           \
  |  | 8431|  29.3k|    else {                                                      \
  |  | 8432|  29.3k|        return vis(monostate_val);                              \
  |  | 8433|  29.3k|    }
  ------------------
 8466|  29.3k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 52.6k]
  ------------------
 8467|  29.3k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|  29.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  29.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  29.3k|    }                                                           \
  |  | 8431|  29.3k|    else {                                                      \
  |  | 8432|  29.3k|        return vis(monostate_val);                              \
  |  | 8433|  29.3k|    }
  ------------------
 8468|  29.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 52.6k]
  ------------------
 8469|  29.3k|            SCN_VISIT(float);
  ------------------
  |  | 8428|  29.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  29.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  29.3k|    }                                                           \
  |  | 8431|  29.3k|    else {                                                      \
  |  | 8432|  29.3k|        return vis(monostate_val);                              \
  |  | 8433|  29.3k|    }
  ------------------
 8470|  35.2k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 5.88k, False: 46.7k]
  ------------------
 8471|  35.2k|            SCN_VISIT(double);
  ------------------
  |  | 8428|  35.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  35.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  35.2k|    }                                                           \
  |  | 8431|  35.2k|    else {                                                      \
  |  | 8432|  35.2k|        return vis(monostate_val);                              \
  |  | 8433|  35.2k|    }
  ------------------
 8472|  35.2k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 52.6k]
  ------------------
 8473|  35.2k|            SCN_VISIT(long double);
  ------------------
  |  | 8428|  35.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  35.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  35.2k|    }                                                           \
  |  | 8431|  35.2k|    else {                                                      \
  |  | 8432|  35.2k|        return vis(monostate_val);                              \
  |  | 8433|  35.2k|    }
  ------------------
 8474|  35.2k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 52.6k]
  ------------------
 8475|  35.2k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|  35.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  35.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  35.2k|    }                                                           \
  |  | 8431|  35.2k|    else {                                                      \
  |  | 8432|  35.2k|        return vis(monostate_val);                              \
  |  | 8433|  35.2k|    }
  ------------------
 8476|  41.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 5.82k, False: 46.8k]
  ------------------
 8477|  41.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|  41.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  41.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  41.0k|    }                                                           \
  |  | 8431|  41.0k|    else {                                                      \
  |  | 8432|  41.0k|        return vis(monostate_val);                              \
  |  | 8433|  41.0k|    }
  ------------------
 8478|  46.8k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 5.82k, False: 46.8k]
  ------------------
 8479|  46.8k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  46.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  46.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  46.8k|    }                                                           \
  |  | 8431|  46.8k|    else {                                                      \
  |  | 8432|  46.8k|        return vis(monostate_val);                              \
  |  | 8433|  46.8k|    }
  ------------------
 8480|  52.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 5.82k, False: 46.8k]
  ------------------
 8481|  52.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  52.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  52.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  52.6k|    }                                                           \
  |  | 8431|  52.6k|    else {                                                      \
  |  | 8432|  52.6k|        return vis(monostate_val);                              \
  |  | 8433|  52.6k|    }
  ------------------
 8482|  52.6k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 52.6k]
  ------------------
 8483|  52.6k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  52.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  52.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  52.6k|    }                                                           \
  |  | 8431|  52.6k|    else {                                                      \
  |  | 8432|  52.6k|        return vis(monostate_val);                              \
  |  | 8433|  52.6k|    }
  ------------------
 8484|  52.6k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 52.6k]
  ------------------
 8485|  52.6k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  52.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  52.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  52.6k|    }                                                           \
  |  | 8431|  52.6k|    else {                                                      \
  |  | 8432|  52.6k|        return vis(monostate_val);                              \
  |  | 8433|  52.6k|    }
  ------------------
 8486|       |
 8487|  52.6k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 52.6k]
  ------------------
 8488|  52.6k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  52.6k|            return vis(
 8490|  52.6k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 52.6k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 52.6k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  52.6k|            SCN_CLANG_POP
 8505|  52.6k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3325|  5.40k|    {
 3326|  5.40k|        return m_iterator;
 3327|  5.40k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1427|  1.35k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.35k|    {
 1430|  1.35k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.35k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.35k|    {
  437|  1.35k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.35k|    {
 1177|  1.35k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3329|  2.70k|    {
 3330|  2.70k|        return m_sentinel;
 3331|  2.70k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_SG_EEvE4typeELPv0EEESO_SJ_:
 3310|  2.70k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.70k|    static_cast<    \
  |  |  929|  2.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.70k|    static_cast<    \
  |  |  929|  2.70k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  2.70k|    {
 3312|  2.70k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.70k|    {
  485|  2.70k|        return m_has_value;
  486|  2.70k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.35k|    {
 1627|  1.35k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.35k|        return this->get_value();
 1629|  1.35k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.35k|    {
  451|  1.35k|        return m_value;
  452|  1.35k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.35k|    {
 1837|  1.35k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.35k|                                            std::forward<F>(f));
 1839|  1.35k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESM_EEDaOSR_OT0_:
 1322|  1.35k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.35k|    else {
 1333|  1.35k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.35k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.35k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.35k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.35k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.35k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.35k|    }
 1340|  1.35k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.35k|    {
 1663|  1.35k|        return std::move(value());
 1664|  1.35k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.35k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.35k|    {
 1430|  1.35k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  435|  1.35k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.35k|    {
  437|  1.35k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.35k|    {
 1177|  1.35k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.35k|    {
 1598|  1.35k|        return has_value();
 1599|  1.35k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.70k|    {
  485|  2.70k|        return m_has_value;
  486|  2.70k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSN_v:
 1662|  1.35k|    {
 1663|  1.35k|        return std::move(value());
 1664|  1.35k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSN_v:
 1626|  1.35k|    {
 1627|  1.35k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.35k|        return this->get_value();
 1629|  1.35k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.35k|    {
  451|  1.35k|        return m_value;
  452|  1.35k|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  23.9k|{
   89|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.9k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   215k|{
   44|   215k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   215k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  23.9k|{
  127|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.9k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeETnPvLPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   215k|{
   60|   215k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   215k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  23.9k|{
   89|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.9k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  23.9k|{
  127|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.9k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  23.9k|{
   89|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.9k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  23.9k|{
  127|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.9k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  23.9k|{
   89|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.9k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  23.9k|{
  127|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.9k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  23.9k|{
   89|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.9k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  23.9k|{
  127|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.9k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEEOSA_NS0_24basic_scan_format_stringIwNSL_13type_identityISA_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  23.9k|{
   89|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.9k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEETnPNS3_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELS2_0ETnPvLS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEERKT0_OSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  23.9k|{
  127|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSQ_13type_identityISE_E4typeEJDpNS12_ISW_E4typeEEEE:
   88|  23.9k|{
   89|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSJ_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSS_13type_identityISF_E4typeEJDpNS17_ISY_E4typeEEEE:
  126|  23.9k|{
  127|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISD_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIwNSP_13type_identityISD_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  23.9k|{
   89|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSI_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISE_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIwNSR_13type_identityISE_E4typeEJDpNS16_ISX_E4typeEEEE:
  126|  23.9k|{
  127|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.9k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIS9_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeIS9_Xsr6rangesE14borrowed_rangeIS9_EEE4typeEE4typeEJDpT_EEEEEOS9_NS0_24basic_scan_format_stringIwNSL_13type_identityIS9_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  23.9k|{
   89|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.9k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_TnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISA_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEJDpT_EEEEERKT0_OSA_NS0_24basic_scan_format_stringIwNSN_13type_identityISA_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  23.9k|{
  127|  23.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.9k|    static_cast<    \
  |  |  929|  23.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.9k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|   322k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|   322k|{
  653|   322k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   322k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    324|{
  659|    324|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    324|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 162, False: 162]
  ------------------
  661|    324|                    : std::locale{};
  662|    324|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    926|{
 1221|    926|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    926|                                  m_nan_payload_buffer, value);
 1223|    926|    value = this->setsign(value);
 1224|    926|    return n;
 1225|    926|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    994|{
 1221|    994|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    994|                                  m_nan_payload_buffer, value);
 1223|    994|    value = this->setsign(value);
 1224|    994|    return n;
 1225|    994|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     22|{
 1461|     22|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     22|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     22|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     22|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     22|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     22|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     22|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 22, False: 0]
  ------------------
 1467|     22|        SCN_UNLIKELY_ATTR
 1468|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     22|                                     "Invalid integer value");
 1470|     22|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    934|{
 1461|    934|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    934|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    934|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    934|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    934|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 934, False: 0]
  ------------------
 1467|    934|        SCN_UNLIKELY_ATTR
 1468|    934|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    934|                                     "Invalid integer value");
 1470|    934|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.00k|{
 1461|  1.00k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.00k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.00k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.00k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.00k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.00k, False: 0]
  ------------------
 1467|  1.00k|        SCN_UNLIKELY_ATTR
 1468|  1.00k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.00k|                                     "Invalid integer value");
 1470|  1.00k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    934|{
 1461|    934|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    934|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    934|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    934|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    934|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 934, False: 0]
  ------------------
 1467|    934|        SCN_UNLIKELY_ATTR
 1468|    934|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    934|                                     "Invalid integer value");
 1470|    934|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    988|{
 1461|    988|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    988|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    988|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    988|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    988|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    988|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    988|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 988, False: 0]
  ------------------
 1467|    988|        SCN_UNLIKELY_ATTR
 1468|    988|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    988|                                     "Invalid integer value");
 1470|    988|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    916|{
 1461|    916|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    916|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    916|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    916|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    916|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    916|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    916|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    916|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    916|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    916|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    916|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    916|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    916|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 916, False: 0]
  ------------------
 1467|    916|        SCN_UNLIKELY_ATTR
 1468|    916|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    916|                                     "Invalid integer value");
 1470|    916|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    974|{
 1461|    974|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    974|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    974|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    974|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    974|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    974|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    974|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    974|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    974|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    974|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    974|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    974|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    974|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 974, False: 0]
  ------------------
 1467|    974|        SCN_UNLIKELY_ATTR
 1468|    974|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    974|                                     "Invalid integer value");
 1470|    974|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   107k|{
 2184|   107k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   107k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   215k|{
 2208|   215k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   215k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.77k|{
  194|  3.77k|    return find_classic_impl(
  195|  3.77k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.77k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  197|  3.77k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  28.4k|{
  202|  28.4k|    return find_classic_impl(
  203|  28.4k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  28.4k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|  28.4k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    240|{
  673|    240|    return e;
  674|    240|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   107k|{
 2141|   107k|    return vscan_internal(source, format, args);
 2142|   107k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   215k|{
 2161|   215k|    return vscan_internal(source, format, args);
 2162|   215k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.77k|{
  118|  3.77k|    auto it = source.begin();
  119|       |
  120|  23.1k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 20.1k, False: 3.02k]
  ------------------
  121|  20.1k|        auto sv =
  122|  20.1k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  20.1k|                .substr(0, 8);
  124|       |
  125|  20.1k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 4.70k, False: 15.4k]
  ------------------
  126|  4.70k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  4.70k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  4.70k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 450, False: 4.25k]
  ------------------
  129|    450|                break;
  130|    450|            }
  131|  4.25k|            continue;
  132|  4.70k|        }
  133|       |
  134|  67.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 51.8k, False: 15.1k]
  ------------------
  135|  51.8k|            auto tmp =
  136|  51.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  51.8k|            auto res = get_next_code_point(tmp);
  138|  51.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 300, False: 51.5k]
  ------------------
  139|    300|                return it;
  140|    300|            }
  141|  51.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  51.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  51.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  51.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  51.5k|        }
  145|  15.4k|    }
  146|       |
  147|  3.47k|    return detail::make_string_view_iterator(source, it);
  148|  3.77k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  50.8k|{
  105|  50.8k|    static_assert(sizeof(*source.data()) == 1);
  106|  50.8k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  50.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  50.8k|    uint64_t word{};
  108|  50.8k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  50.8k|    return has_byte_greater(word, 127) != 0;
  111|  50.8k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  31.2k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  51.8k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  28.4k|{
  118|  28.4k|    auto it = source.begin();
  119|       |
  120|  38.1k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 30.6k, False: 7.46k]
  ------------------
  121|  30.6k|        auto sv =
  122|  30.6k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  30.6k|                .substr(0, 8);
  124|       |
  125|  30.6k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 15.4k, False: 15.2k]
  ------------------
  126|  15.4k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  15.4k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  15.4k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 12.6k, False: 2.83k]
  ------------------
  129|  12.6k|                break;
  130|  12.6k|            }
  131|  2.83k|            continue;
  132|  15.4k|        }
  133|       |
  134|  37.2k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 30.3k, False: 6.89k]
  ------------------
  135|  30.3k|            auto tmp =
  136|  30.3k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  30.3k|            auto res = get_next_code_point(tmp);
  138|  30.3k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 8.35k, False: 22.0k]
  ------------------
  139|  8.35k|                return it;
  140|  8.35k|            }
  141|  22.0k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  22.0k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  22.0k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  22.0k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  22.0k|        }
  145|  15.2k|    }
  146|       |
  147|  20.0k|    return detail::make_string_view_iterator(source, it);
  148|  28.4k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  33.4k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  30.3k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    926|{
 1138|    926|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 926]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    926|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 926]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    926|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 926]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    926|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 926]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    926|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    926|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 8, False: 918]
  ------------------
 1185|      8|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 1186|      8|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|      8|                                         "Invalid floating-point digit");
 1188|      8|        }
 1189|      8|    }
 1190|    918|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 918, False: 0]
  |  |  ------------------
  ------------------
 1191|    918|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    918|                                     "Invalid floating-point digit");
 1193|    918|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    994|{
 1138|    994|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 994]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    994|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 994]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    994|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 994]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    994|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 994]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    994|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    994|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 12, False: 982]
  ------------------
 1185|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1186|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     12|                                         "Invalid floating-point digit");
 1188|     12|        }
 1189|     12|    }
 1190|    982|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 982, False: 0]
  |  |  ------------------
  ------------------
 1191|    982|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    982|                                     "Invalid floating-point digit");
 1193|    982|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   215k|{
 1625|   215k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 214k, False: 396]
  ------------------
 1626|   214k|        return false;
 1627|   214k|    }
 1628|    396|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 270]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   215k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   215k|        : format_handler_base{argcount},
 1900|   215k|          parse_ctx{format},
 1901|   215k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   215k|    static_cast<    \
  |  |  929|   215k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   215k|    static_cast<    \
  |  |  929|   215k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   215k|    {
 1903|   215k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|   645k|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|   645k|    {
 1722|   645k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   645k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 645k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   645k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   215k|        : contiguous_ctx(source, args, loc)
 1852|   215k|    {
 1853|   215k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   215k|{
 2038|   215k|    const auto beg = handler.get_ctx().begin();
 2039|   215k|    detail::parse_format_string<false>(format, handler);
 2040|   215k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 210k, False: 4.59k]
  |  |  ------------------
  ------------------
 2041|   210k|        return unexpected(handler.error);
 2042|   210k|    }
 2043|  4.59k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   215k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  1.08M|    {
 2022|  1.08M|        return ctx.get();
 2023|  1.08M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  1.08M|    {
 1857|  1.08M|        return contiguous_ctx;
 1858|  1.08M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   237k|    {
 1907|   315k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 85.0k, False: 230k]
  ------------------
 1908|  85.0k|            auto it = get_ctx().begin();
 1909|  85.0k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.62k, False: 83.4k]
  ------------------
 1910|  1.62k|                SCN_UNLIKELY_ATTR
 1911|  1.62k|                return on_error("Unexpected end of source");
 1912|  1.62k|            }
 1913|       |
 1914|  83.4k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  83.4k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  83.4k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 3.35k, False: 80.0k]
  ------------------
 1917|  3.35k|                SCN_UNLIKELY_ATTR
 1918|  3.35k|                return on_error("Invalid encoding in format string");
 1919|  3.35k|            }
 1920|  80.0k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 9.20k, False: 70.8k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  9.20k|                get_ctx().advance_to(
 1923|  9.20k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  9.20k|                auto begin_it = impl::read_while_classic_space(
 1926|  9.20k|                    detail::make_string_view_from_pointers(
 1927|  9.20k|                        detail::to_address(after_space_it),
 1928|  9.20k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  9.20k|                begin = detail::to_address(begin_it) - 1;
 1931|  9.20k|                continue;
 1932|  9.20k|            }
 1933|       |
 1934|  70.8k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 2.07k, False: 68.7k]
  ------------------
 1935|  2.07k|                SCN_UNLIKELY_ATTR
 1936|  2.07k|                return on_error("Unexpected literal character in source");
 1937|  2.07k|            }
 1938|  68.7k|            get_ctx().advance_to(ranges::next(it));
 1939|  68.7k|        }
 1940|   237k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  6.22k|    {
 1972|  6.22k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.22k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.22k|        on_visit_scan_arg(
 1976|  6.22k|            impl::default_arg_reader<context_type>{
 1977|  6.22k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.22k|            arg);
 1979|  6.22k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   151k|{
 1681|   151k|    auto arg = ctx.arg(id);
 1682|   151k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.71k, False: 149k]
  |  |  ------------------
  ------------------
 1683|  1.71k|        handler.on_error("Failed to find argument with ID");
 1684|  1.71k|    }
 1685|   151k|    return arg;
 1686|   151k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   213k|    {
 1797|   213k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.18k, False: 210k]
  |  |  ------------------
  ------------------
 1798|  3.18k|            on_error("Invalid out-of-range argument ID");
 1799|  3.18k|            return;
 1800|  3.18k|        }
 1801|       |
 1802|   210k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 209k]
  |  |  ------------------
  ------------------
 1803|    114|            return on_error("Argument with this ID has already been scanned");
 1804|    114|        }
 1805|       |
 1806|   209k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   209k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 209k, False: 0]
  |  |  ------------------
  ------------------
 1807|   209k|            visited_args_lower64 |= (1ull << id);
 1808|   209k|            return;
 1809|   209k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   210k|    {
 1782|   210k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 210k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   210k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   210k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 210k, False: 0]
  |  |  ------------------
  ------------------
 1788|   210k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   210k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   210k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  6.22k|    {
 1956|  6.22k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 306, False: 5.92k]
  |  Branch (1956:23): [True: 0, False: 5.92k]
  ------------------
 1957|    306|            SCN_UNLIKELY_ATTR
 1958|    306|            return;
 1959|    306|        }
 1960|       |
 1961|  5.92k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.92k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.07k, False: 1.84k]
  |  |  ------------------
  ------------------
 1963|  4.07k|            on_error(r.error());
 1964|  4.07k|        }
 1965|  1.84k|        else {
 1966|  1.84k|            get_ctx().advance_to(*r);
 1967|  1.84k|        }
 1968|  5.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   189k|    {
 1766|   189k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 189k, False: 0]
  |  |  ------------------
  ------------------
 1767|   189k|            error = err;
 1768|   189k|        }
 1769|   189k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   142k|    {
 1944|   142k|        return parse_ctx.next_arg_id();
 1945|   142k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  9.16k|    {
 1948|  9.16k|        parse_ctx.check_arg_id(id);
 1949|  9.16k|        return id;
 1950|  9.16k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   144k|    {
 1985|   144k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   144k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   144k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 144k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   144k|        auto specs = detail::format_specs{};
 1998|   144k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   144k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   144k|            arg.type()};
 2001|       |
 2002|   144k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   144k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.55k, False: 142k]
  |  Branch (2003:29): [True: 1.17k, False: 141k]
  ------------------
 2004|  3.72k|            SCN_UNLIKELY_ATTR
 2005|  3.72k|            on_error("Missing '}' in format string");
 2006|  3.72k|            return parse_ctx.begin();
 2007|  3.72k|        }
 2008|   141k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 490, False: 140k]
  |  |  ------------------
  ------------------
 2009|    490|            return parse_ctx.begin();
 2010|    490|        }
 2011|   140k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   140k|        on_visit_scan_arg(
 2014|   140k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   140k|                                           get_ctx().locale()},
 2016|   140k|            arg);
 2017|   140k|        return parse_ctx.begin();
 2018|   141k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|   144k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   144k|    {
 1701|   144k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   140k|    {
 1956|   140k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 114, False: 140k]
  |  Branch (1956:23): [True: 0, False: 140k]
  ------------------
 1957|    114|            SCN_UNLIKELY_ATTR
 1958|    114|            return;
 1959|    114|        }
 1960|       |
 1961|   140k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   140k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 131k, False: 8.70k]
  |  |  ------------------
  ------------------
 1963|   131k|            on_error(r.error());
 1964|   131k|        }
 1965|  8.70k|        else {
 1966|  8.70k|            get_ctx().advance_to(*r);
 1967|  8.70k|        }
 1968|   140k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   964k|    {
 1761|   964k|        SCN_UNLIKELY_ATTR
 1762|   964k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   964k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   645k|    {
 1729|   645k|        {
 1730|   645k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 645k]
  ------------------
 1731|   645k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 645k]
  ------------------
 1732|   645k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   645k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   645k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 435k, False: 209k]
  ------------------
 1736|   435k|                return on_error("Argument list not exhausted");
 1737|   435k|            }
 1738|   645k|        }
 1739|       |
 1740|   209k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 209k, False: 0]
  ------------------
 1741|   209k|            return;
 1742|   209k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   645k|    {
 1777|   645k|        return error;
 1778|   645k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  1.13M|    {
 1773|  1.13M|        return static_cast<bool>(error);
 1774|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   215k|{
 2053|   215k|    const auto argcount = args.size();
 2054|   215k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 215k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   215k|    auto handler = format_handler<true, CharT>{
 2060|   215k|        ranges::subrange<const CharT*>{source.data(),
 2061|   215k|                                       source.data() + source.size()},
 2062|   215k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   215k|    static_cast<    \
  |  |  929|   215k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   215k|    static_cast<    \
  |  |  929|   215k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   215k|    return vscan_parse_format_string(format, handler);
 2064|   215k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   430k|{
 2053|   430k|    const auto argcount = args.size();
 2054|   430k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 430k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   430k|    auto handler = format_handler<true, CharT>{
 2060|   430k|        ranges::subrange<const CharT*>{source.data(),
 2061|   430k|                                       source.data() + source.size()},
 2062|   430k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   430k|    static_cast<    \
  |  |  929|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   430k|    static_cast<    \
  |  |  929|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   430k|    return vscan_parse_format_string(format, handler);
 2064|   430k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   430k|{
 1625|   430k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 417k, False: 12.8k]
  ------------------
 1626|   417k|        return false;
 1627|   417k|    }
 1628|  12.8k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 12.6k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   430k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   430k|        : format_handler_base{argcount},
 1900|   430k|          parse_ctx{format},
 1901|   430k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   430k|    static_cast<    \
  |  |  929|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   430k|    static_cast<    \
  |  |  929|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   430k|    {
 1903|   430k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   430k|        : contiguous_ctx(source, args, loc)
 1852|   430k|    {
 1853|   430k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   430k|{
 2038|   430k|    const auto beg = handler.get_ctx().begin();
 2039|   430k|    detail::parse_format_string<false>(format, handler);
 2040|   430k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 428k, False: 1.92k]
  |  |  ------------------
  ------------------
 2041|   428k|        return unexpected(handler.error);
 2042|   428k|    }
 2043|  1.92k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   430k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.13M|    {
 2022|  1.13M|        return ctx.get();
 2023|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.13M|    {
 1857|  1.13M|        return contiguous_ctx;
 1858|  1.13M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   223k|    {
 1907|   269k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 203k, False: 66.3k]
  ------------------
 1908|   203k|            auto it = get_ctx().begin();
 1909|   203k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 510, False: 202k]
  ------------------
 1910|    510|                SCN_UNLIKELY_ATTR
 1911|    510|                return on_error("Unexpected end of source");
 1912|    510|            }
 1913|       |
 1914|   202k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   202k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   202k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 154k, False: 48.4k]
  ------------------
 1917|   154k|                SCN_UNLIKELY_ATTR
 1918|   154k|                return on_error("Invalid encoding in format string");
 1919|   154k|            }
 1920|  48.4k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 4.61k, False: 43.8k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  4.61k|                get_ctx().advance_to(
 1923|  4.61k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  4.61k|                auto begin_it = impl::read_while_classic_space(
 1926|  4.61k|                    detail::make_string_view_from_pointers(
 1927|  4.61k|                        detail::to_address(after_space_it),
 1928|  4.61k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  4.61k|                begin = detail::to_address(begin_it) - 1;
 1931|  4.61k|                continue;
 1932|  4.61k|            }
 1933|       |
 1934|  43.8k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 2.06k, False: 41.7k]
  ------------------
 1935|  2.06k|                SCN_UNLIKELY_ATTR
 1936|  2.06k|                return on_error("Unexpected literal character in source");
 1937|  2.06k|            }
 1938|  41.7k|            get_ctx().advance_to(ranges::next(it));
 1939|  41.7k|        }
 1940|   223k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|  6.03k|    {
 1972|  6.03k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.03k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.03k|        on_visit_scan_arg(
 1976|  6.03k|            impl::default_arg_reader<context_type>{
 1977|  6.03k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.03k|            arg);
 1979|  6.03k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  62.1k|{
 1681|  62.1k|    auto arg = ctx.arg(id);
 1682|  62.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.46k, False: 60.6k]
  |  |  ------------------
  ------------------
 1683|  1.46k|        handler.on_error("Failed to find argument with ID");
 1684|  1.46k|    }
 1685|  62.1k|    return arg;
 1686|  62.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  6.03k|    {
 1956|  6.03k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 404, False: 5.63k]
  |  Branch (1956:23): [True: 0, False: 5.63k]
  ------------------
 1957|    404|            SCN_UNLIKELY_ATTR
 1958|    404|            return;
 1959|    404|        }
 1960|       |
 1961|  5.63k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.63k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.06k, False: 1.57k]
  |  |  ------------------
  ------------------
 1963|  4.06k|            on_error(r.error());
 1964|  4.06k|        }
 1965|  1.57k|        else {
 1966|  1.57k|            get_ctx().advance_to(*r);
 1967|  1.57k|        }
 1968|  5.63k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  61.5k|    {
 1944|  61.5k|        return parse_ctx.next_arg_id();
 1945|  61.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    610|    {
 1948|    610|        parse_ctx.check_arg_id(id);
 1949|    610|        return id;
 1950|    610|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  56.0k|    {
 1985|  56.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  56.0k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  56.0k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 56.0k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  56.0k|        auto specs = detail::format_specs{};
 1998|  56.0k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  56.0k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  56.0k|            arg.type()};
 2001|       |
 2002|  56.0k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  56.0k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.19k, False: 53.8k]
  |  Branch (2003:29): [True: 628, False: 53.2k]
  ------------------
 2004|  2.82k|            SCN_UNLIKELY_ATTR
 2005|  2.82k|            on_error("Missing '}' in format string");
 2006|  2.82k|            return parse_ctx.begin();
 2007|  2.82k|        }
 2008|  53.2k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 364, False: 52.8k]
  |  |  ------------------
  ------------------
 2009|    364|            return parse_ctx.begin();
 2010|    364|        }
 2011|  52.8k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  52.8k|        on_visit_scan_arg(
 2014|  52.8k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  52.8k|                                           get_ctx().locale()},
 2016|  52.8k|            arg);
 2017|  52.8k|        return parse_ctx.begin();
 2018|  53.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|  56.0k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  56.0k|    {
 1701|  56.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  52.8k|    {
 1956|  52.8k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 208, False: 52.6k]
  |  Branch (1956:23): [True: 0, False: 52.6k]
  ------------------
 1957|    208|            SCN_UNLIKELY_ATTR
 1958|    208|            return;
 1959|    208|        }
 1960|       |
 1961|  52.6k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  52.6k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.6k, False: 3.03k]
  |  |  ------------------
  ------------------
 1963|  49.6k|            on_error(r.error());
 1964|  49.6k|        }
 1965|  3.03k|        else {
 1966|  3.03k|            get_ctx().advance_to(*r);
 1967|  3.03k|        }
 1968|  52.6k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  11.9k|{
 1351|  11.9k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  11.9k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  11.9k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  11.9k|            return transcode_to_string_impl_to32(src, dest);
 1362|  11.9k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  11.9k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  11.9k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  11.9k|{
 1244|  11.9k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  11.9k|    auto it = src.begin();
 1247|  3.48M|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 3.47M, False: 11.9k]
  ------------------
 1248|  3.47M|        auto res = get_next_code_point(
 1249|  3.47M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|  3.47M|                                                                 src.end()));
 1251|  3.47M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  3.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126k, False: 3.34M]
  |  |  ------------------
  ------------------
 1252|   126k|            dest.push_back(DestCharT{0xfffd});
 1253|   126k|        }
 1254|  3.34M|        else {
 1255|  3.34M|            dest.push_back(res.value);
 1256|  3.34M|        }
 1257|  3.47M|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|  3.47M|    }
 1259|  11.9k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  3.71M|{
 1169|  3.71M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  3.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  3.71M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  3.71M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.7k, False: 3.63M]
  |  |  ------------------
  ------------------
 1173|  76.7k|        return {get_start_for_next_code_point(input),
 1174|  76.7k|                detail::invalid_code_point};
 1175|  76.7k|    }
 1176|  3.63M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  3.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.02k, False: 3.63M]
  |  |  ------------------
  ------------------
 1177|  1.02k|        return {input.end(), detail::invalid_code_point};
 1178|  1.02k|    }
 1179|       |
 1180|  3.63M|    return {input.begin() + len,
 1181|  3.63M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  3.63M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  76.7k|{
 1155|  76.7k|    auto it = input.begin();
 1156|   333k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 331k, False: 1.76k]
  ------------------
 1157|   331k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 74.9k, False: 257k]
  ------------------
 1158|  74.9k|            break;
 1159|  74.9k|        }
 1160|   331k|    }
 1161|  76.7k|    return it;
 1162|  76.7k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  51.3k|    constexpr parse_error(code c) : m_code(c)
  808|  51.3k|    {
  809|  51.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  51.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  51.3k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  18.6k|    {
  823|  18.6k|        return a.m_code == b.m_code;
  824|  18.6k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2919|   122k|    {
 2920|   122k|        SCN_UNLIKELY_ATTR
 2921|   122k|        m_msg = msg;
 2922|   122k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|   193k|    {
 2925|   193k|        return m_msg == nullptr;
 2926|   193k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3633|  1.15k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4978|  1.04M|    {
 4979|  1.04M|        on_charset_range(cp, cp + 1);
 4980|  1.04M|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4983|  1.04M|    {
 4984|  1.04M|        if (end <= 127) {
  ------------------
  |  Branch (4984:13): [True: 590k, False: 458k]
  ------------------
 4985|   590k|            return;
 4986|   590k|        }
 4987|       |
 4988|  76.3M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4988:25): [True: 76.3M, False: 452k]
  ------------------
 4989|       |            // TODO: check for overlap
 4990|  76.3M|            if (elem.first == end) {
  ------------------
  |  Branch (4990:17): [True: 1.27k, False: 76.3M]
  ------------------
 4991|  1.27k|                elem.first = begin;
 4992|  1.27k|                return;
 4993|  1.27k|            }
 4994|       |
 4995|  76.3M|            if (elem.second == begin) {
  ------------------
  |  Branch (4995:17): [True: 5.32k, False: 76.3M]
  ------------------
 4996|  5.32k|                elem.second = end;
 4997|  5.32k|                return;
 4998|  5.32k|            }
 4999|  76.3M|        }
 5000|       |
 5001|   452k|        extra_ranges.push_back(std::make_pair(begin, end));
 5002|   452k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5005|    720|    {
 5006|       |        // no-op
 5007|    720|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5020|  1.06M|    {
 5021|  1.06M|        return static_cast<bool>(err);
 5022|  1.06M|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5338|  1.53k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  64.6k|{
  458|  64.6k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  64.6k|        static_cast<unsigned char>(ch))];
  460|  64.6k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   728k|{
  469|   728k|    return static_cast<unsigned char>(ch) <= 127;
  470|   728k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  1.60k|{
  474|  1.60k|#if WCHAR_MIN < 0
  475|  1.60k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 1.59k, False: 12]
  |  Branch (475:23): [True: 1.59k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  1.60k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   823k|{
  483|   823k|    return cp <= 127;
  484|   823k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  50.8k|{
  539|  50.8k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  50.8k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  53.0k|{
  784|  53.0k|    return e != eof_error::good;
  785|  53.0k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    174|{
  798|    174|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    174|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    174|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    174|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    174|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    730|{
  845|    730|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    730|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    730|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    730|    return parse_error::eof;
  847|    730|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  4.41k|{
  854|  4.41k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 4.41k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  4.41k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 76, False: 4.33k]
  ------------------
  859|     76|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     76|    }
  861|       |
  862|  4.33k|    return scan_error{code, msg};
  863|  4.41k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  4.41k|{
  868|  4.41k|    return [code, msg](parse_error err) {
  869|  4.41k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.41k|    };
  871|  4.41k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|  3.89k|{
 2209|  3.89k|    unsigned char running_diff{0};
 2210|  13.5k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 9.69k, False: 3.89k]
  ------------------
 2211|  9.69k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|  9.69k|    }
 2213|  3.89k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 0, False: 3.89k]
  |  Branch (2213:33): [True: 0, False: 3.89k]
  ------------------
 2214|  3.89k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2291|   186k|{
 2292|   186k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2292:9): [True: 33.0k, False: 153k]
  ------------------
 2293|   186k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2293:10): [True: 222, False: 32.8k]
  ------------------
 2294|  33.0k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2294:10): [True: 144, False: 32.6k]
  ------------------
 2295|  33.0k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2295:10): [True: 72, False: 32.6k]
  ------------------
 2296|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2297|  33.0k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2297:11): [True: 20.8k, False: 11.7k]
  |  Branch (2297:27): [True: 1.73k, False: 19.0k]
  |  Branch (2297:43): [True: 898, False: 834]
  ------------------
 2298|  33.0k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2298:11): [True: 19.0k, False: 12.6k]
  |  Branch (2298:27): [True: 304, False: 18.7k]
  ------------------
 2299|  33.0k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2299:11): [True: 18.6k, False: 12.7k]
  |  Branch (2299:27): [True: 118, False: 18.5k]
  ------------------
 2300|  33.0k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2300:11): [True: 18.5k, False: 12.7k]
  |  Branch (2300:27): [True: 1.23k, False: 17.3k]
  ------------------
 2301|  33.0k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2301:11): [True: 17.3k, False: 12.7k]
  |  Branch (2301:27): [True: 214, False: 17.1k]
  ------------------
 2302|  33.0k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2302:11): [True: 17.1k, False: 12.7k]
  |  Branch (2302:27): [True: 206, False: 16.9k]
  ------------------
 2303|  33.0k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2303:11): [True: 16.9k, False: 12.7k]
  |  Branch (2303:27): [True: 80, False: 16.8k]
  ------------------
 2304|  33.0k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2304:11): [True: 16.6k, False: 12.9k]
  |  Branch (2304:28): [True: 222, False: 16.4k]
  ------------------
 2305|  33.0k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2305:11): [True: 16.4k, False: 12.9k]
  |  Branch (2305:28): [True: 468, False: 15.9k]
  ------------------
 2306|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2307|  33.0k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2307:11): [True: 16.0k, False: 12.7k]
  |  Branch (2307:28): [True: 78, False: 16.0k]
  ------------------
 2308|       |         // Supplemental Symbols and Pictographs:
 2309|  33.0k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2309:11): [True: 16.0k, False: 12.7k]
  |  Branch (2309:28): [True: 72, False: 15.9k]
  ------------------
 2310|  4.33k|        return 2;
 2311|  4.33k|    }
 2312|   181k|    return 1;
 2313|   186k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2316|   102k|{
 2317|   102k|    return calculate_text_width_for_fmt_v10(cp);
 2318|   102k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2331|    346|{
 2332|    346|    return calculate_text_width_for_fmt_v10(cp);
 2333|    346|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  17.2k|{
 3112|  17.2k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  17.2k|}
_ZN3scn2v34impl11char_to_intEw:
 3115|  8.43k|{
 3116|  8.43k|#if WCHAR_MIN < 0
 3117|  8.43k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 8.43k, False: 0]
  |  Branch (3117:20): [True: 8.43k, False: 0]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|  8.43k|        return char_to_int(static_cast<char>(ch));
 3122|  8.43k|    }
 3123|      0|    return 255;
 3124|  8.43k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4259|  51.4k|{
 4260|  51.4k|    std::regex_constants::syntax_option_type result{};
 4261|  51.4k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4261:9): [True: 1.14k, False: 50.2k]
  ------------------
 4262|  1.14k|#if SCN_HAS_STD_REGEX_MULTILINE
 4263|  1.14k|        result |= std::regex_constants::multiline;
 4264|       |#else
 4265|       |        return unexpected_scan_error(
 4266|       |            scan_error::invalid_format_string,
 4267|       |            "/m flag for regex isn't supported by regex backend");
 4268|       |#endif
 4269|  1.14k|    }
 4270|  51.4k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4270:9): [True: 0, False: 51.4k]
  ------------------
 4271|  51.4k|        detail::regex_flags::none) {
 4272|      0|        return unexpected_scan_error(
 4273|      0|            scan_error::invalid_format_string,
 4274|      0|            "/s flag for regex isn't supported by regex backend");
 4275|      0|    }
 4276|  51.4k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4276:9): [True: 9.38k, False: 42.0k]
  ------------------
 4277|  9.38k|        result |= std::regex_constants::icase;
 4278|  9.38k|    }
 4279|  51.4k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4279:9): [True: 24, False: 51.3k]
  ------------------
 4280|     24|        result |= std::regex_constants::nosubs;
 4281|     24|    }
 4282|  51.4k|    return result;
 4283|  51.4k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4626|  6.13k|{
 4627|  6.13k|    std::string result{pattern};
 4628|  53.7k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4628:24): [True: 47.6k, False: 6.13k]
  ------------------
 4629|  47.6k|        result.replace(n, 2, "/");
 4630|  47.6k|        ++n;
 4631|  47.6k|    }
 4632|  6.13k|    return result;
 4633|  6.13k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4635|    414|{
 4636|    414|    std::wstring result{pattern};
 4637|  4.45k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4637:24): [True: 4.03k, False: 414]
  ------------------
 4638|  4.03k|        result.replace(n, 2, L"/");
 4639|  4.03k|        ++n;
 4640|  4.03k|    }
 4641|    414|    return result;
 4642|    414|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  14.0k|{
 5997|  14.0k|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 3.38k, False: 10.6k]
  ------------------
 5998|  3.38k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 2.14k, False: 1.23k]
  ------------------
 5999|  2.14k|            return {scan_error::invalid_scanned_value,
 6000|  2.14k|                    "Scanned value too narrow, width did not exceed what "
 6001|  2.14k|                    "was specified in the format string"};
 6002|  2.14k|        }
 6003|  3.38k|    }
 6004|  11.8k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 2.28k, False: 9.57k]
  ------------------
 6005|  2.28k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 114, False: 2.17k]
  ------------------
 6006|    114|            return {scan_error::invalid_scanned_value,
 6007|    114|                    "Scanned value too wide, width exceeded the specified "
 6008|    114|                    "precision"};
 6009|    114|        }
 6010|  2.28k|    }
 6011|  11.7k|    return {};
 6012|  11.8k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  60.8k|    {
  304|  60.8k|        ranges::advance(x, n);
  305|  60.8k|        return x;
  306|  60.8k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  60.8k|    {
  268|  60.8k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  60.8k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   170k|    {
  151|   170k|        i += n;
  152|   170k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   115k|    {
  108|   115k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   115k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   115k|    {
   87|   115k|        return s - i;
   88|   115k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  9.12k|    {
  304|  9.12k|        ranges::advance(x, n);
  305|  9.12k|        return x;
  306|  9.12k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  9.12k|    {
  268|  9.12k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  9.12k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  9.12k|    {
  151|  9.12k|        i += n;
  152|  9.12k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  8.26k|    {
  108|  8.26k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  8.26k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  8.26k|    {
   87|  8.26k|        return s - i;
   88|  8.26k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5612|  15.5k|    {
 5613|  15.5k|        reader_error_handler eh{};
 5614|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5615|       |            detail::check_code_point_type_specs(specs, eh);
 5616|       |        }
 5617|  15.5k|        else {
 5618|  15.5k|            detail::check_char_type_specs(specs, eh);
 5619|  15.5k|        }
 5620|  15.5k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.9k, False: 596]
  |  |  ------------------
  ------------------
 5621|  14.9k|            return {scan_error::invalid_format_string, eh.m_msg};
 5622|  14.9k|        }
 5623|    596|        return {};
 5624|  15.5k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  33.0k|    {
  763|  33.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  33.0k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  7.46k|        : m_fptr([](storage fn,
  743|  7.46k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.46k|              cvref<T> obj = *get<T>(fn);
  745|  7.46k|              if constexpr (std::is_void_v<R>) {
  746|  7.46k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.46k|              }
  748|  7.46k|              else {
  749|  7.46k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.46k|              }
  751|  7.46k|          }),
  752|  7.46k|          m_storage(std::addressof(f))
  753|  7.46k|    {
  754|  7.46k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  11.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.3k|              else {
  749|  11.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.3k|              }
  751|  11.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  11.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  11.3k|        else if constexpr (std::is_object_v<T>) {
  688|  11.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.3k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  7.46k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.46k|        {
  662|  7.46k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  1.79M|    {
  763|  1.79M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.79M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  27.5k|        : m_fptr([](storage fn,
  743|  27.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.5k|              cvref<T> obj = *get<T>(fn);
  745|  27.5k|              if constexpr (std::is_void_v<R>) {
  746|  27.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.5k|              }
  748|  27.5k|              else {
  749|  27.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.5k|              }
  751|  27.5k|          }),
  752|  27.5k|          m_storage(std::addressof(f))
  753|  27.5k|    {
  754|  27.5k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|   847k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   847k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   847k|              else {
  749|   847k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   847k|              }
  751|   847k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   847k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   847k|        else if constexpr (std::is_object_v<T>) {
  688|   847k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   847k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  27.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  27.5k|        {
  662|  27.5k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5607|  1.79k|    {
 5608|  1.79k|        return false;
 5609|  1.79k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  4.41k|    return [code, msg](parse_error err) {
  869|  4.41k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.41k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|    130|    {
 1768|    130|        auto stdloc = loc.get<std::locale>();
 1769|    130|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|    130|        grouping = numpunct.grouping();
 1771|    130|        thousands_sep =
 1772|    130|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 130]
  ------------------
 1773|    130|        decimal_point = numpunct.decimal_point();
 1774|    130|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|    168|{
 1705|    168|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 168, False: 0]
  ------------------
 1706|    168|        return std::use_facet<Facet>(stdloc);
 1707|    168|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|    168|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2337|  30.3k|{
 2338|  30.3k|    size_t count{0};
 2339|  30.3k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  30.3k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  30.3k|    });
 2342|  30.3k|    return count;
 2343|  30.3k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1433|  30.3k|{
 1434|       |    // TODO: Could be optimized by being eager
 1435|  30.3k|    auto it = input.begin();
 1436|   105k|    while (it != input.end()) {
  ------------------
  |  Branch (1436:12): [True: 75.0k, False: 30.3k]
  ------------------
 1437|  75.0k|        auto res = get_next_code_point(
 1438|  75.0k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1439|  75.0k|        cb(res.value);
 1440|  75.0k|        it = detail::make_string_view_iterator(input, res.iterator);
 1441|  75.0k|    }
 1442|  30.3k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  83.2k|    {
  763|  83.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  83.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  83.2k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  30.3k|        : m_fptr([](storage fn,
  743|  30.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  30.3k|              cvref<T> obj = *get<T>(fn);
  745|  30.3k|              if constexpr (std::is_void_v<R>) {
  746|  30.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  30.3k|              }
  748|  30.3k|              else {
  749|  30.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  30.3k|              }
  751|  30.3k|          }),
  752|  30.3k|          m_storage(std::addressof(f))
  753|  30.3k|    {
  754|  30.3k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  75.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  75.0k|              cvref<T> obj = *get<T>(fn);
  745|  75.0k|              if constexpr (std::is_void_v<R>) {
  746|  75.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  75.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  75.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  75.0k|        else if constexpr (std::is_object_v<T>) {
  688|  75.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  75.0k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2339|  75.0k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  75.0k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  75.0k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  30.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  30.3k|        {
  662|  30.3k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|  4.12k|    {
 1570|  4.12k|        return m_view;
 1571|  4.12k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|  4.35k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2409|  3.58k|    {
 2410|  3.58k|        return m_multibyte_left;
 2411|  3.58k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2414|   198k|    {
 2415|   198k|        return *m_current;
 2416|   198k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2423|   184k|    {
 2424|   184k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|   184k|        _increment_current();
 2426|   184k|        return *this;
 2427|   184k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2656|   184k|    {
 2657|   184k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 84.8k, False: 99.8k]
  ------------------
 2658|  84.8k|            auto cplen = _get_cp_length_at_current();
 2659|  84.8k|            m_multibyte_left = cplen - 1;
 2660|  84.8k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  84.8k|        }
 2662|  99.8k|        else {
 2663|  99.8k|            --m_multibyte_left;
 2664|  99.8k|        }
 2665|       |
 2666|   184k|        ++m_current;
 2667|   184k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2627|  84.8k|    {
 2628|  84.8k|        return static_cast<difference_type>(
 2629|  84.8k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  84.8k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2633|  84.8k|    {
 2634|  84.8k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  84.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 824, False: 84.0k]
  |  |  ------------------
  ------------------
 2635|    824|            return 0;
 2636|    824|        }
 2637|       |
 2638|  84.0k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 58.1k, False: 25.9k]
  ------------------
 2639|  58.1k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  58.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  58.1k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  58.1k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  58.1k|        }
 2643|       |
 2644|  25.9k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|  25.9k|                                           cplen);
 2646|  25.9k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  25.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 25.5k]
  |  |  ------------------
  ------------------
 2647|    332|            return 0;
 2648|    332|        }
 2649|       |
 2650|  25.5k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|  25.5k|        return static_cast<difference_type>(
 2652|  25.5k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|  25.9k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  28.4k|{
 1845|  28.4k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  28.4k|    if constexpr (ranges::sized_range<Range>) {
 1848|  28.4k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  28.4k|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 440, False: 27.9k]
  ------------------
 1850|    440|            return unexpected(eof_error::eof);
 1851|    440|        }
 1852|       |
 1853|  27.9k|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  28.4k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2519|   102k|    {
 2520|   102k|        return !(a == b);
 2521|   102k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2511|   110k|    {
 2512|   110k|        return a.m_current == b.m_current;
 2513|   110k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2418|  8.87k|    {
 2419|  8.87k|        return *m_current;
 2420|  8.87k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  1.36k|    {
  268|  1.36k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.36k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  1.36k|    {
  161|  1.36k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  1.36k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 1.36k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  1.36k|        else {
  169|  1.36k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 1.36k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  1.36k|        }
  173|  1.36k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1877|  53.8k|    {
 1878|  53.8k|        return !codepoint.empty();
 1879|  53.8k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1670|  1.85k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|  1.85k|    else {
 1677|  1.85k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|  1.85k|    }
 1679|  1.85k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1524|  1.85k|    {
 1525|  1.85k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|  1.85k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1608|  1.85k|    {
 1609|  1.85k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|  1.85k|        else {
 1642|  1.85k|            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|  1.85k|            if constexpr (ranges::common_range<Range>) {
 1647|  1.85k|                std::copy(ranges::begin(range), ranges::end(range),
 1648|  1.85k|                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|  1.85k|            m_view = string_view_type{str};
 1657|  1.85k|        }
 1658|  1.85k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2369|  24.0k|        : m_current(x), m_end(s), m_count(n)
 2370|  24.0k|    {
 2371|  24.0k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2401|   195k|    {
 2402|   195k|        return m_current;
 2403|   195k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2820|  12.2k|    {
 2821|  12.2k|        return take_width_view{r, n};
 2822|  12.2k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2788|  12.2k|        : m_base(base), m_count(count)
 2789|  12.2k|    {
 2790|  12.2k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2702|  12.2k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5651|    316|    {
 5652|    316|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5652:13): [True: 284, False: 32]
  ------------------
 5653|    316|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5653:13): [True: 0, False: 32]
  ------------------
 5654|    284|            return read_default(range, value, loc);
 5655|    284|        }
 5656|       |
 5657|     32|        reader_impl_for_int<CharT> reader{};
 5658|     32|        signed char tmp_value{};
 5659|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5660|     32|        value = static_cast<signed char>(value);
 5661|     32|        return ret;
 5662|    316|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5633|    284|    {
 5634|    284|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    284|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5635|    284|        if constexpr (std::is_same_v<CharT, char>) {
 5636|    284|            return code_unit_reader<char>{}.read(range, value);
 5637|       |        }
 5638|       |        else {
 5639|       |            SCN_UNUSED(range);
 5640|       |            SCN_EXPECT(false);
 5641|       |            SCN_UNREACHABLE;
 5642|       |        }
 5643|    284|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5552|    284|    {
 5553|    284|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    284|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    284|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    284|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    284|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    284|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    284|        ch = *range.begin();
 5555|    284|        return it;
 5556|    284|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1833|  2.09k|{
 1834|  2.09k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.09k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  2.09k|    return ranges::next(range.begin());
 1839|  2.09k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  2.09k|{
  950|  2.09k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.09k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  2.09k|    return eof_error::good;
  954|  2.09k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  2.09k|{
  944|  2.09k|    return is_range_eof(r.begin(), r.end());
  945|  2.09k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  55.9k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  55.9k|    {
  937|  55.9k|        return begin == end;
  938|  55.9k|    }
  939|  55.9k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2758|   187k|        {
 2759|   187k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 3.58k, False: 183k]
  |  Branch (2759:39): [True: 866, False: 2.71k]
  ------------------
 2760|   187k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 1.20k, False: 184k]
  ------------------
 2761|   187k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2804|   115k|    {
 2805|   115k|        return sentinel<true>{m_base.get().end()};
 2806|   115k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2705|   163k|    {
 2706|   163k|        return view;
 2707|   163k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2739|   115k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.12k|    {
  296|  2.12k|        ++x;
  297|  2.12k|        return x;
  298|  2.12k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2798|  24.0k|    {
 2799|  24.0k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  24.0k|                                      m_count};
 2801|  24.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|     32|    {
 3528|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|     32|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 32]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 32]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3554|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3314|    906|{
 3315|    906|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 906]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|    906|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|    906|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|    906|        parse_integer_base_prefix(
 3320|    906|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|    906|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 906]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|    906|    else {
 3332|    906|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 906]
  |  Branch (3332:13): [True: 906, False: 0]
  ------------------
 3333|    906|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 906, False: 0]
  ------------------
 3334|    906|            digits_begin_it = base_prefix_begin_it;
 3335|    906|        }
 3336|    906|    }
 3337|       |
 3338|    906|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 906, False: 0]
  ------------------
 3339|    906|        sign = sign_type::plus_sign;
 3340|    906|    }
 3341|    906|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|    906|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|    906|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3129|  1.20k|{
 3130|  1.20k|    auto r = read_one_of_code_unit(range, "+-");
 3131|  1.20k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 1.20k, False: 0]
  ------------------
 3132|  1.20k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 1.20k, False: 0]
  ------------------
 3133|  1.20k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  1.20k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|  1.20k|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2260|  1.20k|{
 2261|  1.20k|    auto it = read_code_unit(range);
 2262|  1.20k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.20k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  2.40k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 2.40k, False: 1.20k]
  ------------------
 2267|  2.40k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 2.40k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  2.40k|    }
 2271|       |
 2272|  1.20k|    return unexpected(parse_error::error);
 2273|  1.20k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3281|    906|{
 3282|    906|    switch (base) {
 3283|     14|        case 2:
  ------------------
  |  Branch (3283:9): [True: 14, False: 892]
  ------------------
 3284|       |            // allow 0b/0B
 3285|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|     14|                    false};
 3287|       |
 3288|     14|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 14, False: 892]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     14|            bool zero_parsed = false;
 3291|     14|            auto it = apply_opt(
 3292|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     14|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    292|        case 16:
  ------------------
  |  Branch (3296:9): [True: 292, False: 614]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    292|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    292|                    false};
 3300|       |
 3301|     20|        case 0:
  ------------------
  |  Branch (3301:9): [True: 20, False: 886]
  ------------------
 3302|       |            // detect base
 3303|     20|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|    566|        default:
  ------------------
  |  Branch (3305:9): [True: 566, False: 340]
  ------------------
 3306|       |            // no base prefix allowed
 3307|    566|            return {range.begin(), base, false};
 3308|    906|    }
 3309|    906|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2279|    320|{
 2280|    320|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 320, False: 0]
  ------------------
 2281|    320|        return range.begin();
 2282|    320|    }
 2283|      0|    return *result;
 2284|    320|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3232|     34|{
 3233|     34|    return read_matching_string_classic_nocase(range, "0b");
 3234|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2219|  1.25k|{
 2220|  1.25k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  1.25k|    else {
 2233|  1.25k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.25k|            if (ch < 'A' || ch > 'Z') {
 2235|  1.25k|                return ch;
 2236|  1.25k|            }
 2237|  1.25k|            return static_cast<char_type>(ch +
 2238|  1.25k|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.25k|        };
 2240|       |
 2241|  1.25k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 182, False: 1.07k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    182|    }                                                  \
  |  |  |  | 3667|  1.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  1.07k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  1.07k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  1.07k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.07k, False: 0]
  |  |  ------------------
  ------------------
 2246|  1.07k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  1.07k|                    return ascii_tolower(a) ==
 2248|  1.07k|                           static_cast<detail::char_t<Range>>(b);
 2249|  1.07k|                }))) {
 2250|  1.07k|            return unexpected(parse_error::error);
 2251|  1.07k|        }
 2252|       |
 2253|      0|        return it;
 2254|  1.07k|    }
 2255|  1.25k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1844|  3.91k|{
 1845|  3.91k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  3.91k|    else {
 1856|  3.91k|        auto it = range.begin();
 1857|  3.91k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 3.91k]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  14.4k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 10.7k, False: 3.70k]
  ------------------
 1862|  10.7k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 210, False: 10.5k]
  ------------------
 1863|    210|                return unexpected(eof_error::eof);
 1864|    210|            }
 1865|  10.7k|        }
 1866|       |
 1867|  3.70k|        return it;
 1868|  3.91k|    }
 1869|  3.91k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  3.91k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|  3.91k|    else {
 1115|  3.91k|        return 0;
 1116|  3.91k|    }
 1117|  3.91k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2233|  1.07k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.07k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 42, False: 1.03k]
  |  Branch (2234:29): [True: 1.03k, False: 0]
  ------------------
 2235|  1.07k|                return ch;
 2236|  1.07k|            }
 2237|      0|            return static_cast<char_type>(ch +
 2238|      0|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.07k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3246|     34|{
 3247|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 34]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 34]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     34|    return unexpected(parse_error::error);
 3257|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2134|     34|{
 2135|     34|    auto it = read_code_unit(range);
 2136|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2141|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|     34|        return unexpected(parse_error::error);
 2143|     34|    }
 2144|       |
 2145|      0|    return *it;
 2146|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1833|     34|{
 1834|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|     34|    return ranges::next(range.begin());
 1839|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  53.8k|{
  944|  53.8k|    return is_range_eof(r.begin(), r.end());
  945|  53.8k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3239|    312|{
 3240|    312|    return read_matching_string_classic_nocase(range, "0x");
 3241|    312|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3262|     20|{
 3263|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 20]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 20]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     20|    {
 3270|     20|        bool zero_parsed{false};
 3271|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 20]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     20|    }
 3275|     20|    return {range.begin(), 10, false};
 3276|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3348|    886|{
 3349|    886|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|    886|    else {
 3360|    886|        return read_while1_code_unit(range,
 3361|    886|                                     [&](char_type ch) noexcept {
 3362|    886|                                         return char_to_int(ch) < base;
 3363|    886|                                     })
 3364|    886|            .transform_error(map_parse_error_to_scan_error(
 3365|    886|                scan_error::invalid_scanned_value,
 3366|    886|                "Failed to parse integer: No digits found"));
 3367|    886|    }
 3368|    886|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1983|  1.18k|{
 1984|  1.18k|    auto it = read_while_code_unit(range, pred);
 1985|  1.18k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 1.18k, False: 0]
  ------------------
 1986|  1.18k|        return unexpected(parse_error::error);
 1987|  1.18k|    }
 1988|      0|    return it;
 1989|  1.18k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1963|  1.18k|{
 1964|  1.18k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  1.18k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1944|  1.18k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  1.18k|    else {
 1949|  1.18k|        auto first = range.begin();
 1950|  1.18k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.18k, False: 0]
  ------------------
 1951|  1.18k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 1.18k, False: 0]
  ------------------
 1952|  1.18k|                return first;
 1953|  1.18k|            }
 1954|  1.18k|        }
 1955|      0|        return first;
 1956|  1.18k|    }
 1957|  1.18k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   102k|        {
 2770|   102k|            return !(y == x);
 2771|   102k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    886|        : m_fptr([](storage fn,
  743|    886|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    886|              cvref<T> obj = *get<T>(fn);
  745|    886|              if constexpr (std::is_void_v<R>) {
  746|    886|                  obj(static_cast<decltype(args)>(args)...);
  747|    886|              }
  748|    886|              else {
  749|    886|                  return obj(static_cast<decltype(args)>(args)...);
  750|    886|              }
  751|    886|          }),
  752|    886|          m_storage(std::addressof(f))
  753|    886|    {
  754|    886|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    886|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    886|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    886|              else {
  749|    886|                  return obj(static_cast<decltype(args)>(args)...);
  750|    886|              }
  751|    886|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    886|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    886|        else if constexpr (std::is_object_v<T>) {
  688|    886|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    886|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3361|    886|                                     [&](char_type ch) noexcept {
 3362|    886|                                         return char_to_int(ch) < base;
 3363|    886|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    886|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    886|        {
  662|    886|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3378|     20|{
 3379|     20|    std::basic_string<CharT> output;
 3380|     20|    std::string thsep_indices;
 3381|     20|    auto it = range.begin();
 3382|     20|    bool digit_matched = false;
 3383|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 20, False: 0]
  ------------------
 3384|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 20]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 20, False: 0]
  ------------------
 3389|     20|            break;
 3390|     20|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     20|    }
 3396|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3397|     20|        return unexpected_scan_error(
 3398|     20|            scan_error::invalid_scanned_value,
 3399|     20|            "Failed to parse integer: No digits found");
 3400|     20|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     20|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2405|   189k|    {
 2406|   189k|        return m_count;
 2407|   189k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5651|    274|    {
 5652|    274|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5652:13): [True: 252, False: 22]
  ------------------
 5653|    274|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5653:13): [True: 0, False: 22]
  ------------------
 5654|    252|            return read_default(range, value, loc);
 5655|    252|        }
 5656|       |
 5657|     22|        reader_impl_for_int<CharT> reader{};
 5658|     22|        signed char tmp_value{};
 5659|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5660|     22|        value = static_cast<signed char>(value);
 5661|     22|        return ret;
 5662|    274|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5633|    912|    {
 5634|    912|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    912|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5635|    912|        if constexpr (std::is_same_v<CharT, char>) {
 5636|    912|            return code_unit_reader<char>{}.read(range, value);
 5637|       |        }
 5638|       |        else {
 5639|       |            SCN_UNUSED(range);
 5640|       |            SCN_EXPECT(false);
 5641|       |            SCN_UNREACHABLE;
 5642|       |        }
 5643|    912|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5552|    912|    {
 5553|    912|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    912|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    912|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    912|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    912|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 912]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    912|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    912|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    912|        ch = *range.begin();
 5555|    912|        return it;
 5556|    912|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  6.83k|{
 1834|  6.83k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.83k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  6.83k|    return ranges::next(range.begin());
 1839|  6.83k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  22.6k|{
  950|  22.6k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  22.6k|    return eof_error::good;
  954|  22.6k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   808k|{
  944|   808k|    return is_range_eof(r.begin(), r.end());
  945|   808k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   893k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   893k|    {
  937|   893k|        return begin == end;
  938|   893k|    }
  939|   893k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  75.6k|    {
  296|  75.6k|        ++x;
  297|  75.6k|        return x;
  298|  75.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|     22|    {
 3528|     22|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|     22|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|     22|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 22]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|     22|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 22]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|     22|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 3554|     22|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|     22|                    parse_integer_digits_without_thsep(
 3556|     22|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|     22|                        prefix_result.parsed_base));
 3558|       |
 3559|     22|            auto buf = make_contiguous_buffer(
 3560|     22|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|     22|            SCN_TRY(result_it,
  ------------------
  |  | 3668|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|     22|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|  2.89k|{
 3315|  2.89k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  2.89k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.89k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.89k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.89k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.89k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|  2.89k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|  2.89k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|  2.89k|        parse_integer_base_prefix(
 3320|  2.89k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|  2.89k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 2.89k]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|  2.89k|    else {
 3332|  2.89k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 2.89k]
  ------------------
 3333|  2.89k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 2.89k, False: 0]
  ------------------
 3334|  2.89k|            digits_begin_it = base_prefix_begin_it;
 3335|  2.89k|        }
 3336|  2.89k|    }
 3337|       |
 3338|  2.89k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 2.89k, False: 0]
  ------------------
 3339|  2.89k|        sign = sign_type::plus_sign;
 3340|  2.89k|    }
 3341|  2.89k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|  2.89k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|  2.89k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|  3.85k|{
 3130|  3.85k|    auto r = read_one_of_code_unit(range, "+-");
 3131|  3.85k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 3.85k, False: 0]
  ------------------
 3132|  3.85k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 3.85k, False: 0]
  ------------------
 3133|  3.85k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  3.85k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|  3.85k|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  3.85k|{
 2261|  3.85k|    auto it = read_code_unit(range);
 2262|  3.85k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.85k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  7.70k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 7.70k, False: 3.85k]
  ------------------
 2267|  7.70k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 7.70k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  7.70k|    }
 2271|       |
 2272|  3.85k|    return unexpected(parse_error::error);
 2273|  3.85k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|  2.89k|{
 3282|  2.89k|    switch (base) {
 3283|      6|        case 2:
  ------------------
  |  Branch (3283:9): [True: 6, False: 2.89k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|      6|                    false};
 3287|       |
 3288|     94|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 94, False: 2.80k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     94|            bool zero_parsed = false;
 3291|     94|            auto it = apply_opt(
 3292|     94|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     94|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    928|        case 16:
  ------------------
  |  Branch (3296:9): [True: 928, False: 1.97k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    928|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    928|                    false};
 3300|       |
 3301|     16|        case 0:
  ------------------
  |  Branch (3301:9): [True: 16, False: 2.88k]
  ------------------
 3302|       |            // detect base
 3303|     16|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  1.85k|        default:
  ------------------
  |  Branch (3305:9): [True: 1.85k, False: 1.04k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  1.85k|            return {range.begin(), base, false};
 3308|  2.89k|    }
 3309|  2.89k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|  1.02k|{
 2280|  1.02k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 1.02k, False: 0]
  ------------------
 2281|  1.02k|        return range.begin();
 2282|  1.02k|    }
 2283|      0|    return *result;
 2284|  1.02k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|     22|{
 3233|     22|    return read_matching_string_classic_nocase(range, "0b");
 3234|     22|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  3.90k|{
 2220|  3.90k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|  3.90k|                  std::is_same_v<char_type, char>) {
 2224|  3.90k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 8, False: 3.89k]
  ------------------
 2225|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|      8|        }
 2227|  3.89k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 3.89k, False: 0]
  ------------------
 2228|  3.89k|            return unexpected(parse_error::error);
 2229|  3.89k|        }
 2230|      0|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|  3.90k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|    110|{
 3247|    110|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 110]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|    110|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 110]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|    110|    return unexpected(parse_error::error);
 3257|    110|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|  2.07k|{
 2135|  2.07k|    auto it = read_code_unit(range);
 2136|  2.07k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.07k]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|  2.07k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 0]
  |  |  ------------------
  ------------------
 2141|  2.07k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  2.07k|        return unexpected(parse_error::error);
 2143|  2.07k|    }
 2144|       |
 2145|      0|    return *it;
 2146|  2.07k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|    944|{
 3240|    944|    return read_matching_string_classic_nocase(range, "0x");
 3241|    944|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|     16|{
 3263|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 16]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 16]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     16|    {
 3270|     16|        bool zero_parsed{false};
 3271|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 16]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     16|    }
 3275|     16|    return {range.begin(), 10, false};
 3276|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|  2.80k|{
 3349|  2.80k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|  2.80k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|  2.80k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.80k]
  |  |  ------------------
  ------------------
 3353|      0|            return unexpected_scan_error(
 3354|      0|                scan_error::invalid_scanned_value,
 3355|      0|                "Failed to parse integer: No digits found");
 3356|      0|        }
 3357|  2.80k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|  2.80k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|     92|{
 3379|     92|    std::basic_string<CharT> output;
 3380|     92|    std::string thsep_indices;
 3381|     92|    auto it = range.begin();
 3382|     92|    bool digit_matched = false;
 3383|     92|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 92, False: 0]
  ------------------
 3384|     92|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 92]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     92|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 92, False: 0]
  ------------------
 3389|     92|            break;
 3390|     92|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     92|    }
 3396|     92|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     92|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 0]
  |  |  ------------------
  ------------------
 3397|     92|        return unexpected_scan_error(
 3398|     92|            scan_error::invalid_scanned_value,
 3399|     92|            "Failed to parse integer: No digits found");
 3400|     92|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     92|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  18.6k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  18.6k|                  ranges::sized_range<Range>) {
 1674|  18.6k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  18.6k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  18.6k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  18.6k|    {
 1478|  18.6k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  81.8k|    {
 1491|  81.8k|        return sv;
 1492|  81.8k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5939|  5.77k|{
 5940|  5.77k|    using char_type = detail::char_t<Range>;
 5941|  5.77k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|  5.77k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 5.38k, False: 396]
  ------------------
 5944|  5.38k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|  5.38k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|  5.38k|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 5.26k, False: 116]
  ------------------
 5948|  5.26k|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|  5.26k|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 280, False: 4.98k]
  ------------------
 5951|    280|                auto prefix_width =
 5952|    280|                    static_cast<std::ptrdiff_t>(
 5953|    280|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|    280|                    ranges::distance(range.begin(), it);
 5955|    280|                return result_type{it, prefix_width};
 5956|    280|            }
 5957|  4.98k|            return result_type{it, 0};
 5958|  5.26k|        }
 5959|       |
 5960|    116|        auto max_width_view = take_width(range, max_width);
 5961|    116|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|    116|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 116, False: 0]
  ------------------
 5964|    116|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|    116|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|    116|    }
 5968|       |
 5969|    396|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|    396|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 206, False: 190]
  ------------------
 5971|    206|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|    206|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 52, False: 154]
  ------------------
 5974|     52|            auto prefix_width =
 5975|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|     52|            return result_type{it, prefix_width};
 5978|     52|        }
 5979|    154|        return result_type{it, 0};
 5980|    206|    }
 5981|       |
 5982|    190|    auto max_width_view = take_width(range, max_width);
 5983|    190|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|    190|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 190, False: 0]
  ------------------
 5986|    190|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|    190|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|    190|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  5.44k|{
 1964|  5.44k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  5.44k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  5.65k|{
 1945|  5.65k|    if constexpr (ranges::common_range<Range>) {
 1946|  5.65k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  5.65k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|  5.38k|        : m_fptr([](storage fn,
  743|  5.38k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.38k|              cvref<T> obj = *get<T>(fn);
  745|  5.38k|              if constexpr (std::is_void_v<R>) {
  746|  5.38k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.38k|              }
  748|  5.38k|              else {
  749|  5.38k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.38k|              }
  751|  5.38k|          }),
  752|  5.38k|          m_storage(std::addressof(f))
  753|  5.38k|    {
  754|  5.38k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  5.80k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.80k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.80k|              else {
  749|  5.80k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.80k|              }
  751|  5.80k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  5.80k|    {
  684|  5.80k|        if constexpr (std::is_const_v<T>) {
  685|  5.80k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.80k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5945|  5.80k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|  5.38k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  5.38k|        {
  667|  5.38k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1963|    272|{
 1964|    272|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    272|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1944|    542|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    542|    else {
 1949|    542|        auto first = range.begin();
 1950|  9.74k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 9.44k, False: 292]
  ------------------
 1951|  9.44k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 250, False: 9.19k]
  ------------------
 1952|    250|                return first;
 1953|    250|            }
 1954|  9.44k|        }
 1955|    292|        return first;
 1956|    542|    }
 1957|    542|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2024|    206|{
 2025|    206|    static_assert(ranges::common_range<CodeUnits>);
 2026|       |
 2027|    206|    auto it = range.begin();
 2028|    364|    while (it != range.end()) {
  ------------------
  |  Branch (2028:12): [True: 364, False: 0]
  ------------------
 2029|    364|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2030|    364|                                           needle.size());
 2031|    364|        if (!r) {
  ------------------
  |  Branch (2031:13): [True: 6, False: 358]
  ------------------
 2032|      6|            return it;
 2033|      6|        }
 2034|    358|        static_assert(
 2035|    358|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2036|    358|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2036:13): [True: 200, False: 158]
  ------------------
 2037|    200|            return it;
 2038|    200|        }
 2039|    158|        it = *r;
 2040|    158|    }
 2041|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2042|      0|    return it;
 2043|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2024|    190|{
 2025|    190|    static_assert(ranges::common_range<CodeUnits>);
 2026|       |
 2027|    190|    auto it = range.begin();
 2028|    348|    while (it != range.end()) {
  ------------------
  |  Branch (2028:12): [True: 312, False: 36]
  ------------------
 2029|    312|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2030|    312|                                           needle.size());
 2031|    312|        if (!r) {
  ------------------
  |  Branch (2031:13): [True: 28, False: 284]
  ------------------
 2032|     28|            return it;
 2033|     28|        }
 2034|    284|        static_assert(
 2035|    284|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2036|    284|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2036:13): [True: 126, False: 158]
  ------------------
 2037|    126|            return it;
 2038|    126|        }
 2039|    158|        it = *r;
 2040|    158|    }
 2041|     36|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     36|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2042|     36|    return it;
 2043|     36|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2939|    546|{
 2940|    546|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 0, False: 546]
  ------------------
 2941|      0|        auto it = read_while_classic_space(range);
 2942|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|      0|        return it;
 2948|      0|    }
 2949|       |
 2950|    546|    return read_while_classic_space(range);
 2951|    546|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2104|    546|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|    546|    else {
 2114|    546|        auto it = range.begin();
 2115|       |
 2116|    546|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|    546|            auto seg = get_contiguous_beginning(range);
 2118|    546|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|    546|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 0, False: 546]
  ------------------
 2120|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|      0|            }
 2122|    546|            ranges::advance(it, seg.size());
 2123|    546|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    546|            return detail::is_cp_space(cp);
 2127|    546|        });
 2128|    546|    }
 2129|    546|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  1.36k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|       |                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|       |        else {
 1054|       |            return r.begin().contiguous_segment();
 1055|       |        }
 1056|       |    }
 1057|  1.36k|    else {
 1058|  1.36k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  1.36k|    }
 1060|  1.36k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2069|    876|{
 2070|    876|    return read_until_code_point(range, std::not_fn(pred));
 2071|    876|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2048|  1.03k|{
 2049|  1.03k|    auto it = range.begin();
 2050|  39.6k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 39.3k, False: 286]
  ------------------
 2051|  39.3k|        const auto val =
 2052|  39.3k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  39.3k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  39.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 34.2k, False: 5.09k]
  |  |  ------------------
  ------------------
 2054|  34.2k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  34.2k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  34.2k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 746, False: 33.5k]
  ------------------
 2057|    746|                return it;
 2058|    746|            }
 2059|  34.2k|        }
 2060|  38.6k|        it = val.iterator;
 2061|  38.6k|    }
 2062|       |
 2063|    286|    return it;
 2064|  1.03k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1886|  53.8k|{
 1887|  53.8k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  53.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  53.8k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  53.8k|    auto it = range.begin();
 1891|  53.8k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  53.8k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  53.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.51k, False: 45.2k]
  |  |  ------------------
  ------------------
 1894|  8.51k|        ++it;
 1895|  8.51k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  8.51k|        return {it, {}};
 1897|  8.51k|    }
 1898|       |
 1899|  45.2k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 40.4k, False: 4.82k]
  ------------------
 1900|  40.4k|        ++it;
 1901|  40.4k|        return {it, string_type(1, *range.begin())};
 1902|  40.4k|    }
 1903|       |
 1904|  4.82k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  4.82k|    return {it, string_type{range.begin(), it}};
 1906|  45.2k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  8.51k|{
 1155|  8.51k|    auto it = input.begin();
 1156|  10.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 10.2k, False: 180]
  ------------------
 1157|  10.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 8.33k, False: 1.95k]
  ------------------
 1158|  8.33k|            break;
 1159|  8.33k|        }
 1160|  10.2k|    }
 1161|  8.51k|    return it;
 1162|  8.51k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  4.82k|    {
  283|  4.82k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  4.82k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  4.82k|    {
  227|  4.82k|        constexpr iter_difference_t<I> zero{0};
  228|  4.82k|        iter_difference_t<I> counter{0};
  229|       |
  230|  4.82k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 4.82k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  4.82k|        else {
  237|  15.6k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 11.0k, False: 4.68k]
  |  Branch (237:34): [True: 10.8k, False: 138]
  ------------------
  238|  10.8k|                ++i;
  239|  10.8k|                ++counter;
  240|  10.8k|            }
  241|  4.82k|        }
  242|       |
  243|  4.82k|        return counter;
  244|  4.82k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    546|        : m_fptr([](storage fn,
  743|    546|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    546|              cvref<T> obj = *get<T>(fn);
  745|    546|              if constexpr (std::is_void_v<R>) {
  746|    546|                  obj(static_cast<decltype(args)>(args)...);
  747|    546|              }
  748|    546|              else {
  749|    546|                  return obj(static_cast<decltype(args)>(args)...);
  750|    546|              }
  751|    546|          }),
  752|    546|          m_storage(std::addressof(f))
  753|    546|    {
  754|    546|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  1.85k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.85k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.85k|              else {
  749|  1.85k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.85k|              }
  751|  1.85k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  1.85k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.85k|        else if constexpr (std::is_object_v<T>) {
  688|  1.85k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.85k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2125|  1.85k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.85k|            return detail::is_cp_space(cp);
 2127|  1.85k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    546|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    546|        {
  662|    546|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  7.30k|{
 2940|  7.30k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 7.02k, False: 276]
  ------------------
 2941|  7.02k|        auto it = read_while_classic_space(range);
 2942|  7.02k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  7.02k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.02k]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|  7.02k|        return it;
 2948|  7.02k|    }
 2949|       |
 2950|    276|    return read_while_classic_space(range);
 2951|  7.30k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  16.5k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|  16.5k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|  16.5k|        auto buf = make_contiguous_buffer(range);
 2109|  16.5k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|  16.5k|        return ranges::next(range.begin(),
 2111|  16.5k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|  16.5k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  19.4k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  19.4k|                  ranges::sized_range<Range>) {
 1674|  19.4k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  19.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  19.4k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|  19.4k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  19.4k|    {
 1478|  19.4k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  31.3k|    {
 3029|  31.3k|        reader_error_handler eh{};
 3030|  31.3k|        get_derived().check_specs_impl(specs, eh);
 3031|  31.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  31.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.0k, False: 1.30k]
  |  |  ------------------
  ------------------
 3032|  30.0k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  30.0k|        }
 3034|  1.30k|        return {};
 3035|  31.3k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3039|  31.3k|    {
 3040|  31.3k|        return static_cast<Derived&>(*this);
 3041|  31.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|  31.3k|    {
 3474|  31.3k|        detail::check_int_type_specs(specs, eh);
 3475|  31.3k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3023|  2.62k|    {
 3024|  2.62k|        return true;
 3025|  2.62k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    302|    {
 3528|    302|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    302|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    302|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 302]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    302|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 302]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    302|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    302|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 292, False: 10]
  |  |  ------------------
  ------------------
 3554|    292|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    292|    }                                                  \
  |  |  |  | 3667|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     10|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     10|            localized_number_formatting_options<CharT>{loc};
 3575|     10|#endif
 3576|       |
 3577|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    320|    {
 3528|    320|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    320|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    320|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    320|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 320]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    320|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 320]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    320|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    320|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 274, False: 46]
  |  |  ------------------
  ------------------
 3554|    274|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    274|                    parse_integer_digits_without_thsep(
 3556|    274|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    274|                        prefix_result.parsed_base));
 3558|       |
 3559|    274|            auto buf = make_contiguous_buffer(
 3560|    274|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    274|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 274, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    274|    }                                                  \
  |  |  |  | 3667|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    274|        }
 3569|       |
 3570|     46|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     46|            localized_number_formatting_options<CharT>{loc};
 3575|     46|#endif
 3576|       |
 3577|     46|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     46|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     46|    }                                                  \
  |  |  |  | 3667|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    302|    {
 3528|    302|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    302|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    302|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 302]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    302|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 302]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    302|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    302|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 292, False: 10]
  |  |  ------------------
  ------------------
 3554|    292|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 292, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    292|    }                                                  \
  |  |  |  | 3667|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     10|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     10|            localized_number_formatting_options<CharT>{loc};
 3575|     10|#endif
 3576|       |
 3577|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    320|    {
 3528|    320|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    320|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    320|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    320|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 320]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    320|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 320]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    320|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    320|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 274, False: 46]
  |  |  ------------------
  ------------------
 3554|    274|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    274|                    parse_integer_digits_without_thsep(
 3556|    274|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    274|                        prefix_result.parsed_base));
 3558|       |
 3559|    274|            auto buf = make_contiguous_buffer(
 3560|    274|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    274|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 274, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    274|    }                                                  \
  |  |  |  | 3667|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    274|        }
 3569|       |
 3570|     46|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     46|            localized_number_formatting_options<CharT>{loc};
 3575|     46|#endif
 3576|       |
 3577|     46|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     46|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     46|    }                                                  \
  |  |  |  | 3667|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    270|    {
 3528|    270|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    270|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    270|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 270]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    270|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 270]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    270|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    270|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 270, False: 0]
  |  |  ------------------
  ------------------
 3554|    270|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    270|    }                                                  \
  |  |  |  | 3667|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    916|    {
 3528|    916|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    916|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    916|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    916|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    916|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 916]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    916|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    916|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    916|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    916|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 916]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    916|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 916]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    916|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    916|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 916, False: 0]
  |  |  ------------------
  ------------------
 3554|    916|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    916|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    916|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    916|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    916|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 916]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    916|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    916|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    916|                    parse_integer_digits_without_thsep(
 3556|    916|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    916|                        prefix_result.parsed_base));
 3558|       |
 3559|    916|            auto buf = make_contiguous_buffer(
 3560|    916|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    916|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    916|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    916|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    916|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    916|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 916, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    916|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    916|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    916|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    916|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    916|    }                                                  \
  |  |  |  | 3667|    916|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    916|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  15.6k|    {
 3029|  15.6k|        reader_error_handler eh{};
 3030|  15.6k|        get_derived().check_specs_impl(specs, eh);
 3031|  15.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.0k, False: 620]
  |  |  ------------------
  ------------------
 3032|  15.0k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  15.0k|        }
 3034|    620|        return {};
 3035|  15.6k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3039|  15.6k|    {
 3040|  15.6k|        return static_cast<Derived&>(*this);
 3041|  15.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  15.6k|    {
 4134|  15.6k|        detail::check_float_type_specs(specs, eh);
 4135|  15.6k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3023|  1.28k|    {
 3024|  1.28k|        return true;
 3025|  1.28k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4205|    590|    {
 4206|    590|        unsigned options{};
 4207|    590|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 18, False: 572]
  ------------------
 4208|     18|            options |= float_reader_base::allow_thsep;
 4209|     18|        }
 4210|       |
 4211|    590|        SCN_GCC_COMPAT_PUSH
 4212|    590|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|    590|        switch (specs.type) {
 4215|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 30, False: 560]
  ------------------
 4216|     30|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 4, False: 586]
  ------------------
 4219|      4|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|     12|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 12, False: 578]
  ------------------
 4222|     12|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|     10|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 10, False: 580]
  ------------------
 4225|     10|                return options | float_reader_base::allow_scientific |
 4226|     10|                       float_reader_base::allow_fixed;
 4227|       |
 4228|    534|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 534, False: 56]
  ------------------
 4229|    534|                return options | float_reader_base::allow_scientific |
 4230|    534|                       float_reader_base::allow_fixed |
 4231|    534|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 590]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|    590|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|    590|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|    590|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3648|    590|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1758|  1.25k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1519|  2.50k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4045|    926|    {
 4046|    926|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 926, False: 0]
  ------------------
 4047|    926|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 926, False: 0]
  ------------------
 4048|    926|            return;
 4049|    926|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|    840|    {
 1575|    840|        return m_storage.has_value();
 1576|    840|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|    420|    {
 1580|    420|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    420|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    420|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|    420|        return *m_storage;
 1582|    420|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    298|    {
  763|    298|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    298|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3667|      8|    {
 3668|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|      8|        return read_source_impl(range);
 3674|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3693|    298|    {
 3694|    298|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 298]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    298|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    298|        auto it = sign_result.first;
 3697|    298|        m_sign = sign_result.second;
 3698|       |
 3699|    298|        auto digits_begin = it;
 3700|    298|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|    298|        else {
 3727|    298|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 298, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    298|    }                                                  \
  |  | 3667|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    298|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|      0|                it,
 3729|      0|                do_read_source_impl(
 3730|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|      0|        }
 3733|       |
 3734|    298|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    298|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    298|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 0, False: 0]
  |  Branch (3736:48): [True: 0, False: 0]
  ------------------
 3737|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 0, False: 0]
  ------------------
 3738|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 0, False: 0]
  ------------------
 3739|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|      0|        }
 3741|       |
 3742|      0|        handle_separators();
 3743|       |
 3744|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 0]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|      0|        return it;
 3757|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3988|    298|    {
 3989|    298|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    298|        const bool allowed_nonhex =
 3991|    298|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    298|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    298|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 298, False: 0]
  |  Branch (3994:45): [True: 0, False: 298]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    298|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 298]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    298|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 298, False: 0]
  |  Branch (4003:45): [True: 0, False: 298]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    298|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 298]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    298|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 280, False: 18]
  |  Branch (4010:28): [True: 4, False: 276]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|      4|            auto it = range.begin();
 4014|       |
 4015|      4|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 4]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|      4|            else {
 4020|      4|                m_kind = float_kind::hex_without_prefix;
 4021|      4|            }
 4022|       |
 4023|      4|            return read_hex(ranges::subrange{it, range.end()});
 4024|      4|        }
 4025|    294|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 18, False: 276]
  |  Branch (4025:29): [True: 18, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|     18|            m_kind = float_kind::generic;
 4029|     18|            return read_regular_float(range);
 4030|     18|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    276|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 276]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    276|        m_kind = float_kind::generic;
 4041|    276|        return read_regular(range);
 4042|    276|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3799|    298|    {
 3800|    298|        auto it = range.begin();
 3801|    298|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 298, False: 0]
  ------------------
 3802|    298|            return unexpected(r.error());
 3803|    298|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3822|    298|    {
 3823|    298|        auto it = range.begin();
 3824|    298|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 298, False: 0]
  ------------------
 3825|    298|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    298|                scan_error::invalid_scanned_value,
 3827|    298|                "Invalid floating-point NaN value"));
 3828|    298|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3792|    280|    {
 3793|    280|        return read_matching_string_classic_nocase(range, "0x");
 3794|    280|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3892|      4|    {
 3893|      4|        auto it = range.begin();
 3894|       |
 3895|      4|        std::ptrdiff_t digits_count = 0;
 3896|      4|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|      4|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 0]
  |  |  ------------------
  ------------------
 3898|      4|            return r.transform_error(map_parse_error_to_scan_error(
 3899|      4|                scan_error::invalid_scanned_value,
 3900|      4|                "Invalid hexadecimal floating-point value"));
 3901|      4|        }
 3902|      0|        else {
 3903|      0|            digits_count += ranges::distance(it, *r);
 3904|      0|            it = *r;
 3905|      0|        }
 3906|       |
 3907|      0|        m_integral_part_length = digits_count;
 3908|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 0, False: 0]
  ------------------
 3909|      0|                                             m_locale_options.decimal_point)) {
 3910|      0|            it = *r;
 3911|      0|        }
 3912|       |
 3913|      0|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 0, False: 0]
  ------------------
 3914|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|      0|            digits_count += ranges::distance(it, *r);
 3916|      0|            it = *r;
 3917|      0|        }
 3918|       |
 3919|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|      0|        return it;
 3927|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3777|      4|    {
 3778|      4|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      4|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 4]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|      4|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|      4|        return read_while1_code_unit(
 3787|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|      4|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      4|        : m_fptr([](storage fn,
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|      4|              if constexpr (std::is_void_v<R>) {
  746|      4|                  obj(static_cast<decltype(args)>(args)...);
  747|      4|              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
  752|      4|          m_storage(std::addressof(f))
  753|      4|    {
  754|      4|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|      4|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      4|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      4|              else {
  749|      4|                  return obj(static_cast<decltype(args)>(args)...);
  750|      4|              }
  751|      4|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      4|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      4|        else if constexpr (std::is_object_v<T>) {
  688|      4|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      4|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3787|      4|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      4|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      4|        {
  662|      4|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3932|    294|    {
 3933|    294|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|    294|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 280, False: 14]
  |  Branch (3934:50): [True: 0, False: 280]
  ------------------
 3935|       |
 3936|    294|        auto it = ranges::begin(range);
 3937|    294|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|    294|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|    294|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 294, False: 0]
  |  |  ------------------
  ------------------
 3941|    294|            return r.transform_error(
 3942|    294|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|    294|                                              "Invalid floating-point value"));
 3944|    294|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3762|    294|    {
 3763|    294|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294]
  |  |  |  Branch (859:45): [True: 0, False: 294]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|    294|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|    294|        return read_while1_code_unit(
 3772|    294|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|    294|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    294|        : m_fptr([](storage fn,
  743|    294|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    294|              cvref<T> obj = *get<T>(fn);
  745|    294|              if constexpr (std::is_void_v<R>) {
  746|    294|                  obj(static_cast<decltype(args)>(args)...);
  747|    294|              }
  748|    294|              else {
  749|    294|                  return obj(static_cast<decltype(args)>(args)...);
  750|    294|              }
  751|    294|          }),
  752|    294|          m_storage(std::addressof(f))
  753|    294|    {
  754|    294|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    294|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    294|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    294|              else {
  749|    294|                  return obj(static_cast<decltype(args)>(args)...);
  750|    294|              }
  751|    294|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    294|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    294|        else if constexpr (std::is_object_v<T>) {
  688|    294|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    294|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3772|    294|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    294|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    294|        {
  662|    294|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3653|    290|    {
 3654|    290|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 290]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    290|        return read_source_impl(range);
 3660|    290|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    952|    {
  763|    952|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    952|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    952|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|     10|    {
 3668|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|     10|        return read_source_impl(range);
 3674|     10|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|    952|    {
 3694|    952|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    952|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    952|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    952|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    952|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 952]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    952|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    952|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    952|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    952|        auto it = sign_result.first;
 3697|    952|        m_sign = sign_result.second;
 3698|       |
 3699|    952|        auto digits_begin = it;
 3700|    952|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|    952|                      ranges::sized_range<Range>) {
 3703|    952|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 952]
  |  |  |  Branch (859:45): [True: 0, False: 952]
  |  |  |  Branch (859:45): [True: 0, False: 952]
  |  |  ------------------
  ------------------
 3704|    952|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|    952|            else {
 3713|    952|                auto cb = [&](const auto& rr)
 3714|    952|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    952|                    auto res = read_all(rr);
 3716|    952|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|    952|                        return unexpected_scan_error(
 3718|    952|                            scan_error::invalid_scanned_value,
 3719|    952|                            "Invalid float value");
 3720|    952|                    }
 3721|    952|                    return res;
 3722|    952|                };
 3723|    952|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|    952|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    952|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    952|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26, False: 926]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     26|    }                                                  \
  |  | 3667|    952|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    952|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|    926|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|    952|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    952|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    952|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|    926|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 926, False: 0]
  |  Branch (3736:48): [True: 926, False: 0]
  ------------------
 3737|    926|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 926, False: 0]
  ------------------
 3738|    926|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 926, False: 0]
  ------------------
 3739|    926|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|    926|        }
 3741|       |
 3742|    926|        handle_separators();
 3743|       |
 3744|    926|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 926]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|    926|        return it;
 3757|    926|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|    952|    {
 3800|    952|        auto it = range.begin();
 3801|    952|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 952, False: 0]
  ------------------
 3802|    952|            return unexpected(r.error());
 3803|    952|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|    952|    {
 3823|    952|        auto it = range.begin();
 3824|    952|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 952, False: 0]
  ------------------
 3825|    952|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    952|                scan_error::invalid_scanned_value,
 3827|    952|                "Invalid floating-point NaN value"));
 3828|    952|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|    926|    {
 3793|    926|        return read_matching_string_classic_nocase(range, "0x");
 3794|    926|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|     26|{
 1984|     26|    auto it = read_while_code_unit(range, pred);
 1985|     26|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 26, False: 0]
  ------------------
 1986|     26|        return unexpected(parse_error::error);
 1987|     26|    }
 1988|      0|    return it;
 1989|     26|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|     26|    {
 3933|     26|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|     26|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 10, False: 16]
  |  Branch (3934:50): [True: 4, False: 6]
  ------------------
 3935|       |
 3936|     26|        auto it = ranges::begin(range);
 3937|     26|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|     26|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|     26|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3941|     26|            return r.transform_error(
 3942|     26|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|     26|                                              "Invalid floating-point value"));
 3944|     26|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|     26|    {
 3763|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|     26|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|     26|        return read_while1_code_unit(
 3772|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|     26|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|     26|        : m_fptr([](storage fn,
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
  752|     26|          m_storage(std::addressof(f))
  753|     26|    {
  754|     26|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     26|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     26|        else if constexpr (std::is_object_v<T>) {
  688|     26|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     26|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3772|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     26|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     26|        {
  662|     26|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|    952|    {
 3989|    952|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    952|        const bool allowed_nonhex =
 3991|    952|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    952|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    952|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 952, False: 0]
  |  Branch (3994:45): [True: 0, False: 952]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    952|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 952]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    952|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 952, False: 0]
  |  Branch (4003:45): [True: 0, False: 952]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    952|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 952]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    952|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 926, False: 26]
  |  Branch (4010:28): [True: 8, False: 918]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|      8|            auto it = range.begin();
 4014|       |
 4015|      8|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 8]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|      8|            else {
 4020|      8|                m_kind = float_kind::hex_without_prefix;
 4021|      8|            }
 4022|       |
 4023|      8|            return read_hex(ranges::subrange{it, range.end()});
 4024|      8|        }
 4025|    944|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 26, False: 918]
  |  Branch (4025:29): [True: 26, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|     26|            m_kind = float_kind::generic;
 4029|     26|            return read_regular_float(range);
 4030|     26|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    918|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    918|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 918]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    918|        m_kind = float_kind::generic;
 4041|    918|        return read_regular(range);
 4042|    918|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|    926|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    926|                    auto res = read_all(rr);
 3716|    926|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    926|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 926]
  |  |  ------------------
  ------------------
 3717|      0|                        return unexpected_scan_error(
 3718|      0|                            scan_error::invalid_scanned_value,
 3719|      0|                            "Invalid float value");
 3720|      0|                    }
 3721|    926|                    return res;
 3722|    926|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|    926|{
 1827|    926|    return ranges::next(range.begin(), range.end());
 1828|    926|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    926|    {
  313|    926|        ranges::advance(x, bound);
  314|    926|        return x;
  315|    926|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    926|    {
  275|    926|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    926|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.00k|    {
  190|  1.00k|        i = std::move(bound);
  191|  1.00k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|    926|    {
 1565|    926|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    926|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|    926|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1608|    926|    {
 1609|    926|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|    926|                      ranges::sized_range<Range>) {
 1614|    926|            m_storage.reset();
 1615|    926|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|    926|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|    942|    {
 3654|    942|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    942|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 942]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    942|        return read_source_impl(range);
 3660|    942|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|    926|    {
 3680|    926|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    926|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    926|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|    926|        const std::ptrdiff_t sign_len =
 3683|    926|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 0, False: 926]
  ------------------
 3684|       |
 3685|    926|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    926|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    926|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    926|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    926|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 926, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    926|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    926|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    926|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    926|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    926|    }                                                  \
  |  |  |  | 3667|    926|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|    926|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4158|    298|    {
 4159|    298|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    298|#if !SCN_DISABLE_LOCALE
 4162|    298|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 8, False: 290]
  ------------------
 4163|      8|            return read_impl<Range>(
 4164|      8|                range, rd,
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|      8|                },
 4168|      8|                value, loc);
 4169|      8|        }
 4170|    290|#endif
 4171|       |
 4172|    290|        return read_impl<Range>(
 4173|    290|            range, rd,
 4174|    290|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    290|                return r.read_source(SCN_FWD(args)...);
 4176|    290|            },
 4177|    290|            value);
 4178|    298|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|    298|    {
 4195|    298|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    298|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 298, False: 0]
  |  |  ------------------
  ------------------
 4197|    298|            return unexpected(r.error());
 4198|    298|        }
 4199|       |
 4200|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4165|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4166|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    290|        : m_fptr([](storage fn,
  743|    290|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    290|              cvref<T> obj = *get<T>(fn);
  745|    290|              if constexpr (std::is_void_v<R>) {
  746|    290|                  obj(static_cast<decltype(args)>(args)...);
  747|    290|              }
  748|    290|              else {
  749|    290|                  return obj(static_cast<decltype(args)>(args)...);
  750|    290|              }
  751|    290|          }),
  752|    290|          m_storage(std::addressof(f))
  753|    290|    {
  754|    290|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    290|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    290|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    290|              else {
  749|    290|                  return obj(static_cast<decltype(args)>(args)...);
  750|    290|              }
  751|    290|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    290|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    290|        else if constexpr (std::is_object_v<T>) {
  688|    290|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    290|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4174|    290|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    290|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    290|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    290|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    290|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    290|        {
  662|    290|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|    292|    {
 4159|    292|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    292|#if !SCN_DISABLE_LOCALE
 4162|    292|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 10, False: 282]
  ------------------
 4163|     10|            return read_impl<Range>(
 4164|     10|                range, rd,
 4165|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|     10|                },
 4168|     10|                value, loc);
 4169|     10|        }
 4170|    282|#endif
 4171|       |
 4172|    282|        return read_impl<Range>(
 4173|    282|            range, rd,
 4174|    282|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    282|                return r.read_source(SCN_FWD(args)...);
 4176|    282|            },
 4177|    282|            value);
 4178|    292|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|    952|    {
 4195|    952|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    952|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    952|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 926]
  |  |  ------------------
  ------------------
 4197|     26|            return unexpected(r.error());
 4198|     26|        }
 4199|       |
 4200|    926|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    926|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    926|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    926|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    926|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 926, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    926|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    926|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    926|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    926|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    926|    }                                                  \
  |  |  |  | 3667|    926|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|    926|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     10|        : m_fptr([](storage fn,
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
  752|     10|          m_storage(std::addressof(f))
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  688|     10|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     10|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    282|        : m_fptr([](storage fn,
  743|    282|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    282|              cvref<T> obj = *get<T>(fn);
  745|    282|              if constexpr (std::is_void_v<R>) {
  746|    282|                  obj(static_cast<decltype(args)>(args)...);
  747|    282|              }
  748|    282|              else {
  749|    282|                  return obj(static_cast<decltype(args)>(args)...);
  750|    282|              }
  751|    282|          }),
  752|    282|          m_storage(std::addressof(f))
  753|    282|    {
  754|    282|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    282|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    282|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    282|              else {
  749|    282|                  return obj(static_cast<decltype(args)>(args)...);
  750|    282|              }
  751|    282|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    282|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    282|        else if constexpr (std::is_object_v<T>) {
  688|    282|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    282|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|    282|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    282|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    282|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    282|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    282|        {
  662|    282|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5797|  16.2k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  16.2k|                       std::is_same_v<T, std::wstring>) {
 5816|  16.2k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  16.2k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5194|  48.7k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  46.7k|    {
 3029|  46.7k|        reader_error_handler eh{};
 3030|  46.7k|        get_derived().check_specs_impl(specs, eh);
 3031|  46.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 378, False: 46.3k]
  |  |  ------------------
  ------------------
 3032|    378|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|    378|        }
 3034|  46.3k|        return {};
 3035|  46.7k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3039|  46.7k|    {
 3040|  46.7k|        return static_cast<Derived&>(*this);
 3041|  46.7k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  46.7k|    {
 5199|  46.7k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  46.7k|        SCN_GCC_PUSH
 5202|  46.7k|        SCN_GCC_IGNORE("-Wswitch")
 5203|  46.7k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  46.7k|        SCN_CLANG_PUSH
 5206|  46.7k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  46.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  46.7k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 372, False: 46.3k]
  ------------------
 5210|  1.62k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 1.62k, False: 45.1k]
  ------------------
 5211|  1.62k|                m_type = reader_type::word;
 5212|  1.62k|                break;
 5213|       |
 5214|    636|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 636, False: 46.1k]
  ------------------
 5215|    636|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 132, False: 504]
  ------------------
 5216|    636|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 258, False: 246]
  ------------------
 5217|    390|                    m_type = reader_type::custom_word;
 5218|    390|                }
 5219|    246|                else {
 5220|    246|                    m_type = reader_type::word;
 5221|    246|                }
 5222|    636|                break;
 5223|      0|            }
 5224|       |
 5225|    102|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 102, False: 46.6k]
  ------------------
 5226|    102|                m_type = reader_type::character;
 5227|    102|                break;
 5228|       |
 5229|  5.47k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 5.47k, False: 41.2k]
  ------------------
 5230|  5.47k|                m_type = reader_type::character_set;
 5231|  5.47k|                break;
 5232|       |
 5233|  32.4k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 32.4k, False: 14.3k]
  ------------------
 5234|  32.4k|                m_type = reader_type::regex;
 5235|  32.4k|                break;
 5236|       |
 5237|  6.13k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 6.13k, False: 40.6k]
  ------------------
 5238|  6.13k|                m_type = reader_type::regex_escaped;
 5239|  6.13k|                break;
 5240|  46.7k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  46.7k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5247|  55.5k|    {
 5248|  55.5k|        return m_type == reader_type::word;
 5249|  55.5k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  16.0k|{
 1132|  16.0k|    auto it = src.begin();
 1133|  1.26M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 1.24M, False: 13.3k]
  ------------------
 1134|  1.24M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  1.24M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.87k, False: 1.24M]
  ------------------
 1136|  1.87k|            return false;
 1137|  1.87k|        }
 1138|  1.24M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 258, False: 1.24M]
  ------------------
 1139|    258|            return false;
 1140|    258|        }
 1141|  1.24M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  1.24M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  1.24M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 552, False: 1.24M]
  ------------------
 1144|    552|            return false;
 1145|    552|        }
 1146|  1.24M|        it += len;
 1147|  1.24M|    }
 1148|  13.3k|    return true;
 1149|  16.0k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    420|{
 2982|    420|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|    420|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 420, False: 0]
  ------------------
 2984|    420|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    420|    static_cast<    \
  |  |  929|    420|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|    420|        }
 2986|      0|        else {
 2987|      0|            dest.assign(source.view());
 2988|      0|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|    420|    return {};
 2995|    420|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5091|  5.47k|        {
 5092|  5.47k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 600, False: 4.87k]
  ------------------
 5093|    600|                return {};
 5094|    600|            }
 5095|       |
 5096|  4.87k|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|  4.87k|            auto it = detail::to_address(charset_string.begin());
 5098|  4.87k|            auto set = detail::parse_presentation_set(
 5099|  4.87k|                it, detail::to_address(charset_string.end()), nonascii);
 5100|  4.87k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  4.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.87k]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|  4.87k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  4.87k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|  4.87k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  4.87k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|  4.87k|            std::sort(nonascii.extra_ranges.begin(),
 5107|  4.87k|                      nonascii.extra_ranges.end());
 5108|  4.87k|            return {};
 5109|  4.87k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5126|   816k|        {
 5127|   816k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5127:17): [True: 112k, False: 703k]
  ------------------
 5128|   112k|                return helper.is_char_set_in_extra_literals(cp);
 5129|   112k|            }
 5130|       |
 5131|   703k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5132|   816k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5074|   112k|        {
 5075|       |            // TODO: binary search?
 5076|   112k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5076:17): [True: 0, False: 112k]
  ------------------
 5077|      0|                return false;
 5078|      0|            }
 5079|       |
 5080|   112k|            const auto cp_val = static_cast<uint32_t>(cp);
 5081|   112k|            return std::find_if(
 5082|   112k|                       nonascii.extra_ranges.begin(),
 5083|   112k|                       nonascii.extra_ranges.end(),
 5084|   112k|                       [cp_val](const auto& pair) noexcept {
 5085|   112k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5086|   112k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5087|   112k|                       }) != nonascii.extra_ranges.end();
 5088|   112k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5084|  19.6M|                       [cp_val](const auto& pair) noexcept {
 5085|  19.6M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5085:35): [True: 19.6M, False: 7.45k]
  ------------------
 5086|  19.6M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5086:35): [True: 110k, False: 19.5M]
  ------------------
 5087|  19.6M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5064|   711k|        {
 5065|   711k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   711k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   711k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|   711k|            const auto val =
 5067|   711k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|   711k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|   711k|                    (val % 8)) &
 5070|   711k|                   1u;
 5071|   711k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5117|  10.2k|        {
 5118|  10.2k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 2.59k, False: 7.68k]
  ------------------
 5119|  2.59k|                return false;
 5120|  2.59k|            }
 5121|       |
 5122|  7.68k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  10.2k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  5.47k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|  1.23k|    {
 5266|  1.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.23k|        return read_impl(range, specs, value);
 5268|  1.23k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|  1.23k|    {
 5284|  1.23k|        SCN_CLANG_PUSH
 5285|  1.23k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.23k|        switch (m_type) {
 5288|    274|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 274, False: 956]
  ------------------
 5289|    274|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     72|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 72, False: 1.15k]
  ------------------
 5292|     72|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     72|                                                                   value);
 5294|       |
 5295|     32|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 32, False: 1.19k]
  ------------------
 5296|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    270|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 270, False: 960]
  ------------------
 5299|    270|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    270|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 1.22k]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|    580|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 580, False: 650]
  ------------------
 5309|    580|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    580|                    range,
 5311|    580|                    get_unescaped_regex_pattern(
 5312|    580|                        specs.charset_string<SourceCharT>()),
 5313|    580|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.23k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.23k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.23k|        }
 5320|       |
 5321|  1.23k|        SCN_CLANG_POP
 5322|  1.23k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    274|    {
 4809|    274|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    274|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    378|{
 4741|    378|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    378|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    378|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 130, False: 248]
  ------------------
 4745|    130|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    130|                                     "Invalid encoding in scanned string");
 4747|    130|    }
 4748|    248|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    248|    static_cast<    \
  |  |  929|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    248|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 248]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    248|    return SCN_MOVE(result);
  ------------------
  |  |  928|    248|    static_cast<    \
  |  |  929|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    248|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2075|    822|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|    822|    else {
 2085|    822|        auto it = range.begin();
 2086|       |
 2087|    822|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|    822|            auto seg = get_contiguous_beginning(range);
 2089|    822|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|    822|                seg_it != seg.end()) {
  ------------------
  |  Branch (2090:17): [True: 0, False: 822]
  ------------------
 2091|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|      0|            }
 2093|    822|            ranges::advance(it, seg.size());
 2094|    822|        }
 2095|       |
 2096|      0|        return read_until_code_point(
 2097|    822|            ranges::subrange{it, range.end()},
 2098|    822|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|    822|    }
 2100|    822|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2048|    822|{
 2049|    822|    auto it = range.begin();
 2050|  15.0k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 14.4k, False: 612]
  ------------------
 2051|  14.4k|        const auto val =
 2052|  14.4k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  14.4k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  14.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.0k, False: 3.42k]
  |  |  ------------------
  ------------------
 2054|  11.0k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  11.0k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  11.0k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 210, False: 10.7k]
  ------------------
 2057|    210|                return it;
 2058|    210|            }
 2059|  11.0k|        }
 2060|  14.2k|        it = val.iterator;
 2061|  14.2k|    }
 2062|       |
 2063|    612|    return it;
 2064|    822|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    822|        : m_fptr([](storage fn,
  743|    822|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    822|              cvref<T> obj = *get<T>(fn);
  745|    822|              if constexpr (std::is_void_v<R>) {
  746|    822|                  obj(static_cast<decltype(args)>(args)...);
  747|    822|              }
  748|    822|              else {
  749|    822|                  return obj(static_cast<decltype(args)>(args)...);
  750|    822|              }
  751|    822|          }),
  752|    822|          m_storage(std::addressof(f))
  753|    822|    {
  754|    822|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  11.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.0k|              else {
  749|  11.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.0k|              }
  751|  11.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  11.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  11.0k|        else if constexpr (std::is_object_v<T>) {
  688|  11.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.0k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2098|  11.0k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    822|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    822|        {
  662|    822|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     72|    {
 4830|     72|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 34, False: 38]
  ------------------
 4831|     34|            return read_string_impl(
 4832|     34|                range,
 4833|     34|                read_until_code_unit(
 4834|     34|                    range,
 4835|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     34|                        SourceCharT ch) { return ch == until; }),
 4837|     34|                value);
 4838|     34|        }
 4839|     38|        return read_string_impl(
 4840|     38|            range,
 4841|     38|            read_until_code_units(
 4842|     38|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     38|            value);
 4844|     72|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  688|    782|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4836|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 1994|    114|{
 1995|    114|    static_assert(ranges::common_range<CodeUnits>);
 1996|       |
 1997|       |    if constexpr (ranges::common_range<Range>) {
 1998|       |        return std::search(range.begin(), range.end(), needle.begin(),
 1999|       |                           needle.end());
 2000|       |    }
 2001|    114|    else {
 2002|    114|        auto first = range.begin();
 2003|  1.12k|        while (true) {
  ------------------
  |  Branch (2003:16): [Folded - Ignored]
  ------------------
 2004|  1.12k|            auto it = first;
 2005|  1.35k|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2006|  1.35k|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2006:21): [True: 66, False: 1.28k]
  ------------------
 2007|     66|                    return first;
 2008|     66|                }
 2009|  1.28k|                if (it == range.end()) {
  ------------------
  |  Branch (2009:21): [True: 48, False: 1.23k]
  ------------------
 2010|     48|                    return it;
 2011|     48|                }
 2012|  1.23k|                if (*it != *needle_it) {
  ------------------
  |  Branch (2012:21): [True: 1.01k, False: 222]
  ------------------
 2013|  1.01k|                    break;
 2014|  1.01k|                }
 2015|  1.23k|            }
 2016|  1.01k|            ++first;
 2017|  1.01k|        }
 2018|    114|    }
 2019|    114|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     32|    {
 4936|     32|        return read_impl(
 4937|     32|            range,
 4938|     32|            [&](const auto& rng) {
 4939|     32|                return read_string_impl(rng, read_all(rng), value);
 4940|     32|            },
 4941|     32|            detail::priority_tag<1>{});
 4942|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     32|    {
 4963|     32|        return read_cb(range);
 4964|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     32|            [&](const auto& rng) {
 4939|     32|                return read_string_impl(rng, read_all(rng), value);
 4940|     32|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1826|     96|{
 1827|     96|    return ranges::next(range.begin(), range.end());
 1828|     96|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     96|    {
  313|     96|        ranges::advance(x, bound);
  314|     96|        return x;
  315|     96|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     96|    {
  275|     96|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     96|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     96|    {
  203|  1.96k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 1.86k, False: 96]
  ------------------
  204|  1.86k|            ++i;
  205|  1.86k|        }
  206|     96|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|    270|    {
 5037|    270|        auto it = read_source_impl(range, {specs});
 5038|    270|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 258]
  |  |  ------------------
  ------------------
 5039|     12|            return unexpected(it.error());
 5040|     12|        }
 5041|       |
 5042|    258|        return read_string_impl(range, *it, value);
 5043|    270|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5141|    810|    {
 5142|    810|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|    810|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|    810|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    810|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 810]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|    810|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|    810|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 486, False: 324]
  ------------------
 5152|    486|            const auto cb = [&](char32_t cp) {
 5153|    486|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    486|            };
 5155|       |
 5156|    486|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 156, False: 330]
  ------------------
 5157|    156|                auto it = read_until_code_point(range, cb);
 5158|    156|                return check_nonempty(it, range);
 5159|    156|            }
 5160|    330|            auto it = read_while_code_point(range, cb);
 5161|    330|            return check_nonempty(it, range);
 5162|    486|        }
 5163|       |
 5164|    324|        const auto cb = [&](SourceCharT ch) {
 5165|    324|            return cb_wrapper.on_ascii_only(ch);
 5166|    324|        };
 5167|       |
 5168|    324|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 168, False: 156]
  ------------------
 5169|    168|            auto it = read_until_code_unit(range, cb);
 5170|    168|            return check_nonempty(it, range);
 5171|    168|        }
 5172|    156|        auto it = read_while_code_unit(range, cb);
 5173|    156|        return check_nonempty(it, range);
 5174|    324|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    486|        : m_fptr([](storage fn,
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|    486|              if constexpr (std::is_void_v<R>) {
  746|    486|                  obj(static_cast<decltype(args)>(args)...);
  747|    486|              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
  752|    486|          m_storage(std::addressof(f))
  753|    486|    {
  754|    486|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  32.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.4k|              else {
  749|  32.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.4k|              }
  751|  32.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  32.4k|    {
  684|  32.4k|        if constexpr (std::is_const_v<T>) {
  685|  32.4k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.4k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|  32.4k|            const auto cb = [&](char32_t cp) {
 5153|  32.4k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  32.4k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    486|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    486|        {
  667|    486|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5179|    810|    {
 5180|    810|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 36, False: 774]
  ------------------
 5181|     36|            return unexpected_scan_error(
 5182|     36|                scan_error::invalid_scanned_value,
 5183|     36|                "No characters matched in [character set]");
 5184|     36|        }
 5185|       |
 5186|    774|        return it;
 5187|    810|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    324|        : m_fptr([](storage fn,
  743|    324|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    324|              cvref<T> obj = *get<T>(fn);
  745|    324|              if constexpr (std::is_void_v<R>) {
  746|    324|                  obj(static_cast<decltype(args)>(args)...);
  747|    324|              }
  748|    324|              else {
  749|    324|                  return obj(static_cast<decltype(args)>(args)...);
  750|    324|              }
  751|    324|          }),
  752|    324|          m_storage(std::addressof(f))
  753|    324|    {
  754|    324|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|  6.79k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.79k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.79k|              else {
  749|  6.79k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.79k|              }
  751|  6.79k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  6.79k|    {
  684|  6.79k|        if constexpr (std::is_const_v<T>) {
  685|  6.79k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.79k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5164|  6.79k|        const auto cb = [&](SourceCharT ch) {
 5165|  6.79k|            return cb_wrapper.on_ascii_only(ch);
 5166|  6.79k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    324|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    324|        {
  667|    324|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|    258|{
 4741|    258|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    258|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    258|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 86, False: 172]
  ------------------
 4745|     86|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|     86|                                     "Invalid encoding in scanned string");
 4747|     86|    }
 4748|    172|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    172|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 172]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    172|    return SCN_MOVE(result);
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    172|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|    582|    {
 4880|    582|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    582|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    582|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    582|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    582|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 582, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    582|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    582|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    582|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    582|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    582|    }                                                  \
  |  |  |  | 3667|    582|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|    582|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4901|  1.74k|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|  1.74k|        else {
 4909|  1.74k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 1.74k, False: 0]
  ------------------
 4910|  1.74k|                return unexpected_scan_error(
 4911|  1.74k|                    scan_error::invalid_scanned_value,
 4912|  1.74k|                    "Cannot use regex with a non-contiguous source "
 4913|  1.74k|                    "range");
 4914|  1.74k|            }
 4915|       |
 4916|      0|            auto input = get_as_contiguous(range);
 4917|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|      0|            return ranges::next(range.begin(),
 4920|      0|                                ranges::distance(input.begin(), it));
 4921|      0|        }
 4922|  1.74k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|  1.74k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|       |                  ranges::sized_range<Range>) {
  961|       |        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|  1.74k|    else {
  974|  1.74k|        return false;
  975|  1.74k|    }
  976|  1.74k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  14.1k|    {
 5266|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  14.1k|        return read_impl(range, specs, value);
 5268|  14.1k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  14.1k|    {
 5284|  14.1k|        SCN_CLANG_PUSH
 5285|  14.1k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  14.1k|        switch (m_type) {
 5288|    324|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 324, False: 13.8k]
  ------------------
 5289|    324|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 58, False: 14.1k]
  ------------------
 5292|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     58|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 14.1k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  1.55k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 1.55k, False: 12.6k]
  ------------------
 5299|  1.55k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  1.55k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  10.7k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 10.7k, False: 3.40k]
  ------------------
 5304|  10.7k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  10.7k|                    range, specs.charset_string<SourceCharT>(),
 5306|  10.7k|                    specs.regexp_flags, value);
 5307|       |
 5308|  1.46k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 1.46k, False: 12.7k]
  ------------------
 5309|  1.46k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|  1.46k|                    range,
 5311|  1.46k|                    get_unescaped_regex_pattern(
 5312|  1.46k|                        specs.charset_string<SourceCharT>()),
 5313|  1.46k|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 14.1k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  14.1k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  14.1k|        }
 5320|       |
 5321|  14.1k|        SCN_CLANG_POP
 5322|  14.1k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    984|    {
 4809|    984|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    984|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|  1.04k|{
 4741|  1.04k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.04k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.04k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 338, False: 704]
  ------------------
 4745|    338|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    338|                                     "Invalid encoding in scanned string");
 4747|    338|    }
 4748|    704|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    704|    static_cast<    \
  |  |  929|    704|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    704|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    704|    return SCN_MOVE(result);
  ------------------
  |  |  928|    704|    static_cast<    \
  |  |  929|    704|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    704|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  2.92k|{
 3001|  2.92k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|  2.92k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|  2.92k|    return {};
 3009|  2.92k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  2.95k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|  2.95k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|  2.95k|        auto buf = make_contiguous_buffer(range);
 2080|  2.95k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|  2.95k|        return ranges::next(range.begin(),
 2082|  2.95k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|  2.95k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     58|    {
 4830|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 30, False: 28]
  ------------------
 4831|     30|            return read_string_impl(
 4832|     30|                range,
 4833|     30|                read_until_code_unit(
 4834|     30|                    range,
 4835|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     30|                        SourceCharT ch) { return ch == until; }),
 4837|     30|                value);
 4838|     30|        }
 4839|     28|        return read_string_impl(
 4840|     28|            range,
 4841|     28|            read_until_code_units(
 4842|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     28|            value);
 4844|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  688|    442|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4836|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 1994|     84|{
 1995|     84|    static_assert(ranges::common_range<CodeUnits>);
 1996|       |
 1997|     84|    if constexpr (ranges::common_range<Range>) {
 1998|     84|        return std::search(range.begin(), range.end(), needle.begin(),
 1999|     84|                           needle.end());
 2000|       |    }
 2001|       |    else {
 2002|       |        auto first = range.begin();
 2003|       |        while (true) {
 2004|       |            auto it = first;
 2005|       |            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2006|       |                if (needle_it == needle.end()) {
 2007|       |                    return first;
 2008|       |                }
 2009|       |                if (it == range.end()) {
 2010|       |                    return it;
 2011|       |                }
 2012|       |                if (*it != *needle_it) {
 2013|       |                    break;
 2014|       |                }
 2015|       |            }
 2016|       |            ++first;
 2017|       |        }
 2018|       |    }
 2019|     84|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  1.55k|    {
 5037|  1.55k|        auto it = read_source_impl(range, {specs});
 5038|  1.55k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 412, False: 1.14k]
  |  |  ------------------
  ------------------
 5039|    412|            return unexpected(it.error());
 5040|    412|        }
 5041|       |
 5042|  1.14k|        return read_string_impl(range, *it, value);
 5043|  1.55k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  4.66k|    {
 5142|  4.66k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  4.66k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  4.66k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.66k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  4.66k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  4.66k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 4.38k, False: 276]
  ------------------
 5152|  4.38k|            const auto cb = [&](char32_t cp) {
 5153|  4.38k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  4.38k|            };
 5155|       |
 5156|  4.38k|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 252, False: 4.13k]
  ------------------
 5157|    252|                auto it = read_until_code_point(range, cb);
 5158|    252|                return check_nonempty(it, range);
 5159|    252|            }
 5160|  4.13k|            auto it = read_while_code_point(range, cb);
 5161|  4.13k|            return check_nonempty(it, range);
 5162|  4.38k|        }
 5163|       |
 5164|    276|        const auto cb = [&](SourceCharT ch) {
 5165|    276|            return cb_wrapper.on_ascii_only(ch);
 5166|    276|        };
 5167|       |
 5168|    276|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 120, False: 156]
  ------------------
 5169|    120|            auto it = read_until_code_unit(range, cb);
 5170|    120|            return check_nonempty(it, range);
 5171|    120|        }
 5172|    156|        auto it = read_while_code_unit(range, cb);
 5173|    156|        return check_nonempty(it, range);
 5174|    276|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  4.38k|{
 2049|  4.38k|    auto it = range.begin();
 2050|   786k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 786k, False: 240]
  ------------------
 2051|   786k|        const auto val =
 2052|   786k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   786k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   786k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 784k, False: 2.11k]
  |  |  ------------------
  ------------------
 2054|   784k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   784k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   784k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 4.14k, False: 779k]
  ------------------
 2057|  4.14k|                return it;
 2058|  4.14k|            }
 2059|   784k|        }
 2060|   782k|        it = val.iterator;
 2061|   782k|    }
 2062|       |
 2063|    240|    return it;
 2064|  4.38k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|   786k|{
 1887|   786k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   786k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   786k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   786k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   786k|    auto it = range.begin();
 1891|   786k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   786k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   786k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.11k, False: 784k]
  |  |  ------------------
  ------------------
 1894|  2.11k|        ++it;
 1895|  2.11k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  2.11k|        return {it, {}};
 1897|  2.11k|    }
 1898|       |
 1899|   784k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 674k, False: 109k]
  ------------------
 1900|   674k|        ++it;
 1901|   674k|        return {it, string_type(1, *range.begin())};
 1902|   674k|    }
 1903|       |
 1904|   109k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|   109k|    return {it, string_type{range.begin(), it}};
 1906|   784k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  2.11k|{
 1155|  2.11k|    auto it = input.begin();
 1156|  2.77k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 2.70k, False: 72]
  ------------------
 1157|  2.70k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 2.04k, False: 660]
  ------------------
 1158|  2.04k|            break;
 1159|  2.04k|        }
 1160|  2.70k|    }
 1161|  2.11k|    return it;
 1162|  2.11k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|   109k|    {
  283|   109k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   109k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|   109k|    {
  212|   109k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 78, False: 109k]
  ------------------
  213|     78|            auto dist = bound - i;
  214|     78|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     78|            return dist;
  216|     78|        }
  217|   109k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|   109k|        return n;
  219|   109k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   219k|    {
  132|   219k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 219k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   219k|        return t;
  136|   219k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1877|   786k|    {
 1878|   786k|        return !codepoint.empty();
 1879|   786k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  4.38k|        : m_fptr([](storage fn,
  743|  4.38k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.38k|              cvref<T> obj = *get<T>(fn);
  745|  4.38k|              if constexpr (std::is_void_v<R>) {
  746|  4.38k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.38k|              }
  748|  4.38k|              else {
  749|  4.38k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.38k|              }
  751|  4.38k|          }),
  752|  4.38k|          m_storage(std::addressof(f))
  753|  4.38k|    {
  754|  4.38k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|   784k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   784k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   784k|              else {
  749|   784k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   784k|              }
  751|   784k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   784k|    {
  684|   784k|        if constexpr (std::is_const_v<T>) {
  685|   784k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   784k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|   784k|            const auto cb = [&](char32_t cp) {
 5153|   784k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|   784k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  4.38k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.38k|        {
  667|  4.38k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  4.66k|    {
 5180|  4.66k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 1.23k, False: 3.42k]
  ------------------
 5181|  1.23k|            return unexpected_scan_error(
 5182|  1.23k|                scan_error::invalid_scanned_value,
 5183|  1.23k|                "No characters matched in [character set]");
 5184|  1.23k|        }
 5185|       |
 5186|  3.42k|        return it;
 5187|  4.66k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  4.13k|{
 2070|  4.13k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  4.13k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    276|        : m_fptr([](storage fn,
  743|    276|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    276|              cvref<T> obj = *get<T>(fn);
  745|    276|              if constexpr (std::is_void_v<R>) {
  746|    276|                  obj(static_cast<decltype(args)>(args)...);
  747|    276|              }
  748|    276|              else {
  749|    276|                  return obj(static_cast<decltype(args)>(args)...);
  750|    276|              }
  751|    276|          }),
  752|    276|          m_storage(std::addressof(f))
  753|    276|    {
  754|    276|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.48k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.48k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.48k|              else {
  749|  3.48k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.48k|              }
  751|  3.48k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  3.48k|    {
  684|  3.48k|        if constexpr (std::is_const_v<T>) {
  685|  3.48k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.48k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5164|  3.48k|        const auto cb = [&](SourceCharT ch) {
 5165|  3.48k|            return cb_wrapper.on_ascii_only(ch);
 5166|  3.48k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    276|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    276|        {
  667|    276|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|  2.55k|{
 4741|  2.55k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  2.55k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  2.55k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 340, False: 2.21k]
  ------------------
 4745|    340|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    340|                                     "Invalid encoding in scanned string");
 4747|    340|    }
 4748|  2.21k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.21k|    static_cast<    \
  |  |  929|  2.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  2.21k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.21k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  2.21k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.21k|    static_cast<    \
  |  |  929|  2.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  2.21k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  12.2k|    {
 4880|  12.2k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.8k, False: 1.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  10.8k|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|  1.41k|        return read_string_impl(range, it, value);
 4882|  12.2k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4901|  36.7k|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|  36.7k|        else {
 4909|  36.7k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 0, False: 36.7k]
  ------------------
 4910|      0|                return unexpected_scan_error(
 4911|      0|                    scan_error::invalid_scanned_value,
 4912|      0|                    "Cannot use regex with a non-contiguous source "
 4913|      0|                    "range");
 4914|      0|            }
 4915|       |
 4916|  36.7k|            auto input = get_as_contiguous(range);
 4917|  36.7k|            SCN_TRY(it,
  ------------------
  |  | 3668|  36.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  36.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  36.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32.5k, False: 4.24k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  32.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  32.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  32.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  32.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  32.5k|    }                                                  \
  |  |  |  | 3667|  36.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|  4.24k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|  4.24k|            return ranges::next(range.begin(),
 4920|  4.24k|                                ranges::distance(input.begin(), it));
 4921|  36.7k|        }
 4922|  36.7k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  36.7k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|  36.7k|                  ranges::sized_range<Range>) {
  961|  36.7k|        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|       |    else {
  974|       |        return false;
  975|       |    }
  976|  36.7k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  36.7k|{
 1065|  36.7k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  36.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|       |    if constexpr (ranges::contiguous_range<Range> &&
 1068|  36.7k|                  ranges::sized_range<Range>) {
 1069|  36.7k|        return r;
 1070|       |    }
 1071|       |    else if constexpr (std::is_same_v<
 1072|       |                           ranges::const_iterator_t<Range>,
 1073|       |                           typename detail::basic_scan_buffer<
 1074|       |                               detail::char_t<Range>>::forward_iterator>) {
 1075|       |        if constexpr (ranges::common_range<Range>) {
 1076|       |            return detail::make_string_view_from_pointers(
 1077|       |                r.begin().to_contiguous_segment_iterator(),
 1078|       |                r.end().to_contiguous_segment_iterator());
 1079|       |        }
 1080|       |        else {
 1081|       |            return r.begin().contiguous_segment();
 1082|       |        }
 1083|       |    }
 1084|       |    else {
 1085|       |        SCN_EXPECT(false);
 1086|       |        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1089|       |    }
 1090|  36.7k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  36.7k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|  36.7k|                  ranges::sized_range<Range>) {
  983|  36.7k|        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|       |                               detail::char_t<Range>>::forward_iterator>) {
  989|       |        auto beg = r.begin();
  990|       |        if (beg.contiguous_segment().empty()) {
  991|       |            return false;
  992|       |        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|       |        else {
  998|       |            if (beg.stores_parent()) {
  999|       |                return beg.contiguous_segment().end() ==
 1000|       |                       beg.parent()->current_view().end();
 1001|       |            }
 1002|       |            return true;
 1003|       |        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  36.7k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4334|  36.7k|{
 4335|  36.7k|    static_assert(ranges::contiguous_range<Input> &&
 4336|  36.7k|                  ranges::borrowed_range<Input> &&
 4337|  36.7k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4338|       |
 4339|  36.7k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4340|  36.7k|    std::basic_regex<CharT> re{};
 4341|  36.7k|    try {
 4342|  36.7k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  36.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  36.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  36.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 36.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  36.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4343|  36.7k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4344|  36.7k|                                     re_flags | std::regex_constants::nosubs};
 4345|  36.7k|    }
 4346|  36.7k|    catch (const std::regex_error& err) {
 4347|  23.2k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4348|  23.2k|                                     "Invalid regex");
 4349|  23.2k|    }
 4350|       |
 4351|  13.5k|    std::match_results<const CharT*> matches{};
 4352|  13.5k|    try {
 4353|  13.5k|        bool found = std::regex_search(input.data(),
 4354|  13.5k|                                       input.data() + input.size(), matches, re,
 4355|  13.5k|                                       std::regex_constants::match_continuous);
 4356|  13.5k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4356:13): [True: 9.25k, False: 4.24k]
  |  Branch (4356:23): [True: 0, False: 4.24k]
  ------------------
 4357|  8.71k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4358|  8.71k|                                         "Regular expression didn't match");
 4359|  8.71k|        }
 4360|  13.5k|    }
 4361|  13.5k|    catch (const std::regex_error& err) {
 4362|    540|        return unexpected_scan_error(scan_error::invalid_format_string,
 4363|    540|                                     "Regex matching failed with an error");
 4364|    540|    }
 4365|       |
 4366|  4.24k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4367|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4368|       |    auto re =
 4369|       |#if SCN_REGEX_BOOST_USE_ICU
 4370|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4371|       |                             make_regex_flags(flags) |
 4372|       |                                 boost::regex_constants::no_except |
 4373|       |                                 boost::regex_constants::nosubs);
 4374|       |#else
 4375|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4376|       |                                  make_regex_flags(flags) |
 4377|       |                                      boost::regex_constants::no_except |
 4378|       |                                      boost::regex_constants::nosubs};
 4379|       |#endif
 4380|       |    if (re.status() != 0) {
 4381|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4382|       |                                     "Invalid regex");
 4383|       |    }
 4384|       |
 4385|       |    boost::match_results<const CharT*> matches{};
 4386|       |    try {
 4387|       |        bool found =
 4388|       |#if SCN_REGEX_BOOST_USE_ICU
 4389|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4390|       |                                   matches, re,
 4391|       |                                   boost::regex_constants::match_continuous);
 4392|       |#else
 4393|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4394|       |                                matches, re,
 4395|       |                                boost::regex_constants::match_continuous);
 4396|       |#endif
 4397|       |        if (!found || matches.prefix().matched) {
 4398|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4399|       |                                         "Regular expression didn't match");
 4400|       |        }
 4401|       |    }
 4402|       |    catch (const std::runtime_error& err) {
 4403|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4404|       |                                     "Regex matching failed with an error");
 4405|       |    }
 4406|       |
 4407|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4408|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4409|       |    static_assert(std::is_same_v<CharT, char>);
 4410|       |    std::string flagged_pattern{};
 4411|       |    auto re = [&]() {
 4412|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4413|       |        opts.set_never_capture(true);
 4414|       |        if (flagstr.empty()) {
 4415|       |            return re2::RE2{pattern, opts};
 4416|       |        }
 4417|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4418|       |        flagged_pattern.append(flagstr);
 4419|       |        flagged_pattern.append(pattern);
 4420|       |        return re2::RE2{flagged_pattern, opts};
 4421|       |    }();
 4422|       |    if (!re.ok()) {
 4423|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4424|       |                                     "Failed to parse regular expression");
 4425|       |    }
 4426|       |
 4427|       |    auto new_input = detail::make_string_view_from_pointers(
 4428|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4429|       |    bool found = re2::RE2::Consume(&new_input, re);
 4430|       |    if (!found) {
 4431|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4432|       |                                     "Regular expression didn't match");
 4433|       |    }
 4434|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4435|       |#endif  // SCN_REGEX_BACKEND == ...
 4436|  13.5k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5797|  16.2k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  16.2k|                       std::is_same_v<T, std::wstring>) {
 5816|  16.2k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  16.2k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    420|{
 2982|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|       |        if (source.stores_allocated_string()) {
 2984|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2985|       |        }
 2986|       |        else {
 2987|       |            dest.assign(source.view());
 2988|       |        }
 2989|       |    }
 2990|    420|    else {
 2991|    420|        return transcode_impl(source.view(), dest);
 2992|    420|    }
 2993|       |
 2994|      0|    return {};
 2995|    420|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2956|  3.34k|{
 2957|  3.34k|    dst.clear();
 2958|  3.34k|    transcode_valid_to_string(src, dst);
 2959|  3.34k|    return {};
 2960|  3.34k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1390|  3.34k|{
 1391|  3.34k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1392|       |
 1393|  3.34k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  3.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1394|  3.34k|    if constexpr (sizeof(SourceCharT) == 1) {
 1395|       |        if constexpr (sizeof(DestCharT) == 2) {
 1396|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1397|       |            std::u32string tmp;
 1398|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1399|       |            return transcode_to_string_impl_32to16<true>(
 1400|       |                std::u32string_view{tmp}, dest);
 1401|       |        }
 1402|  3.34k|        else if constexpr (sizeof(DestCharT) == 4) {
 1403|  3.34k|            return transcode_valid_to_string_impl_to32(src, dest);
 1404|  3.34k|        }
 1405|       |    }
 1406|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1407|       |        if constexpr (sizeof(DestCharT) == 1) {
 1408|       |            std::u32string tmp;
 1409|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1410|       |            return transcode_to_string_impl_32to8<true>(
 1411|       |                std::u32string_view{tmp}, dest);
 1412|       |        }
 1413|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1414|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1415|       |        }
 1416|       |    }
 1417|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1418|       |        if constexpr (sizeof(DestCharT) == 1) {
 1419|       |            return transcode_to_string_impl_32to8<true>(src, dest);
 1420|       |        }
 1421|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1422|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1423|       |        }
 1424|       |    }
 1425|       |
 1426|  3.34k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  3.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1427|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1428|  3.34k|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1264|  3.34k|{
 1265|  3.34k|    static_assert(sizeof(DestCharT) == 4);
 1266|       |
 1267|  3.34k|    auto it = src.begin();
 1268|   306k|    while (it != src.end()) {
  ------------------
  |  Branch (1268:12): [True: 303k, False: 3.34k]
  ------------------
 1269|   303k|        auto res = get_next_code_point_valid(
 1270|   303k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1271|   303k|                                                                 src.end()));
 1272|   303k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1273|   303k|        dest.push_back(res.value);
 1274|   303k|        it = detail::make_string_view_iterator(src, res.iterator);
 1275|   303k|    }
 1276|  3.34k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   303k|{
 1189|   303k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   303k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   303k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   303k|    return {input.begin() + len,
 1195|   303k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   303k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|  1.23k|    {
 5266|  1.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.23k|        return read_impl(range, specs, value);
 5268|  1.23k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|  1.23k|    {
 5284|  1.23k|        SCN_CLANG_PUSH
 5285|  1.23k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.23k|        switch (m_type) {
 5288|    274|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 274, False: 956]
  ------------------
 5289|    274|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     72|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 72, False: 1.15k]
  ------------------
 5292|     72|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     72|                                                                   value);
 5294|       |
 5295|     32|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 32, False: 1.19k]
  ------------------
 5296|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    270|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 270, False: 960]
  ------------------
 5299|    270|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    270|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 1.22k]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|    580|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 580, False: 650]
  ------------------
 5309|    580|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    580|                    range,
 5311|    580|                    get_unescaped_regex_pattern(
 5312|    580|                        specs.charset_string<SourceCharT>()),
 5313|    580|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.23k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.23k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.23k|        }
 5320|       |
 5321|  1.23k|        SCN_CLANG_POP
 5322|  1.23k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    274|    {
 4809|    274|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    274|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    378|{
 4741|    378|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    378|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    378|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 130, False: 248]
  ------------------
 4745|    130|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    130|                                     "Invalid encoding in scanned string");
 4747|    130|    }
 4748|    248|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    248|    static_cast<    \
  |  |  929|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    248|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    248|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 248]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    248|    return SCN_MOVE(result);
  ------------------
  |  |  928|    248|    static_cast<    \
  |  |  929|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    248|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     72|    {
 4830|     72|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 34, False: 38]
  ------------------
 4831|     34|            return read_string_impl(
 4832|     34|                range,
 4833|     34|                read_until_code_unit(
 4834|     34|                    range,
 4835|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     34|                        SourceCharT ch) { return ch == until; }),
 4837|     34|                value);
 4838|     34|        }
 4839|     38|        return read_string_impl(
 4840|     38|            range,
 4841|     38|            read_until_code_units(
 4842|     38|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     38|            value);
 4844|     72|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1D_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  688|    782|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4836|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     32|    {
 4936|     32|        return read_impl(
 4937|     32|            range,
 4938|     32|            [&](const auto& rng) {
 4939|     32|                return read_string_impl(rng, read_all(rng), value);
 4940|     32|            },
 4941|     32|            detail::priority_tag<1>{});
 4942|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     32|    {
 4963|     32|        return read_cb(range);
 4964|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     32|            [&](const auto& rng) {
 4939|     32|                return read_string_impl(rng, read_all(rng), value);
 4940|     32|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|    270|    {
 5037|    270|        auto it = read_source_impl(range, {specs});
 5038|    270|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 258]
  |  |  ------------------
  ------------------
 5039|     12|            return unexpected(it.error());
 5040|     12|        }
 5041|       |
 5042|    258|        return read_string_impl(range, *it, value);
 5043|    270|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|    258|{
 4741|    258|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    258|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    258|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 86, False: 172]
  ------------------
 4745|     86|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|     86|                                     "Invalid encoding in scanned string");
 4747|     86|    }
 4748|    172|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    172|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    172|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 172]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    172|    return SCN_MOVE(result);
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    172|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|    582|    {
 4880|    582|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    582|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    582|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    582|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    582|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 582, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    582|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    582|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    582|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    582|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    582|    }                                                  \
  |  |  |  | 3667|    582|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|    582|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  14.1k|    {
 5266|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  14.1k|        return read_impl(range, specs, value);
 5268|  14.1k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  14.1k|    {
 5284|  14.1k|        SCN_CLANG_PUSH
 5285|  14.1k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  14.1k|        switch (m_type) {
 5288|    324|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 324, False: 13.8k]
  ------------------
 5289|    324|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 58, False: 14.1k]
  ------------------
 5292|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     58|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 14.1k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  1.55k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 1.55k, False: 12.6k]
  ------------------
 5299|  1.55k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  1.55k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  10.7k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 10.7k, False: 3.40k]
  ------------------
 5304|  10.7k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  10.7k|                    range, specs.charset_string<SourceCharT>(),
 5306|  10.7k|                    specs.regexp_flags, value);
 5307|       |
 5308|  1.46k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 1.46k, False: 12.7k]
  ------------------
 5309|  1.46k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|  1.46k|                    range,
 5311|  1.46k|                    get_unescaped_regex_pattern(
 5312|  1.46k|                        specs.charset_string<SourceCharT>()),
 5313|  1.46k|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 14.1k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  14.1k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  14.1k|        }
 5320|       |
 5321|  14.1k|        SCN_CLANG_POP
 5322|  14.1k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    984|    {
 4809|    984|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    984|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|  1.04k|{
 4741|  1.04k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.04k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.04k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 338, False: 704]
  ------------------
 4745|    338|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    338|                                     "Invalid encoding in scanned string");
 4747|    338|    }
 4748|    704|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    704|    static_cast<    \
  |  |  929|    704|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    704|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    704|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 704]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    704|    return SCN_MOVE(result);
  ------------------
  |  |  928|    704|    static_cast<    \
  |  |  929|    704|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    704|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  2.92k|{
 3001|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|       |        dest.assign(source.view());
 3003|       |    }
 3004|  2.92k|    else {
 3005|  2.92k|        return transcode_impl(source.view(), dest);
 3006|  2.92k|    }
 3007|       |
 3008|      0|    return {};
 3009|  2.92k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     58|    {
 4830|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 30, False: 28]
  ------------------
 4831|     30|            return read_string_impl(
 4832|     30|                range,
 4833|     30|                read_until_code_unit(
 4834|     30|                    range,
 4835|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     30|                        SourceCharT ch) { return ch == until; }),
 4837|     30|                value);
 4838|     30|        }
 4839|     28|        return read_string_impl(
 4840|     28|            range,
 4841|     28|            read_until_code_units(
 4842|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|     28|            value);
 4844|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  688|    442|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4836|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  1.55k|    {
 5037|  1.55k|        auto it = read_source_impl(range, {specs});
 5038|  1.55k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 412, False: 1.14k]
  |  |  ------------------
  ------------------
 5039|    412|            return unexpected(it.error());
 5040|    412|        }
 5041|       |
 5042|  1.14k|        return read_string_impl(range, *it, value);
 5043|  1.55k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|  2.55k|{
 4741|  2.55k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  2.55k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  2.55k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 340, False: 2.21k]
  ------------------
 4745|    340|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    340|                                     "Invalid encoding in scanned string");
 4747|    340|    }
 4748|  2.21k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.21k|    static_cast<    \
  |  |  929|  2.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  2.21k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.21k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  2.21k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.21k|    static_cast<    \
  |  |  929|  2.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  2.21k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  12.2k|    {
 4880|  12.2k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.8k, False: 1.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  10.8k|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|  1.41k|        return read_string_impl(range, it, value);
 4882|  12.2k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5797|  16.2k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|  16.2k|                       std::is_same_v<T, std::wstring_view>) {
 5812|  16.2k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  16.2k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  1.23k|    {
 5266|  1.23k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.23k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.23k|        return read_impl(range, specs, value);
 5268|  1.23k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  1.23k|    {
 5284|  1.23k|        SCN_CLANG_PUSH
 5285|  1.23k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.23k|        switch (m_type) {
 5288|    274|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 274, False: 956]
  ------------------
 5289|    274|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     72|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 72, False: 1.15k]
  ------------------
 5292|     72|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     72|                                                                   value);
 5294|       |
 5295|     32|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 32, False: 1.19k]
  ------------------
 5296|     32|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    270|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 270, False: 960]
  ------------------
 5299|    270|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    270|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 1.22k]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|    580|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 580, False: 650]
  ------------------
 5309|    580|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    580|                    range,
 5311|    580|                    get_unescaped_regex_pattern(
 5312|    580|                        specs.charset_string<SourceCharT>()),
 5313|    580|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.23k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.23k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.23k|        }
 5320|       |
 5321|  1.23k|        SCN_CLANG_POP
 5322|  1.23k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4815|    274|    {
 4816|    274|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    274|                                     value);
 4818|    274|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4761|    378|{
 4762|    378|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    378|    auto src = [&]() {
 4765|    378|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    378|            return make_contiguous_buffer(
 4767|    378|                ranges::subrange{range.begin().base(), result.base()});
 4768|    378|        }
 4769|    378|        else {
 4770|    378|            return make_contiguous_buffer(
 4771|    378|                ranges::subrange{range.begin(), result});
 4772|    378|        }
 4773|    378|    }();
 4774|    378|    using src_type = decltype(src);
 4775|       |
 4776|    378|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    378|    else {
 4789|    378|        const auto view = src.view();
 4790|    378|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    378|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 130, False: 248]
  ------------------
 4793|    130|            return unexpected_scan_error(
 4794|    130|                scan_error::invalid_scanned_value,
 4795|    130|                "Invalid encoding in scanned string_view");
 4796|    130|        }
 4797|       |
 4798|    248|        return SCN_MOVE(result);
  ------------------
  |  |  928|    248|    static_cast<    \
  |  |  929|    248|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    378|    }
 4800|    378|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4764|    378|    auto src = [&]() {
 4765|    378|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    378|            return make_contiguous_buffer(
 4767|    378|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|    378|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4851|     72|    {
 4852|     72|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 34, False: 38]
  ------------------
 4853|     34|            return read_string_view_impl(
 4854|     34|                range,
 4855|     34|                read_until_code_unit(
 4856|     34|                    range,
 4857|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     34|                        SourceCharT ch) { return ch == until; }),
 4859|     34|                value);
 4860|     34|        }
 4861|     38|        return read_string_view_impl(
 4862|     38|            range,
 4863|     38|            read_until_code_units(
 4864|     38|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|     38|            value);
 4866|     72|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     34|        : m_fptr([](storage fn,
  743|     34|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     34|              cvref<T> obj = *get<T>(fn);
  745|     34|              if constexpr (std::is_void_v<R>) {
  746|     34|                  obj(static_cast<decltype(args)>(args)...);
  747|     34|              }
  748|     34|              else {
  749|     34|                  return obj(static_cast<decltype(args)>(args)...);
  750|     34|              }
  751|     34|          }),
  752|     34|          m_storage(std::addressof(f))
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES1B_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  688|    782|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4858|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     34|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4947|     32|    {
 4948|     32|        return read_impl(
 4949|     32|            range,
 4950|     32|            [&](const auto& rng) {
 4951|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     32|            },
 4953|     32|            detail::priority_tag<1>{});
 4954|     32|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     32|    {
 4963|     32|        return read_cb(range);
 4964|     32|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4950|     32|            [&](const auto& rng) {
 4951|     32|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     32|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5050|    270|    {
 5051|    270|        auto it = read_source_impl(range, {specs});
 5052|    270|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 258]
  |  |  ------------------
  ------------------
 5053|     12|            return unexpected(it.error());
 5054|     12|        }
 5055|       |
 5056|    258|        return read_string_view_impl(range, *it, value);
 5057|    270|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4761|    258|{
 4762|    258|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    258|    auto src = [&]() {
 4765|    258|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    258|            return make_contiguous_buffer(
 4767|    258|                ranges::subrange{range.begin().base(), result.base()});
 4768|    258|        }
 4769|    258|        else {
 4770|    258|            return make_contiguous_buffer(
 4771|    258|                ranges::subrange{range.begin(), result});
 4772|    258|        }
 4773|    258|    }();
 4774|    258|    using src_type = decltype(src);
 4775|       |
 4776|    258|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    258|    else {
 4789|    258|        const auto view = src.view();
 4790|    258|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    258|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 86, False: 172]
  ------------------
 4793|     86|            return unexpected_scan_error(
 4794|     86|                scan_error::invalid_scanned_value,
 4795|     86|                "Invalid encoding in scanned string_view");
 4796|     86|        }
 4797|       |
 4798|    172|        return SCN_MOVE(result);
  ------------------
  |  |  928|    172|    static_cast<    \
  |  |  929|    172|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    258|    }
 4800|    258|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4764|    258|    auto src = [&]() {
 4765|    258|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    258|            return make_contiguous_buffer(
 4767|    258|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|    258|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4890|    582|    {
 4891|    582|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|    582|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    582|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    582|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    582|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 582, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    582|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    582|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    582|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    582|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    582|    }                                                  \
  |  |  |  | 3667|    582|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_view_impl(range, it, value);
 4893|    582|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  14.1k|    {
 5266|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  14.1k|        return read_impl(range, specs, value);
 5268|  14.1k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  14.1k|    {
 5284|  14.1k|        SCN_CLANG_PUSH
 5285|  14.1k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  14.1k|        switch (m_type) {
 5288|    324|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 324, False: 13.8k]
  ------------------
 5289|    324|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     58|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 58, False: 14.1k]
  ------------------
 5292|     58|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     58|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 14.1k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  1.55k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 1.55k, False: 12.6k]
  ------------------
 5299|  1.55k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  1.55k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  10.7k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 10.7k, False: 3.40k]
  ------------------
 5304|  10.7k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  10.7k|                    range, specs.charset_string<SourceCharT>(),
 5306|  10.7k|                    specs.regexp_flags, value);
 5307|       |
 5308|  1.46k|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 1.46k, False: 12.7k]
  ------------------
 5309|  1.46k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|  1.46k|                    range,
 5311|  1.46k|                    get_unescaped_regex_pattern(
 5312|  1.46k|                        specs.charset_string<SourceCharT>()),
 5313|  1.46k|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 14.1k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  14.1k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  14.1k|        }
 5320|       |
 5321|  14.1k|        SCN_CLANG_POP
 5322|  14.1k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|    984|    {
 4816|    984|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    984|                                     value);
 4818|    984|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|  1.04k|{
 4762|  1.04k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  1.04k|    auto src = [&]() {
 4765|  1.04k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  1.04k|            return make_contiguous_buffer(
 4767|  1.04k|                ranges::subrange{range.begin().base(), result.base()});
 4768|  1.04k|        }
 4769|  1.04k|        else {
 4770|  1.04k|            return make_contiguous_buffer(
 4771|  1.04k|                ranges::subrange{range.begin(), result});
 4772|  1.04k|        }
 4773|  1.04k|    }();
 4774|  1.04k|    using src_type = decltype(src);
 4775|       |
 4776|  1.04k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  1.04k|    else {
 4789|  1.04k|        const auto view = src.view();
 4790|  1.04k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  1.04k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 338, False: 704]
  ------------------
 4793|    338|            return unexpected_scan_error(
 4794|    338|                scan_error::invalid_scanned_value,
 4795|    338|                "Invalid encoding in scanned string_view");
 4796|    338|        }
 4797|       |
 4798|    704|        return SCN_MOVE(result);
  ------------------
  |  |  928|    704|    static_cast<    \
  |  |  929|    704|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  1.04k|    }
 4800|  1.04k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|  1.04k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  1.04k|        else {
 4770|  1.04k|            return make_contiguous_buffer(
 4771|  1.04k|                ranges::subrange{range.begin(), result});
 4772|  1.04k|        }
 4773|  1.04k|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4851|     58|    {
 4852|     58|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 30, False: 28]
  ------------------
 4853|     30|            return read_string_view_impl(
 4854|     30|                range,
 4855|     30|                read_until_code_unit(
 4856|     30|                    range,
 4857|     30|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     30|                        SourceCharT ch) { return ch == until; }),
 4859|     30|                value);
 4860|     30|        }
 4861|     28|        return read_string_view_impl(
 4862|     28|            range,
 4863|     28|            read_until_code_units(
 4864|     28|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|     28|            value);
 4866|     58|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     30|        : m_fptr([](storage fn,
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
  752|     30|          m_storage(std::addressof(f))
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES19_c:
  743|    442|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    442|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    442|              else {
  749|    442|                  return obj(static_cast<decltype(args)>(args)...);
  750|    442|              }
  751|    442|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    442|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    442|        else if constexpr (std::is_object_v<T>) {
  688|    442|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    442|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4858|    442|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     30|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  1.55k|    {
 5051|  1.55k|        auto it = read_source_impl(range, {specs});
 5052|  1.55k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 412, False: 1.14k]
  |  |  ------------------
  ------------------
 5053|    412|            return unexpected(it.error());
 5054|    412|        }
 5055|       |
 5056|  1.14k|        return read_string_view_impl(range, *it, value);
 5057|  1.55k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|  2.55k|{
 4762|  2.55k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  2.55k|    auto src = [&]() {
 4765|  2.55k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  2.55k|            return make_contiguous_buffer(
 4767|  2.55k|                ranges::subrange{range.begin().base(), result.base()});
 4768|  2.55k|        }
 4769|  2.55k|        else {
 4770|  2.55k|            return make_contiguous_buffer(
 4771|  2.55k|                ranges::subrange{range.begin(), result});
 4772|  2.55k|        }
 4773|  2.55k|    }();
 4774|  2.55k|    using src_type = decltype(src);
 4775|       |
 4776|  2.55k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  2.55k|    else {
 4789|  2.55k|        const auto view = src.view();
 4790|  2.55k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  2.55k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 340, False: 2.21k]
  ------------------
 4793|    340|            return unexpected_scan_error(
 4794|    340|                scan_error::invalid_scanned_value,
 4795|    340|                "Invalid encoding in scanned string_view");
 4796|    340|        }
 4797|       |
 4798|  2.21k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  2.21k|    static_cast<    \
  |  |  929|  2.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  2.55k|    }
 4800|  2.55k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|  2.55k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  2.55k|        else {
 4770|  2.55k|            return make_contiguous_buffer(
 4771|  2.55k|                ranges::subrange{range.begin(), result});
 4772|  2.55k|        }
 4773|  2.55k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4890|  12.2k|    {
 4891|  12.2k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.8k, False: 1.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  10.8k|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.41k|        return read_string_view_impl(range, it, value);
 4893|  12.2k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5612|  5.82k|    {
 5613|  5.82k|        reader_error_handler eh{};
 5614|       |        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
 5615|       |            detail::check_code_point_type_specs(specs, eh);
 5616|       |        }
 5617|  5.82k|        else {
 5618|  5.82k|            detail::check_char_type_specs(specs, eh);
 5619|  5.82k|        }
 5620|  5.82k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.27k, False: 548]
  |  |  ------------------
  ------------------
 5621|  5.27k|            return {scan_error::invalid_format_string, eh.m_msg};
 5622|  5.27k|        }
 5623|    548|        return {};
 5624|  5.82k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  9.33k|    {
  763|  9.33k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  9.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  9.33k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.62k|        : m_fptr([](storage fn,
  743|  1.62k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.62k|              cvref<T> obj = *get<T>(fn);
  745|  1.62k|              if constexpr (std::is_void_v<R>) {
  746|  1.62k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.62k|              }
  748|  1.62k|              else {
  749|  1.62k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.62k|              }
  751|  1.62k|          }),
  752|  1.62k|          m_storage(std::addressof(f))
  753|  1.62k|    {
  754|  1.62k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  3.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.18k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.18k|              else {
  749|  3.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.18k|              }
  751|  3.18k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.18k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.18k|        else if constexpr (std::is_object_v<T>) {
  688|  3.18k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.18k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.62k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.62k|        {
  662|  1.62k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5607|  1.68k|    {
 5608|  1.68k|        return false;
 5609|  1.68k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|    120|    {
 1768|    120|        auto stdloc = loc.get<std::locale>();
 1769|    120|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|    120|        grouping = numpunct.grouping();
 1771|    120|        thousands_sep =
 1772|    120|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 120]
  ------------------
 1773|    120|        decimal_point = numpunct.decimal_point();
 1774|    120|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|    156|{
 1705|    156|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 156, False: 0]
  ------------------
 1706|    156|        return std::use_facet<Facet>(stdloc);
 1707|    156|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|    156|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2337|  5.81k|{
 2338|  5.81k|    size_t count{0};
 2339|  5.81k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  5.81k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  5.81k|    });
 2342|  5.81k|    return count;
 2343|  5.81k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1433|  5.81k|{
 1434|       |    // TODO: Could be optimized by being eager
 1435|  5.81k|    auto it = input.begin();
 1436|  14.0k|    while (it != input.end()) {
  ------------------
  |  Branch (1436:12): [True: 8.27k, False: 5.81k]
  ------------------
 1437|  8.27k|        auto res = get_next_code_point(
 1438|  8.27k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1439|  8.27k|        cb(res.value);
 1440|  8.27k|        it = detail::make_string_view_iterator(input, res.iterator);
 1441|  8.27k|    }
 1442|  5.81k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   210k|{
 1169|   210k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   210k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   210k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   210k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   210k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 210k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   210k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 210k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   210k|    return {input.begin() + len,
 1181|   210k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   210k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_:
  742|  5.81k|        : m_fptr([](storage fn,
  743|  5.81k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.81k|              cvref<T> obj = *get<T>(fn);
  745|  5.81k|              if constexpr (std::is_void_v<R>) {
  746|  5.81k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.81k|              }
  748|  5.81k|              else {
  749|  5.81k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.81k|              }
  751|  5.81k|          }),
  752|  5.81k|          m_storage(std::addressof(f))
  753|  5.81k|    {
  754|  5.81k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfIS9_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSF_EEvE4typeELPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  8.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.27k|              cvref<T> obj = *get<T>(fn);
  745|  8.27k|              if constexpr (std::is_void_v<R>) {
  746|  8.27k|                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|       |              else {
  749|       |                  return obj(static_cast<decltype(args)>(args)...);
  750|       |              }
  751|  8.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  8.27k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.27k|        else if constexpr (std::is_object_v<T>) {
  688|  8.27k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.27k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2339|  8.27k|    for_each_code_point(input, [&count](char32_t cp) {
 2340|  8.27k|        count += calculate_text_width_for_fmt_v10(cp);
 2341|  8.27k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vIS9_EEvE4typeELPv0EEEPS9_:
  660|  5.81k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.81k|        {
  662|  5.81k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  2.79k|    {
 1570|  2.79k|        return m_view;
 1571|  2.79k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  3.00k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2409|    446|    {
 2410|    446|        return m_multibyte_left;
 2411|    446|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2414|  58.6k|    {
 2415|  58.6k|        return *m_current;
 2416|  58.6k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2423|  39.7k|    {
 2424|  39.7k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|  39.7k|        _increment_current();
 2426|  39.7k|        return *this;
 2427|  39.7k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2656|  39.7k|    {
 2657|  39.7k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 39.7k, False: 0]
  ------------------
 2658|  39.7k|            auto cplen = _get_cp_length_at_current();
 2659|  39.7k|            m_multibyte_left = cplen - 1;
 2660|  39.7k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  39.7k|        }
 2662|      0|        else {
 2663|      0|            --m_multibyte_left;
 2664|      0|        }
 2665|       |
 2666|  39.7k|        ++m_current;
 2667|  39.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2627|  39.7k|    {
 2628|  39.7k|        return static_cast<difference_type>(
 2629|  39.7k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  39.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2633|  39.7k|    {
 2634|  39.7k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  39.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.7k]
  |  |  ------------------
  ------------------
 2635|      0|            return 0;
 2636|      0|        }
 2637|       |
 2638|  39.7k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 39.7k, False: 0]
  ------------------
 2639|  39.7k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  39.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  39.7k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  39.7k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  39.7k|        }
 2643|       |
 2644|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|      0|                                           cplen);
 2646|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2647|      0|            return 0;
 2648|      0|        }
 2649|       |
 2650|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|      0|        return static_cast<difference_type>(
 2652|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  6.13k|{
 1845|  6.13k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  6.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  6.13k|    if constexpr (ranges::sized_range<Range>) {
 1848|  6.13k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  6.13k|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 138, False: 5.99k]
  ------------------
 1850|    138|            return unexpected(eof_error::eof);
 1851|    138|        }
 1852|       |
 1853|  5.99k|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  6.13k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2519|  14.3k|    {
 2520|  14.3k|        return !(a == b);
 2521|  14.3k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2511|  15.4k|    {
 2512|  15.4k|        return a.m_current == b.m_current;
 2513|  15.4k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2418|  2.86k|    {
 2419|  2.86k|        return *m_current;
 2420|  2.86k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1877|  18.1k|    {
 1878|  18.1k|        return !codepoint.empty();
 1879|  18.1k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1670|    618|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|    618|    else {
 1677|    618|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    618|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|    618|    }
 1679|    618|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSH_:
 1524|    618|    {
 1525|    618|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    618|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|    618|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1608|    618|    {
 1609|    618|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|    618|        else {
 1642|    618|            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|    618|            if constexpr (ranges::common_range<Range>) {
 1647|    618|                std::copy(ranges::begin(range), ranges::end(range),
 1648|    618|                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|    618|            m_view = string_view_type{str};
 1657|    618|        }
 1658|    618|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2369|  12.9k|        : m_current(x), m_end(s), m_count(n)
 2370|  12.9k|    {
 2371|  12.9k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2401|  56.5k|    {
 2402|  56.5k|        return m_current;
 2403|  56.5k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2104|  4.61k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  4.61k|    else {
 2114|  4.61k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  4.61k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  4.61k|            return detail::is_cp_space(cp);
 2127|  4.61k|        });
 2128|  4.61k|    }
 2129|  4.61k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2069|  4.61k|{
 2070|  4.61k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  4.61k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2048|  4.61k|{
 2049|  4.61k|    auto it = range.begin();
 2050|  9.77k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 8.33k, False: 1.44k]
  ------------------
 2051|  8.33k|        const auto val =
 2052|  8.33k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  8.33k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  8.33k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.33k, False: 0]
  |  |  ------------------
  ------------------
 2054|  8.33k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  8.33k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  8.33k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 3.17k, False: 5.15k]
  ------------------
 2057|  3.17k|                return it;
 2058|  3.17k|            }
 2059|  8.33k|        }
 2060|  5.15k|        it = val.iterator;
 2061|  5.15k|    }
 2062|       |
 2063|  1.44k|    return it;
 2064|  4.61k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  96.2k|{
 1887|  96.2k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  96.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  96.2k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  96.2k|    auto it = range.begin();
 1891|  96.2k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  96.2k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96.2k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  96.2k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 96.2k, False: 0]
  ------------------
 1900|  96.2k|        ++it;
 1901|  96.2k|        return {it, string_type(1, *range.begin())};
 1902|  96.2k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  96.2k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   119k|{
  944|   119k|    return is_range_eof(r.begin(), r.end());
  945|   119k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   322k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   322k|    {
  937|   322k|        return begin == end;
  938|   322k|    }
  939|   322k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    994|    {
  190|    994|        i = std::move(bound);
  191|    994|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  96.2k|    {
 1878|  96.2k|        return !codepoint.empty();
 1879|  96.2k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|  4.61k|        : m_fptr([](storage fn,
  743|  4.61k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.61k|              cvref<T> obj = *get<T>(fn);
  745|  4.61k|              if constexpr (std::is_void_v<R>) {
  746|  4.61k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.61k|              }
  748|  4.61k|              else {
  749|  4.61k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.61k|              }
  751|  4.61k|          }),
  752|  4.61k|          m_storage(std::addressof(f))
  753|  4.61k|    {
  754|  4.61k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  8.33k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.33k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.33k|              else {
  749|  8.33k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.33k|              }
  751|  8.33k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  8.33k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.33k|        else if constexpr (std::is_object_v<T>) {
  688|  8.33k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.33k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2125|  8.33k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  8.33k|            return detail::is_cp_space(cp);
 2127|  8.33k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|  4.61k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.61k|        {
  662|  4.61k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  23.3k|{
  950|  23.3k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.3k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  23.3k|    return eof_error::good;
  954|  23.3k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2820|  4.74k|    {
 2821|  4.74k|        return take_width_view{r, n};
 2822|  4.74k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2788|  4.74k|        : m_base(base), m_count(count)
 2789|  4.74k|    {
 2790|  4.74k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2702|  4.74k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5687|    186|    {
 5688|    186|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5688:13): [True: 166, False: 20]
  ------------------
 5689|    186|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5689:13): [True: 0, False: 20]
  ------------------
 5690|    166|            return read_default(range, value, loc);
 5691|    166|        }
 5692|       |
 5693|     20|        reader_impl_for_int<CharT> reader{};
 5694|     20|        using integer_type =
 5695|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5696|     20|        integer_type tmp_value{};
 5697|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5698|     20|        value = static_cast<integer_type>(value);
 5699|     20|        return ret;
 5700|    186|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5671|    166|    {
 5672|    166|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    166|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5673|       |        if constexpr (std::is_same_v<CharT, char>) {
 5674|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5675|       |        }
 5676|    166|        else {
 5677|    166|            return code_unit_reader<wchar_t>{}.read(range, value);
 5678|    166|        }
 5679|    166|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5552|    166|    {
 5553|    166|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    166|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    166|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    166|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    166|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 166]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    166|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    166|        ch = *range.begin();
 5555|    166|        return it;
 5556|    166|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1833|  1.36k|{
 1834|  1.36k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  1.36k|    return ranges::next(range.begin());
 1839|  1.36k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.36k|{
  950|  1.36k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.36k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.36k|    return eof_error::good;
  954|  1.36k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.36k|{
  944|  1.36k|    return is_range_eof(r.begin(), r.end());
  945|  1.36k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  19.5k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  19.5k|    {
  937|  19.5k|        return begin == end;
  938|  19.5k|    }
  939|  19.5k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2758|  53.0k|        {
 2759|  53.0k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 446, False: 52.5k]
  |  Branch (2759:39): [True: 446, False: 0]
  ------------------
 2760|  53.0k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 366, False: 52.2k]
  ------------------
 2761|  53.0k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2804|  18.4k|    {
 2805|  18.4k|        return sentinel<true>{m_base.get().end()};
 2806|  18.4k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2705|  44.2k|    {
 2706|  44.2k|        return view;
 2707|  44.2k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2739|  18.4k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  18.4k|    static_cast<    \
  |  |  929|  18.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.40k|    {
  296|  1.40k|        ++x;
  297|  1.40k|        return x;
  298|  1.40k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2798|  12.9k|    {
 2799|  12.9k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  12.9k|                                      m_count};
 2801|  12.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    226|    {
 3528|    226|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 226]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    226|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    226|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 226]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    226|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 226]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    226|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    226|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 206, False: 20]
  |  |  ------------------
  ------------------
 3554|    206|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    206|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    206|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    206|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    206|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 206, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    206|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    206|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    206|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    206|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    206|    }                                                  \
  |  |  |  | 3667|    206|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     20|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     20|            localized_number_formatting_options<CharT>{loc};
 3575|     20|#endif
 3576|       |
 3577|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3314|    600|{
 3315|    600|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|    600|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    600|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    600|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    600|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 600]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    600|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    600|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|    600|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|    600|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|    600|        parse_integer_base_prefix(
 3320|    600|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|    600|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 600]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|    600|    else {
 3332|    600|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 600]
  |  Branch (3332:13): [True: 600, False: 0]
  ------------------
 3333|    600|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 600, False: 0]
  ------------------
 3334|    600|            digits_begin_it = base_prefix_begin_it;
 3335|    600|        }
 3336|    600|    }
 3337|       |
 3338|    600|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 600, False: 0]
  ------------------
 3339|    600|        sign = sign_type::plus_sign;
 3340|    600|    }
 3341|    600|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|    600|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|    600|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3129|    790|{
 3130|    790|    auto r = read_one_of_code_unit(range, "+-");
 3131|    790|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 790, False: 0]
  ------------------
 3132|    790|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 790, False: 0]
  ------------------
 3133|    790|            return std::pair{range.begin(), sign_type::default_sign};
 3134|    790|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|    790|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2260|    790|{
 2261|    790|    auto it = read_code_unit(range);
 2262|    790|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    790|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 790]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  1.58k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 1.58k, False: 790]
  ------------------
 2267|  1.58k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 1.58k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  1.58k|    }
 2271|       |
 2272|    790|    return unexpected(parse_error::error);
 2273|    790|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3281|    600|{
 3282|    600|    switch (base) {
 3283|      6|        case 2:
  ------------------
  |  Branch (3283:9): [True: 6, False: 594]
  ------------------
 3284|       |            // allow 0b/0B
 3285|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|      6|                    false};
 3287|       |
 3288|     16|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 16, False: 584]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     16|            bool zero_parsed = false;
 3291|     16|            auto it = apply_opt(
 3292|     16|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     16|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    178|        case 16:
  ------------------
  |  Branch (3296:9): [True: 178, False: 422]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    178|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    178|                    false};
 3300|       |
 3301|     22|        case 0:
  ------------------
  |  Branch (3301:9): [True: 22, False: 578]
  ------------------
 3302|       |            // detect base
 3303|     22|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|    378|        default:
  ------------------
  |  Branch (3305:9): [True: 378, False: 222]
  ------------------
 3306|       |            // no base prefix allowed
 3307|    378|            return {range.begin(), base, false};
 3308|    600|    }
 3309|    600|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2279|    200|{
 2280|    200|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 200, False: 0]
  ------------------
 2281|    200|        return range.begin();
 2282|    200|    }
 2283|      0|    return *result;
 2284|    200|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3232|     28|{
 3233|     28|    return read_matching_string_classic_nocase(range, "0b");
 3234|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2219|    828|{
 2220|    828|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|    828|    else {
 2233|    828|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|    828|            if (ch < 'A' || ch > 'Z') {
 2235|    828|                return ch;
 2236|    828|            }
 2237|    828|            return static_cast<char_type>(ch +
 2238|    828|                                          static_cast<char_type>('a' - 'A'));
 2239|    828|        };
 2240|       |
 2241|    828|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    828|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    828|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    828|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    828|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 92, False: 736]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     92|    }                                                  \
  |  |  |  | 3667|    828|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    736|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|    736|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|    736|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|    736|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    736|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 736, False: 0]
  |  |  ------------------
  ------------------
 2246|    736|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|    736|                    return ascii_tolower(a) ==
 2248|    736|                           static_cast<detail::char_t<Range>>(b);
 2249|    736|                }))) {
 2250|    736|            return unexpected(parse_error::error);
 2251|    736|        }
 2252|       |
 2253|      0|        return it;
 2254|    736|    }
 2255|    828|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1844|    828|{
 1845|    828|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    828|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    828|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    828|    else {
 1856|    828|        auto it = range.begin();
 1857|    828|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 828]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  2.75k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 2.01k, False: 736]
  ------------------
 1862|  2.01k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 92, False: 1.92k]
  ------------------
 1863|     92|                return unexpected(eof_error::eof);
 1864|     92|            }
 1865|  2.01k|        }
 1866|       |
 1867|    736|        return it;
 1868|    828|    }
 1869|    828|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    828|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    828|    else {
 1115|    828|        return 0;
 1116|    828|    }
 1117|    828|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2233|    736|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|    736|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 32, False: 704]
  |  Branch (2234:29): [True: 704, False: 0]
  ------------------
 2235|    736|                return ch;
 2236|    736|            }
 2237|      0|            return static_cast<char_type>(ch +
 2238|      0|                                          static_cast<char_type>('a' - 'A'));
 2239|    736|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3246|     38|{
 3247|     38|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 38]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     38|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 38]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     38|    return unexpected(parse_error::error);
 3257|     38|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2134|     38|{
 2135|     38|    auto it = read_code_unit(range);
 2136|     38|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|     38|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 2141|     38|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|     38|        return unexpected(parse_error::error);
 2143|     38|    }
 2144|       |
 2145|      0|    return *it;
 2146|     38|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1833|     38|{
 1834|     38|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|     38|    return ranges::next(range.begin());
 1839|     38|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     38|{
  950|     38|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     38|    return eof_error::good;
  954|     38|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  18.2k|{
  944|  18.2k|    return is_range_eof(r.begin(), r.end());
  945|  18.2k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3239|    200|{
 3240|    200|    return read_matching_string_classic_nocase(range, "0x");
 3241|    200|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3262|     22|{
 3263|     22|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 22]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     22|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 22]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     22|    {
 3270|     22|        bool zero_parsed{false};
 3271|     22|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 22]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     22|    }
 3275|     22|    return {range.begin(), 10, false};
 3276|     22|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3348|    560|{
 3349|    560|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|    560|    else {
 3360|    560|        return read_while1_code_unit(range,
 3361|    560|                                     [&](char_type ch) noexcept {
 3362|    560|                                         return char_to_int(ch) < base;
 3363|    560|                                     })
 3364|    560|            .transform_error(map_parse_error_to_scan_error(
 3365|    560|                scan_error::invalid_scanned_value,
 3366|    560|                "Failed to parse integer: No digits found"));
 3367|    560|    }
 3368|    560|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1983|    750|{
 1984|    750|    auto it = read_while_code_unit(range, pred);
 1985|    750|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 750, False: 0]
  ------------------
 1986|    750|        return unexpected(parse_error::error);
 1987|    750|    }
 1988|      0|    return it;
 1989|    750|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1963|    750|{
 1964|    750|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    750|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1944|    750|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    750|    else {
 1949|    750|        auto first = range.begin();
 1950|    750|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 750, False: 0]
  ------------------
 1951|    750|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 750, False: 0]
  ------------------
 1952|    750|                return first;
 1953|    750|            }
 1954|    750|        }
 1955|      0|        return first;
 1956|    750|    }
 1957|    750|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  24.7k|        {
 2770|  24.7k|            return !(y == x);
 2771|  24.7k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_:
  742|    560|        : m_fptr([](storage fn,
  743|    560|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    560|              cvref<T> obj = *get<T>(fn);
  745|    560|              if constexpr (std::is_void_v<R>) {
  746|    560|                  obj(static_cast<decltype(args)>(args)...);
  747|    560|              }
  748|    560|              else {
  749|    560|                  return obj(static_cast<decltype(args)>(args)...);
  750|    560|              }
  751|    560|          }),
  752|    560|          m_storage(std::addressof(f))
  753|    560|    {
  754|    560|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    560|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    560|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    560|              else {
  749|    560|                  return obj(static_cast<decltype(args)>(args)...);
  750|    560|              }
  751|    560|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    560|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    560|        else if constexpr (std::is_object_v<T>) {
  688|    560|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    560|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3361|    560|                                     [&](char_type ch) noexcept {
 3362|    560|                                         return char_to_int(ch) < base;
 3363|    560|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_TnPNSN_9enable_ifIXsr3stdE11is_object_vISP_EEvE4typeELPv0EEEPSP_:
  660|    560|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    560|        {
  662|    560|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3378|     40|{
 3379|     40|    std::basic_string<CharT> output;
 3380|     40|    std::string thsep_indices;
 3381|     40|    auto it = range.begin();
 3382|     40|    bool digit_matched = false;
 3383|     40|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 40, False: 0]
  ------------------
 3384|     40|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 40]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     40|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 40, False: 0]
  ------------------
 3389|     40|            break;
 3390|     40|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     40|    }
 3396|     40|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 0]
  |  |  ------------------
  ------------------
 3397|     40|        return unexpected_scan_error(
 3398|     40|            scan_error::invalid_scanned_value,
 3399|     40|            "Failed to parse integer: No digits found");
 3400|     40|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     40|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2405|  54.1k|    {
 2406|  54.1k|        return m_count;
 2407|  54.1k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5687|    360|    {
 5688|    360|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5688:13): [True: 340, False: 20]
  ------------------
 5689|    360|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5689:13): [True: 0, False: 20]
  ------------------
 5690|    340|            return read_default(range, value, loc);
 5691|    340|        }
 5692|       |
 5693|     20|        reader_impl_for_int<CharT> reader{};
 5694|     20|        using integer_type =
 5695|     20|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5696|     20|        integer_type tmp_value{};
 5697|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5698|     20|        value = static_cast<integer_type>(value);
 5699|     20|        return ret;
 5700|    360|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5671|    968|    {
 5672|    968|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    968|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5673|       |        if constexpr (std::is_same_v<CharT, char>) {
 5674|       |            return code_point_reader<wchar_t>{}.read(range, value);
 5675|       |        }
 5676|    968|        else {
 5677|    968|            return code_unit_reader<wchar_t>{}.read(range, value);
 5678|    968|        }
 5679|    968|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5552|    968|    {
 5553|    968|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3668|    968|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    968|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    968|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    968|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 968]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    968|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    968|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5554|    968|        ch = *range.begin();
 5555|    968|        return it;
 5556|    968|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  7.05k|{
 1834|  7.05k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.05k]
  |  |  ------------------
  ------------------
 1835|      0|        return unexpected(e);
 1836|      0|    }
 1837|       |
 1838|  7.05k|    return ranges::next(range.begin());
 1839|  7.05k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  48.8k|    {
  296|  48.8k|        ++x;
  297|  48.8k|        return x;
  298|  48.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    406|    {
 3528|    406|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 406]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    406|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    406|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 406]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|      0|            else {
 3539|      0|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 0]
  ------------------
 3540|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|      0|            }
 3546|      0|        }
 3547|       |
 3548|    406|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 406]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    406|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    406|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 380, False: 26]
  |  |  ------------------
  ------------------
 3554|    380|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 380]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    380|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    380|                    parse_integer_digits_without_thsep(
 3556|    380|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    380|                        prefix_result.parsed_base));
 3558|       |
 3559|    380|            auto buf = make_contiguous_buffer(
 3560|    380|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    380|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 380, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    380|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    380|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    380|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    380|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    380|    }                                                  \
  |  |  |  | 3667|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    380|        }
 3569|       |
 3570|     26|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     26|            localized_number_formatting_options<CharT>{loc};
 3575|     26|#endif
 3576|       |
 3577|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     26|    }                                                  \
  |  |  |  | 3667|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|  3.02k|{
 3315|  3.02k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|  3.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  3.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|  3.02k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|  3.02k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|  3.02k|        parse_integer_base_prefix(
 3320|  3.02k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|  3.02k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 0, False: 3.02k]
  ------------------
 3323|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 0, False: 0]
  ------------------
 3324|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 0, False: 0]
  ------------------
 3325|      0|            digits_begin_it = base_prefix_begin_it;
 3326|      0|        }
 3327|      0|        else {
 3328|      0|            parsed_zero = false;
 3329|      0|        }
 3330|      0|    }
 3331|  3.02k|    else {
 3332|  3.02k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 0, False: 3.02k]
  ------------------
 3333|  3.02k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 3.02k, False: 0]
  ------------------
 3334|  3.02k|            digits_begin_it = base_prefix_begin_it;
 3335|  3.02k|        }
 3336|  3.02k|    }
 3337|       |
 3338|  3.02k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 3.02k, False: 0]
  ------------------
 3339|  3.02k|        sign = sign_type::plus_sign;
 3340|  3.02k|    }
 3341|  3.02k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|  3.02k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|  3.02k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|  4.02k|{
 3130|  4.02k|    auto r = read_one_of_code_unit(range, "+-");
 3131|  4.02k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 4.02k, False: 0]
  ------------------
 3132|  4.02k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 4.02k, False: 0]
  ------------------
 3133|  4.02k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|  4.02k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|  4.02k|    }
 3137|       |
 3138|      0|    auto& it = *r;
 3139|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 0, False: 0]
  ------------------
 3140|      0|        return std::pair{it, sign_type::minus_sign};
 3141|      0|    }
 3142|      0|    return std::pair{it, sign_type::plus_sign};
 3143|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  4.02k|{
 2261|  4.02k|    auto it = read_code_unit(range);
 2262|  4.02k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.02k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|  8.04k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 8.04k, False: 4.02k]
  ------------------
 2267|  8.04k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 0, False: 8.04k]
  ------------------
 2268|      0|            return *it;
 2269|      0|        }
 2270|  8.04k|    }
 2271|       |
 2272|  4.02k|    return unexpected(parse_error::error);
 2273|  4.02k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|  3.02k|{
 3282|  3.02k|    switch (base) {
 3283|     12|        case 2:
  ------------------
  |  Branch (3283:9): [True: 12, False: 3.01k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|     12|                    false};
 3287|       |
 3288|     10|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 10, False: 3.01k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|     10|            bool zero_parsed = false;
 3291|     10|            auto it = apply_opt(
 3292|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|     10|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|    994|        case 16:
  ------------------
  |  Branch (3296:9): [True: 994, False: 2.02k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|    994|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|    994|                    false};
 3300|       |
 3301|     16|        case 0:
  ------------------
  |  Branch (3301:9): [True: 16, False: 3.00k]
  ------------------
 3302|       |            // detect base
 3303|     16|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  1.99k|        default:
  ------------------
  |  Branch (3305:9): [True: 1.99k, False: 1.03k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  1.99k|            return {range.begin(), base, false};
 3308|  3.02k|    }
 3309|  3.02k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|  1.01k|{
 2280|  1.01k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 1.01k, False: 0]
  ------------------
 2281|  1.01k|        return range.begin();
 2282|  1.01k|    }
 2283|      0|    return *result;
 2284|  1.01k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|     28|{
 3233|     28|    return read_matching_string_classic_nocase(range, "0b");
 3234|     28|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  4.06k|{
 2220|  4.06k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  4.06k|    else {
 2233|  4.06k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  4.06k|            if (ch < 'A' || ch > 'Z') {
 2235|  4.06k|                return ch;
 2236|  4.06k|            }
 2237|  4.06k|            return static_cast<char_type>(ch +
 2238|  4.06k|                                          static_cast<char_type>('a' - 'A'));
 2239|  4.06k|        };
 2240|       |
 2241|  4.06k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  4.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 4.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|  4.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  4.05k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  4.05k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  4.05k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  4.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.05k, False: 0]
  |  |  ------------------
  ------------------
 2246|  4.05k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  4.05k|                    return ascii_tolower(a) ==
 2248|  4.05k|                           static_cast<detail::char_t<Range>>(b);
 2249|  4.05k|                }))) {
 2250|  4.05k|            return unexpected(parse_error::error);
 2251|  4.05k|        }
 2252|       |
 2253|      0|        return it;
 2254|  4.05k|    }
 2255|  4.06k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  4.05k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  4.05k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 48, False: 4.01k]
  |  Branch (2234:29): [True: 4.01k, False: 0]
  ------------------
 2235|  4.05k|                return ch;
 2236|  4.05k|            }
 2237|      0|            return static_cast<char_type>(ch +
 2238|      0|                                          static_cast<char_type>('a' - 'A'));
 2239|  4.05k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|     26|{
 3247|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 26]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 0, False: 26]
  ------------------
 3252|      0|        zero_parsed = true;
 3253|      0|        return *r;
 3254|      0|    }
 3255|       |
 3256|     26|    return unexpected(parse_error::error);
 3257|     26|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|  2.05k|{
 2135|  2.05k|    auto it = read_code_unit(range);
 2136|  2.05k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.05k]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|  2.05k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 0]
  |  |  ------------------
  ------------------
 2141|  2.05k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  2.05k|        return unexpected(parse_error::error);
 2143|  2.05k|    }
 2144|       |
 2145|      0|    return *it;
 2146|  2.05k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|  1.01k|{
 3240|  1.01k|    return read_matching_string_classic_nocase(range, "0x");
 3241|  1.01k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|     16|{
 3263|     16|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 16]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|     16|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 16]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|     16|    {
 3270|     16|        bool zero_parsed{false};
 3271|     16|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 0, False: 16]
  ------------------
 3272|      0|            return {*r, 8, zero_parsed};
 3273|      0|        }
 3274|     16|    }
 3275|     16|    return {range.begin(), 10, false};
 3276|     16|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|  2.97k|{
 3349|  2.97k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|  2.97k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|  2.97k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.97k]
  |  |  ------------------
  ------------------
 3353|      0|            return unexpected_scan_error(
 3354|      0|                scan_error::invalid_scanned_value,
 3355|      0|                "Failed to parse integer: No digits found");
 3356|      0|        }
 3357|  2.97k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|  2.97k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|     52|{
 3379|     52|    std::basic_string<CharT> output;
 3380|     52|    std::string thsep_indices;
 3381|     52|    auto it = range.begin();
 3382|     52|    bool digit_matched = false;
 3383|     52|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 52, False: 0]
  ------------------
 3384|     52|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 0, False: 52]
  ------------------
 3385|      0|            thsep_indices.push_back(
 3386|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|      0|        }
 3388|     52|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 52, False: 0]
  ------------------
 3389|     52|            break;
 3390|     52|        }
 3391|      0|        else {
 3392|      0|            output.push_back(*it);
 3393|      0|            digit_matched = true;
 3394|      0|        }
 3395|     52|    }
 3396|     52|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 0]
  |  |  ------------------
  ------------------
 3397|     52|        return unexpected_scan_error(
 3398|     52|            scan_error::invalid_scanned_value,
 3399|     52|            "Failed to parse integer: No digits found");
 3400|     52|    }
 3401|      0|    return std::tuple{it, output, thsep_indices};
 3402|     52|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|  15.7k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  15.7k|                  ranges::sized_range<Range>) {
 1674|  15.7k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  15.7k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  15.7k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  15.7k|    {
 1478|  15.7k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|  18.7k|    {
 1491|  18.7k|        return sv;
 1492|  18.7k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5939|    542|{
 5940|    542|    using char_type = detail::char_t<Range>;
 5941|    542|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|    542|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 542, False: 0]
  ------------------
 5944|    542|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|    542|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|    542|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 484, False: 58]
  ------------------
 5948|    484|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|    484|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 66, False: 418]
  ------------------
 5951|     66|                auto prefix_width =
 5952|     66|                    static_cast<std::ptrdiff_t>(
 5953|     66|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|     66|                    ranges::distance(range.begin(), it);
 5955|     66|                return result_type{it, prefix_width};
 5956|     66|            }
 5957|    418|            return result_type{it, 0};
 5958|    484|        }
 5959|       |
 5960|     58|        auto max_width_view = take_width(range, max_width);
 5961|     58|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|     58|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 58, False: 0]
  ------------------
 5964|     58|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|     58|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|     58|    }
 5968|       |
 5969|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 0, False: 0]
  ------------------
 5971|      0|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 0, False: 0]
  ------------------
 5974|      0|            auto prefix_width =
 5975|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|      0|            return result_type{it, prefix_width};
 5978|      0|        }
 5979|      0|        return result_type{it, 0};
 5980|      0|    }
 5981|       |
 5982|      0|    auto max_width_view = take_width(range, max_width);
 5983|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 0, False: 0]
  ------------------
 5986|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|      0|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|    546|{
 1964|    546|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    546|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|    696|{
 1945|    696|    if constexpr (ranges::common_range<Range>) {
 1946|    696|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|    696|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_:
  742|    542|        : m_fptr([](storage fn,
  743|    542|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    542|              cvref<T> obj = *get<T>(fn);
  745|    542|              if constexpr (std::is_void_v<R>) {
  746|    542|                  obj(static_cast<decltype(args)>(args)...);
  747|    542|              }
  748|    542|              else {
  749|    542|                  return obj(static_cast<decltype(args)>(args)...);
  750|    542|              }
  751|    542|          }),
  752|    542|          m_storage(std::addressof(f))
  753|    542|    {
  754|    542|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_TnPNSF_9enable_ifIXaaaasr6detailE11is_not_selfISH_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|    994|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    994|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    994|              else {
  749|    994|                  return obj(static_cast<decltype(args)>(args)...);
  750|    994|              }
  751|    994|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    994|    {
  684|    994|        if constexpr (std::is_const_v<T>) {
  685|    994|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    994|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5945|    994|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSF_9enable_ifIXsr3stdE11is_object_vISH_EEvE4typeELPv0EEEPKSH_:
  665|    542|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    542|        {
  667|    542|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1963|     94|{
 1964|     94|    return read_until_code_unit(range, std::not_fn(pred));
 1965|     94|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1944|    220|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    220|    else {
 1949|    220|        auto first = range.begin();
 1950|  1.75k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.63k, False: 122]
  ------------------
 1951|  1.63k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 98, False: 1.53k]
  ------------------
 1952|     98|                return first;
 1953|     98|            }
 1954|  1.63k|        }
 1955|    122|        return first;
 1956|    220|    }
 1957|    220|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2939|    336|{
 2940|    336|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 0, False: 336]
  ------------------
 2941|      0|        auto it = read_while_classic_space(range);
 2942|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|      0|        return it;
 2948|      0|    }
 2949|       |
 2950|    336|    return read_while_classic_space(range);
 2951|    336|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2104|    336|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|    336|    else {
 2114|    336|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|    336|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    336|            return detail::is_cp_space(cp);
 2127|    336|        });
 2128|    336|    }
 2129|    336|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2069|    384|{
 2070|    384|    return read_until_code_point(range, std::not_fn(pred));
 2071|    384|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2048|    564|{
 2049|    564|    auto it = range.begin();
 2050|  1.92k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.86k, False: 66]
  ------------------
 2051|  1.86k|        const auto val =
 2052|  1.86k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.86k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.86k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.86k, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.86k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.86k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.86k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 498, False: 1.36k]
  ------------------
 2057|    498|                return it;
 2058|    498|            }
 2059|  1.86k|        }
 2060|  1.36k|        it = val.iterator;
 2061|  1.36k|    }
 2062|       |
 2063|     66|    return it;
 2064|    564|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1886|  18.1k|{
 1887|  18.1k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  18.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  18.1k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  18.1k|    auto it = range.begin();
 1891|  18.1k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  18.1k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.1k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  18.1k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 18.1k, False: 0]
  ------------------
 1900|  18.1k|        ++it;
 1901|  18.1k|        return {it, string_type(1, *range.begin())};
 1902|  18.1k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  18.1k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    336|        : m_fptr([](storage fn,
  743|    336|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    336|              cvref<T> obj = *get<T>(fn);
  745|    336|              if constexpr (std::is_void_v<R>) {
  746|    336|                  obj(static_cast<decltype(args)>(args)...);
  747|    336|              }
  748|    336|              else {
  749|    336|                  return obj(static_cast<decltype(args)>(args)...);
  750|    336|              }
  751|    336|          }),
  752|    336|          m_storage(std::addressof(f))
  753|    336|    {
  754|    336|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|    468|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    468|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    468|              else {
  749|    468|                  return obj(static_cast<decltype(args)>(args)...);
  750|    468|              }
  751|    468|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    468|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    468|        else if constexpr (std::is_object_v<T>) {
  688|    468|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    468|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2125|    468|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|    468|            return detail::is_cp_space(cp);
 2127|    468|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    336|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    336|        {
  662|    336|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  9.19k|{
 2940|  9.19k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 7.69k, False: 1.49k]
  ------------------
 2941|  7.69k|        auto it = read_while_classic_space(range);
 2942|  7.69k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  7.69k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.69k]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|  7.69k|        return it;
 2948|  7.69k|    }
 2949|       |
 2950|  1.49k|    return read_while_classic_space(range);
 2951|  9.19k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  13.8k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  13.8k|    else {
 2114|  13.8k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  13.8k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  13.8k|            return detail::is_cp_space(cp);
 2127|  13.8k|        });
 2128|  13.8k|    }
 2129|  13.8k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  14.0k|{
 2070|  14.0k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  14.0k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  17.0k|{
 2049|  17.0k|    auto it = range.begin();
 2050|  91.2k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 87.9k, False: 3.31k]
  ------------------
 2051|  87.9k|        const auto val =
 2052|  87.9k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  87.9k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  87.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 87.9k, False: 0]
  |  |  ------------------
  ------------------
 2054|  87.9k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  87.9k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  87.9k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 13.7k, False: 74.1k]
  ------------------
 2057|  13.7k|                return it;
 2058|  13.7k|            }
 2059|  87.9k|        }
 2060|  74.1k|        it = val.iterator;
 2061|  74.1k|    }
 2062|       |
 2063|  3.31k|    return it;
 2064|  17.0k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  13.8k|        : m_fptr([](storage fn,
  743|  13.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.8k|              cvref<T> obj = *get<T>(fn);
  745|  13.8k|              if constexpr (std::is_void_v<R>) {
  746|  13.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.8k|              }
  748|  13.8k|              else {
  749|  13.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.8k|              }
  751|  13.8k|          }),
  752|  13.8k|          m_storage(std::addressof(f))
  753|  13.8k|    {
  754|  13.8k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  20.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  20.4k|              else {
  749|  20.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.4k|              }
  751|  20.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  20.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  20.4k|        else if constexpr (std::is_object_v<T>) {
  688|  20.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  20.4k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|  20.4k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  20.4k|            return detail::is_cp_space(cp);
 2127|  20.4k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  13.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  13.8k|        {
  662|  13.8k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  11.7k|    {
 3029|  11.7k|        reader_error_handler eh{};
 3030|  11.7k|        get_derived().check_specs_impl(specs, eh);
 3031|  11.7k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  11.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 1.18k]
  |  |  ------------------
  ------------------
 3032|  10.5k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  10.5k|        }
 3034|  1.18k|        return {};
 3035|  11.7k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3039|  11.7k|    {
 3040|  11.7k|        return static_cast<Derived&>(*this);
 3041|  11.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|  11.7k|    {
 3474|  11.7k|        detail::check_int_type_specs(specs, eh);
 3475|  11.7k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3023|  2.44k|    {
 3024|  2.44k|        return true;
 3025|  2.44k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    206|    {
 3528|    206|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    206|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    206|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    206|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    206|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 206]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    206|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    206|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    206|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    206|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 206]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    206|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 206]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    206|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    206|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 186, False: 20]
  |  |  ------------------
  ------------------
 3554|    186|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 186, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    186|    }                                                  \
  |  |  |  | 3667|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|     20|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     20|            localized_number_formatting_options<CharT>{loc};
 3575|     20|#endif
 3576|       |
 3577|     20|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    386|    {
 3528|    386|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    386|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 386]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    386|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    386|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 386]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    386|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 386]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    386|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    386|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 360, False: 26]
  |  |  ------------------
  ------------------
 3554|    360|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    360|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 360]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    360|                    parse_integer_digits_without_thsep(
 3556|    360|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    360|                        prefix_result.parsed_base));
 3558|       |
 3559|    360|            auto buf = make_contiguous_buffer(
 3560|    360|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    360|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    360|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 360, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    360|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    360|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    360|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    360|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    360|    }                                                  \
  |  |  |  | 3667|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    360|        }
 3569|       |
 3570|     26|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|     26|            localized_number_formatting_options<CharT>{loc};
 3575|     26|#endif
 3576|       |
 3577|     26|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     26|    }                                                  \
  |  |  |  | 3667|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3527|    168|    {
 3528|    168|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    168|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    168|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 168]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    168|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 168]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    168|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    168|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 168, False: 0]
  |  |  ------------------
  ------------------
 3554|    168|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 168, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    168|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    168|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    168|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    168|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    168|    }                                                  \
  |  |  |  | 3667|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|      0|                    parse_integer_digits_without_thsep(
 3556|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|      0|                        prefix_result.parsed_base));
 3558|       |
 3559|      0|            auto buf = make_contiguous_buffer(
 3560|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|      0|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|    974|    {
 3528|    974|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|    974|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    974|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    974|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    974|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 974]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    974|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    974|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|    974|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|    974|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 0, False: 974]
  ------------------
 3532|      0|            if constexpr (!std::is_signed_v<T>) {
 3533|      0|                return unexpected_scan_error(
 3534|      0|                    scan_error::invalid_scanned_value,
 3535|      0|                    "Unexpected '-' sign when parsing an "
 3536|      0|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|      0|        }
 3547|       |
 3548|    974|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 0, False: 974]
  ------------------
 3549|      0|            value = T{0};
 3550|      0|            return std::next(prefix_result.iterator);
 3551|      0|        }
 3552|       |
 3553|    974|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    974|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 974, False: 0]
  |  |  ------------------
  ------------------
 3554|    974|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    974|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    974|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    974|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    974|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 974]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    974|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    974|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    974|                    parse_integer_digits_without_thsep(
 3556|    974|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    974|                        prefix_result.parsed_base));
 3558|       |
 3559|    974|            auto buf = make_contiguous_buffer(
 3560|    974|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    974|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    974|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    974|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    974|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    974|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 974, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    974|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    974|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    974|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    974|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    974|    }                                                  \
  |  |  |  | 3667|    974|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|      0|                                        prefix_result.parsed_base));
 3564|       |
 3565|      0|            return ranges::next(
 3566|      0|                prefix_result.iterator,
 3567|      0|                ranges::distance(buf.view().begin(), result_it));
 3568|    974|        }
 3569|       |
 3570|      0|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|      0|            localized_number_formatting_options<CharT>{loc};
 3575|      0|#endif
 3576|       |
 3577|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|      0|                parse_integer_digits_with_thsep(
 3579|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|      0|                    prefix_result.parsed_base, locale_options));
 3581|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|      0|            parse_digits_result;
 3583|       |
 3584|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 0, False: 0]
  ------------------
 3585|      0|            if (auto e = check_thsep_grouping(
 3586|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|      0|                    thsep_indices, locale_options.grouping);
 3588|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3589|      0|                return unexpected(e);
 3590|      0|            }
 3591|      0|        }
 3592|       |
 3593|      0|        auto nothsep_source_view =
 3594|      0|            std::basic_string_view<CharT>{nothsep_source};
 3595|      0|        SCN_TRY(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|      0|            nothsep_source_it,
 3597|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|      0|                                prefix_result.parsed_base));
 3599|       |
 3600|      0|        return ranges::next(
 3601|      0|            prefix_result.iterator,
 3602|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|      0|                ranges::ssize(thsep_indices));
 3604|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  5.88k|    {
 3029|  5.88k|        reader_error_handler eh{};
 3030|  5.88k|        get_derived().check_specs_impl(specs, eh);
 3031|  5.88k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.32k, False: 568]
  |  |  ------------------
  ------------------
 3032|  5.32k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  5.32k|        }
 3034|    568|        return {};
 3035|  5.88k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3039|  5.88k|    {
 3040|  5.88k|        return static_cast<Derived&>(*this);
 3041|  5.88k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  5.88k|    {
 4134|  5.88k|        detail::check_float_type_specs(specs, eh);
 4135|  5.88k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3023|  1.19k|    {
 3024|  1.19k|        return true;
 3025|  1.19k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4205|    564|    {
 4206|    564|        unsigned options{};
 4207|    564|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 28, False: 536]
  ------------------
 4208|     28|            options |= float_reader_base::allow_thsep;
 4209|     28|        }
 4210|       |
 4211|    564|        SCN_GCC_COMPAT_PUSH
 4212|    564|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|    564|        switch (specs.type) {
 4215|      8|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 8, False: 556]
  ------------------
 4216|      8|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|      4|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 4, False: 560]
  ------------------
 4219|      4|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|     18|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 18, False: 546]
  ------------------
 4222|     18|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|      4|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 4, False: 560]
  ------------------
 4225|      4|                return options | float_reader_base::allow_scientific |
 4226|      4|                       float_reader_base::allow_fixed;
 4227|       |
 4228|    530|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 530, False: 34]
  ------------------
 4229|    530|                return options | float_reader_base::allow_scientific |
 4230|    530|                       float_reader_base::allow_fixed |
 4231|    530|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 564]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|    564|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|    564|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|    564|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3648|    564|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1758|  1.19k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1519|  2.38k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4045|    994|    {
 4046|    994|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 994, False: 0]
  ------------------
 4047|    994|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 994, False: 0]
  ------------------
 4048|    994|            return;
 4049|    994|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|    384|    {
 1575|    384|        return m_storage.has_value();
 1576|    384|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|    192|    {
 1580|    192|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    192|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    192|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|    192|        return *m_storage;
 1582|    192|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    190|    {
  763|    190|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    190|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3667|     10|    {
 3668|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|     10|        return read_source_impl(range);
 3674|     10|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3693|    190|    {
 3694|    190|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 190]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|    190|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|    190|        auto it = sign_result.first;
 3697|    190|        m_sign = sign_result.second;
 3698|       |
 3699|    190|        auto digits_begin = it;
 3700|    190|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|    190|        else {
 3727|    190|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    190|    }                                                  \
  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    190|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|      0|                it,
 3729|      0|                do_read_source_impl(
 3730|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|      0|        }
 3733|       |
 3734|    190|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    190|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    190|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 0, False: 0]
  |  Branch (3736:48): [True: 0, False: 0]
  ------------------
 3737|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 0, False: 0]
  ------------------
 3738|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 0, False: 0]
  ------------------
 3739|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|      0|        }
 3741|       |
 3742|      0|        handle_separators();
 3743|       |
 3744|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 0]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|      0|        return it;
 3757|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3988|    190|    {
 3989|    190|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|    190|        const bool allowed_nonhex =
 3991|    190|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|    190|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|    190|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 190, False: 0]
  |  Branch (3994:45): [True: 0, False: 190]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|    190|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 190]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|    190|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 190, False: 0]
  |  Branch (4003:45): [True: 0, False: 190]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|    190|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 190]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|    190|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 182, False: 8]
  |  Branch (4010:28): [True: 6, False: 176]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|      6|            auto it = range.begin();
 4014|       |
 4015|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 6]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|      6|            else {
 4020|      6|                m_kind = float_kind::hex_without_prefix;
 4021|      6|            }
 4022|       |
 4023|      6|            return read_hex(ranges::subrange{it, range.end()});
 4024|      6|        }
 4025|    184|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 8, False: 176]
  |  Branch (4025:29): [True: 8, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|      8|            m_kind = float_kind::generic;
 4029|      8|            return read_regular_float(range);
 4030|      8|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    176|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 176]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    176|        m_kind = float_kind::generic;
 4041|    176|        return read_regular(range);
 4042|    176|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3799|    190|    {
 3800|    190|        auto it = range.begin();
 3801|    190|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 190, False: 0]
  ------------------
 3802|    190|            return unexpected(r.error());
 3803|    190|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3822|    190|    {
 3823|    190|        auto it = range.begin();
 3824|    190|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 190, False: 0]
  ------------------
 3825|    190|            return r.transform_error(map_parse_error_to_scan_error(
 3826|    190|                scan_error::invalid_scanned_value,
 3827|    190|                "Invalid floating-point NaN value"));
 3828|    190|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3792|    182|    {
 3793|    182|        return read_matching_string_classic_nocase(range, "0x");
 3794|    182|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3892|      6|    {
 3893|      6|        auto it = range.begin();
 3894|       |
 3895|      6|        std::ptrdiff_t digits_count = 0;
 3896|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3898|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3899|      6|                scan_error::invalid_scanned_value,
 3900|      6|                "Invalid hexadecimal floating-point value"));
 3901|      6|        }
 3902|      0|        else {
 3903|      0|            digits_count += ranges::distance(it, *r);
 3904|      0|            it = *r;
 3905|      0|        }
 3906|       |
 3907|      0|        m_integral_part_length = digits_count;
 3908|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 0, False: 0]
  ------------------
 3909|      0|                                             m_locale_options.decimal_point)) {
 3910|      0|            it = *r;
 3911|      0|        }
 3912|       |
 3913|      0|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 0, False: 0]
  ------------------
 3914|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|      0|            digits_count += ranges::distance(it, *r);
 3916|      0|            it = *r;
 3917|      0|        }
 3918|       |
 3919|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|      0|        return it;
 3927|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3777|      6|    {
 3778|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|      6|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|      6|        return read_while1_code_unit(
 3787|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|      6|        : m_fptr([](storage fn,
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
  752|      6|          m_storage(std::addressof(f))
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  688|      6|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3787|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|      6|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3932|    184|    {
 3933|    184|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|    184|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 178, False: 6]
  |  Branch (3934:50): [True: 2, False: 176]
  ------------------
 3935|       |
 3936|    184|        auto it = ranges::begin(range);
 3937|    184|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|    184|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|    184|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 184, False: 0]
  |  |  ------------------
  ------------------
 3941|    184|            return r.transform_error(
 3942|    184|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|    184|                                              "Invalid floating-point value"));
 3944|    184|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3762|    184|    {
 3763|    184|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 184]
  |  |  |  Branch (859:45): [True: 0, False: 184]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|    184|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|    184|        return read_while1_code_unit(
 3772|    184|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|    184|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_:
  742|    184|        : m_fptr([](storage fn,
  743|    184|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    184|              cvref<T> obj = *get<T>(fn);
  745|    184|              if constexpr (std::is_void_v<R>) {
  746|    184|                  obj(static_cast<decltype(args)>(args)...);
  747|    184|              }
  748|    184|              else {
  749|    184|                  return obj(static_cast<decltype(args)>(args)...);
  750|    184|              }
  751|    184|          }),
  752|    184|          m_storage(std::addressof(f))
  753|    184|    {
  754|    184|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSZ_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    184|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    184|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    184|              else {
  749|    184|                  return obj(static_cast<decltype(args)>(args)...);
  750|    184|              }
  751|    184|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    184|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    184|        else if constexpr (std::is_object_v<T>) {
  688|    184|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    184|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3772|    184|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_TnPNSP_9enable_ifIXsr3stdE11is_object_vISR_EEvE4typeELPv0EEEPSR_:
  660|    184|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    184|        {
  662|    184|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3653|    180|    {
 3654|    180|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 180]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    180|        return read_source_impl(range);
 3660|    180|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.00k|    {
  763|  1.00k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.00k|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|     18|    {
 3668|     18|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|     18|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     18|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|     18|        return read_source_impl(range);
 3674|     18|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|  1.00k|    {
 3694|  1.00k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  1.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|  1.00k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|  1.00k|        auto it = sign_result.first;
 3697|  1.00k|        m_sign = sign_result.second;
 3698|       |
 3699|  1.00k|        auto digits_begin = it;
 3700|  1.00k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|  1.00k|                      ranges::sized_range<Range>) {
 3703|  1.00k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00k]
  |  |  |  Branch (859:45): [True: 0, False: 1.00k]
  |  |  |  Branch (859:45): [True: 0, False: 1.00k]
  |  |  ------------------
  ------------------
 3704|  1.00k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|  1.00k|            else {
 3713|  1.00k|                auto cb = [&](const auto& rr)
 3714|  1.00k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|  1.00k|                    auto res = read_all(rr);
 3716|  1.00k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|  1.00k|                        return unexpected_scan_error(
 3718|  1.00k|                            scan_error::invalid_scanned_value,
 3719|  1.00k|                            "Invalid float value");
 3720|  1.00k|                    }
 3721|  1.00k|                    return res;
 3722|  1.00k|                };
 3723|  1.00k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|  1.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8, False: 994]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      8|    }                                                  \
  |  | 3667|  1.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|    994|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|  1.00k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|    994|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 994, False: 0]
  |  Branch (3736:48): [True: 994, False: 0]
  ------------------
 3737|    994|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 994, False: 0]
  ------------------
 3738|    994|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 994, False: 0]
  ------------------
 3739|    994|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|    994|        }
 3741|       |
 3742|    994|        handle_separators();
 3743|       |
 3744|    994|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 994]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|    994|        return it;
 3757|    994|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|  1.00k|    {
 3800|  1.00k|        auto it = range.begin();
 3801|  1.00k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 1.00k, False: 0]
  ------------------
 3802|  1.00k|            return unexpected(r.error());
 3803|  1.00k|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|  1.00k|    {
 3823|  1.00k|        auto it = range.begin();
 3824|  1.00k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 1.00k, False: 0]
  ------------------
 3825|  1.00k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|  1.00k|                scan_error::invalid_scanned_value,
 3827|  1.00k|                "Invalid floating-point NaN value"));
 3828|  1.00k|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|    994|    {
 3793|    994|        return read_matching_string_classic_nocase(range, "0x");
 3794|    994|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|      8|{
 1984|      8|    auto it = read_while_code_unit(range, pred);
 1985|      8|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 8, False: 0]
  ------------------
 1986|      8|        return unexpected(parse_error::error);
 1987|      8|    }
 1988|      0|    return it;
 1989|      8|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|      8|    {
 3933|      8|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|      8|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 6, False: 2]
  |  Branch (3934:50): [True: 2, False: 4]
  ------------------
 3935|       |
 3936|      8|        auto it = ranges::begin(range);
 3937|      8|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|      8|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|      8|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 3941|      8|            return r.transform_error(
 3942|      8|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|      8|                                              "Invalid floating-point value"));
 3944|      8|        }
 3945|      0|        else {
 3946|      0|            digits_count += ranges::distance(it, *r);
 3947|      0|            it = *r;
 3948|      0|        }
 3949|       |
 3950|      0|        m_integral_part_length = digits_count;
 3951|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 0, False: 0]
  ------------------
 3952|      0|                                             m_locale_options.decimal_point)) {
 3953|      0|            it = *r;
 3954|      0|        }
 3955|       |
 3956|      0|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 0, False: 0]
  ------------------
 3957|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|      0|        auto beg_exp_it = it;
 3968|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 0, False: 0]
  ------------------
 3969|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|      0|        }
 3971|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 0, False: 0]
  |  Branch (3971:29): [True: 0, False: 0]
  ------------------
 3972|      0|            return unexpected_scan_error(
 3973|      0|                scan_error::invalid_scanned_value,
 3974|      0|                "No exponent given to scientific float");
 3975|      0|        }
 3976|       |
 3977|      0|        m_kind =
 3978|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 0, False: 0]
  ------------------
 3979|       |
 3980|      0|        return it;
 3981|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|      8|    {
 3763|      8|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 8]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      8|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|      8|        return read_while1_code_unit(
 3772|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|      8|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|      8|        : m_fptr([](storage fn,
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
  752|      8|          m_storage(std::addressof(f))
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      8|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  688|      8|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|      8|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3772|      8|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|      8|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|  1.00k|    {
 3989|  1.00k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|  1.00k|        const bool allowed_nonhex =
 3991|  1.00k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|  1.00k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|  1.00k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 1.00k, False: 0]
  |  Branch (3994:45): [True: 0, False: 1.00k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|  1.00k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 1.00k]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|  1.00k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 1.00k, False: 0]
  |  Branch (4003:45): [True: 0, False: 1.00k]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|  1.00k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 1.00k]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|  1.00k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 994, False: 8]
  |  Branch (4010:28): [True: 12, False: 982]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|     12|            auto it = range.begin();
 4014|       |
 4015|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 0, False: 12]
  ------------------
 4016|      0|                m_kind = float_kind::hex_with_prefix;
 4017|      0|                it = *r;
 4018|      0|            }
 4019|     12|            else {
 4020|     12|                m_kind = float_kind::hex_without_prefix;
 4021|     12|            }
 4022|       |
 4023|     12|            return read_hex(ranges::subrange{it, range.end()});
 4024|     12|        }
 4025|    990|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 8, False: 982]
  |  Branch (4025:29): [True: 8, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|      8|            m_kind = float_kind::generic;
 4029|      8|            return read_regular_float(range);
 4030|      8|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|    982|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 982]
  |  |  ------------------
  ------------------
 4036|      0|            m_kind = float_kind::hex_with_prefix;
 4037|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4038|      0|        }
 4039|       |
 4040|    982|        m_kind = float_kind::generic;
 4041|    982|        return read_regular(range);
 4042|    982|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|    994|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|    994|                    auto res = read_all(rr);
 3716|    994|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    994|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 994]
  |  |  ------------------
  ------------------
 3717|      0|                        return unexpected_scan_error(
 3718|      0|                            scan_error::invalid_scanned_value,
 3719|      0|                            "Invalid float value");
 3720|      0|                    }
 3721|    994|                    return res;
 3722|    994|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|    994|{
 1827|    994|    return ranges::next(range.begin(), range.end());
 1828|    994|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    994|    {
  313|    994|        ranges::advance(x, bound);
  314|    994|        return x;
  315|    994|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    994|    {
  275|    994|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    994|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|    994|    {
 1565|    994|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    994|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|    994|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1608|    994|    {
 1609|    994|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|    994|                      ranges::sized_range<Range>) {
 1614|    994|            m_storage.reset();
 1615|    994|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|    994|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|    984|    {
 3654|    984|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    984|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 984]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|    984|        return read_source_impl(range);
 3660|    984|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|    994|    {
 3680|    994|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|    994|        const std::ptrdiff_t sign_len =
 3683|    994|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 0, False: 994]
  ------------------
 3684|       |
 3685|    994|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|    994|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    994|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    994|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    994|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 994, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    994|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    994|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    994|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    994|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    994|    }                                                  \
  |  |  |  | 3667|    994|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|    994|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4158|    190|    {
 4159|    190|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    190|#if !SCN_DISABLE_LOCALE
 4162|    190|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 10, False: 180]
  ------------------
 4163|     10|            return read_impl<Range>(
 4164|     10|                range, rd,
 4165|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|     10|                },
 4168|     10|                value, loc);
 4169|     10|        }
 4170|    180|#endif
 4171|       |
 4172|    180|        return read_impl<Range>(
 4173|    180|            range, rd,
 4174|    180|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    180|                return r.read_source(SCN_FWD(args)...);
 4176|    180|            },
 4177|    180|            value);
 4178|    190|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|    190|    {
 4195|    190|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|    190|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  ------------------
  ------------------
 4197|    190|            return unexpected(r.error());
 4198|    190|        }
 4199|       |
 4200|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|     10|        : m_fptr([](storage fn,
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
  752|     10|          m_storage(std::addressof(f))
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  688|     10|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4165|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     10|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_:
  742|    180|        : m_fptr([](storage fn,
  743|    180|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    180|              cvref<T> obj = *get<T>(fn);
  745|    180|              if constexpr (std::is_void_v<R>) {
  746|    180|                  obj(static_cast<decltype(args)>(args)...);
  747|    180|              }
  748|    180|              else {
  749|    180|                  return obj(static_cast<decltype(args)>(args)...);
  750|    180|              }
  751|    180|          }),
  752|    180|          m_storage(std::addressof(f))
  753|    180|    {
  754|    180|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_TnPNSS_9enable_ifIXaaaasr6detailE11is_not_selfISU_SN_Entsr3stdE19is_member_pointer_vIS13_E18is_invocable_usingIS14_EEvE4typeELPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1H_SC_SJ_SL_:
  743|    180|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    180|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    180|              else {
  749|    180|                  return obj(static_cast<decltype(args)>(args)...);
  750|    180|              }
  751|    180|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    180|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    180|        else if constexpr (std::is_object_v<T>) {
  688|    180|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    180|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4174|    180|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    180|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    180|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|    180|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    180|        {
  662|    180|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|    374|    {
 4159|    374|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|    374|#if !SCN_DISABLE_LOCALE
 4162|    374|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 18, False: 356]
  ------------------
 4163|     18|            return read_impl<Range>(
 4164|     18|                range, rd,
 4165|     18|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     18|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|     18|                },
 4168|     18|                value, loc);
 4169|     18|        }
 4170|    356|#endif
 4171|       |
 4172|    356|        return read_impl<Range>(
 4173|    356|            range, rd,
 4174|    356|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    356|                return r.read_source(SCN_FWD(args)...);
 4176|    356|            },
 4177|    356|            value);
 4178|    374|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|  1.00k|    {
 4195|  1.00k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|  1.00k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 994]
  |  |  ------------------
  ------------------
 4197|      8|            return unexpected(r.error());
 4198|      8|        }
 4199|       |
 4200|    994|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|    994|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    994|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    994|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    994|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 994, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    994|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    994|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    994|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    994|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    994|    }                                                  \
  |  |  |  | 3667|    994|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|      0|        return ranges::next(range.begin(), n);
 4202|    994|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|     18|        : m_fptr([](storage fn,
  743|     18|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     18|              cvref<T> obj = *get<T>(fn);
  745|     18|              if constexpr (std::is_void_v<R>) {
  746|     18|                  obj(static_cast<decltype(args)>(args)...);
  747|     18|              }
  748|     18|              else {
  749|     18|                  return obj(static_cast<decltype(args)>(args)...);
  750|     18|              }
  751|     18|          }),
  752|     18|          m_storage(std::addressof(f))
  753|     18|    {
  754|     18|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|     18|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     18|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|     18|              else {
  749|     18|                  return obj(static_cast<decltype(args)>(args)...);
  750|     18|              }
  751|     18|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     18|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|     18|        else if constexpr (std::is_object_v<T>) {
  688|     18|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|     18|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|     18|                [](float_reader<CharT>& r, auto&&... args) {
 4166|     18|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|     18|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     18|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     18|        {
  662|     18|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|    356|        : m_fptr([](storage fn,
  743|    356|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    356|              cvref<T> obj = *get<T>(fn);
  745|    356|              if constexpr (std::is_void_v<R>) {
  746|    356|                  obj(static_cast<decltype(args)>(args)...);
  747|    356|              }
  748|    356|              else {
  749|    356|                  return obj(static_cast<decltype(args)>(args)...);
  750|    356|              }
  751|    356|          }),
  752|    356|          m_storage(std::addressof(f))
  753|    356|    {
  754|    356|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|    356|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    356|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    356|              else {
  749|    356|                  return obj(static_cast<decltype(args)>(args)...);
  750|    356|              }
  751|    356|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    356|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    356|        else if constexpr (std::is_object_v<T>) {
  688|    356|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    356|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|    356|            [](float_reader<CharT>& r, auto&&... args) {
 4175|    356|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    356|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|    356|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    356|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    356|        {
  662|    356|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5797|  6.45k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  6.45k|                       std::is_same_v<T, std::wstring>) {
 5816|  6.45k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  6.45k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5194|  19.3k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  17.4k|    {
 3029|  17.4k|        reader_error_handler eh{};
 3030|  17.4k|        get_derived().check_specs_impl(specs, eh);
 3031|  17.4k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 246, False: 17.2k]
  |  |  ------------------
  ------------------
 3032|    246|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|    246|        }
 3034|  17.2k|        return {};
 3035|  17.4k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3039|  17.4k|    {
 3040|  17.4k|        return static_cast<Derived&>(*this);
 3041|  17.4k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  17.4k|    {
 5199|  17.4k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  17.4k|        SCN_GCC_PUSH
 5202|  17.4k|        SCN_GCC_IGNORE("-Wswitch")
 5203|  17.4k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  17.4k|        SCN_CLANG_PUSH
 5206|  17.4k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  17.4k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  17.4k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 240, False: 17.2k]
  ------------------
 5210|  1.52k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 1.52k, False: 15.9k]
  ------------------
 5211|  1.52k|                m_type = reader_type::word;
 5212|  1.52k|                break;
 5213|       |
 5214|    222|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 222, False: 17.2k]
  ------------------
 5215|    222|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 72, False: 150]
  ------------------
 5216|    222|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 102, False: 48]
  ------------------
 5217|    174|                    m_type = reader_type::custom_word;
 5218|    174|                }
 5219|     48|                else {
 5220|     48|                    m_type = reader_type::word;
 5221|     48|                }
 5222|    222|                break;
 5223|      0|            }
 5224|       |
 5225|     54|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 54, False: 17.4k]
  ------------------
 5226|     54|                m_type = reader_type::character;
 5227|     54|                break;
 5228|       |
 5229|    780|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 780, False: 16.6k]
  ------------------
 5230|    780|                m_type = reader_type::character_set;
 5231|    780|                break;
 5232|       |
 5233|  14.2k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 14.2k, False: 3.23k]
  ------------------
 5234|  14.2k|                m_type = reader_type::regex;
 5235|  14.2k|                break;
 5236|       |
 5237|    414|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 414, False: 17.0k]
  ------------------
 5238|    414|                m_type = reader_type::regex_escaped;
 5239|    414|                break;
 5240|  17.4k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  17.4k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5247|  22.2k|    {
 5248|  22.2k|        return m_type == reader_type::word;
 5249|  22.2k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  9.18k|{
 1132|  9.18k|    auto it = src.begin();
 1133|  78.1k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 71.3k, False: 6.77k]
  ------------------
 1134|  71.3k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  71.3k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 71.3k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  71.3k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 71.3k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  71.3k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  71.3k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  71.3k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.40k, False: 68.9k]
  ------------------
 1144|  2.40k|            return false;
 1145|  2.40k|        }
 1146|  68.9k|        it += len;
 1147|  68.9k|    }
 1148|  6.77k|    return true;
 1149|  9.18k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    192|{
 2982|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|       |        if (source.stores_allocated_string()) {
 2984|       |            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2985|       |        }
 2986|       |        else {
 2987|       |            dest.assign(source.view());
 2988|       |        }
 2989|       |    }
 2990|    192|    else {
 2991|    192|        return transcode_impl(source.view(), dest);
 2992|    192|    }
 2993|       |
 2994|      0|    return {};
 2995|    192|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2956|  1.69k|{
 2957|  1.69k|    dst.clear();
 2958|  1.69k|    transcode_valid_to_string(src, dst);
 2959|  1.69k|    return {};
 2960|  1.69k|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1390|  1.69k|{
 1391|  1.69k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1392|       |
 1393|  1.69k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1394|       |    if constexpr (sizeof(SourceCharT) == 1) {
 1395|       |        if constexpr (sizeof(DestCharT) == 2) {
 1396|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1397|       |            std::u32string tmp;
 1398|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1399|       |            return transcode_to_string_impl_32to16<true>(
 1400|       |                std::u32string_view{tmp}, dest);
 1401|       |        }
 1402|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1403|       |            return transcode_valid_to_string_impl_to32(src, dest);
 1404|       |        }
 1405|       |    }
 1406|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1407|       |        if constexpr (sizeof(DestCharT) == 1) {
 1408|       |            std::u32string tmp;
 1409|       |            transcode_valid_to_string_impl_to32(src, tmp);
 1410|       |            return transcode_to_string_impl_32to8<true>(
 1411|       |                std::u32string_view{tmp}, dest);
 1412|       |        }
 1413|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1414|       |            return trasncode_valid_to_string_impl_to32(src, dest);
 1415|       |        }
 1416|       |    }
 1417|  1.69k|    else if constexpr (sizeof(SourceCharT) == 4) {
 1418|  1.69k|        if constexpr (sizeof(DestCharT) == 1) {
 1419|  1.69k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1420|       |        }
 1421|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1422|       |            return transcode_to_string_impl_32to16<true>(src, dest);
 1423|       |        }
 1424|  1.69k|    }
 1425|       |
 1426|  1.69k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1427|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1428|  1.69k|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1281|  1.69k|{
 1282|  1.69k|    static_assert(sizeof(SourceCharT) == 4);
 1283|  1.69k|    static_assert(sizeof(DestCharT) == 1);
 1284|       |
 1285|  11.2k|    for (auto cp : src) {
  ------------------
  |  Branch (1285:18): [True: 11.2k, False: 1.69k]
  ------------------
 1286|  11.2k|        const auto u32cp = static_cast<uint32_t>(cp);
 1287|  11.2k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  11.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1288|       |            // Replacement character
 1289|      0|            dest.push_back(static_cast<char>(0xef));
 1290|      0|            dest.push_back(static_cast<char>(0xbf));
 1291|      0|            dest.push_back(static_cast<char>(0xbd));
 1292|      0|        }
 1293|  11.2k|        else if (cp < 128) {
  ------------------
  |  Branch (1293:18): [True: 9.13k, False: 2.14k]
  ------------------
 1294|  9.13k|            dest.push_back(static_cast<char>(cp));
 1295|  9.13k|        }
 1296|  2.14k|        else if (cp < 2048) {
  ------------------
  |  Branch (1296:18): [True: 284, False: 1.85k]
  ------------------
 1297|    284|            dest.push_back(
 1298|    284|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1299|    284|            dest.push_back(
 1300|    284|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1301|    284|        }
 1302|  1.85k|        else if (cp < 65536) {
  ------------------
  |  Branch (1302:18): [True: 1.37k, False: 486]
  ------------------
 1303|  1.37k|            dest.push_back(
 1304|  1.37k|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1305|  1.37k|            dest.push_back(static_cast<char>(
 1306|  1.37k|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1307|  1.37k|            dest.push_back(
 1308|  1.37k|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1309|  1.37k|        }
 1310|    486|        else {
 1311|    486|            dest.push_back(
 1312|    486|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1313|    486|            dest.push_back(static_cast<char>(
 1314|    486|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1315|    486|            dest.push_back(static_cast<char>(
 1316|    486|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1317|    486|            dest.push_back(
 1318|    486|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1319|    486|        }
 1320|  11.2k|    }
 1321|  1.69k|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5091|    780|        {
 5092|    780|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 198, False: 582]
  ------------------
 5093|    198|                return {};
 5094|    198|            }
 5095|       |
 5096|    582|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|    582|            auto it = detail::to_address(charset_string.begin());
 5098|    582|            auto set = detail::parse_presentation_set(
 5099|    582|                it, detail::to_address(charset_string.end()), nonascii);
 5100|    582|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    582|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 582]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|    582|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    582|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    582|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|    582|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    582|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    582|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|    582|            std::sort(nonascii.extra_ranges.begin(),
 5107|    582|                      nonascii.extra_ranges.end());
 5108|    582|            return {};
 5109|    582|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5126|  7.41k|        {
 5127|  7.41k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5127:17): [True: 2.45k, False: 4.95k]
  ------------------
 5128|  2.45k|                return helper.is_char_set_in_extra_literals(cp);
 5129|  2.45k|            }
 5130|       |
 5131|  4.95k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5132|  7.41k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5074|  2.45k|        {
 5075|       |            // TODO: binary search?
 5076|  2.45k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5076:17): [True: 0, False: 2.45k]
  ------------------
 5077|      0|                return false;
 5078|      0|            }
 5079|       |
 5080|  2.45k|            const auto cp_val = static_cast<uint32_t>(cp);
 5081|  2.45k|            return std::find_if(
 5082|  2.45k|                       nonascii.extra_ranges.begin(),
 5083|  2.45k|                       nonascii.extra_ranges.end(),
 5084|  2.45k|                       [cp_val](const auto& pair) noexcept {
 5085|  2.45k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5086|  2.45k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5087|  2.45k|                       }) != nonascii.extra_ranges.end();
 5088|  2.45k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5084|  30.4k|                       [cp_val](const auto& pair) noexcept {
 5085|  30.4k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5085:35): [True: 30.2k, False: 252]
  ------------------
 5086|  30.4k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5086:35): [True: 2.37k, False: 27.8k]
  ------------------
 5087|  30.4k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5064|  6.55k|        {
 5065|  6.55k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  6.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  6.55k|            const auto val =
 5067|  6.55k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  6.55k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  6.55k|                    (val % 8)) &
 5070|  6.55k|                   1u;
 5071|  6.55k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5117|  1.60k|        {
 5118|  1.60k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 12, False: 1.59k]
  ------------------
 5119|     12|                return false;
 5120|     12|            }
 5121|       |
 5122|  1.59k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  1.60k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|    780|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|    322|    {
 5266|    322|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    322|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    322|        return read_impl(range, specs, value);
 5268|    322|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|    322|    {
 5284|    322|        SCN_CLANG_PUSH
 5285|    322|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    322|        switch (m_type) {
 5288|    170|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 170, False: 152]
  ------------------
 5289|    170|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 20, False: 302]
  ------------------
 5292|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     20|                                                                   value);
 5294|       |
 5295|     16|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 16, False: 306]
  ------------------
 5296|     16|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    110|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 110, False: 212]
  ------------------
 5299|    110|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    110|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 320]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 4, False: 318]
  ------------------
 5309|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      4|                    range,
 5311|      4|                    get_unescaped_regex_pattern(
 5312|      4|                        specs.charset_string<SourceCharT>()),
 5313|      4|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 322]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    322|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    322|        }
 5320|       |
 5321|    322|        SCN_CLANG_POP
 5322|    322|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    170|    {
 4809|    170|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    170|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    206|{
 4741|    206|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    206|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    206|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 112, False: 94]
  ------------------
 4745|    112|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    112|                                     "Invalid encoding in scanned string");
 4747|    112|    }
 4748|     94|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     94|    static_cast<    \
  |  |  929|     94|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     94|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     94|    return SCN_MOVE(result);
  ------------------
  |  |  928|     94|    static_cast<    \
  |  |  929|     94|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     94|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2075|    510|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|    510|    else {
 2085|    510|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|    510|        return read_until_code_point(
 2097|    510|            ranges::subrange{it, range.end()},
 2098|    510|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|    510|    }
 2100|    510|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2048|    510|{
 2049|    510|    auto it = range.begin();
 2050|  16.7k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 16.3k, False: 414]
  ------------------
 2051|  16.3k|        const auto val =
 2052|  16.3k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  16.3k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  16.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.3k, False: 0]
  |  |  ------------------
  ------------------
 2054|  16.3k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  16.3k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  16.3k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 96, False: 16.2k]
  ------------------
 2057|     96|                return it;
 2058|     96|            }
 2059|  16.3k|        }
 2060|  16.2k|        it = val.iterator;
 2061|  16.2k|    }
 2062|       |
 2063|    414|    return it;
 2064|    510|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_:
  742|    510|        : m_fptr([](storage fn,
  743|    510|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    510|              cvref<T> obj = *get<T>(fn);
  745|    510|              if constexpr (std::is_void_v<R>) {
  746|    510|                  obj(static_cast<decltype(args)>(args)...);
  747|    510|              }
  748|    510|              else {
  749|    510|                  return obj(static_cast<decltype(args)>(args)...);
  750|    510|              }
  751|    510|          }),
  752|    510|          m_storage(std::addressof(f))
  753|    510|    {
  754|    510|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSP_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESY_Di:
  743|  16.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  16.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  16.3k|              else {
  749|  16.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  16.3k|              }
  751|  16.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  16.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  16.3k|        else if constexpr (std::is_object_v<T>) {
  688|  16.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  16.3k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2098|  16.3k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|    510|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    510|        {
  662|    510|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     20|    {
 4830|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 20, False: 0]
  ------------------
 4831|     20|            return read_string_impl(
 4832|     20|                range,
 4833|     20|                read_until_code_unit(
 4834|     20|                    range,
 4835|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     20|                        SourceCharT ch) { return ch == until; }),
 4837|     20|                value);
 4838|     20|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  688|    350|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4836|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     16|    {
 4936|     16|        return read_impl(
 4937|     16|            range,
 4938|     16|            [&](const auto& rng) {
 4939|     16|                return read_string_impl(rng, read_all(rng), value);
 4940|     16|            },
 4941|     16|            detail::priority_tag<1>{});
 4942|     16|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     16|    {
 4963|     16|        return read_cb(range);
 4964|     16|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     16|            [&](const auto& rng) {
 4939|     16|                return read_string_impl(rng, read_all(rng), value);
 4940|     16|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1826|     48|{
 1827|     48|    return ranges::next(range.begin(), range.end());
 1828|     48|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     48|    {
  313|     48|        ranges::advance(x, bound);
  314|     48|        return x;
  315|     48|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     48|    {
  275|     48|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     48|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     48|    {
  203|    684|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 636, False: 48]
  ------------------
  204|    636|            ++i;
  205|    636|        }
  206|     48|    }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|    110|    {
 5037|    110|        auto it = read_source_impl(range, {specs});
 5038|    110|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 98]
  |  |  ------------------
  ------------------
 5039|     12|            return unexpected(it.error());
 5040|     12|        }
 5041|       |
 5042|     98|        return read_string_impl(range, *it, value);
 5043|    110|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5141|    330|    {
 5142|    330|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|    330|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|    330|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 330]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|    330|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|    330|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 228, False: 102]
  ------------------
 5152|    228|            const auto cb = [&](char32_t cp) {
 5153|    228|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    228|            };
 5155|       |
 5156|    228|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 180, False: 48]
  ------------------
 5157|    180|                auto it = read_until_code_point(range, cb);
 5158|    180|                return check_nonempty(it, range);
 5159|    180|            }
 5160|     48|            auto it = read_while_code_point(range, cb);
 5161|     48|            return check_nonempty(it, range);
 5162|    228|        }
 5163|       |
 5164|    102|        const auto cb = [&](SourceCharT ch) {
 5165|    102|            return cb_wrapper.on_ascii_only(ch);
 5166|    102|        };
 5167|       |
 5168|    102|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 66, False: 36]
  ------------------
 5169|     66|            auto it = read_until_code_unit(range, cb);
 5170|     66|            return check_nonempty(it, range);
 5171|     66|        }
 5172|     36|        auto it = read_while_code_unit(range, cb);
 5173|     36|        return check_nonempty(it, range);
 5174|    102|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    228|        : m_fptr([](storage fn,
  743|    228|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    228|              cvref<T> obj = *get<T>(fn);
  745|    228|              if constexpr (std::is_void_v<R>) {
  746|    228|                  obj(static_cast<decltype(args)>(args)...);
  747|    228|              }
  748|    228|              else {
  749|    228|                  return obj(static_cast<decltype(args)>(args)...);
  750|    228|              }
  751|    228|          }),
  752|    228|          m_storage(std::addressof(f))
  753|    228|    {
  754|    228|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clES15_Di:
  743|  1.39k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.39k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.39k|              else {
  749|  1.39k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.39k|              }
  751|  1.39k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  1.39k|    {
  684|  1.39k|        if constexpr (std::is_const_v<T>) {
  685|  1.39k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.39k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|  1.39k|            const auto cb = [&](char32_t cp) {
 5153|  1.39k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  1.39k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    228|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    228|        {
  667|    228|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5179|    330|    {
 5180|    330|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 36, False: 294]
  ------------------
 5181|     36|            return unexpected_scan_error(
 5182|     36|                scan_error::invalid_scanned_value,
 5183|     36|                "No characters matched in [character set]");
 5184|     36|        }
 5185|       |
 5186|    294|        return it;
 5187|    330|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|    102|        : m_fptr([](storage fn,
  743|    102|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    102|              cvref<T> obj = *get<T>(fn);
  745|    102|              if constexpr (std::is_void_v<R>) {
  746|    102|                  obj(static_cast<decltype(args)>(args)...);
  747|    102|              }
  748|    102|              else {
  749|    102|                  return obj(static_cast<decltype(args)>(args)...);
  750|    102|              }
  751|    102|          }),
  752|    102|          m_storage(std::addressof(f))
  753|    102|    {
  754|    102|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_ST_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    336|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    336|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    336|              else {
  749|    336|                  return obj(static_cast<decltype(args)>(args)...);
  750|    336|              }
  751|    336|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|    336|    {
  684|    336|        if constexpr (std::is_const_v<T>) {
  685|    336|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    336|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlwE_clEw:
 5164|    336|        const auto cb = [&](SourceCharT ch) {
 5165|    336|            return cb_wrapper.on_ascii_only(ch);
 5166|    336|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPKSL_:
  665|    102|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    102|        {
  667|    102|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|     98|{
 4741|     98|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     98|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     98|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 98]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|     98|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     98|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     98|    return SCN_MOVE(result);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     98|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|      6|    {
 4880|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|      6|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4901|     18|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|     18|        else {
 4909|     18|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 18, False: 0]
  ------------------
 4910|     18|                return unexpected_scan_error(
 4911|     18|                    scan_error::invalid_scanned_value,
 4912|     18|                    "Cannot use regex with a non-contiguous source "
 4913|     18|                    "range");
 4914|     18|            }
 4915|       |
 4916|      0|            auto input = get_as_contiguous(range);
 4917|      0|            SCN_TRY(it,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|      0|            return ranges::next(range.begin(),
 4920|      0|                                ranges::distance(input.begin(), it));
 4921|      0|        }
 4922|     18|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     18|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|       |                  ranges::sized_range<Range>) {
  961|       |        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|     18|    else {
  974|     18|        return false;
  975|     18|    }
  976|     18|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  5.41k|    {
 5266|  5.41k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.41k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  5.41k|        return read_impl(range, specs, value);
 5268|  5.41k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  5.41k|    {
 5284|  5.41k|        SCN_CLANG_PUSH
 5285|  5.41k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  5.41k|        switch (m_type) {
 5288|    352|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 352, False: 5.06k]
  ------------------
 5289|    352|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 36, False: 5.37k]
  ------------------
 5292|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     36|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 5.41k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    150|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 150, False: 5.26k]
  ------------------
 5299|    150|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    150|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  4.74k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 4.74k, False: 672]
  ------------------
 5304|  4.74k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  4.74k|                    range, specs.charset_string<SourceCharT>(),
 5306|  4.74k|                    specs.regexp_flags, value);
 5307|       |
 5308|    134|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 134, False: 5.28k]
  ------------------
 5309|    134|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    134|                    range,
 5311|    134|                    get_unescaped_regex_pattern(
 5312|    134|                        specs.charset_string<SourceCharT>()),
 5313|    134|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 5.41k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  5.41k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  5.41k|        }
 5320|       |
 5321|  5.41k|        SCN_CLANG_POP
 5322|  5.41k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    980|    {
 4809|    980|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    980|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|  1.01k|{
 4741|  1.01k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.01k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.01k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 370, False: 646]
  ------------------
 4745|    370|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    370|                                     "Invalid encoding in scanned string");
 4747|    370|    }
 4748|    646|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    646|    static_cast<    \
  |  |  929|    646|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    646|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    646|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 646]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    646|    return SCN_MOVE(result);
  ------------------
  |  |  928|    646|    static_cast<    \
  |  |  929|    646|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    646|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  1.50k|{
 3001|       |    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|       |        dest.assign(source.view());
 3003|       |    }
 3004|  1.50k|    else {
 3005|  1.50k|        return transcode_impl(source.view(), dest);
 3006|  1.50k|    }
 3007|       |
 3008|      0|    return {};
 3009|  1.50k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  2.94k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  2.94k|    else {
 2085|  2.94k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|  2.94k|        return read_until_code_point(
 2097|  2.94k|            ranges::subrange{it, range.end()},
 2098|  2.94k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  2.94k|    }
 2100|  2.94k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  2.94k|        : m_fptr([](storage fn,
  743|  2.94k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.94k|              cvref<T> obj = *get<T>(fn);
  745|  2.94k|              if constexpr (std::is_void_v<R>) {
  746|  2.94k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.94k|              }
  748|  2.94k|              else {
  749|  2.94k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.94k|              }
  751|  2.94k|          }),
  752|  2.94k|          m_storage(std::addressof(f))
  753|  2.94k|    {
  754|  2.94k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  61.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  61.4k|              else {
  749|  61.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.4k|              }
  751|  61.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  61.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  61.4k|        else if constexpr (std::is_object_v<T>) {
  688|  61.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  61.4k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2098|  61.4k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  2.94k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.94k|        {
  662|  2.94k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     36|    {
 4830|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 36, False: 0]
  ------------------
 4831|     36|            return read_string_impl(
 4832|     36|                range,
 4833|     36|                read_until_code_unit(
 4834|     36|                    range,
 4835|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     36|                        SourceCharT ch) { return ch == until; }),
 4837|     36|                value);
 4838|     36|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4836|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|    150|    {
 5037|    150|        auto it = read_source_impl(range, {specs});
 5038|    150|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 132]
  |  |  ------------------
  ------------------
 5039|     18|            return unexpected(it.error());
 5040|     18|        }
 5041|       |
 5042|    132|        return read_string_impl(range, *it, value);
 5043|    150|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|    450|    {
 5142|    450|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|    450|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|    450|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    450|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 450]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|    450|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|    450|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 354, False: 96]
  ------------------
 5152|    354|            const auto cb = [&](char32_t cp) {
 5153|    354|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|    354|            };
 5155|       |
 5156|    354|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 132, False: 222]
  ------------------
 5157|    132|                auto it = read_until_code_point(range, cb);
 5158|    132|                return check_nonempty(it, range);
 5159|    132|            }
 5160|    222|            auto it = read_while_code_point(range, cb);
 5161|    222|            return check_nonempty(it, range);
 5162|    354|        }
 5163|       |
 5164|     96|        const auto cb = [&](SourceCharT ch) {
 5165|     96|            return cb_wrapper.on_ascii_only(ch);
 5166|     96|        };
 5167|       |
 5168|     96|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 42, False: 54]
  ------------------
 5169|     42|            auto it = read_until_code_unit(range, cb);
 5170|     42|            return check_nonempty(it, range);
 5171|     42|        }
 5172|     54|        auto it = read_while_code_unit(range, cb);
 5173|     54|        return check_nonempty(it, range);
 5174|     96|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|    354|        : m_fptr([](storage fn,
  743|    354|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    354|              cvref<T> obj = *get<T>(fn);
  745|    354|              if constexpr (std::is_void_v<R>) {
  746|    354|                  obj(static_cast<decltype(args)>(args)...);
  747|    354|              }
  748|    354|              else {
  749|    354|                  return obj(static_cast<decltype(args)>(args)...);
  750|    354|              }
  751|    354|          }),
  752|    354|          m_storage(std::addressof(f))
  753|    354|    {
  754|    354|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clES13_Di:
  743|  6.01k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.01k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.01k|              else {
  749|  6.01k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.01k|              }
  751|  6.01k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  6.01k|    {
  684|  6.01k|        if constexpr (std::is_const_v<T>) {
  685|  6.01k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.01k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5152|  6.01k|            const auto cb = [&](char32_t cp) {
 5153|  6.01k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|  6.01k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    354|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    354|        {
  667|    354|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|    450|    {
 5180|    450|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 54, False: 396]
  ------------------
 5181|     54|            return unexpected_scan_error(
 5182|     54|                scan_error::invalid_scanned_value,
 5183|     54|                "No characters matched in [character set]");
 5184|     54|        }
 5185|       |
 5186|    396|        return it;
 5187|    450|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     96|        : m_fptr([](storage fn,
  743|     96|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     96|              cvref<T> obj = *get<T>(fn);
  745|     96|              if constexpr (std::is_void_v<R>) {
  746|     96|                  obj(static_cast<decltype(args)>(args)...);
  747|     96|              }
  748|     96|              else {
  749|     96|                  return obj(static_cast<decltype(args)>(args)...);
  750|     96|              }
  751|     96|          }),
  752|     96|          m_storage(std::addressof(f))
  753|     96|    {
  754|     96|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.27k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.27k|              else {
  749|  1.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.27k|              }
  751|  1.27k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  1.27k|    {
  684|  1.27k|        if constexpr (std::is_const_v<T>) {
  685|  1.27k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.27k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5164|  1.27k|        const auto cb = [&](SourceCharT ch) {
 5165|  1.27k|            return cb_wrapper.on_ascii_only(ch);
 5166|  1.27k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|     96|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|     96|        {
  667|     96|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|  1.17k|{
 4741|  1.17k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.17k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.17k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 320, False: 856]
  ------------------
 4745|    320|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    320|                                     "Invalid encoding in scanned string");
 4747|    320|    }
 4748|    856|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    856|    static_cast<    \
  |  |  929|    856|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    856|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    856|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 856]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    856|    return SCN_MOVE(result);
  ------------------
  |  |  928|    856|    static_cast<    \
  |  |  929|    856|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    856|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  4.87k|    {
 4880|  4.87k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  4.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.83k, False: 1.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.83k|    }                                                  \
  |  |  |  | 3667|  4.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|  1.04k|        return read_string_impl(range, it, value);
 4882|  4.87k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4901|  14.6k|    {
 4902|       |        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
 4903|       |                      !std::is_same_v<SourceCharT, char>) {
 4904|       |            return unexpected_scan_error(
 4905|       |                scan_error::invalid_scanned_value,
 4906|       |                "Regex backend doesn't support wide strings as input");
 4907|       |        }
 4908|  14.6k|        else {
 4909|  14.6k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4909:17): [True: 0, False: 14.6k]
  ------------------
 4910|      0|                return unexpected_scan_error(
 4911|      0|                    scan_error::invalid_scanned_value,
 4912|      0|                    "Cannot use regex with a non-contiguous source "
 4913|      0|                    "range");
 4914|      0|            }
 4915|       |
 4916|  14.6k|            auto input = get_as_contiguous(range);
 4917|  14.6k|            SCN_TRY(it,
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.4k, False: 3.13k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.4k|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.13k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4918|  3.13k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4919|  3.13k|            return ranges::next(range.begin(),
 4920|  3.13k|                                ranges::distance(input.begin(), it));
 4921|  14.6k|        }
 4922|  14.6k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  14.6k|{
  959|       |    if constexpr (ranges::contiguous_range<Range> &&
  960|  14.6k|                  ranges::sized_range<Range>) {
  961|  14.6k|        return true;
  962|       |    }
  963|       |    else if constexpr (std::is_same_v<
  964|       |                           ranges::const_iterator_t<Range>,
  965|       |                           typename detail::basic_scan_buffer<
  966|       |                               detail::char_t<Range>>::forward_iterator>) {
  967|       |        auto beg = r.begin();
  968|       |        if (!beg.stores_parent()) {
  969|       |            return true;
  970|       |        }
  971|       |        return beg.parent()->is_contiguous();
  972|       |    }
  973|       |    else {
  974|       |        return false;
  975|       |    }
  976|  14.6k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  14.6k|{
 1065|  14.6k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|       |    if constexpr (ranges::contiguous_range<Range> &&
 1068|  14.6k|                  ranges::sized_range<Range>) {
 1069|  14.6k|        return r;
 1070|       |    }
 1071|       |    else if constexpr (std::is_same_v<
 1072|       |                           ranges::const_iterator_t<Range>,
 1073|       |                           typename detail::basic_scan_buffer<
 1074|       |                               detail::char_t<Range>>::forward_iterator>) {
 1075|       |        if constexpr (ranges::common_range<Range>) {
 1076|       |            return detail::make_string_view_from_pointers(
 1077|       |                r.begin().to_contiguous_segment_iterator(),
 1078|       |                r.end().to_contiguous_segment_iterator());
 1079|       |        }
 1080|       |        else {
 1081|       |            return r.begin().contiguous_segment();
 1082|       |        }
 1083|       |    }
 1084|       |    else {
 1085|       |        SCN_EXPECT(false);
 1086|       |        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1089|       |    }
 1090|  14.6k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  14.6k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|  14.6k|                  ranges::sized_range<Range>) {
  983|  14.6k|        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|       |                               detail::char_t<Range>>::forward_iterator>) {
  989|       |        auto beg = r.begin();
  990|       |        if (beg.contiguous_segment().empty()) {
  991|       |            return false;
  992|       |        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|       |        else {
  998|       |            if (beg.stores_parent()) {
  999|       |                return beg.contiguous_segment().end() ==
 1000|       |                       beg.parent()->current_view().end();
 1001|       |            }
 1002|       |            return true;
 1003|       |        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  14.6k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4334|  14.6k|{
 4335|  14.6k|    static_assert(ranges::contiguous_range<Input> &&
 4336|  14.6k|                  ranges::borrowed_range<Input> &&
 4337|  14.6k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4338|       |
 4339|  14.6k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4340|  14.6k|    std::basic_regex<CharT> re{};
 4341|  14.6k|    try {
 4342|  14.6k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4343|  14.6k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4344|  14.6k|                                     re_flags | std::regex_constants::nosubs};
 4345|  14.6k|    }
 4346|  14.6k|    catch (const std::regex_error& err) {
 4347|  5.25k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4348|  5.25k|                                     "Invalid regex");
 4349|  5.25k|    }
 4350|       |
 4351|  9.37k|    std::match_results<const CharT*> matches{};
 4352|  9.37k|    try {
 4353|  9.37k|        bool found = std::regex_search(input.data(),
 4354|  9.37k|                                       input.data() + input.size(), matches, re,
 4355|  9.37k|                                       std::regex_constants::match_continuous);
 4356|  9.37k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4356:13): [True: 6.24k, False: 3.13k]
  |  Branch (4356:23): [True: 0, False: 3.13k]
  ------------------
 4357|  6.14k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4358|  6.14k|                                         "Regular expression didn't match");
 4359|  6.14k|        }
 4360|  9.37k|    }
 4361|  9.37k|    catch (const std::regex_error& err) {
 4362|    102|        return unexpected_scan_error(scan_error::invalid_format_string,
 4363|    102|                                     "Regex matching failed with an error");
 4364|    102|    }
 4365|       |
 4366|  3.13k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4367|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4368|       |    auto re =
 4369|       |#if SCN_REGEX_BOOST_USE_ICU
 4370|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4371|       |                             make_regex_flags(flags) |
 4372|       |                                 boost::regex_constants::no_except |
 4373|       |                                 boost::regex_constants::nosubs);
 4374|       |#else
 4375|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4376|       |                                  make_regex_flags(flags) |
 4377|       |                                      boost::regex_constants::no_except |
 4378|       |                                      boost::regex_constants::nosubs};
 4379|       |#endif
 4380|       |    if (re.status() != 0) {
 4381|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4382|       |                                     "Invalid regex");
 4383|       |    }
 4384|       |
 4385|       |    boost::match_results<const CharT*> matches{};
 4386|       |    try {
 4387|       |        bool found =
 4388|       |#if SCN_REGEX_BOOST_USE_ICU
 4389|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4390|       |                                   matches, re,
 4391|       |                                   boost::regex_constants::match_continuous);
 4392|       |#else
 4393|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4394|       |                                matches, re,
 4395|       |                                boost::regex_constants::match_continuous);
 4396|       |#endif
 4397|       |        if (!found || matches.prefix().matched) {
 4398|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4399|       |                                         "Regular expression didn't match");
 4400|       |        }
 4401|       |    }
 4402|       |    catch (const std::runtime_error& err) {
 4403|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4404|       |                                     "Regex matching failed with an error");
 4405|       |    }
 4406|       |
 4407|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4408|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4409|       |    static_assert(std::is_same_v<CharT, char>);
 4410|       |    std::string flagged_pattern{};
 4411|       |    auto re = [&]() {
 4412|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4413|       |        opts.set_never_capture(true);
 4414|       |        if (flagstr.empty()) {
 4415|       |            return re2::RE2{pattern, opts};
 4416|       |        }
 4417|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4418|       |        flagged_pattern.append(flagstr);
 4419|       |        flagged_pattern.append(pattern);
 4420|       |        return re2::RE2{flagged_pattern, opts};
 4421|       |    }();
 4422|       |    if (!re.ok()) {
 4423|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4424|       |                                     "Failed to parse regular expression");
 4425|       |    }
 4426|       |
 4427|       |    auto new_input = detail::make_string_view_from_pointers(
 4428|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4429|       |    bool found = re2::RE2::Consume(&new_input, re);
 4430|       |    if (!found) {
 4431|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4432|       |                                     "Regular expression didn't match");
 4433|       |    }
 4434|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4435|       |#endif  // SCN_REGEX_BACKEND == ...
 4436|  9.37k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5797|  6.45k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  6.45k|                       std::is_same_v<T, std::wstring>) {
 5816|  6.45k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  6.45k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|    192|{
 2982|    192|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|    192|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 192, False: 0]
  ------------------
 2984|    192|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    192|    static_cast<    \
  |  |  929|    192|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|    192|        }
 2986|      0|        else {
 2987|      0|            dest.assign(source.view());
 2988|      0|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|    192|    return {};
 2995|    192|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5265|    322|    {
 5266|    322|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    322|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    322|        return read_impl(range, specs, value);
 5268|    322|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5283|    322|    {
 5284|    322|        SCN_CLANG_PUSH
 5285|    322|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    322|        switch (m_type) {
 5288|    170|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 170, False: 152]
  ------------------
 5289|    170|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 20, False: 302]
  ------------------
 5292|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     20|                                                                   value);
 5294|       |
 5295|     16|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 16, False: 306]
  ------------------
 5296|     16|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    110|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 110, False: 212]
  ------------------
 5299|    110|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    110|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 320]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 4, False: 318]
  ------------------
 5309|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      4|                    range,
 5311|      4|                    get_unescaped_regex_pattern(
 5312|      4|                        specs.charset_string<SourceCharT>()),
 5313|      4|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 322]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    322|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    322|        }
 5320|       |
 5321|    322|        SCN_CLANG_POP
 5322|    322|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4808|    170|    {
 4809|    170|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    170|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4740|    206|{
 4741|    206|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    206|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    206|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 112, False: 94]
  ------------------
 4745|    112|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    112|                                     "Invalid encoding in scanned string");
 4747|    112|    }
 4748|     94|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     94|    static_cast<    \
  |  |  929|     94|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     94|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 94]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     94|    return SCN_MOVE(result);
  ------------------
  |  |  928|     94|    static_cast<    \
  |  |  929|     94|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     94|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4829|     20|    {
 4830|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 20, False: 0]
  ------------------
 4831|     20|            return read_string_impl(
 4832|     20|                range,
 4833|     20|                read_until_code_unit(
 4834|     20|                    range,
 4835|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     20|                        SourceCharT ch) { return ch == until; }),
 4837|     20|                value);
 4838|     20|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1D_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  688|    350|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4836|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4935|     16|    {
 4936|     16|        return read_impl(
 4937|     16|            range,
 4938|     16|            [&](const auto& rng) {
 4939|     16|                return read_string_impl(rng, read_all(rng), value);
 4940|     16|            },
 4941|     16|            detail::priority_tag<1>{});
 4942|     16|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     16|    {
 4963|     16|        return read_cb(range);
 4964|     16|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4938|     16|            [&](const auto& rng) {
 4939|     16|                return read_string_impl(rng, read_all(rng), value);
 4940|     16|            },
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5036|    110|    {
 5037|    110|        auto it = read_source_impl(range, {specs});
 5038|    110|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 98]
  |  |  ------------------
  ------------------
 5039|     12|            return unexpected(it.error());
 5040|     12|        }
 5041|       |
 5042|     98|        return read_string_impl(range, *it, value);
 5043|    110|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4740|     98|{
 4741|     98|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     98|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     98|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 98]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|     98|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     98|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     98|    return SCN_MOVE(result);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     98|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4879|      6|    {
 4880|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|      0|        return read_string_impl(range, it, value);
 4882|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  5.41k|    {
 5266|  5.41k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.41k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  5.41k|        return read_impl(range, specs, value);
 5268|  5.41k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  5.41k|    {
 5284|  5.41k|        SCN_CLANG_PUSH
 5285|  5.41k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  5.41k|        switch (m_type) {
 5288|    352|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 352, False: 5.06k]
  ------------------
 5289|    352|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 36, False: 5.37k]
  ------------------
 5292|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     36|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 5.41k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    150|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 150, False: 5.26k]
  ------------------
 5299|    150|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    150|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  4.74k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 4.74k, False: 672]
  ------------------
 5304|  4.74k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  4.74k|                    range, specs.charset_string<SourceCharT>(),
 5306|  4.74k|                    specs.regexp_flags, value);
 5307|       |
 5308|    134|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 134, False: 5.28k]
  ------------------
 5309|    134|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    134|                    range,
 5311|    134|                    get_unescaped_regex_pattern(
 5312|    134|                        specs.charset_string<SourceCharT>()),
 5313|    134|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 5.41k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  5.41k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  5.41k|        }
 5320|       |
 5321|  5.41k|        SCN_CLANG_POP
 5322|  5.41k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|    980|    {
 4809|    980|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|    980|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|  1.01k|{
 4741|  1.01k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.01k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.01k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 370, False: 646]
  ------------------
 4745|    370|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    370|                                     "Invalid encoding in scanned string");
 4747|    370|    }
 4748|    646|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    646|    static_cast<    \
  |  |  929|    646|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    646|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    646|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 646]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    646|    return SCN_MOVE(result);
  ------------------
  |  |  928|    646|    static_cast<    \
  |  |  929|    646|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    646|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  1.50k|{
 3001|  1.50k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|  1.50k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|  1.50k|    return {};
 3009|  1.50k|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4829|     36|    {
 4830|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4830:13): [True: 36, False: 0]
  ------------------
 4831|     36|            return read_string_impl(
 4832|     36|                range,
 4833|     36|                read_until_code_unit(
 4834|     36|                    range,
 4835|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4836|     36|                        SourceCharT ch) { return ch == until; }),
 4837|     36|                value);
 4838|     36|        }
 4839|      0|        return read_string_impl(
 4840|      0|            range,
 4841|      0|            read_until_code_units(
 4842|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4843|      0|            value);
 4844|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4836|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|    150|    {
 5037|    150|        auto it = read_source_impl(range, {specs});
 5038|    150|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 132]
  |  |  ------------------
  ------------------
 5039|     18|            return unexpected(it.error());
 5040|     18|        }
 5041|       |
 5042|    132|        return read_string_impl(range, *it, value);
 5043|    150|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|  1.17k|{
 4741|  1.17k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  1.17k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  1.17k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 320, False: 856]
  ------------------
 4745|    320|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|    320|                                     "Invalid encoding in scanned string");
 4747|    320|    }
 4748|    856|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    856|    static_cast<    \
  |  |  929|    856|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    856|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    856|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 856]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    856|    return SCN_MOVE(result);
  ------------------
  |  |  928|    856|    static_cast<    \
  |  |  929|    856|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    856|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4879|  4.87k|    {
 4880|  4.87k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  4.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.83k, False: 1.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.83k|    }                                                  \
  |  |  |  | 3667|  4.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4881|  1.04k|        return read_string_impl(range, it, value);
 4882|  4.87k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5797|  6.45k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|  6.45k|                       std::is_same_v<T, std::wstring_view>) {
 5812|  6.45k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  6.45k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|    322|    {
 5266|    322|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    322|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    322|        return read_impl(range, specs, value);
 5268|    322|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|    322|    {
 5284|    322|        SCN_CLANG_PUSH
 5285|    322|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|    322|        switch (m_type) {
 5288|    170|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 170, False: 152]
  ------------------
 5289|    170|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     20|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 20, False: 302]
  ------------------
 5292|     20|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     20|                                                                   value);
 5294|       |
 5295|     16|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 16, False: 306]
  ------------------
 5296|     16|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    110|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 110, False: 212]
  ------------------
 5299|    110|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    110|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      2|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 2, False: 320]
  ------------------
 5304|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      2|                    range, specs.charset_string<SourceCharT>(),
 5306|      2|                    specs.regexp_flags, value);
 5307|       |
 5308|      4|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 4, False: 318]
  ------------------
 5309|      4|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      4|                    range,
 5311|      4|                    get_unescaped_regex_pattern(
 5312|      4|                        specs.charset_string<SourceCharT>()),
 5313|      4|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 322]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|    322|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|    322|        }
 5320|       |
 5321|    322|        SCN_CLANG_POP
 5322|    322|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4815|    170|    {
 4816|    170|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    170|                                     value);
 4818|    170|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4761|    206|{
 4762|    206|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    206|    auto src = [&]() {
 4765|    206|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    206|            return make_contiguous_buffer(
 4767|    206|                ranges::subrange{range.begin().base(), result.base()});
 4768|    206|        }
 4769|    206|        else {
 4770|    206|            return make_contiguous_buffer(
 4771|    206|                ranges::subrange{range.begin(), result});
 4772|    206|        }
 4773|    206|    }();
 4774|    206|    using src_type = decltype(src);
 4775|       |
 4776|    206|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    206|    else {
 4789|    206|        const auto view = src.view();
 4790|    206|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    206|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 112, False: 94]
  ------------------
 4793|    112|            return unexpected_scan_error(
 4794|    112|                scan_error::invalid_scanned_value,
 4795|    112|                "Invalid encoding in scanned string_view");
 4796|    112|        }
 4797|       |
 4798|     94|        return SCN_MOVE(result);
  ------------------
  |  |  928|     94|    static_cast<    \
  |  |  929|     94|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    206|    }
 4800|    206|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4764|    206|    auto src = [&]() {
 4765|    206|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    206|            return make_contiguous_buffer(
 4767|    206|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|    206|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4851|     20|    {
 4852|     20|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 20, False: 0]
  ------------------
 4853|     20|            return read_string_view_impl(
 4854|     20|                range,
 4855|     20|                read_until_code_unit(
 4856|     20|                    range,
 4857|     20|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     20|                        SourceCharT ch) { return ch == until; }),
 4859|     20|                value);
 4860|     20|        }
 4861|      0|        return read_string_view_impl(
 4862|      0|            range,
 4863|      0|            read_until_code_units(
 4864|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|      0|            value);
 4866|     20|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|     20|        : m_fptr([](storage fn,
  743|     20|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     20|              cvref<T> obj = *get<T>(fn);
  745|     20|              if constexpr (std::is_void_v<R>) {
  746|     20|                  obj(static_cast<decltype(args)>(args)...);
  747|     20|              }
  748|     20|              else {
  749|     20|                  return obj(static_cast<decltype(args)>(args)...);
  750|     20|              }
  751|     20|          }),
  752|     20|          m_storage(std::addressof(f))
  753|     20|    {
  754|     20|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vISW_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES1B_w:
  743|    350|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    350|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    350|              else {
  749|    350|                  return obj(static_cast<decltype(args)>(args)...);
  750|    350|              }
  751|    350|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    350|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    350|        else if constexpr (std::is_object_v<T>) {
  688|    350|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    350|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4858|    350|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|     20|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     20|        {
  662|     20|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4947|     16|    {
 4948|     16|        return read_impl(
 4949|     16|            range,
 4950|     16|            [&](const auto& rng) {
 4951|     16|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     16|            },
 4953|     16|            detail::priority_tag<1>{});
 4954|     16|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4962|     16|    {
 4963|     16|        return read_cb(range);
 4964|     16|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4950|     16|            [&](const auto& rng) {
 4951|     16|                return read_string_view_impl(rng, read_all(rng), value);
 4952|     16|            },
_ZN3scn2v34impl25character_set_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5050|    110|    {
 5051|    110|        auto it = read_source_impl(range, {specs});
 5052|    110|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 98]
  |  |  ------------------
  ------------------
 5053|     12|            return unexpected(it.error());
 5054|     12|        }
 5055|       |
 5056|     98|        return read_string_view_impl(range, *it, value);
 5057|    110|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4761|     98|{
 4762|     98|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|     98|    auto src = [&]() {
 4765|     98|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|     98|            return make_contiguous_buffer(
 4767|     98|                ranges::subrange{range.begin().base(), result.base()});
 4768|     98|        }
 4769|     98|        else {
 4770|     98|            return make_contiguous_buffer(
 4771|     98|                ranges::subrange{range.begin(), result});
 4772|     98|        }
 4773|     98|    }();
 4774|     98|    using src_type = decltype(src);
 4775|       |
 4776|     98|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|     98|    else {
 4789|     98|        const auto view = src.view();
 4790|     98|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|     98|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 98]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|     98|        return SCN_MOVE(result);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|     98|    }
 4800|     98|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4764|     98|    auto src = [&]() {
 4765|     98|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|     98|            return make_contiguous_buffer(
 4767|     98|                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|       |        else {
 4770|       |            return make_contiguous_buffer(
 4771|       |                ranges::subrange{range.begin(), result});
 4772|       |        }
 4773|     98|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4890|      6|    {
 4891|      6|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      6|    }                                                  \
  |  |  |  | 3667|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_view_impl(range, it, value);
 4893|      6|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  5.41k|    {
 5266|  5.41k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  5.41k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  5.41k|        return read_impl(range, specs, value);
 5268|  5.41k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  5.41k|    {
 5284|  5.41k|        SCN_CLANG_PUSH
 5285|  5.41k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  5.41k|        switch (m_type) {
 5288|    352|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 352, False: 5.06k]
  ------------------
 5289|    352|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|     36|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 36, False: 5.37k]
  ------------------
 5292|     36|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|     36|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 5.41k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|    150|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 150, False: 5.26k]
  ------------------
 5299|    150|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|    150|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|  4.74k|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 4.74k, False: 672]
  ------------------
 5304|  4.74k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|  4.74k|                    range, specs.charset_string<SourceCharT>(),
 5306|  4.74k|                    specs.regexp_flags, value);
 5307|       |
 5308|    134|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 134, False: 5.28k]
  ------------------
 5309|    134|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|    134|                    range,
 5311|    134|                    get_unescaped_regex_pattern(
 5312|    134|                        specs.charset_string<SourceCharT>()),
 5313|    134|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 5.41k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  5.41k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  5.41k|        }
 5320|       |
 5321|  5.41k|        SCN_CLANG_POP
 5322|  5.41k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|    980|    {
 4816|    980|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|    980|                                     value);
 4818|    980|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|  1.01k|{
 4762|  1.01k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  1.01k|    auto src = [&]() {
 4765|  1.01k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  1.01k|            return make_contiguous_buffer(
 4767|  1.01k|                ranges::subrange{range.begin().base(), result.base()});
 4768|  1.01k|        }
 4769|  1.01k|        else {
 4770|  1.01k|            return make_contiguous_buffer(
 4771|  1.01k|                ranges::subrange{range.begin(), result});
 4772|  1.01k|        }
 4773|  1.01k|    }();
 4774|  1.01k|    using src_type = decltype(src);
 4775|       |
 4776|  1.01k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  1.01k|    else {
 4789|  1.01k|        const auto view = src.view();
 4790|  1.01k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  1.01k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 370, False: 646]
  ------------------
 4793|    370|            return unexpected_scan_error(
 4794|    370|                scan_error::invalid_scanned_value,
 4795|    370|                "Invalid encoding in scanned string_view");
 4796|    370|        }
 4797|       |
 4798|    646|        return SCN_MOVE(result);
  ------------------
  |  |  928|    646|    static_cast<    \
  |  |  929|    646|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  1.01k|    }
 4800|  1.01k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|  1.01k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  1.01k|        else {
 4770|  1.01k|            return make_contiguous_buffer(
 4771|  1.01k|                ranges::subrange{range.begin(), result});
 4772|  1.01k|        }
 4773|  1.01k|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4851|     36|    {
 4852|     36|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4852:13): [True: 36, False: 0]
  ------------------
 4853|     36|            return read_string_view_impl(
 4854|     36|                range,
 4855|     36|                read_until_code_unit(
 4856|     36|                    range,
 4857|     36|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4858|     36|                        SourceCharT ch) { return ch == until; }),
 4859|     36|                value);
 4860|     36|        }
 4861|      0|        return read_string_view_impl(
 4862|      0|            range,
 4863|      0|            read_until_code_units(
 4864|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4865|      0|            value);
 4866|     36|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|     36|        : m_fptr([](storage fn,
  743|     36|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     36|              cvref<T> obj = *get<T>(fn);
  745|     36|              if constexpr (std::is_void_v<R>) {
  746|     36|                  obj(static_cast<decltype(args)>(args)...);
  747|     36|              }
  748|     36|              else {
  749|     36|                  return obj(static_cast<decltype(args)>(args)...);
  750|     36|              }
  751|     36|          }),
  752|     36|          m_storage(std::addressof(f))
  753|     36|    {
  754|     36|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vISU_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES19_w:
  743|    486|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    486|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    486|              else {
  749|    486|                  return obj(static_cast<decltype(args)>(args)...);
  750|    486|              }
  751|    486|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    486|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    486|        else if constexpr (std::is_object_v<T>) {
  688|    486|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    486|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4858|    486|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|     36|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|     36|        {
  662|     36|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|    150|    {
 5051|    150|        auto it = read_source_impl(range, {specs});
 5052|    150|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 132]
  |  |  ------------------
  ------------------
 5053|     18|            return unexpected(it.error());
 5054|     18|        }
 5055|       |
 5056|    132|        return read_string_view_impl(range, *it, value);
 5057|    150|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|  1.17k|{
 4762|  1.17k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  1.17k|    auto src = [&]() {
 4765|  1.17k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  1.17k|            return make_contiguous_buffer(
 4767|  1.17k|                ranges::subrange{range.begin().base(), result.base()});
 4768|  1.17k|        }
 4769|  1.17k|        else {
 4770|  1.17k|            return make_contiguous_buffer(
 4771|  1.17k|                ranges::subrange{range.begin(), result});
 4772|  1.17k|        }
 4773|  1.17k|    }();
 4774|  1.17k|    using src_type = decltype(src);
 4775|       |
 4776|  1.17k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  1.17k|    else {
 4789|  1.17k|        const auto view = src.view();
 4790|  1.17k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  1.17k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 320, False: 856]
  ------------------
 4793|    320|            return unexpected_scan_error(
 4794|    320|                scan_error::invalid_scanned_value,
 4795|    320|                "Invalid encoding in scanned string_view");
 4796|    320|        }
 4797|       |
 4798|    856|        return SCN_MOVE(result);
  ------------------
  |  |  928|    856|    static_cast<    \
  |  |  929|    856|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  1.17k|    }
 4800|  1.17k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|  1.17k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  1.17k|        else {
 4770|  1.17k|            return make_contiguous_buffer(
 4771|  1.17k|                ranges::subrange{range.begin(), result});
 4772|  1.17k|        }
 4773|  1.17k|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4890|  4.87k|    {
 4891|  4.87k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3668|  4.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.83k, False: 1.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.83k|    }                                                  \
  |  |  |  | 3667|  4.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.04k|        return read_string_view_impl(range, it, value);
 4893|  4.87k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1670|  9.20k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  9.20k|                  ranges::sized_range<Range>) {
 1674|  9.20k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  9.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  9.20k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1476|  9.20k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  9.20k|    {
 1478|  9.20k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4088|    926|    {
 4089|    926|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 0, False: 926]
  ------------------
 4090|      0|            return std::copysign(value, T{-1.0});
 4091|      0|        }
 4092|    926|        return std::copysign(value, T{1.0});
 4093|    926|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4088|    994|    {
 4089|    994|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 0, False: 994]
  ------------------
 4090|      0|            return std::copysign(value, T{-1.0});
 4091|      0|        }
 4092|    994|        return std::copysign(value, T{1.0});
 4093|    994|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  5.94k|{
 5784|  5.94k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.94k]
  |  |  ------------------
  ------------------
 5785|      0|        return unexpected(e);
 5786|      0|    }
 5787|       |
 5788|  5.94k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 660, False: 5.28k]
  ------------------
 5789|    660|        return range.begin();
 5790|    660|    }
 5791|       |
 5792|  5.28k|    return skip_classic_whitespace(range);
 5793|  5.94k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5859|    660|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    660|                          basic_contiguous_scan_context<char_type>>) {
 5864|    660|            auto rd = make_reader<T, char_type>();
 5865|    660|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    660|    {
 5852|    660|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    660|                        .transform_error(make_eof_scan_error));
 5854|    660|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    660|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    660|    {
 3517|    660|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    660|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    660|        return read_default_with_base(range, value, 10);
 3519|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5859|    660|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    660|                          basic_contiguous_scan_context<char_type>>) {
 5864|    660|            auto rd = make_reader<T, char_type>();
 5865|    660|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    660|    {
 5852|    660|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    660|                        .transform_error(make_eof_scan_error));
 5854|    660|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    660|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    660|    {
 3517|    660|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    660|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    660|        return read_default_with_base(range, value, 10);
 3519|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5859|    660|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    660|                          basic_contiguous_scan_context<char_type>>) {
 5864|    660|            auto rd = make_reader<T, char_type>();
 5865|    660|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5851|    660|    {
 5852|    660|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    660|                        .transform_error(make_eof_scan_error));
 5854|    660|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    660|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5736|  1.20k|    {
 5737|  1.20k|        return true;
 5738|  1.20k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5753|    916|    {
 5754|    916|        detail::format_specs specs{};
 5755|    916|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    916|        std::uintptr_t intvalue{};
 5758|    916|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    916|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    916|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    916|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    916|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 916, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    916|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    916|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    916|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    916|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    916|    }                                                  \
  |  |  |  | 3667|    916|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    916|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5859|    660|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    660|                          basic_contiguous_scan_context<char_type>>) {
 5864|    660|            auto rd = make_reader<T, char_type>();
 5865|    660|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    660|    {
 5852|    660|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    660|                        .transform_error(make_eof_scan_error));
 5854|    660|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    660|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3023|  1.55k|    {
 3024|  1.55k|        return true;
 3025|  1.55k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5492|    660|    {
 5493|    660|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    660|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5494|       |
 5495|    660|        return bool_reader<CharT>{}.read_classic(range, value);
 5496|    660|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5337|  1.28k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5343|  1.06k|    {
 5344|  1.06k|        scan_error err{scan_error::invalid_scanned_value,
 5345|  1.06k|                       "Failed to read boolean"};
 5346|       |
 5347|  1.06k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 934, False: 130]
  ------------------
 5348|    934|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 934]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    934|            else {
 5352|    934|                err = r.error();
 5353|    934|            }
 5354|    934|        }
 5355|       |
 5356|  1.06k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 1.04k, False: 22]
  ------------------
 5357|  1.04k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 1.04k]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|  1.04k|            else {
 5361|  1.04k|                err = r.error();
 5362|  1.04k|            }
 5363|  1.04k|        }
 5364|       |
 5365|  1.06k|        return unexpected(err);
 5366|  1.06k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5372|    982|    {
 5373|    982|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 982]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    982|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 982]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    982|        return unexpected_scan_error(
 5383|    982|            scan_error::invalid_scanned_value,
 5384|    982|            "Failed to read numeric boolean value: No match");
 5385|    982|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5390|  1.04k|    {
 5391|  1.04k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 1.04k]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|  1.04k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 1.04k]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|  1.04k|        return unexpected_scan_error(
 5401|  1.04k|            scan_error::invalid_scanned_value,
 5402|  1.04k|            "Failed to read textual boolean value: No match");
 5403|  1.04k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2182|  2.08k|{
 2183|  2.08k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  2.08k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.08k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.08k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 1.98k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    100|    }                                                  \
  |  |  |  | 3667|  2.08k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|  1.98k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|  1.98k|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|  1.98k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|  1.98k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|  1.98k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.98k, False: 0]
  |  |  ------------------
  ------------------
 2190|  1.98k|            return unexpected(parse_error::error);
 2191|  1.98k|        }
 2192|      0|        return it;
 2193|       |    }
 2194|       |    else {
 2195|       |        auto range_it = range.begin();
 2196|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2197|       |            if (SCN_UNLIKELY(*range_it !=
 2198|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|       |                return unexpected(parse_error::error);
 2200|       |            }
 2201|       |        }
 2202|       |        return it;
 2203|       |    }
 2204|  1.98k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5859|    660|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    660|                          basic_contiguous_scan_context<char_type>>) {
 5864|    660|            auto rd = make_reader<T, char_type>();
 5865|    660|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    660|    {
 5852|    660|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    660|                        .transform_error(make_eof_scan_error));
 5854|    660|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    660|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3646|    660|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3632|  1.28k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5859|    660|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    660|                          basic_contiguous_scan_context<char_type>>) {
 5864|    660|            auto rd = make_reader<T, char_type>();
 5865|    660|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    660|    {
 5852|    660|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    660|                        .transform_error(make_eof_scan_error));
 5854|    660|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    660|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|    660|    {
 4141|    660|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    660|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|    660|        float_reader<CharT> rd{};
 4144|    660|        return read_impl<Range>(
 4145|    660|            range, rd,
 4146|    660|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    660|                return r.read_source(SCN_FWD(args)...);
 4148|    660|            },
 4149|    660|            value);
 4150|    660|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    660|        : m_fptr([](storage fn,
  743|    660|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    660|              cvref<T> obj = *get<T>(fn);
  745|    660|              if constexpr (std::is_void_v<R>) {
  746|    660|                  obj(static_cast<decltype(args)>(args)...);
  747|    660|              }
  748|    660|              else {
  749|    660|                  return obj(static_cast<decltype(args)>(args)...);
  750|    660|              }
  751|    660|          }),
  752|    660|          m_storage(std::addressof(f))
  753|    660|    {
  754|    660|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    660|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    660|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    660|              else {
  749|    660|                  return obj(static_cast<decltype(args)>(args)...);
  750|    660|              }
  751|    660|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    660|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    660|        else if constexpr (std::is_object_v<T>) {
  688|    660|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    660|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|    660|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    660|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|    660|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    660|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    660|        {
  662|    660|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|    660|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    660|                          basic_contiguous_scan_context<char_type>>) {
 5864|    660|            auto rd = make_reader<T, char_type>();
 5865|    660|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|    660|    {
 5852|    660|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    660|                        .transform_error(make_eof_scan_error));
 5854|    660|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    660|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|    660|    {
 5255|    660|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    660|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    660|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|    660|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    660|                          basic_contiguous_scan_context<char_type>>) {
 5864|    660|            auto rd = make_reader<T, char_type>();
 5865|    660|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    660|    {
 5852|    660|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    660|                        .transform_error(make_eof_scan_error));
 5854|    660|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    660|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    660|    {
 5255|    660|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    660|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    660|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|    660|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    660|                          basic_contiguous_scan_context<char_type>>) {
 5864|    660|            auto rd = make_reader<T, char_type>();
 5865|    660|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    660|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    660|    {
 5852|    660|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    660|                        .transform_error(make_eof_scan_error));
 5854|    660|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    660|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    660|    {
 5255|    660|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    660|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    660|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    660|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   215k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   215k|    static_cast<    \
  |  |  929|   215k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   215k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   215k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   215k|          m_current(m_range.begin())
 2867|   215k|    {
 2868|   215k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   461k|    {
 2872|   461k|        return m_current;
 2873|   461k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   329k|    {
 2877|   329k|        return m_range.end();
 2878|   329k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1208|  83.4k|{
 1209|       |    // TODO: optimize
 1210|  83.4k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  83.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  83.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1211|  83.4k|    auto res = get_next_code_point(str);
 1212|  83.4k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1213|  83.4k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|  88.5k|    {
 2892|  88.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  88.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  88.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  88.5k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 88.5k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  88.5k|        }
 2898|  88.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  88.5k|    static_cast<    \
  |  |  929|  88.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  88.5k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   156k|    {
 2882|   156k|        return ranges::subrange{begin(), end()};
 2883|   156k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2104|  9.20k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|  9.20k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|  9.20k|        auto buf = make_contiguous_buffer(range);
 2109|  9.20k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|  9.20k|        return ranges::next(range.begin(),
 2111|  9.20k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|  9.20k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6025|  5.79k|    {
 6026|  5.79k|        const bool need_skipped_width =
 6027|  5.79k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 52, False: 5.74k]
  |  Branch (6027:33): [True: 5.74k, False: 0]
  ------------------
 6028|  5.79k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  5.79k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 286, False: 5.50k]
  ------------------
 6032|  5.79k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 552, False: 4.95k]
  ------------------
 6033|    838|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    838|                             need_skipped_width);
 6035|    838|        }
 6036|  4.95k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 4.83k, False: 120]
  |  Branch (6036:56): [True: 2.18k, False: 2.65k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  2.18k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 2.18k, False: 0]
  ------------------
 6040|  2.18k|                auto max_width_view = take_width(rng, specs.precision);
 6041|  2.18k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|  2.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 2.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    174|    }                                                  \
  |  |  |  | 3667|  2.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|  2.01k|                                  .transform_error(make_eof_scan_error));
 6043|  2.01k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|  2.18k|            }
 6045|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|      0|                            make_eof_scan_error));
 6047|       |
 6048|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 0]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|      0|            return result_type{it, 0};
 6056|      0|        }
 6057|       |
 6058|  2.77k|        return result_type{rng.begin(), 0};
 6059|  4.95k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5939|    838|{
 5940|    838|    using char_type = detail::char_t<Range>;
 5941|    838|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|    838|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 560, False: 278]
  ------------------
 5944|    560|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|    560|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|    560|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 0, False: 560]
  ------------------
 5948|      0|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 0, False: 0]
  ------------------
 5951|      0|                auto prefix_width =
 5952|      0|                    static_cast<std::ptrdiff_t>(
 5953|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|      0|                    ranges::distance(range.begin(), it);
 5955|      0|                return result_type{it, prefix_width};
 5956|      0|            }
 5957|      0|            return result_type{it, 0};
 5958|      0|        }
 5959|       |
 5960|    560|        auto max_width_view = take_width(range, max_width);
 5961|    560|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|    560|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 560, False: 0]
  ------------------
 5964|    560|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|    560|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|    560|    }
 5968|       |
 5969|    278|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|    278|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 0, False: 278]
  ------------------
 5971|      0|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 0, False: 0]
  ------------------
 5974|      0|            auto prefix_width =
 5975|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|      0|            return result_type{it, prefix_width};
 5978|      0|        }
 5979|      0|        return result_type{it, 0};
 5980|      0|    }
 5981|       |
 5982|    278|    auto max_width_view = take_width(range, max_width);
 5983|    278|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|    278|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 278, False: 0]
  ------------------
 5986|    278|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|    278|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|    278|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    560|        : m_fptr([](storage fn,
  743|    560|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    560|              cvref<T> obj = *get<T>(fn);
  745|    560|              if constexpr (std::is_void_v<R>) {
  746|    560|                  obj(static_cast<decltype(args)>(args)...);
  747|    560|              }
  748|    560|              else {
  749|    560|                  return obj(static_cast<decltype(args)>(args)...);
  750|    560|              }
  751|    560|          }),
  752|    560|          m_storage(std::addressof(f))
  753|    560|    {
  754|    560|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|    742|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    742|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    742|              else {
  749|    742|                  return obj(static_cast<decltype(args)>(args)...);
  750|    742|              }
  751|    742|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|    742|    {
  684|    742|        if constexpr (std::is_const_v<T>) {
  685|    742|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    742|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5945|    742|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    560|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    560|        {
  667|    560|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|    560|{
 1964|    560|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    560|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|    560|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    560|    else {
 1949|    560|        auto first = range.begin();
 1950|    796|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 742, False: 54]
  ------------------
 1951|    742|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 506, False: 236]
  ------------------
 1952|    506|                return first;
 1953|    506|            }
 1954|    742|        }
 1955|     54|        return first;
 1956|    560|    }
 1957|    560|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2798|  5.20k|    {
 2799|  5.20k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  5.20k|                                      m_count};
 2801|  5.20k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2705|  20.6k|    {
 2706|  20.6k|        return view;
 2707|  20.6k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2369|  5.20k|        : m_current(x), m_end(s), m_count(n)
 2370|  5.20k|    {
 2371|  5.20k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  6.59k|        {
 2770|  6.59k|            return !(y == x);
 2771|  6.59k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2758|  12.9k|        {
 2759|  12.9k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 784, False: 12.1k]
  |  Branch (2759:39): [True: 454, False: 330]
  ------------------
 2760|  12.9k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 0, False: 12.5k]
  ------------------
 2761|  12.9k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2409|    784|    {
 2410|    784|        return m_multibyte_left;
 2411|    784|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2804|  10.2k|    {
 2805|  10.2k|        return sentinel<true>{m_base.get().end()};
 2806|  10.2k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2739|  10.2k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  10.2k|    static_cast<    \
  |  |  929|  10.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2414|  8.84k|    {
 2415|  8.84k|        return *m_current;
 2416|  8.84k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2423|  9.91k|    {
 2424|  9.91k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  9.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|  9.91k|        _increment_current();
 2426|  9.91k|        return *this;
 2427|  9.91k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2656|  9.91k|    {
 2657|  9.91k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 5.61k, False: 4.30k]
  ------------------
 2658|  5.61k|            auto cplen = _get_cp_length_at_current();
 2659|  5.61k|            m_multibyte_left = cplen - 1;
 2660|  5.61k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  5.61k|        }
 2662|  4.30k|        else {
 2663|  4.30k|            --m_multibyte_left;
 2664|  4.30k|        }
 2665|       |
 2666|  9.91k|        ++m_current;
 2667|  9.91k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2627|  5.61k|    {
 2628|  5.61k|        return static_cast<difference_type>(
 2629|  5.61k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  5.61k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2633|  5.61k|    {
 2634|  5.61k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  5.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.61k]
  |  |  ------------------
  ------------------
 2635|      0|            return 0;
 2636|      0|        }
 2637|       |
 2638|  5.61k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 3.26k, False: 2.35k]
  ------------------
 2639|  3.26k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  3.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  3.26k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  3.26k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  3.26k|        }
 2643|       |
 2644|  2.35k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|  2.35k|                                           cplen);
 2646|  2.35k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.35k]
  |  |  ------------------
  ------------------
 2647|      0|            return 0;
 2648|      0|        }
 2649|       |
 2650|  2.35k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|  2.35k|        return static_cast<difference_type>(
 2652|  2.35k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|  2.35k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2024|    278|{
 2025|    278|    static_assert(ranges::common_range<CodeUnits>);
 2026|       |
 2027|    278|    auto it = range.begin();
 2028|    278|    while (it != range.end()) {
  ------------------
  |  Branch (2028:12): [True: 278, False: 0]
  ------------------
 2029|    278|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2030|    278|                                           needle.size());
 2031|    278|        if (!r) {
  ------------------
  |  Branch (2031:13): [True: 52, False: 226]
  ------------------
 2032|     52|            return it;
 2033|     52|        }
 2034|    226|        static_assert(
 2035|    226|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2036|    226|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2036:13): [True: 226, False: 0]
  ------------------
 2037|    226|            return it;
 2038|    226|        }
 2039|      0|        it = *r;
 2040|      0|    }
 2041|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2042|      0|    return it;
 2043|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1844|    278|{
 1845|    278|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    278|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    278|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    278|    else {
 1856|    278|        auto it = range.begin();
 1857|    278|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 278]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  1.15k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 930, False: 226]
  ------------------
 1862|    930|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 52, False: 878]
  ------------------
 1863|     52|                return unexpected(eof_error::eof);
 1864|     52|            }
 1865|    930|        }
 1866|       |
 1867|    226|        return it;
 1868|    278|    }
 1869|    278|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    278|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    278|    else {
 1115|    278|        return 0;
 1116|    278|    }
 1117|    278|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  2.18k|    {
  268|  2.18k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.18k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.18k|    {
  161|  2.18k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.18k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.18k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.18k|        else {
  169|  2.18k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.18k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.18k|        }
  173|  2.18k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2519|  5.85k|    {
 2520|  5.85k|        return !(a == b);
 2521|  5.85k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2511|  5.85k|    {
 2512|  5.85k|        return a.m_current == b.m_current;
 2513|  5.85k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2820|  3.02k|    {
 2821|  3.02k|        return take_width_view{r, n};
 2822|  3.02k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2788|  3.02k|        : m_base(base), m_count(count)
 2789|  3.02k|    {
 2790|  3.02k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2702|  3.02k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  2.18k|{
 2940|  2.18k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 2.18k, False: 0]
  ------------------
 2941|  2.18k|        auto it = read_while_classic_space(range);
 2942|  2.18k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  2.18k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 2.01k]
  |  |  ------------------
  ------------------
 2944|    174|            return unexpected(e);
 2945|    174|        }
 2946|       |
 2947|  2.01k|        return it;
 2948|  2.18k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  2.18k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  2.18k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  2.18k|    else {
 2114|  2.18k|        auto it = range.begin();
 2115|       |
 2116|  2.18k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|  2.18k|            auto seg = get_contiguous_beginning(range);
 2118|  2.18k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|  2.18k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 0, False: 2.18k]
  ------------------
 2120|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|      0|            }
 2122|  2.18k|            ranges::advance(it, seg.size());
 2123|  2.18k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  2.18k|            return detail::is_cp_space(cp);
 2127|  2.18k|        });
 2128|  2.18k|    }
 2129|  2.18k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  2.18k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|       |                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|       |        else {
 1054|       |            return r.begin().contiguous_segment();
 1055|       |        }
 1056|       |    }
 1057|  2.18k|    else {
 1058|  2.18k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.18k|    }
 1060|  2.18k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  2.18k|{
 2070|  2.18k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  2.18k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  2.18k|{
 2049|  2.18k|    auto it = range.begin();
 2050|  3.43k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 3.25k, False: 174]
  ------------------
 2051|  3.25k|        const auto val =
 2052|  3.25k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  3.25k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.25k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.25k, False: 0]
  |  |  ------------------
  ------------------
 2054|  3.25k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  3.25k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  3.25k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 2.01k, False: 1.24k]
  ------------------
 2057|  2.01k|                return it;
 2058|  2.01k|            }
 2059|  3.25k|        }
 2060|  1.24k|        it = val.iterator;
 2061|  1.24k|    }
 2062|       |
 2063|    174|    return it;
 2064|  2.18k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1886|  3.25k|{
 1887|  3.25k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  3.25k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  3.25k|    auto it = range.begin();
 1891|  3.25k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  3.25k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.25k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  3.25k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 2.53k, False: 724]
  ------------------
 1900|  2.53k|        ++it;
 1901|  2.53k|        return {it, string_type(1, *range.begin())};
 1902|  2.53k|    }
 1903|       |
 1904|    724|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|    724|    return {it, string_type{range.begin(), it}};
 1906|  3.25k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  5.44k|{
  944|  5.44k|    return is_range_eof(r.begin(), r.end());
  945|  5.44k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  5.44k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  5.44k|    {
  937|  5.44k|        return begin == end;
  938|  5.44k|    }
  939|  5.44k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    724|    {
  283|    724|        return n - fn::impl_i_n_s(i, n, bound);
  284|    724|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    724|    {
  227|    724|        constexpr iter_difference_t<I> zero{0};
  228|    724|        iter_difference_t<I> counter{0};
  229|       |
  230|    724|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 724]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    724|        else {
  237|  2.81k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 2.08k, False: 724]
  |  Branch (237:34): [True: 2.08k, False: 0]
  ------------------
  238|  2.08k|                ++i;
  239|  2.08k|                ++counter;
  240|  2.08k|            }
  241|    724|        }
  242|       |
  243|    724|        return counter;
  244|    724|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1877|  3.25k|    {
 1878|  3.25k|        return !codepoint.empty();
 1879|  3.25k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.18k|        : m_fptr([](storage fn,
  743|  2.18k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.18k|              cvref<T> obj = *get<T>(fn);
  745|  2.18k|              if constexpr (std::is_void_v<R>) {
  746|  2.18k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.18k|              }
  748|  2.18k|              else {
  749|  2.18k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.18k|              }
  751|  2.18k|          }),
  752|  2.18k|          m_storage(std::addressof(f))
  753|  2.18k|    {
  754|  2.18k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  3.25k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.25k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.25k|              else {
  749|  3.25k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.25k|              }
  751|  3.25k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  3.25k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.25k|        else if constexpr (std::is_object_v<T>) {
  688|  3.25k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.25k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  3.25k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  3.25k|            return detail::is_cp_space(cp);
 2127|  3.25k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.18k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.18k|        {
  662|  2.18k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  2.18k|{
  950|  2.18k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 174, False: 2.01k]
  |  |  ------------------
  ------------------
  951|    174|        return eof_error::eof;
  952|    174|    }
  953|  2.01k|    return eof_error::good;
  954|  2.18k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2401|  15.3k|    {
 2402|  15.3k|        return m_current;
 2403|  15.3k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2405|  15.8k|    {
 2406|  15.8k|        return m_count;
 2407|  15.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  44.5k|    {
 6026|  44.5k|        const bool need_skipped_width =
 6027|  44.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 2.26k, False: 42.2k]
  |  Branch (6027:33): [True: 0, False: 42.2k]
  ------------------
 6028|  44.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  44.5k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 254, False: 44.2k]
  ------------------
 6032|  44.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 4.96k, False: 39.3k]
  ------------------
 6033|  5.21k|            return skip_fill(rng, specs.precision, specs.fill,
 6034|  5.21k|                             need_skipped_width);
 6035|  5.21k|        }
 6036|  39.3k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 38.5k, False: 722]
  |  Branch (6036:56): [True: 1.74k, False: 36.8k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.74k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 1.74k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  3.48k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.74k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.74k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.74k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.74k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.74k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.74k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  3.48k|                            make_eof_scan_error));
 6047|       |
 6048|  3.48k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 1.09k, False: 646]
  ------------------
 6049|  1.09k|                return result_type{
 6050|  1.09k|                    it,
 6051|  1.09k|                    calculate_text_width(make_contiguous_buffer(
 6052|  1.09k|                                             ranges::subrange{rng.begin(), it})
 6053|  1.09k|                                             .view())};
 6054|  1.09k|            }
 6055|    646|            return result_type{it, 0};
 6056|  3.48k|        }
 6057|       |
 6058|  37.5k|        return result_type{rng.begin(), 0};
 6059|  39.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  7.76k|    {
 6068|  7.76k|        const bool need_skipped_width =
 6069|  7.76k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 610, False: 7.15k]
  |  Branch (6069:33): [True: 1.22k, False: 5.92k]
  ------------------
 6070|  7.76k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  7.76k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 316, False: 7.44k]
  ------------------
 6073|  7.76k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 354, False: 7.09k]
  ------------------
 6074|    670|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 260, False: 410]
  ------------------
 6075|    670|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 110, False: 150]
  ------------------
 6076|    110|                return result_type{rng.begin(), 0};
 6077|    110|            }
 6078|    560|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|    560|                             specs.fill, need_skipped_width);
 6080|    670|        }
 6081|  7.09k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 6.89k, False: 200]
  ------------------
 6082|  7.09k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 6.54k, False: 342]
  ------------------
 6083|  7.09k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 312, False: 6.23k]
  |  Branch (6083:35): [True: 276, False: 36]
  ------------------
 6084|  6.54k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 652, False: 5.62k]
  ------------------
 6085|  6.27k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 546, False: 106]
  ------------------
 6086|    822|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 546, False: 276]
  ------------------
 6087|    546|                const auto initial_width =
 6088|    546|                    specs.precision - prefix_width - value_width;
 6089|    546|                auto max_width_view = take_width(rng, initial_width);
 6090|    546|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    546|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    546|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    546|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    546|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 546]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    546|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    546|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|    546|                                  .transform_error(make_eof_scan_error));
 6092|    546|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|    546|            }
 6094|    552|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|    276|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    276|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    276|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    276|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 276]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    276|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    276|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|    552|                            make_eof_scan_error));
 6096|       |
 6097|    552|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 276, False: 0]
  ------------------
 6098|    276|                return result_type{
 6099|    276|                    it,
 6100|    276|                    calculate_text_width(make_contiguous_buffer(
 6101|    276|                                             ranges::subrange{rng.begin(), it})
 6102|    276|                                             .view())};
 6103|    276|            }
 6104|      0|            return result_type{it, 0};
 6105|    552|        }
 6106|  6.26k|        return result_type{rng.begin(), 0};
 6107|  7.09k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6181|  15.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  15.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  15.6k|            auto rd = make_reader<T, char_type>();
 6187|  15.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.0k, False: 652]
  |  |  ------------------
  ------------------
 6188|  15.0k|                return unexpected(e);
 6189|  15.0k|            }
 6190|       |
 6191|    652|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  15.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    652|    {
 6113|    652|        const bool need_skipped_width =
 6114|    652|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 226, False: 426]
  |  Branch (6114:33): [True: 330, False: 96]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    652|        auto it = rng.begin();
 6118|    652|        std::ptrdiff_t prefix_width = 0;
 6119|    652|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 332, False: 320]
  ------------------
 6120|    332|            auto max_width_view = take_width(rng, specs.precision);
 6121|    332|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    332|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    332|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    332|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    332|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     24|    }                                                  \
  |  |  |  | 3667|    332|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    308|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    308|            it = prefix_result.first.base();
 6124|    308|            prefix_width = prefix_result.second;
 6125|    308|        }
 6126|    320|        else {
 6127|    320|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    320|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    320|            std::tie(it, prefix_width) = prefix_result;
 6129|    320|        }
 6130|    628|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    628|        std::ptrdiff_t value_width = 0;
 6134|    628|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 308, False: 320]
  ------------------
 6135|    308|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 302]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    302|            const auto initial_width = specs.precision - prefix_width;
 6143|    302|            auto max_width_view =
 6144|    302|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    302|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 302, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    302|    }                                                  \
  |  |  |  | 3667|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    320|        else {
 6150|    320|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 320, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    320|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    320|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    320|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    320|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    320|    }                                                  \
  |  | 3667|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6181|  15.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  15.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  15.6k|            auto rd = make_reader<T, char_type>();
 6187|  15.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.0k, False: 652]
  |  |  ------------------
  ------------------
 6188|  15.0k|                return unexpected(e);
 6189|  15.0k|            }
 6190|       |
 6191|    652|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  15.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    652|    {
 6113|    652|        const bool need_skipped_width =
 6114|    652|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 226, False: 426]
  |  Branch (6114:33): [True: 330, False: 96]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    652|        auto it = rng.begin();
 6118|    652|        std::ptrdiff_t prefix_width = 0;
 6119|    652|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 332, False: 320]
  ------------------
 6120|    332|            auto max_width_view = take_width(rng, specs.precision);
 6121|    332|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    332|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    332|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    332|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    332|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24, False: 308]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     24|    }                                                  \
  |  |  |  | 3667|    332|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    308|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    308|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    308|            it = prefix_result.first.base();
 6124|    308|            prefix_width = prefix_result.second;
 6125|    308|        }
 6126|    320|        else {
 6127|    320|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    320|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 320]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    320|            std::tie(it, prefix_width) = prefix_result;
 6129|    320|        }
 6130|    628|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    628|        std::ptrdiff_t value_width = 0;
 6134|    628|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 308, False: 320]
  ------------------
 6135|    308|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 302]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    302|            const auto initial_width = specs.precision - prefix_width;
 6143|    302|            auto max_width_view =
 6144|    302|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    302|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 302, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    302|    }                                                  \
  |  |  |  | 3667|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    320|        else {
 6150|    320|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 320, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    320|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    320|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    320|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    320|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    320|    }                                                  \
  |  | 3667|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    320|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6181|  15.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  15.5k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  15.5k|            auto rd = make_reader<T, char_type>();
 6187|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.0k, False: 546]
  |  |  ------------------
  ------------------
 6188|  15.0k|                return unexpected(e);
 6189|  15.0k|            }
 6190|       |
 6191|    546|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  15.5k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5741|  15.5k|    {
 5742|  15.5k|        reader_error_handler eh{};
 5743|  15.5k|        detail::check_pointer_type_specs(specs, eh);
 5744|  15.5k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.0k, False: 546]
  |  |  ------------------
  ------------------
 5745|  15.0k|            return {scan_error::invalid_format_string, eh.m_msg};
 5746|  15.0k|        }
 5747|    546|        return {};
 5748|  15.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6112|    546|    {
 6113|    546|        const bool need_skipped_width =
 6114|    546|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 186, False: 360]
  |  Branch (6114:33): [True: 288, False: 72]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    546|        auto it = rng.begin();
 6118|    546|        std::ptrdiff_t prefix_width = 0;
 6119|    546|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 290, False: 256]
  ------------------
 6120|    290|            auto max_width_view = take_width(rng, specs.precision);
 6121|    290|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    290|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    290|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    290|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    290|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     16|    }                                                  \
  |  |  |  | 3667|    290|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    274|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    274|            it = prefix_result.first.base();
 6124|    274|            prefix_width = prefix_result.second;
 6125|    274|        }
 6126|    256|        else {
 6127|    256|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    256|            std::tie(it, prefix_width) = prefix_result;
 6129|    256|        }
 6130|    530|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    530|        std::ptrdiff_t value_width = 0;
 6134|    530|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 274, False: 256]
  ------------------
 6135|    274|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 4, False: 270]
  ------------------
 6136|      4|                return unexpected_scan_error(
 6137|      4|                    scan_error::invalid_scanned_value,
 6138|      4|                    "Too many fill characters before value, "
 6139|      4|                    "precision exceeded before reading value");
 6140|      4|            }
 6141|       |
 6142|    270|            const auto initial_width = specs.precision - prefix_width;
 6143|    270|            auto max_width_view =
 6144|    270|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    270|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    270|    }                                                  \
  |  |  |  | 3667|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    256|        else {
 6150|    256|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 256, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    256|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    256|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    256|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    256|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    256|    }                                                  \
  |  | 3667|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5770|    270|    {
 5771|    270|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    270|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    270|        return read_default(range, value, loc);
 5773|    270|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5753|    270|    {
 5754|    270|        detail::format_specs specs{};
 5755|    270|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    270|        std::uintptr_t intvalue{};
 5758|    270|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 270, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    270|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    270|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    270|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    270|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    270|    }                                                  \
  |  |  |  | 3667|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    270|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5770|    256|    {
 5771|    256|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    256|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    256|        return read_default(range, value, loc);
 5773|    256|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6181|  15.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  15.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  15.6k|            auto rd = make_reader<T, char_type>();
 6187|  15.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.7k, False: 890]
  |  |  ------------------
  ------------------
 6188|  14.7k|                return unexpected(e);
 6189|  14.7k|            }
 6190|       |
 6191|    890|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  15.6k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  15.6k|    {
 3029|  15.6k|        reader_error_handler eh{};
 3030|  15.6k|        get_derived().check_specs_impl(specs, eh);
 3031|  15.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.7k, False: 890]
  |  |  ------------------
  ------------------
 3032|  14.7k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  14.7k|        }
 3034|    890|        return {};
 3035|  15.6k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3039|  15.6k|    {
 3040|  15.6k|        return static_cast<Derived&>(*this);
 3041|  15.6k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5485|  15.6k|    {
 5486|  15.6k|        detail::check_bool_type_specs(specs, eh);
 5487|  15.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    890|    {
 6113|    890|        const bool need_skipped_width =
 6114|    890|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 240, False: 650]
  |  Branch (6114:33): [True: 416, False: 234]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    890|        auto it = rng.begin();
 6118|    890|        std::ptrdiff_t prefix_width = 0;
 6119|    890|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 420, False: 470]
  ------------------
 6120|    420|            auto max_width_view = take_width(rng, specs.precision);
 6121|    420|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    420|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    392|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    392|            it = prefix_result.first.base();
 6124|    392|            prefix_width = prefix_result.second;
 6125|    392|        }
 6126|    470|        else {
 6127|    470|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    470|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 470]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    470|            std::tie(it, prefix_width) = prefix_result;
 6129|    470|        }
 6130|    862|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    862|        std::ptrdiff_t value_width = 0;
 6134|    862|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 392, False: 470]
  ------------------
 6135|    392|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 386]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    386|            const auto initial_width = specs.precision - prefix_width;
 6143|    386|            auto max_width_view =
 6144|    386|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    386|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    386|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 386, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    386|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    386|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    386|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    386|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    386|    }                                                  \
  |  |  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    470|        else {
 6150|    470|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    470|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    470|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    470|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 470, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    470|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    470|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    470|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    470|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    470|    }                                                  \
  |  | 3667|    470|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    470|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5504|    386|    {
 5505|    386|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    386|#if !SCN_DISABLE_LOCALE
 5508|    386|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 16, False: 370]
  ------------------
 5509|     16|            return rd.read_localized(range, loc, value);
 5510|     16|        }
 5511|    370|#endif
 5512|       |
 5513|    370|        return rd.read_classic(range, value);
 5514|    386|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5517|    856|    {
 5518|    856|        SCN_GCC_COMPAT_PUSH
 5519|    856|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5520|       |
 5521|    856|        switch (specs.type) {
 5522|    232|            case detail::presentation_type::string:
  ------------------
  |  Branch (5522:13): [True: 232, False: 624]
  ------------------
 5523|    232|                return bool_reader_base::allow_text;
 5524|       |
 5525|     12|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5525:13): [True: 12, False: 844]
  ------------------
 5526|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5526:13): [True: 8, False: 848]
  ------------------
 5527|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5527:13): [True: 6, False: 850]
  ------------------
 5528|     38|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5528:13): [True: 12, False: 844]
  ------------------
 5529|     86|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5529:13): [True: 48, False: 808]
  ------------------
 5530|     90|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5530:13): [True: 4, False: 852]
  ------------------
 5531|     90|                return bool_reader_base::allow_numeric;
 5532|       |
 5533|    534|            default:
  ------------------
  |  Branch (5533:13): [True: 534, False: 322]
  ------------------
 5534|    534|                return bool_reader_base::allow_text |
 5535|    534|                       bool_reader_base::allow_numeric;
 5536|    856|        }
 5537|       |
 5538|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5539|    856|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5416|     16|    {
 5417|     16|        scan_error err{scan_error::invalid_scanned_value,
 5418|     16|                       "Failed to read boolean"};
 5419|       |
 5420|     16|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 10, False: 6]
  ------------------
 5421|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 10]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     10|            else {
 5425|     10|                err = r.error();
 5426|     10|            }
 5427|     10|        }
 5428|       |
 5429|     16|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 14, False: 2]
  ------------------
 5430|     14|            auto stdloc = loc.get<std::locale>();
 5431|     14|            const auto& numpunct =
 5432|     14|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     14|            const auto truename = numpunct.truename();
 5434|     14|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     14|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 14]
  ------------------
 5437|     14|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     14|            else {
 5441|     14|                err = r.error();
 5442|     14|            }
 5443|     14|        }
 5444|       |
 5445|     16|        return unexpected(err);
 5446|     16|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5372|    302|    {
 5373|    302|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 302]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    302|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 302]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    302|        return unexpected_scan_error(
 5383|    302|            scan_error::invalid_scanned_value,
 5384|    302|            "Failed to read numeric boolean value: No match");
 5385|    302|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2134|    604|{
 2135|    604|    auto it = read_code_unit(range);
 2136|    604|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    604|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 604]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|    604|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    604|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 604, False: 0]
  |  |  ------------------
  ------------------
 2141|    604|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|    604|        return unexpected(parse_error::error);
 2143|    604|    }
 2144|       |
 2145|      0|    return *it;
 2146|    604|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5456|     14|    {
 5457|     14|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     14|        const auto shorter = std::pair{
 5459|     14|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 14, False: 0]
  ------------------
 5460|     14|        const auto longer = std::pair{
 5461|     14|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 14]
  ------------------
 5462|       |
 5463|     14|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 14]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     14|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 14]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     14|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     14|                                     "read_textual: No match");
 5474|     14|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2167|     28|{
 2168|     28|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     28|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     28|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     28|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 18]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|     28|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     18|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     18|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     18|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     18|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 2174|     18|        return unexpected(parse_error::error);
 2175|     18|    }
 2176|      0|    return it;
 2177|     18|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1844|    720|{
 1845|    720|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    720|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    720|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    720|    else {
 1856|    720|        auto it = range.begin();
 1857|    720|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 720]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  3.60k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 3.02k, False: 582]
  ------------------
 1862|  3.02k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 138, False: 2.88k]
  ------------------
 1863|    138|                return unexpected(eof_error::eof);
 1864|    138|            }
 1865|  3.02k|        }
 1866|       |
 1867|    582|        return it;
 1868|    720|    }
 1869|    720|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    720|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    720|    else {
 1115|    720|        return 0;
 1116|    720|    }
 1117|    720|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5343|    370|    {
 5344|    370|        scan_error err{scan_error::invalid_scanned_value,
 5345|    370|                       "Failed to read boolean"};
 5346|       |
 5347|    370|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 292, False: 78]
  ------------------
 5348|    292|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 292]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    292|            else {
 5352|    292|                err = r.error();
 5353|    292|            }
 5354|    292|        }
 5355|       |
 5356|    370|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 346, False: 24]
  ------------------
 5357|    346|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 346]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|    346|            else {
 5361|    346|                err = r.error();
 5362|    346|            }
 5363|    346|        }
 5364|       |
 5365|    370|        return unexpected(err);
 5366|    370|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5390|    346|    {
 5391|    346|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 346]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|    346|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 346]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|    346|        return unexpected_scan_error(
 5401|    346|            scan_error::invalid_scanned_value,
 5402|    346|            "Failed to read textual boolean value: No match");
 5403|    346|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2182|    692|{
 2183|    692|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    692|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    692|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    692|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    692|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 128, False: 564]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    128|    }                                                  \
  |  |  |  | 3667|    692|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    564|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|    564|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|    564|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|    564|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|    564|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|    564|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    564|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 564, False: 0]
  |  |  ------------------
  ------------------
 2190|    564|            return unexpected(parse_error::error);
 2191|    564|        }
 2192|      0|        return it;
 2193|       |    }
 2194|       |    else {
 2195|       |        auto range_it = range.begin();
 2196|       |        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2197|       |            if (SCN_UNLIKELY(*range_it !=
 2198|       |                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|       |                return unexpected(parse_error::error);
 2200|       |            }
 2201|       |        }
 2202|       |        return it;
 2203|       |    }
 2204|    564|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5504|    470|    {
 5505|    470|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    470|#if !SCN_DISABLE_LOCALE
 5508|    470|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 66, False: 404]
  ------------------
 5509|     66|            return rd.read_localized(range, loc, value);
 5510|     66|        }
 5511|    404|#endif
 5512|       |
 5513|    404|        return rd.read_classic(range, value);
 5514|    470|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5416|     66|    {
 5417|     66|        scan_error err{scan_error::invalid_scanned_value,
 5418|     66|                       "Failed to read boolean"};
 5419|       |
 5420|     66|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 48, False: 18]
  ------------------
 5421|     48|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 48]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     48|            else {
 5425|     48|                err = r.error();
 5426|     48|            }
 5427|     48|        }
 5428|       |
 5429|     66|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 24, False: 42]
  ------------------
 5430|     24|            auto stdloc = loc.get<std::locale>();
 5431|     24|            const auto& numpunct =
 5432|     24|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     24|            const auto truename = numpunct.truename();
 5434|     24|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     24|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 24]
  ------------------
 5437|     24|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     24|            else {
 5441|     24|                err = r.error();
 5442|     24|            }
 5443|     24|        }
 5444|       |
 5445|     66|        return unexpected(err);
 5446|     66|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5456|     24|    {
 5457|     24|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     24|        const auto shorter = std::pair{
 5459|     24|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 24, False: 0]
  ------------------
 5460|     24|        const auto longer = std::pair{
 5461|     24|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 24]
  ------------------
 5462|       |
 5463|     24|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 24]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     24|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 24]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     24|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     24|                                     "read_textual: No match");
 5474|     24|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2167|     48|{
 2168|     48|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     48|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     48|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     48|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     48|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     48|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     46|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     46|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     46|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     46|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 0]
  |  |  ------------------
  ------------------
 2174|     46|        return unexpected(parse_error::error);
 2175|     46|    }
 2176|      0|    return it;
 2177|     46|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6181|  15.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  15.5k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  15.5k|            auto rd = make_reader<T, char_type>();
 6187|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.9k, False: 596]
  |  |  ------------------
  ------------------
 6188|  14.9k|                return unexpected(e);
 6189|  14.9k|            }
 6190|       |
 6191|    596|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  15.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    596|    {
 6113|    596|        const bool need_skipped_width =
 6114|    596|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 188, False: 408]
  |  Branch (6114:33): [True: 320, False: 88]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    596|        auto it = rng.begin();
 6118|    596|        std::ptrdiff_t prefix_width = 0;
 6119|    596|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 322, False: 274]
  ------------------
 6120|    322|            auto max_width_view = take_width(rng, specs.precision);
 6121|    322|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 322]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    322|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    322|            it = prefix_result.first.base();
 6124|    322|            prefix_width = prefix_result.second;
 6125|    322|        }
 6126|    274|        else {
 6127|    274|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    274|            std::tie(it, prefix_width) = prefix_result;
 6129|    274|        }
 6130|    596|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    596|        std::ptrdiff_t value_width = 0;
 6134|    596|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 322, False: 274]
  ------------------
 6135|    322|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 316]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    316|            const auto initial_width = specs.precision - prefix_width;
 6143|    316|            auto max_width_view =
 6144|    316|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    316|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 284]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     32|    }                                                  \
  |  |  |  | 3667|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    284|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    284|            it = w_it.base();
 6147|    284|            value_width = initial_width - w_it.count();
 6148|    284|        }
 6149|    274|        else {
 6150|    274|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 252]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     22|    }                                                  \
  |  | 3667|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    252|                                             specs, value, loc));
 6152|       |
 6153|    252|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 182, False: 70]
  ------------------
 6154|    182|                value_width = calculate_text_width(
 6155|    182|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    182|                        .view());
 6157|    182|            }
 6158|    252|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    536|        std::ptrdiff_t postfix_width = 0;
 6162|    536|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 536, False: 0]
  ------------------
 6163|    536|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    536|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    536|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    536|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    536|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 536]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    536|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    536|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    536|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    536|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    536|                                 value_width));
 6167|    536|            std::tie(it, postfix_width) = postfix_result;
 6168|    536|        }
 6169|       |
 6170|    536|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    536|                                                 value_width, postfix_width);
 6172|    536|            !e) {
  ------------------
  |  Branch (6172:13): [True: 162, False: 374]
  ------------------
 6173|    162|            return unexpected(e);
 6174|    162|        }
 6175|       |
 6176|    374|        return it;
 6177|    536|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6181|  15.6k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  15.6k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  15.6k|            auto rd = make_reader<T, char_type>();
 6187|  15.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.0k, False: 620]
  |  |  ------------------
  ------------------
 6188|  15.0k|                return unexpected(e);
 6189|  15.0k|            }
 6190|       |
 6191|    620|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  15.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    620|    {
 6113|    620|        const bool need_skipped_width =
 6114|    620|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 196, False: 424]
  |  Branch (6114:33): [True: 324, False: 100]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    620|        auto it = rng.begin();
 6118|    620|        std::ptrdiff_t prefix_width = 0;
 6119|    620|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 328, False: 292]
  ------------------
 6120|    328|            auto max_width_view = take_width(rng, specs.precision);
 6121|    328|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    306|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    306|            it = prefix_result.first.base();
 6124|    306|            prefix_width = prefix_result.second;
 6125|    306|        }
 6126|    292|        else {
 6127|    292|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    292|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 292]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    292|            std::tie(it, prefix_width) = prefix_result;
 6129|    292|        }
 6130|    598|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    598|        std::ptrdiff_t value_width = 0;
 6134|    598|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 306, False: 292]
  ------------------
 6135|    306|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 8, False: 298]
  ------------------
 6136|      8|                return unexpected_scan_error(
 6137|      8|                    scan_error::invalid_scanned_value,
 6138|      8|                    "Too many fill characters before value, "
 6139|      8|                    "precision exceeded before reading value");
 6140|      8|            }
 6141|       |
 6142|    298|            const auto initial_width = specs.precision - prefix_width;
 6143|    298|            auto max_width_view =
 6144|    298|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    298|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 298, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    298|    }                                                  \
  |  |  |  | 3667|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    292|        else {
 6150|    292|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    292|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    292|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    292|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 292, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    292|    }                                                  \
  |  | 3667|    292|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    292|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  15.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  15.5k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  15.5k|            auto rd = make_reader<T, char_type>();
 6187|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 15.4k]
  |  |  ------------------
  ------------------
 6188|    126|                return unexpected(e);
 6189|    126|            }
 6190|       |
 6191|  15.4k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  15.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  15.4k|    {
 6113|  15.4k|        const bool need_skipped_width =
 6114|  15.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 350, False: 15.1k]
  |  Branch (6114:33): [True: 1.24k, False: 13.8k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  15.4k|        auto it = rng.begin();
 6118|  15.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  15.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 1.25k, False: 14.1k]
  ------------------
 6120|  1.25k|            auto max_width_view = take_width(rng, specs.precision);
 6121|  1.25k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|  1.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 1.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|  1.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|  1.23k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|  1.23k|            it = prefix_result.first.base();
 6124|  1.23k|            prefix_width = prefix_result.second;
 6125|  1.23k|        }
 6126|  14.1k|        else {
 6127|  14.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  14.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  14.1k|        }
 6130|  15.4k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  15.4k|        std::ptrdiff_t value_width = 0;
 6134|  15.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 1.23k, False: 14.1k]
  ------------------
 6135|  1.23k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 1.23k]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|  1.23k|            const auto initial_width = specs.precision - prefix_width;
 6143|  1.23k|            auto max_width_view =
 6144|  1.23k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|  1.23k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|  1.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 810, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    810|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    810|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    810|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    810|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    810|    }                                                  \
  |  |  |  | 3667|  1.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    420|            it = w_it.base();
 6147|    420|            value_width = initial_width - w_it.count();
 6148|    420|        }
 6149|  14.1k|        else {
 6150|  14.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 11.6k, False: 2.52k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  11.6k|    }                                                  \
  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  2.52k|                                             specs, value, loc));
 6152|       |
 6153|  2.52k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 272, False: 2.25k]
  ------------------
 6154|    272|                value_width = calculate_text_width(
 6155|    272|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    272|                        .view());
 6157|    272|            }
 6158|  2.52k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  2.94k|        std::ptrdiff_t postfix_width = 0;
 6162|  2.94k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 2.40k, False: 536]
  ------------------
 6163|  2.40k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  2.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  2.40k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  2.40k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  2.40k|                                 value_width));
 6167|  2.40k|            std::tie(it, postfix_width) = postfix_result;
 6168|  2.40k|        }
 6169|       |
 6170|  2.94k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  2.94k|                                                 value_width, postfix_width);
 6172|  2.94k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 166, False: 2.77k]
  ------------------
 6173|    166|            return unexpected(e);
 6174|    166|        }
 6175|       |
 6176|  2.77k|        return it;
 6177|  2.94k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  15.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  15.5k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  15.5k|            auto rd = make_reader<T, char_type>();
 6187|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 15.4k]
  |  |  ------------------
  ------------------
 6188|    126|                return unexpected(e);
 6189|    126|            }
 6190|       |
 6191|  15.4k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  15.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  15.4k|    {
 6113|  15.4k|        const bool need_skipped_width =
 6114|  15.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 350, False: 15.1k]
  |  Branch (6114:33): [True: 1.24k, False: 13.8k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  15.4k|        auto it = rng.begin();
 6118|  15.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  15.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 1.25k, False: 14.1k]
  ------------------
 6120|  1.25k|            auto max_width_view = take_width(rng, specs.precision);
 6121|  1.25k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|  1.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 1.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|  1.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|  1.23k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|  1.23k|            it = prefix_result.first.base();
 6124|  1.23k|            prefix_width = prefix_result.second;
 6125|  1.23k|        }
 6126|  14.1k|        else {
 6127|  14.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  14.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  14.1k|        }
 6130|  15.4k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  15.4k|        std::ptrdiff_t value_width = 0;
 6134|  15.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 1.23k, False: 14.1k]
  ------------------
 6135|  1.23k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 1.23k]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|  1.23k|            const auto initial_width = specs.precision - prefix_width;
 6143|  1.23k|            auto max_width_view =
 6144|  1.23k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|  1.23k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|  1.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 810, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    810|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    810|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    810|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    810|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    810|    }                                                  \
  |  |  |  | 3667|  1.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    420|            it = w_it.base();
 6147|    420|            value_width = initial_width - w_it.count();
 6148|    420|        }
 6149|  14.1k|        else {
 6150|  14.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 11.6k, False: 2.52k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  11.6k|    }                                                  \
  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  2.52k|                                             specs, value, loc));
 6152|       |
 6153|  2.52k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 272, False: 2.25k]
  ------------------
 6154|    272|                value_width = calculate_text_width(
 6155|    272|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    272|                        .view());
 6157|    272|            }
 6158|  2.52k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  2.94k|        std::ptrdiff_t postfix_width = 0;
 6162|  2.94k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 2.40k, False: 536]
  ------------------
 6163|  2.40k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  2.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  2.40k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  2.40k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  2.40k|                                 value_width));
 6167|  2.40k|            std::tie(it, postfix_width) = postfix_result;
 6168|  2.40k|        }
 6169|       |
 6170|  2.94k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  2.94k|                                                 value_width, postfix_width);
 6172|  2.94k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 166, False: 2.77k]
  ------------------
 6173|    166|            return unexpected(e);
 6174|    166|        }
 6175|       |
 6176|  2.77k|        return it;
 6177|  2.94k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  15.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  15.5k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  15.5k|            auto rd = make_reader<T, char_type>();
 6187|  15.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 15.4k]
  |  |  ------------------
  ------------------
 6188|    126|                return unexpected(e);
 6189|    126|            }
 6190|       |
 6191|  15.4k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  15.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  15.4k|    {
 6113|  15.4k|        const bool need_skipped_width =
 6114|  15.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 350, False: 15.1k]
  |  Branch (6114:33): [True: 1.24k, False: 13.8k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  15.4k|        auto it = rng.begin();
 6118|  15.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  15.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 1.25k, False: 14.1k]
  ------------------
 6120|  1.25k|            auto max_width_view = take_width(rng, specs.precision);
 6121|  1.25k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|  1.25k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.25k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.25k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 1.23k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|  1.25k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.23k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|  1.23k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|  1.23k|            it = prefix_result.first.base();
 6124|  1.23k|            prefix_width = prefix_result.second;
 6125|  1.23k|        }
 6126|  14.1k|        else {
 6127|  14.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  14.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  14.1k|        }
 6130|  15.4k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  15.4k|        std::ptrdiff_t value_width = 0;
 6134|  15.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 1.23k, False: 14.1k]
  ------------------
 6135|  1.23k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 1.23k]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|  1.23k|            const auto initial_width = specs.precision - prefix_width;
 6143|  1.23k|            auto max_width_view =
 6144|  1.23k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|  1.23k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|  1.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 810, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    810|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    810|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    810|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    810|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    810|    }                                                  \
  |  |  |  | 3667|  1.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    420|            it = w_it.base();
 6147|    420|            value_width = initial_width - w_it.count();
 6148|    420|        }
 6149|  14.1k|        else {
 6150|  14.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 11.6k, False: 2.52k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  11.6k|    }                                                  \
  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  2.52k|                                             specs, value, loc));
 6152|       |
 6153|  2.52k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 272, False: 2.25k]
  ------------------
 6154|    272|                value_width = calculate_text_width(
 6155|    272|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    272|                        .view());
 6157|    272|            }
 6158|  2.52k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  2.94k|        std::ptrdiff_t postfix_width = 0;
 6162|  2.94k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 2.40k, False: 536]
  ------------------
 6163|  2.40k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  2.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.40k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  2.40k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  2.40k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  2.40k|                                 value_width));
 6167|  2.40k|            std::tie(it, postfix_width) = postfix_result;
 6168|  2.40k|        }
 6169|       |
 6170|  2.94k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  2.94k|                                                 value_width, postfix_width);
 6172|  2.94k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 166, False: 2.77k]
  ------------------
 6173|    166|            return unexpected(e);
 6174|    166|        }
 6175|       |
 6176|  2.77k|        return it;
 6177|  2.94k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  5.65k|{
 5784|  5.65k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.65k]
  |  |  ------------------
  ------------------
 5785|      0|        return unexpected(e);
 5786|      0|    }
 5787|       |
 5788|  5.65k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 628, False: 5.02k]
  ------------------
 5789|    628|        return range.begin();
 5790|    628|    }
 5791|       |
 5792|  5.02k|    return skip_classic_whitespace(range);
 5793|  5.65k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    628|    {
 3517|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    628|        return read_default_with_base(range, value, 10);
 3519|    628|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    628|    {
 3481|    628|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    628|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|    628|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 628]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.25k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.25k|                parse_integer_digits_without_thsep(
 3500|  1.25k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.25k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.25k|        auto buf = make_contiguous_buffer(
 3504|  1.25k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.25k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 628, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    628|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    628|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    628|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    628|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    628|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.25k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|    628|    {
 3517|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|    628|        return read_default_with_base(range, value, 10);
 3519|    628|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    628|    {
 3481|    628|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    628|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|    628|        if constexpr (!std::is_signed_v<T>) {
 3485|    628|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 0, False: 628]
  ------------------
 3486|      0|                return unexpected_scan_error(
 3487|      0|                    scan_error::invalid_scanned_value,
 3488|      0|                    "Unexpected '-' sign when parsing an "
 3489|      0|                    "unsigned value");
 3490|      0|            }
 3491|    628|        }
 3492|       |
 3493|    628|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 628]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.25k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.25k|                parse_integer_digits_without_thsep(
 3500|  1.25k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.25k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.25k|        auto buf = make_contiguous_buffer(
 3504|  1.25k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.25k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 628, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    628|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    628|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    628|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    628|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    628|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.25k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5736|  1.14k|    {
 5737|  1.14k|        return true;
 5738|  1.14k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5753|    974|    {
 5754|    974|        detail::format_specs specs{};
 5755|    974|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    974|        std::uintptr_t intvalue{};
 5758|    974|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    974|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    974|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    974|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    974|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 974, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    974|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    974|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    974|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    974|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    974|    }                                                  \
  |  |  |  | 3667|    974|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    974|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3023|  1.31k|    {
 3024|  1.31k|        return true;
 3025|  1.31k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5492|    628|    {
 5493|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5494|       |
 5495|    628|        return bool_reader<CharT>{}.read_classic(range, value);
 5496|    628|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5343|  1.03k|    {
 5344|  1.03k|        scan_error err{scan_error::invalid_scanned_value,
 5345|  1.03k|                       "Failed to read boolean"};
 5346|       |
 5347|  1.03k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 988, False: 48]
  ------------------
 5348|    988|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 988]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    988|            else {
 5352|    988|                err = r.error();
 5353|    988|            }
 5354|    988|        }
 5355|       |
 5356|  1.03k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 1.01k, False: 20]
  ------------------
 5357|  1.01k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 1.01k]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|  1.01k|            else {
 5361|  1.01k|                err = r.error();
 5362|  1.01k|            }
 5363|  1.01k|        }
 5364|       |
 5365|  1.03k|        return unexpected(err);
 5366|  1.03k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5372|  1.01k|    {
 5373|  1.01k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 1.01k]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|  1.01k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 1.01k]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|  1.01k|        return unexpected_scan_error(
 5383|  1.01k|            scan_error::invalid_scanned_value,
 5384|  1.01k|            "Failed to read numeric boolean value: No match");
 5385|  1.01k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5390|  1.01k|    {
 5391|  1.01k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 1.01k]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|  1.01k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 1.01k]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|  1.01k|        return unexpected_scan_error(
 5401|  1.01k|            scan_error::invalid_scanned_value,
 5402|  1.01k|            "Failed to read textual boolean value: No match");
 5403|  1.01k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2182|  2.03k|{
 2183|  2.03k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  2.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 132, False: 1.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    132|    }                                                  \
  |  |  |  | 3667|  2.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|  1.90k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|  1.90k|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2190|       |            return unexpected(parse_error::error);
 2191|       |        }
 2192|       |        return it;
 2193|       |    }
 2194|  1.90k|    else {
 2195|  1.90k|        auto range_it = range.begin();
 2196|  1.90k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2196:28): [True: 1.90k, False: 0]
  ------------------
 2197|  1.90k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.90k, False: 0]
  |  |  ------------------
  ------------------
 2198|  1.90k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|  1.90k|                return unexpected(parse_error::error);
 2200|  1.90k|            }
 2201|  1.90k|        }
 2202|      0|        return it;
 2203|  1.90k|    }
 2204|  1.90k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3646|    628|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|    628|    {
 4141|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|    628|        float_reader<CharT> rd{};
 4144|    628|        return read_impl<Range>(
 4145|    628|            range, rd,
 4146|    628|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    628|                return r.read_source(SCN_FWD(args)...);
 4148|    628|            },
 4149|    628|            value);
 4150|    628|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|    628|        : m_fptr([](storage fn,
  743|    628|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    628|              cvref<T> obj = *get<T>(fn);
  745|    628|              if constexpr (std::is_void_v<R>) {
  746|    628|                  obj(static_cast<decltype(args)>(args)...);
  747|    628|              }
  748|    628|              else {
  749|    628|                  return obj(static_cast<decltype(args)>(args)...);
  750|    628|              }
  751|    628|          }),
  752|    628|          m_storage(std::addressof(f))
  753|    628|    {
  754|    628|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|    628|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    628|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    628|              else {
  749|    628|                  return obj(static_cast<decltype(args)>(args)...);
  750|    628|              }
  751|    628|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    628|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|    628|        else if constexpr (std::is_object_v<T>) {
  688|    628|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    628|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|    628|            [](float_reader<CharT>& r, auto&&... args) {
 4147|    628|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|    628|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|    628|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|    628|        {
  662|    628|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    628|    {
 5255|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    628|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|    628|    {
 5255|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    628|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|    628|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|    628|                          basic_contiguous_scan_context<char_type>>) {
 5864|    628|            auto rd = make_reader<T, char_type>();
 5865|    628|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|    628|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|    628|    {
 5852|    628|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|    628|                        .transform_error(make_eof_scan_error));
 5854|    628|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|    628|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|    628|    {
 5255|    628|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    628|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|    628|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|    628|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   430k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   430k|    static_cast<    \
  |  |  929|   430k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   430k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   430k|          m_current(m_range.begin())
 2867|   430k|    {
 2868|   430k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|   699k|    {
 2872|   699k|        return m_current;
 2873|   699k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|   317k|    {
 2877|   317k|        return m_range.end();
 2878|   317k|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1208|   202k|{
 1209|       |    // TODO: optimize
 1210|   202k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1211|   202k|    auto res = get_next_code_point(str);
 1212|   202k|    return {res.iterator, res.value, detail::is_cp_space(res.value)};
 1213|   202k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|  51.0k|    {
 2892|  51.0k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  51.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  51.0k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  51.0k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 51.0k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  51.0k|        }
 2898|  51.0k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  51.0k|    static_cast<    \
  |  |  929|  51.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  51.0k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|  63.5k|    {
 2882|  63.5k|        return ranges::subrange{begin(), end()};
 2883|  63.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6025|  2.19k|    {
 6026|  2.19k|        const bool need_skipped_width =
 6027|  2.19k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 52, False: 2.14k]
  |  Branch (6027:33): [True: 2.14k, False: 0]
  ------------------
 6028|  2.19k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  2.19k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 36, False: 2.15k]
  ------------------
 6032|  2.19k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 198, False: 1.95k]
  ------------------
 6033|    234|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    234|                             need_skipped_width);
 6035|    234|        }
 6036|  1.95k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 1.90k, False: 52]
  |  Branch (6036:56): [True: 1.35k, False: 556]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.35k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 1.35k, False: 0]
  ------------------
 6040|  1.35k|                auto max_width_view = take_width(rng, specs.precision);
 6041|  1.35k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|  1.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.35k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|  1.35k|                                  .transform_error(make_eof_scan_error));
 6043|  1.35k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|  1.35k|            }
 6045|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|      0|                            make_eof_scan_error));
 6047|       |
 6048|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 0]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|      0|            return result_type{it, 0};
 6056|      0|        }
 6057|       |
 6058|    608|        return result_type{rng.begin(), 0};
 6059|  1.95k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5939|    234|{
 5940|    234|    using char_type = detail::char_t<Range>;
 5941|    234|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5942|       |
 5943|    234|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5943:9): [True: 234, False: 0]
  ------------------
 5944|    234|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5945|    234|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5946|       |
 5947|    234|        if (max_width == 0) {
  ------------------
  |  Branch (5947:13): [True: 0, False: 234]
  ------------------
 5948|      0|            auto it = read_while_code_unit(range, pred);
 5949|       |
 5950|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5950:17): [True: 0, False: 0]
  ------------------
 5951|      0|                auto prefix_width =
 5952|      0|                    static_cast<std::ptrdiff_t>(
 5953|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5954|      0|                    ranges::distance(range.begin(), it);
 5955|      0|                return result_type{it, prefix_width};
 5956|      0|            }
 5957|      0|            return result_type{it, 0};
 5958|      0|        }
 5959|       |
 5960|    234|        auto max_width_view = take_width(range, max_width);
 5961|    234|        auto w_it = read_while_code_unit(max_width_view, pred);
 5962|       |
 5963|    234|        if (want_skipped_width) {
  ------------------
  |  Branch (5963:13): [True: 234, False: 0]
  ------------------
 5964|    234|            return result_type{w_it.base(), max_width - w_it.count()};
 5965|    234|        }
 5966|      0|        return result_type{w_it.base(), 0};
 5967|    234|    }
 5968|       |
 5969|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5970|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5970:9): [True: 0, False: 0]
  ------------------
 5971|      0|        auto it = read_while_code_units(range, fill_chars);
 5972|       |
 5973|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5973:13): [True: 0, False: 0]
  ------------------
 5974|      0|            auto prefix_width =
 5975|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5976|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5977|      0|            return result_type{it, prefix_width};
 5978|      0|        }
 5979|      0|        return result_type{it, 0};
 5980|      0|    }
 5981|       |
 5982|      0|    auto max_width_view = take_width(range, max_width);
 5983|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5984|       |
 5985|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5985:9): [True: 0, False: 0]
  ------------------
 5986|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5987|      0|    }
 5988|      0|    return result_type{w_it.base(), 0};
 5989|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_:
  742|    234|        : m_fptr([](storage fn,
  743|    234|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    234|              cvref<T> obj = *get<T>(fn);
  745|    234|              if constexpr (std::is_void_v<R>) {
  746|    234|                  obj(static_cast<decltype(args)>(args)...);
  747|    234|              }
  748|    234|              else {
  749|    234|                  return obj(static_cast<decltype(args)>(args)...);
  750|    234|              }
  751|    234|          }),
  752|    234|          m_storage(std::addressof(f))
  753|    234|    {
  754|    234|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|    280|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    280|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|    280|              else {
  749|    280|                  return obj(static_cast<decltype(args)>(args)...);
  750|    280|              }
  751|    280|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    280|    {
  684|    280|        if constexpr (std::is_const_v<T>) {
  685|    280|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|    280|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5945|    280|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|    234|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|    234|        {
  667|    234|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|    234|{
 1964|    234|    return read_until_code_unit(range, std::not_fn(pred));
 1965|    234|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|    234|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|    234|    else {
 1949|    234|        auto first = range.begin();
 1950|    314|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 280, False: 34]
  ------------------
 1951|    280|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 200, False: 80]
  ------------------
 1952|    200|                return first;
 1953|    200|            }
 1954|    280|        }
 1955|     34|        return first;
 1956|    234|    }
 1957|    234|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2798|  2.93k|    {
 2799|  2.93k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2800|  2.93k|                                      m_count};
 2801|  2.93k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2705|  10.2k|    {
 2706|  10.2k|        return view;
 2707|  10.2k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2369|  2.93k|        : m_current(x), m_end(s), m_count(n)
 2370|  2.93k|    {
 2371|  2.93k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  1.66k|        {
 2770|  1.66k|            return !(y == x);
 2771|  1.66k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2758|  4.36k|        {
 2759|  4.36k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2759:21): [True: 34, False: 4.33k]
  |  Branch (2759:39): [True: 34, False: 0]
  ------------------
 2760|  4.36k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2760:20): [True: 0, False: 4.33k]
  ------------------
 2761|  4.36k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2409|     34|    {
 2410|     34|        return m_multibyte_left;
 2411|     34|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2804|  4.36k|    {
 2805|  4.36k|        return sentinel<true>{m_base.get().end()};
 2806|  4.36k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2739|  4.36k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
  ------------------
  |  |  928|  4.36k|    static_cast<    \
  |  |  929|  4.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2414|  2.98k|    {
 2415|  2.98k|        return *m_current;
 2416|  2.98k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2423|  1.43k|    {
 2424|  1.43k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2425|  1.43k|        _increment_current();
 2426|  1.43k|        return *this;
 2427|  1.43k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2656|  1.43k|    {
 2657|  1.43k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2657:13): [True: 1.43k, False: 0]
  ------------------
 2658|  1.43k|            auto cplen = _get_cp_length_at_current();
 2659|  1.43k|            m_multibyte_left = cplen - 1;
 2660|  1.43k|            m_count -= _get_width_at_current_cp_start(cplen);
 2661|  1.43k|        }
 2662|      0|        else {
 2663|      0|            --m_multibyte_left;
 2664|      0|        }
 2665|       |
 2666|  1.43k|        ++m_current;
 2667|  1.43k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2627|  1.43k|    {
 2628|  1.43k|        return static_cast<difference_type>(
 2629|  1.43k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2630|  1.43k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2633|  1.43k|    {
 2634|  1.43k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  1.43k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.43k]
  |  |  ------------------
  ------------------
 2635|      0|            return 0;
 2636|      0|        }
 2637|       |
 2638|  1.43k|        if (cplen == 1) {
  ------------------
  |  Branch (2638:13): [True: 1.43k, False: 0]
  ------------------
 2639|  1.43k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2640|  1.43k|            auto cp = static_cast<char32_t>(*m_current);
 2641|  1.43k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2642|  1.43k|        }
 2643|       |
 2644|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2645|      0|                                           cplen);
 2646|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2647|      0|            return 0;
 2648|      0|        }
 2649|       |
 2650|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2651|      0|        return static_cast<difference_type>(
 2652|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2653|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2820|  1.58k|    {
 2821|  1.58k|        return take_width_view{r, n};
 2822|  1.58k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2788|  1.58k|        : m_base(base), m_count(count)
 2789|  1.58k|    {
 2790|  1.58k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2702|  1.58k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  1.35k|{
 2940|  1.35k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.35k, False: 0]
  ------------------
 2941|  1.35k|        auto it = read_while_classic_space(range);
 2942|  1.35k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.35k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35k]
  |  |  ------------------
  ------------------
 2944|      0|            return unexpected(e);
 2945|      0|        }
 2946|       |
 2947|  1.35k|        return it;
 2948|  1.35k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.35k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  1.35k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.35k|    else {
 2114|  1.35k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  1.35k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.35k|            return detail::is_cp_space(cp);
 2127|  1.35k|        });
 2128|  1.35k|    }
 2129|  1.35k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  1.35k|{
 2070|  1.35k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.35k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.35k|{
 2049|  1.35k|    auto it = range.begin();
 2050|  1.35k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.35k, False: 0]
  ------------------
 2051|  1.35k|        const auto val =
 2052|  1.35k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.35k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.35k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.35k, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.35k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.35k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.35k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.35k, False: 0]
  ------------------
 2057|  1.35k|                return it;
 2058|  1.35k|            }
 2059|  1.35k|        }
 2060|      0|        it = val.iterator;
 2061|      0|    }
 2062|       |
 2063|      0|    return it;
 2064|  1.35k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1886|  1.35k|{
 1887|  1.35k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.35k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.35k|    auto it = range.begin();
 1891|  1.35k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.35k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  1.35k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.35k, False: 0]
  ------------------
 1900|  1.35k|        ++it;
 1901|  1.35k|        return {it, string_type(1, *range.begin())};
 1902|  1.35k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  1.35k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  2.70k|{
  944|  2.70k|    return is_range_eof(r.begin(), r.end());
  945|  2.70k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  2.70k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.70k|    {
  937|  2.70k|        return begin == end;
  938|  2.70k|    }
  939|  2.70k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1877|  1.35k|    {
 1878|  1.35k|        return !codepoint.empty();
 1879|  1.35k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.35k|        : m_fptr([](storage fn,
  743|  1.35k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.35k|              cvref<T> obj = *get<T>(fn);
  745|  1.35k|              if constexpr (std::is_void_v<R>) {
  746|  1.35k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.35k|              }
  748|  1.35k|              else {
  749|  1.35k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.35k|              }
  751|  1.35k|          }),
  752|  1.35k|          m_storage(std::addressof(f))
  753|  1.35k|    {
  754|  1.35k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.35k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.35k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.35k|              else {
  749|  1.35k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.35k|              }
  751|  1.35k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.35k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.35k|        else if constexpr (std::is_object_v<T>) {
  688|  1.35k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.35k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  1.35k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.35k|            return detail::is_cp_space(cp);
 2127|  1.35k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.35k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.35k|        {
  662|  1.35k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.35k|{
  950|  1.35k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.35k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.35k|    return eof_error::good;
  954|  1.35k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2401|  5.91k|    {
 2402|  5.91k|        return m_current;
 2403|  5.91k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2405|  5.94k|    {
 2406|  5.94k|        return m_count;
 2407|  5.94k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  18.5k|    {
 6026|  18.5k|        const bool need_skipped_width =
 6027|  18.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 9.34k, False: 9.19k]
  |  Branch (6027:33): [True: 0, False: 9.19k]
  ------------------
 6028|  18.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  18.5k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 54, False: 18.4k]
  ------------------
 6032|  18.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 280, False: 18.2k]
  ------------------
 6033|    334|            return skip_fill(rng, specs.precision, specs.fill,
 6034|    334|                             need_skipped_width);
 6035|    334|        }
 6036|  18.2k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 17.7k, False: 450]
  |  Branch (6036:56): [True: 2.67k, False: 15.0k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  2.67k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 2.67k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  5.34k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  2.67k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.67k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.67k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  2.67k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  5.34k|                            make_eof_scan_error));
 6047|       |
 6048|  5.34k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 1.98k, False: 686]
  ------------------
 6049|  1.98k|                return result_type{
 6050|  1.98k|                    it,
 6051|  1.98k|                    calculate_text_width(make_contiguous_buffer(
 6052|  1.98k|                                             ranges::subrange{rng.begin(), it})
 6053|  1.98k|                                             .view())};
 6054|  1.98k|            }
 6055|    686|            return result_type{it, 0};
 6056|  5.34k|        }
 6057|       |
 6058|  15.5k|        return result_type{rng.begin(), 0};
 6059|  18.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  3.62k|    {
 6068|  3.62k|        const bool need_skipped_width =
 6069|  3.62k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 1.71k, False: 1.90k]
  |  Branch (6069:33): [True: 606, False: 1.30k]
  ------------------
 6070|  3.62k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  3.62k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 92, False: 3.53k]
  ------------------
 6073|  3.62k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 160, False: 3.37k]
  ------------------
 6074|    252|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 66, False: 186]
  ------------------
 6075|    252|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 44, False: 22]
  ------------------
 6076|     44|                return result_type{rng.begin(), 0};
 6077|     44|            }
 6078|    208|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|    208|                             specs.fill, need_skipped_width);
 6080|    252|        }
 6081|  3.37k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 3.35k, False: 18]
  ------------------
 6082|  3.37k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 3.09k, False: 264]
  ------------------
 6083|  3.37k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 1.55k, False: 1.53k]
  |  Branch (6083:35): [True: 1.49k, False: 58]
  ------------------
 6084|  3.09k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 462, False: 1.13k]
  ------------------
 6085|  1.83k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 334, False: 128]
  ------------------
 6086|  1.83k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 336, False: 1.49k]
  ------------------
 6087|    336|                const auto initial_width =
 6088|    336|                    specs.precision - prefix_width - value_width;
 6089|    336|                auto max_width_view = take_width(rng, initial_width);
 6090|    336|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|    336|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    336|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    336|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    336|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    336|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|    336|                                  .transform_error(make_eof_scan_error));
 6092|    336|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|    336|            }
 6094|  2.99k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|  1.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  2.99k|                            make_eof_scan_error));
 6096|       |
 6097|  2.99k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 1.49k, False: 0]
  ------------------
 6098|  1.49k|                return result_type{
 6099|  1.49k|                    it,
 6100|  1.49k|                    calculate_text_width(make_contiguous_buffer(
 6101|  1.49k|                                             ranges::subrange{rng.begin(), it})
 6102|  1.49k|                                             .view())};
 6103|  1.49k|            }
 6104|      0|            return result_type{it, 0};
 6105|  2.99k|        }
 6106|  1.54k|        return result_type{rng.begin(), 0};
 6107|  3.37k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6181|  5.88k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.88k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.88k|            auto rd = make_reader<T, char_type>();
 6187|  5.88k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.29k, False: 594]
  |  |  ------------------
  ------------------
 6188|  5.29k|                return unexpected(e);
 6189|  5.29k|            }
 6190|       |
 6191|    594|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.88k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    594|    {
 6113|    594|        const bool need_skipped_width =
 6114|    594|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 260, False: 334]
  |  Branch (6114:33): [True: 204, False: 130]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    594|        auto it = rng.begin();
 6118|    594|        std::ptrdiff_t prefix_width = 0;
 6119|    594|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 208, False: 386]
  ------------------
 6120|    208|            auto max_width_view = take_width(rng, specs.precision);
 6121|    208|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    208|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    208|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    208|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 208]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    208|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    208|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    208|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    208|            it = prefix_result.first.base();
 6124|    208|            prefix_width = prefix_result.second;
 6125|    208|        }
 6126|    386|        else {
 6127|    386|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    386|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 386]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    386|            std::tie(it, prefix_width) = prefix_result;
 6129|    386|        }
 6130|    594|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    594|        std::ptrdiff_t value_width = 0;
 6134|    594|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 208, False: 386]
  ------------------
 6135|    208|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 206]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    206|            const auto initial_width = specs.precision - prefix_width;
 6143|    206|            auto max_width_view =
 6144|    206|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    206|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    206|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    206|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    206|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    206|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 206, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    206|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    206|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    206|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    206|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    206|    }                                                  \
  |  |  |  | 3667|    206|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    386|        else {
 6150|    386|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 386, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    386|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    386|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    386|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    386|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    386|    }                                                  \
  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6181|  5.88k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.88k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.88k|            auto rd = make_reader<T, char_type>();
 6187|  5.88k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.29k, False: 594]
  |  |  ------------------
  ------------------
 6188|  5.29k|                return unexpected(e);
 6189|  5.29k|            }
 6190|       |
 6191|    594|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.88k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    594|    {
 6113|    594|        const bool need_skipped_width =
 6114|    594|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 260, False: 334]
  |  Branch (6114:33): [True: 204, False: 130]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    594|        auto it = rng.begin();
 6118|    594|        std::ptrdiff_t prefix_width = 0;
 6119|    594|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 208, False: 386]
  ------------------
 6120|    208|            auto max_width_view = take_width(rng, specs.precision);
 6121|    208|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    208|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    208|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    208|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 208]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    208|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    208|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    208|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    208|            it = prefix_result.first.base();
 6124|    208|            prefix_width = prefix_result.second;
 6125|    208|        }
 6126|    386|        else {
 6127|    386|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    386|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 386]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    386|            std::tie(it, prefix_width) = prefix_result;
 6129|    386|        }
 6130|    594|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    594|        std::ptrdiff_t value_width = 0;
 6134|    594|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 208, False: 386]
  ------------------
 6135|    208|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 206]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    206|            const auto initial_width = specs.precision - prefix_width;
 6143|    206|            auto max_width_view =
 6144|    206|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    206|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    206|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    206|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    206|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    206|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 206, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    206|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    206|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    206|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    206|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    206|    }                                                  \
  |  |  |  | 3667|    206|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    386|        else {
 6150|    386|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    386|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    386|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    386|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 386, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    386|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    386|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    386|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    386|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    386|    }                                                  \
  |  | 3667|    386|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    386|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6181|  5.82k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.82k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.82k|            auto rd = make_reader<T, char_type>();
 6187|  5.82k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.30k, False: 516]
  |  |  ------------------
  ------------------
 6188|  5.30k|                return unexpected(e);
 6189|  5.30k|            }
 6190|       |
 6191|    516|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.82k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5741|  5.82k|    {
 5742|  5.82k|        reader_error_handler eh{};
 5743|  5.82k|        detail::check_pointer_type_specs(specs, eh);
 5744|  5.82k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.30k, False: 516]
  |  |  ------------------
  ------------------
 5745|  5.30k|            return {scan_error::invalid_format_string, eh.m_msg};
 5746|  5.30k|        }
 5747|    516|        return {};
 5748|  5.82k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6112|    516|    {
 6113|    516|        const bool need_skipped_width =
 6114|    516|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 254, False: 262]
  |  Branch (6114:33): [True: 166, False: 96]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    516|        auto it = rng.begin();
 6118|    516|        std::ptrdiff_t prefix_width = 0;
 6119|    516|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 170, False: 346]
  ------------------
 6120|    170|            auto max_width_view = take_width(rng, specs.precision);
 6121|    170|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    170|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    170|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    170|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    170|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 170]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    170|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    170|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    170|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    170|            it = prefix_result.first.base();
 6124|    170|            prefix_width = prefix_result.second;
 6125|    170|        }
 6126|    346|        else {
 6127|    346|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    346|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 346]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    346|            std::tie(it, prefix_width) = prefix_result;
 6129|    346|        }
 6130|    516|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    516|        std::ptrdiff_t value_width = 0;
 6134|    516|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 170, False: 346]
  ------------------
 6135|    170|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 168]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    168|            const auto initial_width = specs.precision - prefix_width;
 6143|    168|            auto max_width_view =
 6144|    168|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    168|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 168, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    168|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    168|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    168|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    168|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    168|    }                                                  \
  |  |  |  | 3667|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    346|        else {
 6150|    346|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    346|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    346|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    346|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 346, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    346|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    346|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    346|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    346|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    346|    }                                                  \
  |  | 3667|    346|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    346|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5770|    168|    {
 5771|    168|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    168|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    168|        return read_default(range, value, loc);
 5773|    168|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5753|    168|    {
 5754|    168|        detail::format_specs specs{};
 5755|    168|        specs.type = detail::presentation_type::int_hex;
 5756|       |
 5757|    168|        std::uintptr_t intvalue{};
 5758|    168|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3668|    168|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    168|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    168|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 168, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    168|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    168|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    168|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    168|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    168|    }                                                  \
  |  |  |  | 3667|    168|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5759|      0|                                                                intvalue, loc));
 5760|      0|        value = reinterpret_cast<void*>(intvalue);
 5761|      0|        return result;
 5762|    168|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5770|    346|    {
 5771|    346|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    346|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5772|    346|        return read_default(range, value, loc);
 5773|    346|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6181|  5.88k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.88k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.88k|            auto rd = make_reader<T, char_type>();
 6187|  5.88k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.20k, False: 682]
  |  |  ------------------
  ------------------
 6188|  5.20k|                return unexpected(e);
 6189|  5.20k|            }
 6190|       |
 6191|    682|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.88k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  5.88k|    {
 3029|  5.88k|        reader_error_handler eh{};
 3030|  5.88k|        get_derived().check_specs_impl(specs, eh);
 3031|  5.88k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.20k, False: 682]
  |  |  ------------------
  ------------------
 3032|  5.20k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  5.20k|        }
 3034|    682|        return {};
 3035|  5.88k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3039|  5.88k|    {
 3040|  5.88k|        return static_cast<Derived&>(*this);
 3041|  5.88k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5485|  5.88k|    {
 5486|  5.88k|        detail::check_bool_type_specs(specs, eh);
 5487|  5.88k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    682|    {
 6113|    682|        const bool need_skipped_width =
 6114|    682|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 274, False: 408]
  |  Branch (6114:33): [True: 234, False: 174]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    682|        auto it = rng.begin();
 6118|    682|        std::ptrdiff_t prefix_width = 0;
 6119|    682|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 240, False: 442]
  ------------------
 6120|    240|            auto max_width_view = take_width(rng, specs.precision);
 6121|    240|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    240|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    240|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    240|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    240|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 240]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    240|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    240|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    240|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    240|            it = prefix_result.first.base();
 6124|    240|            prefix_width = prefix_result.second;
 6125|    240|        }
 6126|    442|        else {
 6127|    442|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 442]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    442|            std::tie(it, prefix_width) = prefix_result;
 6129|    442|        }
 6130|    682|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    682|        std::ptrdiff_t value_width = 0;
 6134|    682|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 240, False: 442]
  ------------------
 6135|    240|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 4, False: 236]
  ------------------
 6136|      4|                return unexpected_scan_error(
 6137|      4|                    scan_error::invalid_scanned_value,
 6138|      4|                    "Too many fill characters before value, "
 6139|      4|                    "precision exceeded before reading value");
 6140|      4|            }
 6141|       |
 6142|    236|            const auto initial_width = specs.precision - prefix_width;
 6143|    236|            auto max_width_view =
 6144|    236|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    236|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    236|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 236, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    236|    }                                                  \
  |  |  |  | 3667|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    442|        else {
 6150|    442|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 442, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    442|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    442|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    442|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    442|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    442|    }                                                  \
  |  | 3667|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5504|    236|    {
 5505|    236|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    236|#if !SCN_DISABLE_LOCALE
 5508|    236|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 26, False: 210]
  ------------------
 5509|     26|            return rd.read_localized(range, loc, value);
 5510|     26|        }
 5511|    210|#endif
 5512|       |
 5513|    210|        return rd.read_classic(range, value);
 5514|    236|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5517|    678|    {
 5518|    678|        SCN_GCC_COMPAT_PUSH
 5519|    678|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5520|       |
 5521|    678|        switch (specs.type) {
 5522|     84|            case detail::presentation_type::string:
  ------------------
  |  Branch (5522:13): [True: 84, False: 594]
  ------------------
 5523|     84|                return bool_reader_base::allow_text;
 5524|       |
 5525|     14|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5525:13): [True: 14, False: 664]
  ------------------
 5526|     22|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5526:13): [True: 8, False: 670]
  ------------------
 5527|     30|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5527:13): [True: 8, False: 670]
  ------------------
 5528|     42|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5528:13): [True: 12, False: 666]
  ------------------
 5529|     52|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5529:13): [True: 10, False: 668]
  ------------------
 5530|     64|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5530:13): [True: 12, False: 666]
  ------------------
 5531|     64|                return bool_reader_base::allow_numeric;
 5532|       |
 5533|    530|            default:
  ------------------
  |  Branch (5533:13): [True: 530, False: 148]
  ------------------
 5534|    530|                return bool_reader_base::allow_text |
 5535|    530|                       bool_reader_base::allow_numeric;
 5536|    678|        }
 5537|       |
 5538|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5539|    678|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5416|     26|    {
 5417|     26|        scan_error err{scan_error::invalid_scanned_value,
 5418|     26|                       "Failed to read boolean"};
 5419|       |
 5420|     26|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 20, False: 6]
  ------------------
 5421|     20|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 20]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     20|            else {
 5425|     20|                err = r.error();
 5426|     20|            }
 5427|     20|        }
 5428|       |
 5429|     26|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 16, False: 10]
  ------------------
 5430|     16|            auto stdloc = loc.get<std::locale>();
 5431|     16|            const auto& numpunct =
 5432|     16|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     16|            const auto truename = numpunct.truename();
 5434|     16|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     16|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 16]
  ------------------
 5437|     16|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     16|            else {
 5441|     16|                err = r.error();
 5442|     16|            }
 5443|     16|        }
 5444|       |
 5445|     26|        return unexpected(err);
 5446|     26|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5372|    206|    {
 5373|    206|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5373:18): [True: 0, False: 206]
  ------------------
 5374|      0|            value = false;
 5375|      0|            return *r;
 5376|      0|        }
 5377|    206|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5377:18): [True: 0, False: 206]
  ------------------
 5378|      0|            value = true;
 5379|      0|            return *r;
 5380|      0|        }
 5381|       |
 5382|    206|        return unexpected_scan_error(
 5383|    206|            scan_error::invalid_scanned_value,
 5384|    206|            "Failed to read numeric boolean value: No match");
 5385|    206|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2134|    412|{
 2135|    412|    auto it = read_code_unit(range);
 2136|    412|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 412]
  |  |  ------------------
  ------------------
 2137|      0|        return unexpected(make_eof_parse_error(it.error()));
 2138|      0|    }
 2139|       |
 2140|    412|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 412, False: 0]
  |  |  ------------------
  ------------------
 2141|    412|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|    412|        return unexpected(parse_error::error);
 2143|    412|    }
 2144|       |
 2145|      0|    return *it;
 2146|    412|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5456|     16|    {
 5457|     16|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     16|        const auto shorter = std::pair{
 5459|     16|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 16, False: 0]
  ------------------
 5460|     16|        const auto longer = std::pair{
 5461|     16|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 16]
  ------------------
 5462|       |
 5463|     16|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 16]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     16|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 16]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     16|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     16|                                     "read_textual: No match");
 5474|     16|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2167|     32|{
 2168|     32|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 10]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     10|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     10|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     10|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     10|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 2174|     10|        return unexpected(parse_error::error);
 2175|     10|    }
 2176|      0|    return it;
 2177|     10|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1844|    412|{
 1845|    412|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    412|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    412|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|    412|    else {
 1856|    412|        auto it = range.begin();
 1857|    412|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 0, False: 412]
  ------------------
 1858|      0|            return ranges::next(it, count);
 1859|      0|        }
 1860|       |
 1861|  2.08k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 1.74k, False: 342]
  ------------------
 1862|  1.74k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 70, False: 1.67k]
  ------------------
 1863|     70|                return unexpected(eof_error::eof);
 1864|     70|            }
 1865|  1.74k|        }
 1866|       |
 1867|    342|        return it;
 1868|    412|    }
 1869|    412|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    412|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|       |                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|       |        else {
 1106|       |            if (r.begin().stores_parent()) {
 1107|       |                return static_cast<size_t>(
 1108|       |                    r.begin().parent()->chars_available() -
 1109|       |                    r.begin().position());
 1110|       |            }
 1111|       |            return r.begin().contiguous_segment().size();
 1112|       |        }
 1113|       |    }
 1114|    412|    else {
 1115|    412|        return 0;
 1116|    412|    }
 1117|    412|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5343|    210|    {
 5344|    210|        scan_error err{scan_error::invalid_scanned_value,
 5345|    210|                       "Failed to read boolean"};
 5346|       |
 5347|    210|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5347:13): [True: 186, False: 24]
  ------------------
 5348|    186|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5348:22): [True: 0, False: 186]
  ------------------
 5349|      0|                return *r;
 5350|      0|            }
 5351|    186|            else {
 5352|    186|                err = r.error();
 5353|    186|            }
 5354|    186|        }
 5355|       |
 5356|    210|        if (m_options & allow_text) {
  ------------------
  |  Branch (5356:13): [True: 190, False: 20]
  ------------------
 5357|    190|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5357:22): [True: 0, False: 190]
  ------------------
 5358|      0|                return *r;
 5359|      0|            }
 5360|    190|            else {
 5361|    190|                err = r.error();
 5362|    190|            }
 5363|    190|        }
 5364|       |
 5365|    210|        return unexpected(err);
 5366|    210|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5390|    190|    {
 5391|    190|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5391:18): [True: 0, False: 190]
  ------------------
 5392|      0|            value = true;
 5393|      0|            return *r;
 5394|      0|        }
 5395|    190|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5395:18): [True: 0, False: 190]
  ------------------
 5396|      0|            value = false;
 5397|      0|            return *r;
 5398|      0|        }
 5399|       |
 5400|    190|        return unexpected_scan_error(
 5401|    190|            scan_error::invalid_scanned_value,
 5402|    190|            "Failed to read textual boolean value: No match");
 5403|    190|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2182|    380|{
 2183|    380|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|    380|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    380|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    380|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48, False: 332]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     48|    }                                                  \
  |  |  |  | 3667|    380|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    332|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2184|    332|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2185|    332|                    .transform_error(make_eof_parse_error));
 2186|       |
 2187|       |    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2188|       |        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2189|       |        if (SCN_UNLIKELY(sv.view() != str)) {
 2190|       |            return unexpected(parse_error::error);
 2191|       |        }
 2192|       |        return it;
 2193|       |    }
 2194|    332|    else {
 2195|    332|        auto range_it = range.begin();
 2196|    332|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2196:28): [True: 332, False: 0]
  ------------------
 2197|    332|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    332|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 0]
  |  |  ------------------
  ------------------
 2198|    332|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2199|    332|                return unexpected(parse_error::error);
 2200|    332|            }
 2201|    332|        }
 2202|      0|        return it;
 2203|    332|    }
 2204|    332|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5504|    442|    {
 5505|    442|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5506|       |
 5507|    442|#if !SCN_DISABLE_LOCALE
 5508|    442|        if (specs.localized) {
  ------------------
  |  Branch (5508:13): [True: 34, False: 408]
  ------------------
 5509|     34|            return rd.read_localized(range, loc, value);
 5510|     34|        }
 5511|    408|#endif
 5512|       |
 5513|    408|        return rd.read_classic(range, value);
 5514|    442|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5416|     34|    {
 5417|     34|        scan_error err{scan_error::invalid_scanned_value,
 5418|     34|                       "Failed to read boolean"};
 5419|       |
 5420|     34|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5420:13): [True: 28, False: 6]
  ------------------
 5421|     28|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5421:22): [True: 0, False: 28]
  ------------------
 5422|      0|                return *r;
 5423|      0|            }
 5424|     28|            else {
 5425|     28|                err = r.error();
 5426|     28|            }
 5427|     28|        }
 5428|       |
 5429|     34|        if (m_options & allow_text) {
  ------------------
  |  Branch (5429:13): [True: 20, False: 14]
  ------------------
 5430|     20|            auto stdloc = loc.get<std::locale>();
 5431|     20|            const auto& numpunct =
 5432|     20|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5433|     20|            const auto truename = numpunct.truename();
 5434|     20|            const auto falsename = numpunct.falsename();
 5435|       |
 5436|     20|            if (auto r =
  ------------------
  |  Branch (5436:22): [True: 0, False: 20]
  ------------------
 5437|     20|                    read_textual_custom(range, value, truename, falsename)) {
 5438|      0|                return *r;
 5439|      0|            }
 5440|     20|            else {
 5441|     20|                err = r.error();
 5442|     20|            }
 5443|     20|        }
 5444|       |
 5445|     34|        return unexpected(err);
 5446|     34|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5456|     20|    {
 5457|     20|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5458|     20|        const auto shorter = std::pair{
 5459|     20|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5459:13): [True: 20, False: 0]
  ------------------
 5460|     20|        const auto longer = std::pair{
 5461|     20|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5461:13): [True: 0, False: 20]
  ------------------
 5462|       |
 5463|     20|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5463:18): [True: 0, False: 20]
  ------------------
 5464|      0|            value = shorter.second;
 5465|      0|            return *r;
 5466|      0|        }
 5467|     20|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5467:18): [True: 0, False: 20]
  ------------------
 5468|      0|            value = longer.second;
 5469|      0|            return *r;
 5470|      0|        }
 5471|       |
 5472|     20|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5473|     20|                                     "read_textual: No match");
 5474|     20|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2167|     40|{
 2168|     40|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|     40|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     40|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     40|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      2|    }                                                  \
  |  |  |  | 3667|     40|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2169|     38|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2170|     38|                    .transform_error(make_eof_parse_error));
 2171|       |
 2172|     38|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2173|     38|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 2174|     38|        return unexpected(parse_error::error);
 2175|     38|    }
 2176|      0|    return it;
 2177|     38|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6181|  5.82k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.82k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.82k|            auto rd = make_reader<T, char_type>();
 6187|  5.82k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.27k, False: 548]
  |  |  ------------------
  ------------------
 6188|  5.27k|                return unexpected(e);
 6189|  5.27k|            }
 6190|       |
 6191|    548|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.82k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    548|    {
 6113|    548|        const bool need_skipped_width =
 6114|    548|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 256, False: 292]
  |  Branch (6114:33): [True: 184, False: 108]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    548|        auto it = rng.begin();
 6118|    548|        std::ptrdiff_t prefix_width = 0;
 6119|    548|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 188, False: 360]
  ------------------
 6120|    188|            auto max_width_view = take_width(rng, specs.precision);
 6121|    188|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    188|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    188|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    188|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    188|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 188]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    188|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    188|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    188|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    188|            it = prefix_result.first.base();
 6124|    188|            prefix_width = prefix_result.second;
 6125|    188|        }
 6126|    360|        else {
 6127|    360|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    360|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 360]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    360|            std::tie(it, prefix_width) = prefix_result;
 6129|    360|        }
 6130|    548|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    548|        std::ptrdiff_t value_width = 0;
 6134|    548|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 188, False: 360]
  ------------------
 6135|    188|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 2, False: 186]
  ------------------
 6136|      2|                return unexpected_scan_error(
 6137|      2|                    scan_error::invalid_scanned_value,
 6138|      2|                    "Too many fill characters before value, "
 6139|      2|                    "precision exceeded before reading value");
 6140|      2|            }
 6141|       |
 6142|    186|            const auto initial_width = specs.precision - prefix_width;
 6143|    186|            auto max_width_view =
 6144|    186|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    186|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 166]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    166|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    166|            it = w_it.base();
 6147|    166|            value_width = initial_width - w_it.count();
 6148|    166|        }
 6149|    360|        else {
 6150|    360|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 340]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|     20|    }                                                  \
  |  | 3667|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    340|                                             specs, value, loc));
 6152|       |
 6153|    340|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 250, False: 90]
  ------------------
 6154|    250|                value_width = calculate_text_width(
 6155|    250|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    250|                        .view());
 6157|    250|            }
 6158|    340|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    506|        std::ptrdiff_t postfix_width = 0;
 6162|    506|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 506, False: 0]
  ------------------
 6163|    506|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    506|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    506|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    506|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    506|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 506]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    506|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    506|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    506|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    506|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    506|                                 value_width));
 6167|    506|            std::tie(it, postfix_width) = postfix_result;
 6168|    506|        }
 6169|       |
 6170|    506|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    506|                                                 value_width, postfix_width);
 6172|    506|            !e) {
  ------------------
  |  Branch (6172:13): [True: 250, False: 256]
  ------------------
 6173|    250|            return unexpected(e);
 6174|    250|        }
 6175|       |
 6176|    256|        return it;
 6177|    506|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6181|  5.88k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.88k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.88k|            auto rd = make_reader<T, char_type>();
 6187|  5.88k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.32k, False: 568]
  |  |  ------------------
  ------------------
 6188|  5.32k|                return unexpected(e);
 6189|  5.32k|            }
 6190|       |
 6191|    568|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.88k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|    568|    {
 6113|    568|        const bool need_skipped_width =
 6114|    568|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 264, False: 304]
  |  Branch (6114:33): [True: 188, False: 116]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|    568|        auto it = rng.begin();
 6118|    568|        std::ptrdiff_t prefix_width = 0;
 6119|    568|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 194, False: 374]
  ------------------
 6120|    194|            auto max_width_view = take_width(rng, specs.precision);
 6121|    194|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    194|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    194|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    194|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    194|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 194]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    194|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    194|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    194|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    194|            it = prefix_result.first.base();
 6124|    194|            prefix_width = prefix_result.second;
 6125|    194|        }
 6126|    374|        else {
 6127|    374|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|    374|            std::tie(it, prefix_width) = prefix_result;
 6129|    374|        }
 6130|    568|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|    568|        std::ptrdiff_t value_width = 0;
 6134|    568|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 194, False: 374]
  ------------------
 6135|    194|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 4, False: 190]
  ------------------
 6136|      4|                return unexpected_scan_error(
 6137|      4|                    scan_error::invalid_scanned_value,
 6138|      4|                    "Too many fill characters before value, "
 6139|      4|                    "precision exceeded before reading value");
 6140|      4|            }
 6141|       |
 6142|    190|            const auto initial_width = specs.precision - prefix_width;
 6143|    190|            auto max_width_view =
 6144|    190|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    190|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    190|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    190|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    190|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    190|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 190, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    190|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    190|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    190|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    190|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    190|    }                                                  \
  |  |  |  | 3667|    190|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|    374|        else {
 6150|    374|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 374, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|    374|    }                                                  \
  |  | 3667|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|      0|                                             specs, value, loc));
 6152|       |
 6153|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 0]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|      0|        }
 6159|       |
 6160|       |        // Read postfix
 6161|      0|        std::ptrdiff_t postfix_width = 0;
 6162|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 0, False: 0]
  ------------------
 6163|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6166|      0|                                 value_width));
 6167|      0|            std::tie(it, postfix_width) = postfix_result;
 6168|      0|        }
 6169|       |
 6170|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|      0|                                                 value_width, postfix_width);
 6172|      0|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 0]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|      0|        return it;
 6177|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  5.82k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.82k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.82k|            auto rd = make_reader<T, char_type>();
 6187|  5.82k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 5.74k]
  |  |  ------------------
  ------------------
 6188|     82|                return unexpected(e);
 6189|     82|            }
 6190|       |
 6191|  5.74k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.82k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  5.74k|    {
 6113|  5.74k|        const bool need_skipped_width =
 6114|  5.74k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 2.60k, False: 3.13k]
  |  Branch (6114:33): [True: 320, False: 2.81k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  5.74k|        auto it = rng.begin();
 6118|  5.74k|        std::ptrdiff_t prefix_width = 0;
 6119|  5.74k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 328, False: 5.41k]
  ------------------
 6120|    328|            auto max_width_view = take_width(rng, specs.precision);
 6121|    328|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    328|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    328|            it = prefix_result.first.base();
 6124|    328|            prefix_width = prefix_result.second;
 6125|    328|        }
 6126|  5.41k|        else {
 6127|  5.41k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  5.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  5.41k|            std::tie(it, prefix_width) = prefix_result;
 6129|  5.41k|        }
 6130|  5.74k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  5.74k|        std::ptrdiff_t value_width = 0;
 6134|  5.74k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 328, False: 5.41k]
  ------------------
 6135|    328|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 322]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    322|            const auto initial_width = specs.precision - prefix_width;
 6143|    322|            auto max_width_view =
 6144|    322|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    322|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 130, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    130|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    130|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    130|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    130|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    130|    }                                                  \
  |  |  |  | 3667|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    192|            it = w_it.base();
 6147|    192|            value_width = initial_width - w_it.count();
 6148|    192|        }
 6149|  5.41k|        else {
 6150|  5.41k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  5.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  5.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.23k, False: 1.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  4.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  4.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  4.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  4.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  4.23k|    }                                                  \
  |  | 3667|  5.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  5.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.18k|                                             specs, value, loc));
 6152|       |
 6153|  1.18k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 694, False: 490]
  ------------------
 6154|    694|                value_width = calculate_text_width(
 6155|    694|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    694|                        .view());
 6157|    694|            }
 6158|  1.18k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.37k|        std::ptrdiff_t postfix_width = 0;
 6162|  1.37k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 1.04k, False: 336]
  ------------------
 6163|  1.04k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.04k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  1.04k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  1.04k|                                 value_width));
 6167|  1.04k|            std::tie(it, postfix_width) = postfix_result;
 6168|  1.04k|        }
 6169|       |
 6170|  1.37k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.37k|                                                 value_width, postfix_width);
 6172|  1.37k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 450, False: 926]
  ------------------
 6173|    450|            return unexpected(e);
 6174|    450|        }
 6175|       |
 6176|    926|        return it;
 6177|  1.37k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  5.82k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.82k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.82k|            auto rd = make_reader<T, char_type>();
 6187|  5.82k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 5.74k]
  |  |  ------------------
  ------------------
 6188|     82|                return unexpected(e);
 6189|     82|            }
 6190|       |
 6191|  5.74k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.82k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  5.74k|    {
 6113|  5.74k|        const bool need_skipped_width =
 6114|  5.74k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 2.60k, False: 3.13k]
  |  Branch (6114:33): [True: 320, False: 2.81k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  5.74k|        auto it = rng.begin();
 6118|  5.74k|        std::ptrdiff_t prefix_width = 0;
 6119|  5.74k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 328, False: 5.41k]
  ------------------
 6120|    328|            auto max_width_view = take_width(rng, specs.precision);
 6121|    328|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    328|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    328|            it = prefix_result.first.base();
 6124|    328|            prefix_width = prefix_result.second;
 6125|    328|        }
 6126|  5.41k|        else {
 6127|  5.41k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  5.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  5.41k|            std::tie(it, prefix_width) = prefix_result;
 6129|  5.41k|        }
 6130|  5.74k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  5.74k|        std::ptrdiff_t value_width = 0;
 6134|  5.74k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 328, False: 5.41k]
  ------------------
 6135|    328|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 322]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    322|            const auto initial_width = specs.precision - prefix_width;
 6143|    322|            auto max_width_view =
 6144|    322|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    322|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 130, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    130|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    130|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    130|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    130|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    130|    }                                                  \
  |  |  |  | 3667|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    192|            it = w_it.base();
 6147|    192|            value_width = initial_width - w_it.count();
 6148|    192|        }
 6149|  5.41k|        else {
 6150|  5.41k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  5.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  5.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.23k, False: 1.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  4.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  4.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  4.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  4.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  4.23k|    }                                                  \
  |  | 3667|  5.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  5.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.18k|                                             specs, value, loc));
 6152|       |
 6153|  1.18k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 694, False: 490]
  ------------------
 6154|    694|                value_width = calculate_text_width(
 6155|    694|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    694|                        .view());
 6157|    694|            }
 6158|  1.18k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.37k|        std::ptrdiff_t postfix_width = 0;
 6162|  1.37k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 1.04k, False: 336]
  ------------------
 6163|  1.04k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.04k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  1.04k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  1.04k|                                 value_width));
 6167|  1.04k|            std::tie(it, postfix_width) = postfix_result;
 6168|  1.04k|        }
 6169|       |
 6170|  1.37k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.37k|                                                 value_width, postfix_width);
 6172|  1.37k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 450, False: 926]
  ------------------
 6173|    450|            return unexpected(e);
 6174|    450|        }
 6175|       |
 6176|    926|        return it;
 6177|  1.37k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  5.82k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  5.82k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  5.82k|            auto rd = make_reader<T, char_type>();
 6187|  5.82k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 5.74k]
  |  |  ------------------
  ------------------
 6188|     82|                return unexpected(e);
 6189|     82|            }
 6190|       |
 6191|  5.74k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  5.82k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  5.74k|    {
 6113|  5.74k|        const bool need_skipped_width =
 6114|  5.74k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 2.60k, False: 3.13k]
  |  Branch (6114:33): [True: 320, False: 2.81k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  5.74k|        auto it = rng.begin();
 6118|  5.74k|        std::ptrdiff_t prefix_width = 0;
 6119|  5.74k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 328, False: 5.41k]
  ------------------
 6120|    328|            auto max_width_view = take_width(rng, specs.precision);
 6121|    328|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|    328|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|    328|            it = prefix_result.first.base();
 6124|    328|            prefix_width = prefix_result.second;
 6125|    328|        }
 6126|  5.41k|        else {
 6127|  5.41k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  5.41k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 5.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  5.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  5.41k|            std::tie(it, prefix_width) = prefix_result;
 6129|  5.41k|        }
 6130|  5.74k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  5.74k|        std::ptrdiff_t value_width = 0;
 6134|  5.74k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 328, False: 5.41k]
  ------------------
 6135|    328|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 6, False: 322]
  ------------------
 6136|      6|                return unexpected_scan_error(
 6137|      6|                    scan_error::invalid_scanned_value,
 6138|      6|                    "Too many fill characters before value, "
 6139|      6|                    "precision exceeded before reading value");
 6140|      6|            }
 6141|       |
 6142|    322|            const auto initial_width = specs.precision - prefix_width;
 6143|    322|            auto max_width_view =
 6144|    322|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|    322|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 130, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    130|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    130|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    130|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    130|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    130|    }                                                  \
  |  |  |  | 3667|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|    192|            it = w_it.base();
 6147|    192|            value_width = initial_width - w_it.count();
 6148|    192|        }
 6149|  5.41k|        else {
 6150|  5.41k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  5.41k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  5.41k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.23k, False: 1.18k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  4.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  4.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  4.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  4.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  4.23k|    }                                                  \
  |  | 3667|  5.41k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  5.41k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.18k|                                             specs, value, loc));
 6152|       |
 6153|  1.18k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 694, False: 490]
  ------------------
 6154|    694|                value_width = calculate_text_width(
 6155|    694|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|    694|                        .view());
 6157|    694|            }
 6158|  1.18k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.37k|        std::ptrdiff_t postfix_width = 0;
 6162|  1.37k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 1.04k, False: 336]
  ------------------
 6163|  1.04k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.04k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  1.04k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  1.04k|                                 value_width));
 6167|  1.04k|            std::tie(it, postfix_width) = postfix_result;
 6168|  1.04k|        }
 6169|       |
 6170|  1.37k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.37k|                                                 value_width, postfix_width);
 6172|  1.37k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 450, False: 926]
  ------------------
 6173|    450|            return unexpected(e);
 6174|    450|        }
 6175|       |
 6176|    926|        return it;
 6177|  1.37k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    660|    {
 3481|    660|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    660|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|    660|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 660]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.32k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.32k|                parse_integer_digits_without_thsep(
 3500|  1.32k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.32k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.32k|        auto buf = make_contiguous_buffer(
 3504|  1.32k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.32k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 660, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    660|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    660|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    660|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    660|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    660|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.32k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|    660|    {
 3481|    660|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|    660|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|    660|        if constexpr (!std::is_signed_v<T>) {
 3485|    660|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 0, False: 660]
  ------------------
 3486|      0|                return unexpected_scan_error(
 3487|      0|                    scan_error::invalid_scanned_value,
 3488|      0|                    "Unexpected '-' sign when parsing an "
 3489|      0|                    "unsigned value");
 3490|      0|            }
 3491|    660|        }
 3492|       |
 3493|    660|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 660]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  1.32k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 660]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    660|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  1.32k|                parse_integer_digits_without_thsep(
 3500|  1.32k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  1.32k|                    prefix_result.parsed_base));
 3502|       |
 3503|  1.32k|        auto buf = make_contiguous_buffer(
 3504|  1.32k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  1.32k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    660|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    660|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    660|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    660|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 660, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    660|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    660|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    660|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    660|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    660|    }                                                  \
  |  |  |  | 3667|    660|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|      0|                                    prefix_result.parsed_base));
 3508|       |
 3509|      0|        return ranges::next(prefix_result.iterator,
 3510|      0|                            ranges::distance(buf.view().begin(), result_it));
 3511|  1.32k|    }

LLVMFuzzerTestOneInput:
   68|  11.9k|{
   69|  11.9k|    scn::fuzz::run(data, size);
   70|  11.9k|    return 0;
   71|  11.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  11.9k|{
   52|  11.9k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 11.9k]
  |  Branch (52:35): [True: 0, False: 11.9k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  11.9k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  11.9k|    run_for_source(sv);
   59|  11.9k|    run_for_source(wsv_reinterpret);
   60|  11.9k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 11.9k, False: 0]
  ------------------
   61|  11.9k|        run_for_source(wsv_transcode);
   62|  11.9k|    }
   63|  11.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  11.9k|{
   37|  11.9k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  11.9k|    run_for_type<char_type>(source);
   40|  11.9k|    run_for_type<int>(source);
   41|  11.9k|    run_for_type<unsigned>(source);
   42|  11.9k|    run_for_type<double>(source);
   43|  11.9k|    run_for_type<bool>(source);
   44|  11.9k|    run_for_type<void*>(source);
   45|  11.9k|    run_for_type<std::string>(source);
   46|  11.9k|    run_for_type<std::wstring>(source);
   47|  11.9k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  11.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  11.9k|{
   25|  11.9k|    {
   26|  11.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.9k|    }
   28|  11.9k|    {
   29|  11.9k|        auto _ =
   30|  11.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.9k|    }
   32|  11.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  11.9k|{
   25|  11.9k|    {
   26|  11.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.9k|    }
   28|  11.9k|    {
   29|  11.9k|        auto _ =
   30|  11.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.9k|    }
   32|  11.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  11.9k|{
   25|  11.9k|    {
   26|  11.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.9k|    }
   28|  11.9k|    {
   29|  11.9k|        auto _ =
   30|  11.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.9k|    }
   32|  11.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  11.9k|{
   25|  11.9k|    {
   26|  11.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.9k|    }
   28|  11.9k|    {
   29|  11.9k|        auto _ =
   30|  11.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.9k|    }
   32|  11.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  11.9k|{
   25|  11.9k|    {
   26|  11.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.9k|    }
   28|  11.9k|    {
   29|  11.9k|        auto _ =
   30|  11.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.9k|    }
   32|  11.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  11.9k|{
   25|  11.9k|    {
   26|  11.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.9k|    }
   28|  11.9k|    {
   29|  11.9k|        auto _ =
   30|  11.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.9k|    }
   32|  11.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  11.9k|{
   25|  11.9k|    {
   26|  11.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.9k|    }
   28|  11.9k|    {
   29|  11.9k|        auto _ =
   30|  11.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.9k|    }
   32|  11.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  11.9k|{
   25|  11.9k|    {
   26|  11.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.9k|    }
   28|  11.9k|    {
   29|  11.9k|        auto _ =
   30|  11.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.9k|    }
   32|  11.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  11.9k|{
   25|  11.9k|    {
   26|  11.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.9k|    }
   28|  11.9k|    {
   29|  11.9k|        auto _ =
   30|  11.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.9k|    }
   32|  11.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  23.9k|{
   37|  23.9k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  23.9k|    run_for_type<char_type>(source);
   40|  23.9k|    run_for_type<int>(source);
   41|  23.9k|    run_for_type<unsigned>(source);
   42|  23.9k|    run_for_type<double>(source);
   43|  23.9k|    run_for_type<bool>(source);
   44|  23.9k|    run_for_type<void*>(source);
   45|  23.9k|    run_for_type<std::string>(source);
   46|  23.9k|    run_for_type<std::wstring>(source);
   47|  23.9k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  23.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  23.9k|{
   25|  23.9k|    {
   26|  23.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.9k|    }
   28|  23.9k|    {
   29|  23.9k|        auto _ =
   30|  23.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.9k|    }
   32|  23.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  23.9k|{
   25|  23.9k|    {
   26|  23.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.9k|    }
   28|  23.9k|    {
   29|  23.9k|        auto _ =
   30|  23.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.9k|    }
   32|  23.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  23.9k|{
   25|  23.9k|    {
   26|  23.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.9k|    }
   28|  23.9k|    {
   29|  23.9k|        auto _ =
   30|  23.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.9k|    }
   32|  23.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  23.9k|{
   25|  23.9k|    {
   26|  23.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.9k|    }
   28|  23.9k|    {
   29|  23.9k|        auto _ =
   30|  23.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.9k|    }
   32|  23.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  23.9k|{
   25|  23.9k|    {
   26|  23.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.9k|    }
   28|  23.9k|    {
   29|  23.9k|        auto _ =
   30|  23.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.9k|    }
   32|  23.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  23.9k|{
   25|  23.9k|    {
   26|  23.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.9k|    }
   28|  23.9k|    {
   29|  23.9k|        auto _ =
   30|  23.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.9k|    }
   32|  23.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  23.9k|{
   25|  23.9k|    {
   26|  23.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.9k|    }
   28|  23.9k|    {
   29|  23.9k|        auto _ =
   30|  23.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.9k|    }
   32|  23.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  23.9k|{
   25|  23.9k|    {
   26|  23.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.9k|    }
   28|  23.9k|    {
   29|  23.9k|        auto _ =
   30|  23.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.9k|    }
   32|  23.9k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  23.9k|{
   25|  23.9k|    {
   26|  23.9k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.9k|    }
   28|  23.9k|    {
   29|  23.9k|        auto _ =
   30|  23.9k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.9k|    }
   32|  23.9k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  11.9k|{
   52|  11.9k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  11.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  11.9k|    string_buffer.resize(size);
   56|  11.9k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  11.9k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  11.9k|    const auto wsv_reinterpret_size =
   61|  11.9k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 95, False: 11.8k]
  ------------------
   62|  11.9k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  11.9k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  11.9k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  11.9k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  11.9k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  11.9k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  11.9k|}

