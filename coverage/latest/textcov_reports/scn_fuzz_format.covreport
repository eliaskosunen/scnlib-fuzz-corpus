_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3777|  5.71M|{
 3778|  5.71M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|  5.71M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|  5.71M|    }
 3781|  5.71M|    else if constexpr (sizeof(U) == 2) {
 3782|  5.71M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|  5.71M|    }
 3784|  5.71M|    else {
 3785|       |        // utf-32
 3786|  5.71M|        static_assert(sizeof(U) == 4);
 3787|  5.71M|        SCN_UNUSED(ch);
 3788|  5.71M|        return 1;
 3789|  5.71M|    }
 3790|  5.71M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3741|  5.71M|{
 3742|  5.71M|    static_assert(sizeof(U8) == 1);
 3743|       |
 3744|  5.71M|    SCN_GCC_COMPAT_PUSH
 3745|  5.71M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3746|  5.71M|    constexpr char lengths[] =
 3747|  5.71M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3748|  5.71M|        "\1\1\1\1\1\1\1\1"
 3749|  5.71M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3750|       |                            // byte
 3751|  5.71M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3752|  5.71M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3753|  5.71M|        "\4";               // highest bits 11110 -> 4-byte cp
 3754|  5.71M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3755|  5.71M|    SCN_GCC_COMPAT_POP
 3756|  5.71M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|  5.37M|{
 3984|  5.37M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|  5.37M|        return decode_utf8_code_point_exhaustive(input);
 3986|  5.37M|    }
 3987|  5.37M|    else if constexpr (sizeof(CharT) == 2) {
 3988|  5.37M|        return decode_utf16_code_point_exhaustive(input);
 3989|  5.37M|    }
 3990|  5.37M|    else {
 3991|  5.37M|        SCN_EXPECT(input.size() == 1);
 3992|  5.37M|        auto cp = static_cast<char32_t>(input.front());
 3993|  5.37M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 3994|  5.37M|            return invalid_code_point;
 3995|  5.37M|        }
 3996|  5.37M|        return cp;
 3997|  5.37M|    }
 3998|  5.37M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3796|  5.37M|{
 3797|  5.37M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3798|       |
 3799|  5.37M|    const auto is_trailing_code_unit = [](char ch) {
 3800|  5.37M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|  5.37M|    };
 3802|       |
 3803|  5.37M|    if (input.size() == 1) {
  ------------------
  |  Branch (3803:9): [True: 4.88M, False: 487k]
  ------------------
 3804|  4.88M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3804:13): [True: 6, False: 4.88M]
  ------------------
 3805|      6|            SCN_UNLIKELY_ATTR
 3806|      6|            return invalid_code_point;
 3807|      6|        }
 3808|  4.88M|        return static_cast<char32_t>(input[0]);
 3809|  4.88M|    }
 3810|       |
 3811|   487k|    if (input.size() == 2) {
  ------------------
  |  Branch (3811:9): [True: 442k, False: 45.0k]
  ------------------
 3812|   442k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3812:13): [True: 0, False: 442k]
  ------------------
 3813|      0|            SCN_UNLIKELY_ATTR
 3814|      0|            return invalid_code_point;
 3815|      0|        }
 3816|   442k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3816:13): [True: 4.08k, False: 438k]
  ------------------
 3817|  4.08k|            SCN_UNLIKELY_ATTR
 3818|  4.08k|            return invalid_code_point;
 3819|  4.08k|        }
 3820|       |
 3821|   438k|        char32_t cp{};
 3822|   438k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3823|   438k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3824|   438k|        return cp;
 3825|   442k|    }
 3826|       |
 3827|  45.0k|    if (input.size() == 3) {
  ------------------
  |  Branch (3827:9): [True: 28.3k, False: 16.7k]
  ------------------
 3828|  28.3k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3828:13): [True: 0, False: 28.3k]
  ------------------
 3829|      0|            SCN_UNLIKELY_ATTR
 3830|      0|            return invalid_code_point;
 3831|      0|        }
 3832|  28.3k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3832:13): [True: 2.76k, False: 25.5k]
  ------------------
 3833|  28.3k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3833:13): [True: 697, False: 24.8k]
  ------------------
 3834|  3.46k|            SCN_UNLIKELY_ATTR
 3835|  3.46k|            return invalid_code_point;
 3836|  3.46k|        }
 3837|       |
 3838|  24.8k|        char32_t cp{};
 3839|  24.8k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3840|  24.8k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3841|  24.8k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3842|  24.8k|        return cp;
 3843|  28.3k|    }
 3844|       |
 3845|  16.7k|    if (input.size() == 4) {
  ------------------
  |  Branch (3845:9): [True: 16.7k, False: 0]
  ------------------
 3846|  16.7k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 16.7k]
  ------------------
 3847|      0|            SCN_UNLIKELY_ATTR
 3848|      0|            return invalid_code_point;
 3849|      0|        }
 3850|  16.7k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3850:13): [True: 1.59k, False: 15.1k]
  ------------------
 3851|  1.59k|            SCN_UNLIKELY_ATTR
 3852|  1.59k|            return invalid_code_point;
 3853|  1.59k|        }
 3854|  15.1k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3854:13): [True: 333, False: 14.7k]
  ------------------
 3855|  15.1k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3855:13): [True: 348, False: 14.4k]
  ------------------
 3856|  15.1k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3856:13): [True: 180, False: 14.2k]
  ------------------
 3857|    861|            SCN_UNLIKELY_ATTR
 3858|    861|            return invalid_code_point;
 3859|    861|        }
 3860|       |
 3861|  14.2k|        char32_t cp{};
 3862|  14.2k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3863|  14.2k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3864|  14.2k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3865|  14.2k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3866|  14.2k|        return cp;
 3867|  15.1k|    }
 3868|       |
 3869|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3870|       |    // gcc 7 thinks we'll get here, even when we won't
 3871|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3872|      0|#endif
 3873|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3874|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3799|   540k|    const auto is_trailing_code_unit = [](char ch) {
 3800|   540k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|   540k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|  2.60M|{
 3670|  2.60M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|  2.60M|                                          decltype(first), decltype(last)> &&
 3672|  2.60M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|  2.60M|        return {first, last};
 3674|  2.60M|    }
 3675|  2.60M|    else {
 3676|  2.60M|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|  2.60M|                                       to_address(first), to_address(last)))};
 3678|  2.60M|    }
 3679|  2.60M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  7.86M|{
  322|  7.86M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  7.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  7.86M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  8.01M|{
  302|  8.01M|    return p;
  303|  8.01M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|  1.53M|{
 3701|  1.53M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  1.53M|                      typename std::basic_string_view<CharT>::iterator,
 3703|  1.53M|                      decltype(it)> &&
 3704|  1.53M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|  1.53M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.53M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|  1.53M|        return it;
 3707|  1.53M|    }
 3708|  1.53M|    else {
 3709|  1.53M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|  1.53M|    }
 3711|  1.53M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.52k|{
 8828|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.52k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.52k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5356|  9.04k|{
 5357|  9.04k|    detail::check_scan_arg_types<Args...>();
 5358|  9.04k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  9.04k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5095|  9.04k|{
 5096|  9.04k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  9.04k|                  "Scan argument types must be default constructible");
 5098|  9.04k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  9.04k|                  "Scan argument types must be Destructible");
 5100|  9.04k|    static_assert(
 5101|  9.04k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  9.04k|        "Scan argument types must not be references");
 5103|  9.04k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5309|  9.04k|    {
 5310|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  9.04k|    {
 5321|  9.04k|        return {detail::make_arg<
 5322|  9.04k|            kind, Context,
 5323|  9.04k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  9.04k|                                 typename Context::char_type>::value>(args)...};
 5325|  9.04k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5130|  9.04k|{
 5131|  9.04k|    return make_value<Context>(value).ref_value;
 5132|  9.04k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5080|  9.04k|{
 5081|  9.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  9.04k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  9.04k|                                  needs_context_tag>) {
 5085|  9.04k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  9.04k|    }
 5087|  9.04k|    else {
 5088|  9.04k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  9.04k|            value, context_tag<Context>{}));
 5090|  9.04k|    }
 5091|  9.04k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4948|  9.04k|    {
 4949|  9.04k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4949:23): [Folded - Ignored]
  |  Branch (4949:23): [Folded - Ignored]
  ------------------
 4950|  9.04k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4950:23): [Folded - Ignored]
  ------------------
 4951|  9.04k|            return val;
 4952|  9.04k|        }
 4953|  9.04k|        else if constexpr (is_type_disabled<char_type>) {
 4954|  9.04k|            return unscannable_disabled{val};
 4955|  9.04k|        }
 4956|  9.04k|        else {
 4957|  9.04k|            SCN_UNUSED(val);
 4958|  9.04k|            return unscannable_char{};
 4959|  9.04k|        }
 4960|  9.04k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5049|  9.04k|{
 5050|  9.04k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  9.04k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  9.04k|    constexpr bool scannable_char =
 5054|  9.04k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  9.04k|    static_assert(scannable_char,
 5056|  9.04k|                  "Cannot scan an argument of an unsupported character "
 5057|  9.04k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  9.04k|    constexpr bool scannable_const =
 5060|  9.04k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  9.04k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  9.04k|    constexpr bool scannable_disabled =
 5064|  9.04k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  9.04k|    static_assert(scannable_disabled,
 5066|  9.04k|                  "Cannot scan an argument that has been disabled by "
 5067|  9.04k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  9.04k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  9.04k|    static_assert(
 5071|  9.04k|        scannable,
 5072|  9.04k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  9.04k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  9.04k|    return arg_value{arg};
 5076|  9.04k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4862|  9.04k|    {
 4863|  9.04k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|  40.6k|{
 8615|  40.6k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|  40.6k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8551|  40.6k|{
 8552|  40.6k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  40.6k|    auto result = vscan_impl(buffer, format, args);
 8555|  40.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  40.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.1k, False: 1.50k]
  |  |  ------------------
  ------------------
 8556|  39.1k|        return unexpected(result.error());
 8557|  39.1k|    }
 8558|  1.50k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  40.6k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4680|  81.3k|{
 4681|  81.3k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  81.3k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  81.3k|                  "\n"
 4685|  81.3k|                  "Unsupported range type given as input to a scanning "
 4686|  81.3k|                  "function.\n"
 4687|  81.3k|                  "A range needs to have a character type (value type) "
 4688|  81.3k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  81.3k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  81.3k|                  "to be included.\n"
 4691|  81.3k|                  "See the scnlib documentation for more details.");
 4692|  81.3k|    static_assert(
 4693|  81.3k|        !std::is_same_v<T, custom_char_traits>,
 4694|  81.3k|        "\n"
 4695|  81.3k|        "Unsupported range type given as input to a scanning "
 4696|  81.3k|        "function.\n"
 4697|  81.3k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  81.3k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  81.3k|        "not supported.");
 4700|  81.3k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  81.3k|                  "\n"
 4702|  81.3k|                  "Unsupported range type given as input to a scanning "
 4703|  81.3k|                  "function.\n"
 4704|  81.3k|                  "file_marker_found cannot be used as an "
 4705|  81.3k|                  "source range type to scn::scan.\n"
 4706|  81.3k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  81.3k|                  "and do not provide an explicit source range, "
 4708|  81.3k|                  "or use scn::scan with a FILE* directly.");
 4709|  81.3k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  81.3k|                  "\n"
 4711|  81.3k|                  "Unsupported range type given as input to a scanning "
 4712|  81.3k|                  "function.\n"
 4713|  81.3k|                  "In order to be scannable, a range needs to satisfy "
 4714|  81.3k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  81.3k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  81.3k|                  "\n"
 4717|  81.3k|                  "Unsupported range type given as input to a scanning "
 4718|  81.3k|                  "function.\n"
 4719|  81.3k|                  "A range needs to model forward_range and have a valid "
 4720|  81.3k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  81.3k|                  "Examples of scannable ranges are std::string, "
 4722|  81.3k|                  "std::string_view, "
 4723|  81.3k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  81.3k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  81.3k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  81.3k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4572|  81.3k|{
 4573|  81.3k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4573:19): [Folded - Ignored]
  ------------------
 4574|  81.3k|        return r;
 4575|       |        // return make_string_scan_buffer(r);
 4576|  81.3k|    }
 4577|  81.3k|    else {
 4578|  81.3k|        return invalid_char_type{};
 4579|  81.3k|    }
 4580|  81.3k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1568|   247k|    {
 1569|   247k|        return has_value();
 1570|   247k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|   494k|    {
  481|   494k|        return m_has_value;
  482|   494k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1574|   244k|    {
 1575|   244k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   244k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   244k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   244k|        return this->get_unexpected().error();
 1577|   244k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   244k|    {
  464|   244k|        return m_unexpected;
  465|   244k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  1.45M|    {
  357|  1.45M|        return m_unexpected;
  358|  1.45M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|   820k|    {
  343|   820k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   820k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   820k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  78.3k|    {
 1447|  78.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  78.3k|    {
  443|  78.3k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|   847k|    {
  352|   847k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   847k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   847k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  81.3k|    {
 1148|  81.3k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5883|  3.00k|{
 5884|  3.00k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  3.00k|                      ranges::iterator_t<SourceRange>>) {
 5886|  3.00k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  3.00k|    }
 5888|  3.00k|    else {
 5889|  3.00k|        auto it = ranges::begin(source);
 5890|  3.00k|        while (n > 0) {
 5891|  3.00k|            --n;
 5892|  3.00k|            ++it;
 5893|  3.00k|        }
 5894|  3.00k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  3.00k|    }
 5896|  3.00k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  3.00k|    {
 2695|  3.00k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  3.00k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  3.00k|    {
 2676|  3.00k|        return decay_copy(t.begin());
 2677|  3.00k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1919|   198k|{
 1920|   198k|    return SCN_FWD(t);
  ------------------
  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|   198k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5870|  3.00k|{
 5871|  3.00k|    return ranges::end(source);
 5872|  3.00k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  3.00k|    {
 2752|  3.00k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  3.00k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  3.00k|    {
 2734|  3.00k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  3.00k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3286|   976k|    {
 3287|   976k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1623|  3.01k|    {
 1624|  3.01k|        return value();
 1625|  3.01k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1597|  3.01k|    {
 1598|  3.01k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.01k|        return this->get_value();
 1600|  3.01k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  3.01k|    {
  447|  3.01k|        return m_value;
  448|  3.01k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  3.00k|    {
 1401|  3.00k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  3.00k|    {
  433|  3.00k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7935|  9.04k|    {
 7936|  9.04k|        return m_str;
 7937|  9.04k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  9.04k|    {
 5387|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5339|  9.04k|    {
 5340|  9.04k|        return m_argptrs;
 5341|  9.04k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5438|  81.3k|    {
 5439|  81.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  9.04k|{
 8781|  9.04k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.86k, False: 180]
  |  |  ------------------
  ------------------
 8782|  8.86k|        return unexpected(result.error());
 8783|  8.86k|    }
 8784|    180|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    180|    static_cast<    \
  |  |  929|    180|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    180|    static_cast<    \
  |  |  929|    180|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  9.04k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1568|  81.3k|    {
 1569|  81.3k|        return has_value();
 1570|  81.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   162k|    {
  481|   162k|        return m_has_value;
  482|   162k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1574|  78.3k|    {
 1575|  78.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  78.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  78.3k|        return this->get_unexpected().error();
 1577|  78.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  78.3k|    {
  464|  78.3k|        return m_unexpected;
  465|  78.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  8.86k|    {
 1447|  8.86k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.86k|    {
  443|  8.86k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  9.04k|    {
 1148|  9.04k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|  3.00k|    {
 1624|  3.00k|        return value();
 1625|  3.00k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  3.00k|    {
 1598|  3.00k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.00k|        return this->get_value();
 1600|  3.00k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  3.00k|    {
  447|  3.00k|        return m_value;
  448|  3.00k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5790|    180|    {
 5791|    180|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5641|  3.00k|    {
 5642|  3.00k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5576|    180|    {
 5577|    180|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|    180|    {
 1401|    180|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    180|    {
  433|    180|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5334|  9.04k|    {
 5335|  9.04k|        return m_args;
 5336|  9.04k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7651|  81.3k|{
 7652|  81.3k|    return s;
 7653|  81.3k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7628|  81.3k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  9.04k|    {
 7932|  9.04k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.52k|{
 8895|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.52k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.52k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|  40.6k|{
 8633|  40.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  40.6k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8567|  40.6k|{
 8568|  40.6k|#if !SCN_DISABLE_LOCALE
 8569|  40.6k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  40.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  40.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  40.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  40.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  40.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.1k, False: 1.50k]
  |  |  ------------------
  ------------------
 8576|  39.1k|        return unexpected(result.error());
 8577|  39.1k|    }
 8578|  1.50k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  40.6k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.52k|{
 8828|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.52k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.52k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5356|  9.04k|{
 5357|  9.04k|    detail::check_scan_arg_types<Args...>();
 5358|  9.04k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  9.04k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5095|  27.1k|{
 5096|  27.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  27.1k|                  "Scan argument types must be default constructible");
 5098|  27.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  27.1k|                  "Scan argument types must be Destructible");
 5100|  27.1k|    static_assert(
 5101|  27.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  27.1k|        "Scan argument types must not be references");
 5103|  27.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5309|  9.04k|    {
 5310|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  9.04k|    {
 5321|  9.04k|        return {detail::make_arg<
 5322|  9.04k|            kind, Context,
 5323|  9.04k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  9.04k|                                 typename Context::char_type>::value>(args)...};
 5325|  9.04k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5130|  9.04k|{
 5131|  9.04k|    return make_value<Context>(value).ref_value;
 5132|  9.04k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5080|  9.04k|{
 5081|  9.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  9.04k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  9.04k|                                  needs_context_tag>) {
 5085|  9.04k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  9.04k|    }
 5087|  9.04k|    else {
 5088|  9.04k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  9.04k|            value, context_tag<Context>{}));
 5090|  9.04k|    }
 5091|  9.04k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4919|  9.04k|    {                                                                        \
 4920|  9.04k|        return val;                                                          \
 4921|  9.04k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5049|  27.1k|{
 5050|  27.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  27.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  27.1k|    constexpr bool scannable_char =
 5054|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  27.1k|    static_assert(scannable_char,
 5056|  27.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  27.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  27.1k|    constexpr bool scannable_const =
 5060|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  27.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  27.1k|    constexpr bool scannable_disabled =
 5064|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  27.1k|    static_assert(scannable_disabled,
 5066|  27.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  27.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  27.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  27.1k|    static_assert(
 5071|  27.1k|        scannable,
 5072|  27.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  27.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  27.1k|    return arg_value{arg};
 5076|  27.1k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4862|  27.1k|    {
 4863|  27.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7935|  9.04k|    {
 7936|  9.04k|        return m_str;
 7937|  9.04k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  9.04k|    {
 5387|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5339|  9.04k|    {
 5340|  9.04k|        return m_argptrs;
 5341|  9.04k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  9.04k|{
 8781|  9.04k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.04k, False: 0]
  |  |  ------------------
  ------------------
 8782|  9.04k|        return unexpected(result.error());
 8783|  9.04k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  9.04k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  9.04k|    {
 1447|  9.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  9.04k|    {
  443|  9.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  9.04k|    {
 1148|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5334|  9.04k|    {
 5335|  9.04k|        return m_args;
 5336|  9.04k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  9.04k|    {
 7932|  9.04k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.52k|{
 8895|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.52k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.52k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.52k|{
 8828|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.52k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.52k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5356|  9.04k|{
 5357|  9.04k|    detail::check_scan_arg_types<Args...>();
 5358|  9.04k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  9.04k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5095|  27.1k|{
 5096|  27.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  27.1k|                  "Scan argument types must be default constructible");
 5098|  27.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  27.1k|                  "Scan argument types must be Destructible");
 5100|  27.1k|    static_assert(
 5101|  27.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  27.1k|        "Scan argument types must not be references");
 5103|  27.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5309|  9.04k|    {
 5310|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  9.04k|    {
 5321|  9.04k|        return {detail::make_arg<
 5322|  9.04k|            kind, Context,
 5323|  9.04k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  9.04k|                                 typename Context::char_type>::value>(args)...};
 5325|  9.04k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5130|  9.04k|{
 5131|  9.04k|    return make_value<Context>(value).ref_value;
 5132|  9.04k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5080|  9.04k|{
 5081|  9.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  9.04k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  9.04k|                                  needs_context_tag>) {
 5085|  9.04k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  9.04k|    }
 5087|  9.04k|    else {
 5088|  9.04k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  9.04k|            value, context_tag<Context>{}));
 5090|  9.04k|    }
 5091|  9.04k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4919|  9.04k|    {                                                                        \
 4920|  9.04k|        return val;                                                          \
 4921|  9.04k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5049|  27.1k|{
 5050|  27.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  27.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  27.1k|    constexpr bool scannable_char =
 5054|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  27.1k|    static_assert(scannable_char,
 5056|  27.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  27.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  27.1k|    constexpr bool scannable_const =
 5060|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  27.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  27.1k|    constexpr bool scannable_disabled =
 5064|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  27.1k|    static_assert(scannable_disabled,
 5066|  27.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  27.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  27.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  27.1k|    static_assert(
 5071|  27.1k|        scannable,
 5072|  27.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  27.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  27.1k|    return arg_value{arg};
 5076|  27.1k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4862|  27.1k|    {
 4863|  27.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7935|  9.04k|    {
 7936|  9.04k|        return m_str;
 7937|  9.04k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  9.04k|    {
 5387|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5339|  9.04k|    {
 5340|  9.04k|        return m_argptrs;
 5341|  9.04k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  9.04k|{
 8781|  9.04k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.04k, False: 0]
  |  |  ------------------
  ------------------
 8782|  9.04k|        return unexpected(result.error());
 8783|  9.04k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  9.04k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  9.04k|    {
 1447|  9.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  9.04k|    {
  443|  9.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  9.04k|    {
 1148|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5334|  9.04k|    {
 5335|  9.04k|        return m_args;
 5336|  9.04k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  9.04k|    {
 7932|  9.04k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.52k|{
 8895|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.52k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.52k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.52k|{
 8828|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.52k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.52k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5356|  9.04k|{
 5357|  9.04k|    detail::check_scan_arg_types<Args...>();
 5358|  9.04k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  9.04k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5095|  27.1k|{
 5096|  27.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  27.1k|                  "Scan argument types must be default constructible");
 5098|  27.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  27.1k|                  "Scan argument types must be Destructible");
 5100|  27.1k|    static_assert(
 5101|  27.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  27.1k|        "Scan argument types must not be references");
 5103|  27.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5309|  9.04k|    {
 5310|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  9.04k|    {
 5321|  9.04k|        return {detail::make_arg<
 5322|  9.04k|            kind, Context,
 5323|  9.04k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  9.04k|                                 typename Context::char_type>::value>(args)...};
 5325|  9.04k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  9.04k|{
 5131|  9.04k|    return make_value<Context>(value).ref_value;
 5132|  9.04k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5080|  9.04k|{
 5081|  9.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  9.04k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  9.04k|                                  needs_context_tag>) {
 5085|  9.04k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  9.04k|    }
 5087|  9.04k|    else {
 5088|  9.04k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  9.04k|            value, context_tag<Context>{}));
 5090|  9.04k|    }
 5091|  9.04k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4919|  9.04k|    {                                                                        \
 4920|  9.04k|        return val;                                                          \
 4921|  9.04k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5049|  27.1k|{
 5050|  27.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  27.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  27.1k|    constexpr bool scannable_char =
 5054|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  27.1k|    static_assert(scannable_char,
 5056|  27.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  27.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  27.1k|    constexpr bool scannable_const =
 5060|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  27.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  27.1k|    constexpr bool scannable_disabled =
 5064|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  27.1k|    static_assert(scannable_disabled,
 5066|  27.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  27.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  27.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  27.1k|    static_assert(
 5071|  27.1k|        scannable,
 5072|  27.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  27.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  27.1k|    return arg_value{arg};
 5076|  27.1k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4862|  27.1k|    {
 4863|  27.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7935|  9.04k|    {
 7936|  9.04k|        return m_str;
 7937|  9.04k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  9.04k|    {
 5387|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5339|  9.04k|    {
 5340|  9.04k|        return m_argptrs;
 5341|  9.04k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  9.04k|{
 8781|  9.04k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.04k, False: 0]
  |  |  ------------------
  ------------------
 8782|  9.04k|        return unexpected(result.error());
 8783|  9.04k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  9.04k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  9.04k|    {
 1447|  9.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  9.04k|    {
  443|  9.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  9.04k|    {
 1148|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5334|  9.04k|    {
 5335|  9.04k|        return m_args;
 5336|  9.04k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  9.04k|    {
 7932|  9.04k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.52k|{
 8895|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.52k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.52k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.52k|{
 8828|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.52k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.52k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5356|  9.04k|{
 5357|  9.04k|    detail::check_scan_arg_types<Args...>();
 5358|  9.04k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  9.04k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5095|  27.1k|{
 5096|  27.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  27.1k|                  "Scan argument types must be default constructible");
 5098|  27.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  27.1k|                  "Scan argument types must be Destructible");
 5100|  27.1k|    static_assert(
 5101|  27.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  27.1k|        "Scan argument types must not be references");
 5103|  27.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5309|  9.04k|    {
 5310|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  9.04k|    {
 5321|  9.04k|        return {detail::make_arg<
 5322|  9.04k|            kind, Context,
 5323|  9.04k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  9.04k|                                 typename Context::char_type>::value>(args)...};
 5325|  9.04k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5130|  9.04k|{
 5131|  9.04k|    return make_value<Context>(value).ref_value;
 5132|  9.04k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5080|  9.04k|{
 5081|  9.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  9.04k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  9.04k|                                  needs_context_tag>) {
 5085|  9.04k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  9.04k|    }
 5087|  9.04k|    else {
 5088|  9.04k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  9.04k|            value, context_tag<Context>{}));
 5090|  9.04k|    }
 5091|  9.04k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4919|  9.04k|    {                                                                        \
 4920|  9.04k|        return val;                                                          \
 4921|  9.04k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5049|  27.1k|{
 5050|  27.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  27.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  27.1k|    constexpr bool scannable_char =
 5054|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  27.1k|    static_assert(scannable_char,
 5056|  27.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  27.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  27.1k|    constexpr bool scannable_const =
 5060|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  27.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  27.1k|    constexpr bool scannable_disabled =
 5064|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  27.1k|    static_assert(scannable_disabled,
 5066|  27.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  27.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  27.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  27.1k|    static_assert(
 5071|  27.1k|        scannable,
 5072|  27.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  27.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  27.1k|    return arg_value{arg};
 5076|  27.1k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4862|  27.1k|    {
 4863|  27.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7935|  9.04k|    {
 7936|  9.04k|        return m_str;
 7937|  9.04k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  9.04k|    {
 5387|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5339|  9.04k|    {
 5340|  9.04k|        return m_argptrs;
 5341|  9.04k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  9.04k|{
 8781|  9.04k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.04k, False: 0]
  |  |  ------------------
  ------------------
 8782|  9.04k|        return unexpected(result.error());
 8783|  9.04k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  9.04k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  9.04k|    {
 1447|  9.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  9.04k|    {
  443|  9.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  9.04k|    {
 1148|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5334|  9.04k|    {
 5335|  9.04k|        return m_args;
 5336|  9.04k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  9.04k|    {
 7932|  9.04k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.52k|{
 8895|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.52k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.52k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8827|  4.52k|{
 8828|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.52k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.52k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5356|  9.04k|{
 5357|  9.04k|    detail::check_scan_arg_types<Args...>();
 5358|  9.04k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  9.04k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5095|  27.1k|{
 5096|  27.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  27.1k|                  "Scan argument types must be default constructible");
 5098|  27.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  27.1k|                  "Scan argument types must be Destructible");
 5100|  27.1k|    static_assert(
 5101|  27.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  27.1k|        "Scan argument types must not be references");
 5103|  27.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5309|  9.04k|    {
 5310|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5320|  9.04k|    {
 5321|  9.04k|        return {detail::make_arg<
 5322|  9.04k|            kind, Context,
 5323|  9.04k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  9.04k|                                 typename Context::char_type>::value>(args)...};
 5325|  9.04k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5130|  9.04k|{
 5131|  9.04k|    return make_value<Context>(value).ref_value;
 5132|  9.04k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5080|  9.04k|{
 5081|  9.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  9.04k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  9.04k|                                  needs_context_tag>) {
 5085|  9.04k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  9.04k|    }
 5087|  9.04k|    else {
 5088|  9.04k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  9.04k|            value, context_tag<Context>{}));
 5090|  9.04k|    }
 5091|  9.04k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4919|  9.04k|    {                                                                        \
 4920|  9.04k|        return val;                                                          \
 4921|  9.04k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5049|  27.1k|{
 5050|  27.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  27.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  27.1k|    constexpr bool scannable_char =
 5054|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  27.1k|    static_assert(scannable_char,
 5056|  27.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  27.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  27.1k|    constexpr bool scannable_const =
 5060|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  27.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  27.1k|    constexpr bool scannable_disabled =
 5064|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  27.1k|    static_assert(scannable_disabled,
 5066|  27.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  27.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  27.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  27.1k|    static_assert(
 5071|  27.1k|        scannable,
 5072|  27.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  27.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  27.1k|    return arg_value{arg};
 5076|  27.1k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4862|  27.1k|    {
 4863|  27.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7935|  9.04k|    {
 7936|  9.04k|        return m_str;
 7937|  9.04k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  9.04k|    {
 5387|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5339|  9.04k|    {
 5340|  9.04k|        return m_argptrs;
 5341|  9.04k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8780|  9.04k|{
 8781|  9.04k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.04k, False: 0]
  |  |  ------------------
  ------------------
 8782|  9.04k|        return unexpected(result.error());
 8783|  9.04k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  9.04k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  9.04k|    {
 1447|  9.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  9.04k|    {
  443|  9.04k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  9.04k|    {
 1148|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5334|  9.04k|    {
 5335|  9.04k|        return m_args;
 5336|  9.04k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  9.04k|    {
 7932|  9.04k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8894|  4.52k|{
 8895|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.52k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.52k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8827|  4.52k|{
 8828|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.52k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.52k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5356|  9.04k|{
 5357|  9.04k|    detail::check_scan_arg_types<Args...>();
 5358|  9.04k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  9.04k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5095|  27.1k|{
 5096|  27.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  27.1k|                  "Scan argument types must be default constructible");
 5098|  27.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  27.1k|                  "Scan argument types must be Destructible");
 5100|  27.1k|    static_assert(
 5101|  27.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  27.1k|        "Scan argument types must not be references");
 5103|  27.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5309|  9.04k|    {
 5310|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  9.04k|    {
 5321|  9.04k|        return {detail::make_arg<
 5322|  9.04k|            kind, Context,
 5323|  9.04k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  9.04k|                                 typename Context::char_type>::value>(args)...};
 5325|  9.04k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5130|  9.04k|{
 5131|  9.04k|    return make_value<Context>(value).ref_value;
 5132|  9.04k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5080|  9.04k|{
 5081|  9.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  9.04k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  9.04k|                                  needs_context_tag>) {
 5085|  9.04k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  9.04k|    }
 5087|  9.04k|    else {
 5088|  9.04k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  9.04k|            value, context_tag<Context>{}));
 5090|  9.04k|    }
 5091|  9.04k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4919|  9.04k|    {                                                                        \
 4920|  9.04k|        return val;                                                          \
 4921|  9.04k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5049|  27.1k|{
 5050|  27.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  27.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  27.1k|    constexpr bool scannable_char =
 5054|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  27.1k|    static_assert(scannable_char,
 5056|  27.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  27.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  27.1k|    constexpr bool scannable_const =
 5060|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  27.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  27.1k|    constexpr bool scannable_disabled =
 5064|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  27.1k|    static_assert(scannable_disabled,
 5066|  27.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  27.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  27.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  27.1k|    static_assert(
 5071|  27.1k|        scannable,
 5072|  27.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  27.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  27.1k|    return arg_value{arg};
 5076|  27.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4862|  27.1k|    {
 4863|  27.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7935|  9.04k|    {
 7936|  9.04k|        return m_str;
 7937|  9.04k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  9.04k|    {
 5387|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5339|  9.04k|    {
 5340|  9.04k|        return m_argptrs;
 5341|  9.04k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  9.04k|{
 8781|  9.04k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.09k, False: 942]
  |  |  ------------------
  ------------------
 8782|  8.09k|        return unexpected(result.error());
 8783|  8.09k|    }
 8784|    942|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    942|    static_cast<    \
  |  |  929|    942|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    942|    static_cast<    \
  |  |  929|    942|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  9.04k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  8.09k|    {
 1447|  8.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  8.09k|    {
  622|  8.09k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  8.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  8.09k|    {
  685|  8.09k|        scn::detail::construct_at(unexpected_ptr(),
  686|  8.09k|                                  std::forward<Args>(args)...);
  687|  8.09k|        m_has_value = false;
  688|  8.09k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  387|  52.4k|{
  388|  52.4k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  52.4k|        T(std::forward<Args>(args)...);
  390|  52.4k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  16.1k|    {
  714|  16.1k|        return reinterpret_cast<unexpected<E>*>(
  715|  16.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  16.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  16.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  9.04k|    {
 1148|  9.04k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|    942|    {
 5791|    942|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5576|    944|    {
 5577|    944|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|    942|    {
 1401|    942|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|    942|    {
  612|    942|        construct(std::forward<Args>(args)...);
  613|    942|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|    942|    {
  678|    942|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    942|        m_has_value = true;
  680|    942|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|    942|{
  388|    942|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    942|        T(std::forward<Args>(args)...);
  390|    942|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5782|    942|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  1.88k|    {
  702|  1.88k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.88k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  1.88k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5786|  1.88k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5334|  9.04k|    {
 5335|  9.04k|        return m_args;
 5336|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5331|  9.04k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  9.04k|    {
 7932|  9.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  9.04k|    {
  627|  9.04k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 942, False: 8.09k]
  ------------------
  628|    942|            destroy_value();
  629|    942|        }
  630|  8.09k|        else {
  631|  8.09k|            destroy_unexpected();
  632|  8.09k|        }
  633|  9.04k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  9.04k|    {
  671|  9.04k|        return m_has_value;
  672|  9.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    942|    {
  692|    942|        scn::detail::destroy_at(value_ptr());
  693|    942|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|    942|{
  394|    942|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    942|        for (auto& elem : *p) {
  396|    942|            scn::detail::destroy_at(&elem);
  397|    942|        }
  398|    942|    }
  399|    942|    else {
  400|    942|        p->~T();
  401|    942|    }
  402|    942|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  8.09k|    {
  696|  8.09k|        scn::detail::destroy_at(unexpected_ptr());
  697|  8.09k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  393|  52.4k|{
  394|  52.4k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  52.4k|        for (auto& elem : *p) {
  396|  52.4k|            scn::detail::destroy_at(&elem);
  397|  52.4k|        }
  398|  52.4k|    }
  399|  52.4k|    else {
  400|  52.4k|        p->~T();
  401|  52.4k|    }
  402|  52.4k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8894|  4.52k|{
 8895|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.52k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.52k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8827|  4.52k|{
 8828|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.52k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.52k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5356|  9.04k|{
 5357|  9.04k|    detail::check_scan_arg_types<Args...>();
 5358|  9.04k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  9.04k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5095|  27.1k|{
 5096|  27.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  27.1k|                  "Scan argument types must be default constructible");
 5098|  27.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  27.1k|                  "Scan argument types must be Destructible");
 5100|  27.1k|    static_assert(
 5101|  27.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  27.1k|        "Scan argument types must not be references");
 5103|  27.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5309|  9.04k|    {
 5310|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  9.04k|    {
 5321|  9.04k|        return {detail::make_arg<
 5322|  9.04k|            kind, Context,
 5323|  9.04k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  9.04k|                                 typename Context::char_type>::value>(args)...};
 5325|  9.04k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5130|  9.04k|{
 5131|  9.04k|    return make_value<Context>(value).ref_value;
 5132|  9.04k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5080|  9.04k|{
 5081|  9.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  9.04k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  9.04k|                                  needs_context_tag>) {
 5085|  9.04k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  9.04k|    }
 5087|  9.04k|    else {
 5088|  9.04k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  9.04k|            value, context_tag<Context>{}));
 5090|  9.04k|    }
 5091|  9.04k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4919|  9.04k|    {                                                                        \
 4920|  9.04k|        return val;                                                          \
 4921|  9.04k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5049|  27.1k|{
 5050|  27.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  27.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  27.1k|    constexpr bool scannable_char =
 5054|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  27.1k|    static_assert(scannable_char,
 5056|  27.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  27.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  27.1k|    constexpr bool scannable_const =
 5060|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  27.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  27.1k|    constexpr bool scannable_disabled =
 5064|  27.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  27.1k|    static_assert(scannable_disabled,
 5066|  27.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  27.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  27.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  27.1k|    static_assert(
 5071|  27.1k|        scannable,
 5072|  27.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  27.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  27.1k|    return arg_value{arg};
 5076|  27.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4862|  27.1k|    {
 4863|  27.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7935|  9.04k|    {
 7936|  9.04k|        return m_str;
 7937|  9.04k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  9.04k|    {
 5387|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5339|  9.04k|    {
 5340|  9.04k|        return m_argptrs;
 5341|  9.04k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  9.04k|{
 8781|  9.04k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.09k, False: 942]
  |  |  ------------------
  ------------------
 8782|  8.09k|        return unexpected(result.error());
 8783|  8.09k|    }
 8784|    942|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    942|    static_cast<    \
  |  |  929|    942|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    942|    static_cast<    \
  |  |  929|    942|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  9.04k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  8.09k|    {
 1447|  8.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  8.09k|    {
  622|  8.09k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  8.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  8.09k|    {
  685|  8.09k|        scn::detail::construct_at(unexpected_ptr(),
  686|  8.09k|                                  std::forward<Args>(args)...);
  687|  8.09k|        m_has_value = false;
  688|  8.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  16.1k|    {
  714|  16.1k|        return reinterpret_cast<unexpected<E>*>(
  715|  16.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  16.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  16.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  9.04k|    {
 1148|  9.04k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|    942|    {
 5791|    942|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5576|    944|    {
 5577|    944|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|    942|    {
 1401|    942|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|    942|    {
  612|    942|        construct(std::forward<Args>(args)...);
  613|    942|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|    942|    {
  678|    942|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    942|        m_has_value = true;
  680|    942|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|    942|{
  388|    942|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    942|        T(std::forward<Args>(args)...);
  390|    942|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5782|    942|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  1.88k|    {
  702|  1.88k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.88k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  1.88k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5786|  1.88k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5334|  9.04k|    {
 5335|  9.04k|        return m_args;
 5336|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5331|  9.04k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  9.04k|    {
 7932|  9.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  9.04k|    {
  627|  9.04k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 942, False: 8.09k]
  ------------------
  628|    942|            destroy_value();
  629|    942|        }
  630|  8.09k|        else {
  631|  8.09k|            destroy_unexpected();
  632|  8.09k|        }
  633|  9.04k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  9.04k|    {
  671|  9.04k|        return m_has_value;
  672|  9.04k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    942|    {
  692|    942|        scn::detail::destroy_at(value_ptr());
  693|    942|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|    942|{
  394|    942|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    942|        for (auto& elem : *p) {
  396|    942|            scn::detail::destroy_at(&elem);
  397|    942|        }
  398|    942|    }
  399|    942|    else {
  400|    942|        p->~T();
  401|    942|    }
  402|    942|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  8.09k|    {
  696|  8.09k|        scn::detail::destroy_at(unexpected_ptr());
  697|  8.09k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8894|  4.52k|{
 8895|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.52k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.52k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.52k|{
 8828|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.52k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.52k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5356|  9.04k|{
 5357|  9.04k|    detail::check_scan_arg_types<Args...>();
 5358|  9.04k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  9.04k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5095|  9.04k|{
 5096|  9.04k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  9.04k|                  "Scan argument types must be default constructible");
 5098|  9.04k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  9.04k|                  "Scan argument types must be Destructible");
 5100|  9.04k|    static_assert(
 5101|  9.04k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  9.04k|        "Scan argument types must not be references");
 5103|  9.04k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5309|  9.04k|    {
 5310|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  9.04k|    {
 5321|  9.04k|        return {detail::make_arg<
 5322|  9.04k|            kind, Context,
 5323|  9.04k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  9.04k|                                 typename Context::char_type>::value>(args)...};
 5325|  9.04k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5130|  9.04k|{
 5131|  9.04k|    return make_value<Context>(value).ref_value;
 5132|  9.04k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5080|  9.04k|{
 5081|  9.04k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  9.04k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  9.04k|                                  needs_context_tag>) {
 5085|  9.04k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  9.04k|    }
 5087|  9.04k|    else {
 5088|  9.04k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  9.04k|            value, context_tag<Context>{}));
 5090|  9.04k|    }
 5091|  9.04k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4919|  9.04k|    {                                                                        \
 4920|  9.04k|        return val;                                                          \
 4921|  9.04k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5049|  9.04k|{
 5050|  9.04k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  9.04k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  9.04k|    constexpr bool scannable_char =
 5054|  9.04k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  9.04k|    static_assert(scannable_char,
 5056|  9.04k|                  "Cannot scan an argument of an unsupported character "
 5057|  9.04k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  9.04k|    constexpr bool scannable_const =
 5060|  9.04k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  9.04k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  9.04k|    constexpr bool scannable_disabled =
 5064|  9.04k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  9.04k|    static_assert(scannable_disabled,
 5066|  9.04k|                  "Cannot scan an argument that has been disabled by "
 5067|  9.04k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  9.04k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  9.04k|    static_assert(
 5071|  9.04k|        scannable,
 5072|  9.04k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  9.04k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  9.04k|    return arg_value{arg};
 5076|  9.04k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4862|  9.04k|    {
 4863|  9.04k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7935|  9.04k|    {
 7936|  9.04k|        return m_str;
 7937|  9.04k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  9.04k|    {
 5387|  9.04k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5339|  9.04k|    {
 5340|  9.04k|        return m_argptrs;
 5341|  9.04k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8780|  9.04k|{
 8781|  9.04k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.09k, False: 942]
  |  |  ------------------
  ------------------
 8782|  8.09k|        return unexpected(result.error());
 8783|  8.09k|    }
 8784|    942|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    942|    static_cast<    \
  |  |  929|    942|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    942|    static_cast<    \
  |  |  929|    942|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  9.04k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|  8.09k|    {
 1447|  8.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  8.09k|    {
  443|  8.09k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  9.04k|    {
 1148|  9.04k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5790|    942|    {
 5791|    942|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5576|    942|    {
 5577|    942|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1400|    942|    {
 1401|    942|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|    942|    {
  433|    942|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5334|  9.04k|    {
 5335|  9.04k|        return m_args;
 5336|  9.04k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  9.04k|    {
 7932|  9.04k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.52k|{
 8895|  4.52k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.52k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.52k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.52k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5356|  18.0k|{
 5357|  18.0k|    detail::check_scan_arg_types<Args...>();
 5358|  18.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  18.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5095|  18.0k|{
 5096|  18.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  18.0k|                  "Scan argument types must be default constructible");
 5098|  18.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  18.0k|                  "Scan argument types must be Destructible");
 5100|  18.0k|    static_assert(
 5101|  18.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  18.0k|        "Scan argument types must not be references");
 5103|  18.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5309|  18.0k|    {
 5310|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  18.0k|    {
 5321|  18.0k|        return {detail::make_arg<
 5322|  18.0k|            kind, Context,
 5323|  18.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  18.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  18.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5130|  18.0k|{
 5131|  18.0k|    return make_value<Context>(value).ref_value;
 5132|  18.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5080|  18.0k|{
 5081|  18.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  18.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  18.0k|                                  needs_context_tag>) {
 5085|  18.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  18.0k|    }
 5087|  18.0k|    else {
 5088|  18.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  18.0k|            value, context_tag<Context>{}));
 5090|  18.0k|    }
 5091|  18.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4919|  18.0k|    {                                                                        \
 4920|  18.0k|        return val;                                                          \
 4921|  18.0k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5049|  18.0k|{
 5050|  18.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  18.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  18.0k|    constexpr bool scannable_char =
 5054|  18.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  18.0k|    static_assert(scannable_char,
 5056|  18.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  18.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  18.0k|    constexpr bool scannable_const =
 5060|  18.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  18.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  18.0k|    constexpr bool scannable_disabled =
 5064|  18.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  18.0k|    static_assert(scannable_disabled,
 5066|  18.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  18.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  18.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  18.0k|    static_assert(
 5071|  18.0k|        scannable,
 5072|  18.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  18.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  18.0k|    return arg_value{arg};
 5076|  18.0k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4862|  18.0k|    {
 4863|  18.0k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8551|  81.3k|{
 8552|  81.3k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  81.3k|    auto result = vscan_impl(buffer, format, args);
 8555|  81.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  81.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.3k, False: 4]
  |  |  ------------------
  ------------------
 8556|  81.3k|        return unexpected(result.error());
 8557|  81.3k|    }
 8558|      4|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  81.3k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4680|   162k|{
 4681|   162k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   162k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   162k|                  "\n"
 4685|   162k|                  "Unsupported range type given as input to a scanning "
 4686|   162k|                  "function.\n"
 4687|   162k|                  "A range needs to have a character type (value type) "
 4688|   162k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   162k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   162k|                  "to be included.\n"
 4691|   162k|                  "See the scnlib documentation for more details.");
 4692|   162k|    static_assert(
 4693|   162k|        !std::is_same_v<T, custom_char_traits>,
 4694|   162k|        "\n"
 4695|   162k|        "Unsupported range type given as input to a scanning "
 4696|   162k|        "function.\n"
 4697|   162k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   162k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   162k|        "not supported.");
 4700|   162k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   162k|                  "\n"
 4702|   162k|                  "Unsupported range type given as input to a scanning "
 4703|   162k|                  "function.\n"
 4704|   162k|                  "file_marker_found cannot be used as an "
 4705|   162k|                  "source range type to scn::scan.\n"
 4706|   162k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   162k|                  "and do not provide an explicit source range, "
 4708|   162k|                  "or use scn::scan with a FILE* directly.");
 4709|   162k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   162k|                  "\n"
 4711|   162k|                  "Unsupported range type given as input to a scanning "
 4712|   162k|                  "function.\n"
 4713|   162k|                  "In order to be scannable, a range needs to satisfy "
 4714|   162k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   162k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   162k|                  "\n"
 4717|   162k|                  "Unsupported range type given as input to a scanning "
 4718|   162k|                  "function.\n"
 4719|   162k|                  "A range needs to model forward_range and have a valid "
 4720|   162k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   162k|                  "Examples of scannable ranges are std::string, "
 4722|   162k|                  "std::string_view, "
 4723|   162k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   162k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   162k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   162k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4572|   162k|{
 4573|   162k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4573:19): [Folded - Ignored]
  ------------------
 4574|   162k|        return r;
 4575|       |        // return make_string_scan_buffer(r);
 4576|   162k|    }
 4577|   162k|    else {
 4578|   162k|        return invalid_char_type{};
 4579|   162k|    }
 4580|   162k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|   162k|    {
 1447|   162k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   162k|    {
  443|   162k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   162k|    {
 1148|   162k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5883|      8|{
 5884|      8|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|      8|                      ranges::iterator_t<SourceRange>>) {
 5886|      8|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|      8|    }
 5888|      8|    else {
 5889|      8|        auto it = ranges::begin(source);
 5890|      8|        while (n > 0) {
 5891|      8|            --n;
 5892|      8|            ++it;
 5893|      8|        }
 5894|      8|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|      8|    }
 5896|      8|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|      8|    {
 2695|      8|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|      8|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|      8|    {
 2676|      8|        return decay_copy(t.begin());
 2677|      8|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1919|    740|{
 1920|    740|    return SCN_FWD(t);
  ------------------
  |  |  930|    740|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|    740|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5870|      8|{
 5871|      8|    return ranges::end(source);
 5872|      8|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|      8|    {
 2752|      8|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|      8|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|      8|    {
 2734|      8|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|      8|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3286|   174k|    {
 3287|   174k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|      8|    {
 1401|      8|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|      8|    {
  433|      8|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7935|  18.0k|    {
 7936|  18.0k|        return m_str;
 7937|  18.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  18.0k|    {
 5387|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5339|  18.0k|    {
 5340|  18.0k|        return m_argptrs;
 5341|  18.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5438|   162k|    {
 5439|   162k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  18.0k|{
 8781|  18.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 2]
  |  |  ------------------
  ------------------
 8782|  18.0k|        return unexpected(result.error());
 8783|  18.0k|    }
 8784|      2|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  18.0k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1568|   162k|    {
 1569|   162k|        return has_value();
 1570|   162k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   325k|    {
  481|   325k|        return m_has_value;
  482|   325k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1574|   162k|    {
 1575|   162k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   162k|        return this->get_unexpected().error();
 1577|   162k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   162k|    {
  464|   162k|        return m_unexpected;
  465|   162k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  18.0k|    {
  443|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.0k|    {
 1148|  18.0k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|      8|    {
 1624|      8|        return value();
 1625|      8|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|      8|    {
 1598|      8|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|      8|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      8|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|      8|        return this->get_value();
 1600|      8|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|      8|    {
  447|      8|        return m_value;
  448|      8|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5790|      2|    {
 5791|      2|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5641|      8|    {
 5642|      8|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5576|      2|    {
 5577|      2|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|      2|    {
 1401|      2|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|      2|    {
  433|      2|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5334|  18.0k|    {
 5335|  18.0k|        return m_args;
 5336|  18.0k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7656|   162k|{
 7657|   162k|    return s;
 7658|   162k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7628|   162k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  18.0k|    {
 7932|  18.0k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8567|  81.3k|{
 8568|  81.3k|#if !SCN_DISABLE_LOCALE
 8569|  81.3k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  81.3k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  81.3k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  81.3k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  81.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  81.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.3k, False: 4]
  |  |  ------------------
  ------------------
 8576|  81.3k|        return unexpected(result.error());
 8577|  81.3k|    }
 8578|      4|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  81.3k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5356|  18.0k|{
 5357|  18.0k|    detail::check_scan_arg_types<Args...>();
 5358|  18.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  18.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5309|  18.0k|    {
 5310|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  18.0k|    {
 5321|  18.0k|        return {detail::make_arg<
 5322|  18.0k|            kind, Context,
 5323|  18.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  18.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  18.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5130|  18.0k|{
 5131|  18.0k|    return make_value<Context>(value).ref_value;
 5132|  18.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5080|  18.0k|{
 5081|  18.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  18.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  18.0k|                                  needs_context_tag>) {
 5085|  18.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  18.0k|    }
 5087|  18.0k|    else {
 5088|  18.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  18.0k|            value, context_tag<Context>{}));
 5090|  18.0k|    }
 5091|  18.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4919|  18.0k|    {                                                                        \
 4920|  18.0k|        return val;                                                          \
 4921|  18.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7935|  18.0k|    {
 7936|  18.0k|        return m_str;
 7937|  18.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  18.0k|    {
 5387|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5339|  18.0k|    {
 5340|  18.0k|        return m_argptrs;
 5341|  18.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  18.0k|{
 8781|  18.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 0]
  |  |  ------------------
  ------------------
 8782|  18.0k|        return unexpected(result.error());
 8783|  18.0k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  18.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  18.0k|    {
  443|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.0k|    {
 1148|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5334|  18.0k|    {
 5335|  18.0k|        return m_args;
 5336|  18.0k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  18.0k|    {
 7932|  18.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5356|  18.0k|{
 5357|  18.0k|    detail::check_scan_arg_types<Args...>();
 5358|  18.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  18.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5309|  18.0k|    {
 5310|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  18.0k|    {
 5321|  18.0k|        return {detail::make_arg<
 5322|  18.0k|            kind, Context,
 5323|  18.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  18.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  18.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5130|  18.0k|{
 5131|  18.0k|    return make_value<Context>(value).ref_value;
 5132|  18.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5080|  18.0k|{
 5081|  18.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  18.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  18.0k|                                  needs_context_tag>) {
 5085|  18.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  18.0k|    }
 5087|  18.0k|    else {
 5088|  18.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  18.0k|            value, context_tag<Context>{}));
 5090|  18.0k|    }
 5091|  18.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4919|  18.0k|    {                                                                        \
 4920|  18.0k|        return val;                                                          \
 4921|  18.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7935|  18.0k|    {
 7936|  18.0k|        return m_str;
 7937|  18.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  18.0k|    {
 5387|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5339|  18.0k|    {
 5340|  18.0k|        return m_argptrs;
 5341|  18.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  18.0k|{
 8781|  18.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 0]
  |  |  ------------------
  ------------------
 8782|  18.0k|        return unexpected(result.error());
 8783|  18.0k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  18.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  18.0k|    {
  443|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.0k|    {
 1148|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5334|  18.0k|    {
 5335|  18.0k|        return m_args;
 5336|  18.0k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  18.0k|    {
 7932|  18.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5356|  18.0k|{
 5357|  18.0k|    detail::check_scan_arg_types<Args...>();
 5358|  18.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  18.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5309|  18.0k|    {
 5310|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  18.0k|    {
 5321|  18.0k|        return {detail::make_arg<
 5322|  18.0k|            kind, Context,
 5323|  18.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  18.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  18.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  18.0k|{
 5131|  18.0k|    return make_value<Context>(value).ref_value;
 5132|  18.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5080|  18.0k|{
 5081|  18.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  18.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  18.0k|                                  needs_context_tag>) {
 5085|  18.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  18.0k|    }
 5087|  18.0k|    else {
 5088|  18.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  18.0k|            value, context_tag<Context>{}));
 5090|  18.0k|    }
 5091|  18.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4919|  18.0k|    {                                                                        \
 4920|  18.0k|        return val;                                                          \
 4921|  18.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7935|  18.0k|    {
 7936|  18.0k|        return m_str;
 7937|  18.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  18.0k|    {
 5387|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5339|  18.0k|    {
 5340|  18.0k|        return m_argptrs;
 5341|  18.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  18.0k|{
 8781|  18.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 0]
  |  |  ------------------
  ------------------
 8782|  18.0k|        return unexpected(result.error());
 8783|  18.0k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  18.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  18.0k|    {
  443|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.0k|    {
 1148|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5334|  18.0k|    {
 5335|  18.0k|        return m_args;
 5336|  18.0k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  18.0k|    {
 7932|  18.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5356|  18.0k|{
 5357|  18.0k|    detail::check_scan_arg_types<Args...>();
 5358|  18.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  18.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5309|  18.0k|    {
 5310|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  18.0k|    {
 5321|  18.0k|        return {detail::make_arg<
 5322|  18.0k|            kind, Context,
 5323|  18.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  18.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  18.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5130|  18.0k|{
 5131|  18.0k|    return make_value<Context>(value).ref_value;
 5132|  18.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5080|  18.0k|{
 5081|  18.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  18.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  18.0k|                                  needs_context_tag>) {
 5085|  18.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  18.0k|    }
 5087|  18.0k|    else {
 5088|  18.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  18.0k|            value, context_tag<Context>{}));
 5090|  18.0k|    }
 5091|  18.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4919|  18.0k|    {                                                                        \
 4920|  18.0k|        return val;                                                          \
 4921|  18.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7935|  18.0k|    {
 7936|  18.0k|        return m_str;
 7937|  18.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  18.0k|    {
 5387|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5339|  18.0k|    {
 5340|  18.0k|        return m_argptrs;
 5341|  18.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  18.0k|{
 8781|  18.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 0]
  |  |  ------------------
  ------------------
 8782|  18.0k|        return unexpected(result.error());
 8783|  18.0k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  18.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  18.0k|    {
  443|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.0k|    {
 1148|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5334|  18.0k|    {
 5335|  18.0k|        return m_args;
 5336|  18.0k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  18.0k|    {
 7932|  18.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5356|  18.0k|{
 5357|  18.0k|    detail::check_scan_arg_types<Args...>();
 5358|  18.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  18.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5309|  18.0k|    {
 5310|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5320|  18.0k|    {
 5321|  18.0k|        return {detail::make_arg<
 5322|  18.0k|            kind, Context,
 5323|  18.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  18.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  18.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5130|  18.0k|{
 5131|  18.0k|    return make_value<Context>(value).ref_value;
 5132|  18.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5080|  18.0k|{
 5081|  18.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  18.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  18.0k|                                  needs_context_tag>) {
 5085|  18.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  18.0k|    }
 5087|  18.0k|    else {
 5088|  18.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  18.0k|            value, context_tag<Context>{}));
 5090|  18.0k|    }
 5091|  18.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4919|  18.0k|    {                                                                        \
 4920|  18.0k|        return val;                                                          \
 4921|  18.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7935|  18.0k|    {
 7936|  18.0k|        return m_str;
 7937|  18.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  18.0k|    {
 5387|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5339|  18.0k|    {
 5340|  18.0k|        return m_argptrs;
 5341|  18.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8780|  18.0k|{
 8781|  18.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 0]
  |  |  ------------------
  ------------------
 8782|  18.0k|        return unexpected(result.error());
 8783|  18.0k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  18.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  18.0k|    {
  443|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.0k|    {
 1148|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5334|  18.0k|    {
 5335|  18.0k|        return m_args;
 5336|  18.0k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  18.0k|    {
 7932|  18.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5356|  18.0k|{
 5357|  18.0k|    detail::check_scan_arg_types<Args...>();
 5358|  18.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  18.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5309|  18.0k|    {
 5310|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  18.0k|    {
 5321|  18.0k|        return {detail::make_arg<
 5322|  18.0k|            kind, Context,
 5323|  18.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  18.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  18.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5130|  18.0k|{
 5131|  18.0k|    return make_value<Context>(value).ref_value;
 5132|  18.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5080|  18.0k|{
 5081|  18.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  18.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  18.0k|                                  needs_context_tag>) {
 5085|  18.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  18.0k|    }
 5087|  18.0k|    else {
 5088|  18.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  18.0k|            value, context_tag<Context>{}));
 5090|  18.0k|    }
 5091|  18.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4919|  18.0k|    {                                                                        \
 4920|  18.0k|        return val;                                                          \
 4921|  18.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7935|  18.0k|    {
 7936|  18.0k|        return m_str;
 7937|  18.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  18.0k|    {
 5387|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5339|  18.0k|    {
 5340|  18.0k|        return m_argptrs;
 5341|  18.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  18.0k|{
 8781|  18.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 2]
  |  |  ------------------
  ------------------
 8782|  18.0k|        return unexpected(result.error());
 8783|  18.0k|    }
 8784|      2|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  18.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  18.0k|    {
  622|  18.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  18.0k|    {
  685|  18.0k|        scn::detail::construct_at(unexpected_ptr(),
  686|  18.0k|                                  std::forward<Args>(args)...);
  687|  18.0k|        m_has_value = false;
  688|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  36.1k|    {
  714|  36.1k|        return reinterpret_cast<unexpected<E>*>(
  715|  36.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  36.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  36.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.0k|    {
 1148|  18.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|      2|    {
 5791|      2|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|      2|    {
 1401|      2|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|      2|    {
  612|      2|        construct(std::forward<Args>(args)...);
  613|      2|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|      2|    {
  678|      2|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|      2|        m_has_value = true;
  680|      2|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|      2|{
  388|      2|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|      2|        T(std::forward<Args>(args)...);
  390|      2|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5782|      2|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|      4|    {
  702|      4|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|      4|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|      4|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5786|      4|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5334|  18.0k|    {
 5335|  18.0k|        return m_args;
 5336|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5331|  18.0k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  18.0k|    {
 7932|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  18.0k|    {
  627|  18.0k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 2, False: 18.0k]
  ------------------
  628|      2|            destroy_value();
  629|      2|        }
  630|  18.0k|        else {
  631|  18.0k|            destroy_unexpected();
  632|  18.0k|        }
  633|  18.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  18.0k|    {
  671|  18.0k|        return m_has_value;
  672|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|      2|    {
  692|      2|        scn::detail::destroy_at(value_ptr());
  693|      2|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|      2|{
  394|      2|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|      2|        for (auto& elem : *p) {
  396|      2|            scn::detail::destroy_at(&elem);
  397|      2|        }
  398|      2|    }
  399|      2|    else {
  400|      2|        p->~T();
  401|      2|    }
  402|      2|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  18.0k|    {
  696|  18.0k|        scn::detail::destroy_at(unexpected_ptr());
  697|  18.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5356|  18.0k|{
 5357|  18.0k|    detail::check_scan_arg_types<Args...>();
 5358|  18.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  18.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5309|  18.0k|    {
 5310|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  18.0k|    {
 5321|  18.0k|        return {detail::make_arg<
 5322|  18.0k|            kind, Context,
 5323|  18.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  18.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  18.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5130|  18.0k|{
 5131|  18.0k|    return make_value<Context>(value).ref_value;
 5132|  18.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5080|  18.0k|{
 5081|  18.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  18.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  18.0k|                                  needs_context_tag>) {
 5085|  18.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  18.0k|    }
 5087|  18.0k|    else {
 5088|  18.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  18.0k|            value, context_tag<Context>{}));
 5090|  18.0k|    }
 5091|  18.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4919|  18.0k|    {                                                                        \
 4920|  18.0k|        return val;                                                          \
 4921|  18.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7935|  18.0k|    {
 7936|  18.0k|        return m_str;
 7937|  18.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  18.0k|    {
 5387|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5339|  18.0k|    {
 5340|  18.0k|        return m_argptrs;
 5341|  18.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  18.0k|{
 8781|  18.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 2]
  |  |  ------------------
  ------------------
 8782|  18.0k|        return unexpected(result.error());
 8783|  18.0k|    }
 8784|      2|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  18.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  18.0k|    {
  622|  18.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  18.0k|    {
  685|  18.0k|        scn::detail::construct_at(unexpected_ptr(),
  686|  18.0k|                                  std::forward<Args>(args)...);
  687|  18.0k|        m_has_value = false;
  688|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  36.1k|    {
  714|  36.1k|        return reinterpret_cast<unexpected<E>*>(
  715|  36.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  36.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  36.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.0k|    {
 1148|  18.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|      2|    {
 5791|      2|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|      2|    {
 1401|      2|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|      2|    {
  612|      2|        construct(std::forward<Args>(args)...);
  613|      2|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|      2|    {
  678|      2|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|      2|        m_has_value = true;
  680|      2|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|      2|{
  388|      2|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|      2|        T(std::forward<Args>(args)...);
  390|      2|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5782|      2|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|      4|    {
  702|      4|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|      4|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|      4|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5786|      4|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5334|  18.0k|    {
 5335|  18.0k|        return m_args;
 5336|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5331|  18.0k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  18.0k|    {
 7932|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  18.0k|    {
  627|  18.0k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 2, False: 18.0k]
  ------------------
  628|      2|            destroy_value();
  629|      2|        }
  630|  18.0k|        else {
  631|  18.0k|            destroy_unexpected();
  632|  18.0k|        }
  633|  18.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  18.0k|    {
  671|  18.0k|        return m_has_value;
  672|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|      2|    {
  692|      2|        scn::detail::destroy_at(value_ptr());
  693|      2|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|      2|{
  394|      2|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|      2|        for (auto& elem : *p) {
  396|      2|            scn::detail::destroy_at(&elem);
  397|      2|        }
  398|      2|    }
  399|      2|    else {
  400|      2|        p->~T();
  401|      2|    }
  402|      2|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  18.0k|    {
  696|  18.0k|        scn::detail::destroy_at(unexpected_ptr());
  697|  18.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5356|  18.0k|{
 5357|  18.0k|    detail::check_scan_arg_types<Args...>();
 5358|  18.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  18.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5095|  18.0k|{
 5096|  18.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  18.0k|                  "Scan argument types must be default constructible");
 5098|  18.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  18.0k|                  "Scan argument types must be Destructible");
 5100|  18.0k|    static_assert(
 5101|  18.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  18.0k|        "Scan argument types must not be references");
 5103|  18.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5309|  18.0k|    {
 5310|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  18.0k|    {
 5321|  18.0k|        return {detail::make_arg<
 5322|  18.0k|            kind, Context,
 5323|  18.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  18.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  18.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5130|  18.0k|{
 5131|  18.0k|    return make_value<Context>(value).ref_value;
 5132|  18.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5080|  18.0k|{
 5081|  18.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  18.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  18.0k|                                  needs_context_tag>) {
 5085|  18.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  18.0k|    }
 5087|  18.0k|    else {
 5088|  18.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  18.0k|            value, context_tag<Context>{}));
 5090|  18.0k|    }
 5091|  18.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4919|  18.0k|    {                                                                        \
 4920|  18.0k|        return val;                                                          \
 4921|  18.0k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5049|  18.0k|{
 5050|  18.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  18.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  18.0k|    constexpr bool scannable_char =
 5054|  18.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  18.0k|    static_assert(scannable_char,
 5056|  18.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  18.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  18.0k|    constexpr bool scannable_const =
 5060|  18.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  18.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  18.0k|    constexpr bool scannable_disabled =
 5064|  18.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  18.0k|    static_assert(scannable_disabled,
 5066|  18.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  18.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  18.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  18.0k|    static_assert(
 5071|  18.0k|        scannable,
 5072|  18.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  18.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  18.0k|    return arg_value{arg};
 5076|  18.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4862|  18.0k|    {
 4863|  18.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7935|  18.0k|    {
 7936|  18.0k|        return m_str;
 7937|  18.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  18.0k|    {
 5387|  18.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5339|  18.0k|    {
 5340|  18.0k|        return m_argptrs;
 5341|  18.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8780|  18.0k|{
 8781|  18.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 2]
  |  |  ------------------
  ------------------
 8782|  18.0k|        return unexpected(result.error());
 8783|  18.0k|    }
 8784|      2|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      2|    static_cast<    \
  |  |  929|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  18.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|  18.0k|    {
 1447|  18.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  18.0k|    {
  443|  18.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.0k|    {
 1148|  18.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5790|      2|    {
 5791|      2|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5576|      2|    {
 5577|      2|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1400|      2|    {
 1401|      2|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|      2|    {
  433|      2|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5334|  18.0k|    {
 5335|  18.0k|        return m_args;
 5336|  18.0k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  18.0k|    {
 7932|  18.0k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3538|   429k|    {
 3539|   429k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   429k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3540|   429k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3544|  3.06M|    {
 3545|  3.06M|        return m_code == good;
 3546|  3.06M|    }
_ZNK3scn2v310scan_error4codeEv:
 3555|  65.7k|    {
 3556|  65.7k|        return m_code;
 3557|  65.7k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6141|  2.55k|    {
 6142|  2.55k|        return m_size;
 6143|  2.55k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6182|  2.93k|    {
 6183|  2.93k|        SCN_GCC_COMPAT_PUSH
 6184|  2.93k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6185|  2.93k|        switch (type) {
 6186|  1.00k|            case presentation_type::none:
  ------------------
  |  Branch (6186:13): [True: 1.00k, False: 1.93k]
  ------------------
 6187|  1.00k|                return 10;
 6188|     98|            case presentation_type::int_generic:
  ------------------
  |  Branch (6188:13): [True: 98, False: 2.83k]
  ------------------
 6189|     98|                return 0;
 6190|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6190:13): [True: 0, False: 2.93k]
  ------------------
 6191|      0|                return arbitrary_base;
 6192|       |
 6193|     66|            case presentation_type::int_binary:
  ------------------
  |  Branch (6193:13): [True: 66, False: 2.87k]
  ------------------
 6194|     66|                return 2;
 6195|     28|            case presentation_type::int_octal:
  ------------------
  |  Branch (6195:13): [True: 28, False: 2.90k]
  ------------------
 6196|     28|                return 8;
 6197|     32|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6197:13): [True: 32, False: 2.90k]
  ------------------
 6198|     48|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6198:13): [True: 16, False: 2.92k]
  ------------------
 6199|     48|                return 10;
 6200|  1.69k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6200:13): [True: 1.69k, False: 1.24k]
  ------------------
 6201|  1.69k|                return 16;
 6202|       |
 6203|      0|            default:
  ------------------
  |  Branch (6203:13): [True: 0, False: 2.93k]
  ------------------
 6204|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6205|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6206|  2.93k|        }
 6207|  2.93k|        SCN_GCC_COMPAT_POP
 6208|  2.93k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6220|  70.4k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6223|  7.90k|    {
 6224|  7.90k|        m_specs.align = align;
 6225|  7.90k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6232|    224|    {
 6233|    224|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    224|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6233:23): [Folded - Ignored]
  ------------------
 6234|    224|            m_specs.localized = true;
 6235|    224|        }
 6236|      0|        else {
 6237|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6238|      0|        }
 6239|    224|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6242|  9.15k|    {
 6243|  9.15k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6243:13): [True: 0, False: 9.15k]
  |  Branch (6243:39): [True: 0, False: 0]
  ------------------
 6244|       |            // clang-format off
 6245|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6246|       |            // clang-format on
 6247|      0|        }
 6248|       |
 6249|  9.15k|        m_specs.width = width;
 6250|  9.15k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6263|  79.7k|    {
 6264|  79.7k|        m_specs.type = type;
 6265|  79.7k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6268|  1.85M|    {
 6269|  1.85M|        const auto cp_value = static_cast<unsigned>(cp);
 6270|  1.85M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  1.85M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.64M, False: 201k]
  |  |  ------------------
  ------------------
 6271|  1.64M|            m_specs.charset_literals[cp_value / 8] |=
 6272|  1.64M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6273|  1.64M|        }
 6274|   201k|        else {
 6275|   201k|            m_specs.charset_has_nonascii = true;
 6276|   201k|        }
 6277|  1.85M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6280|  9.44k|    {
 6281|  9.44k|        const auto begin_value = static_cast<unsigned>(begin);
 6282|  9.44k|        const auto end_value = static_cast<unsigned>(end);
 6283|  9.44k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  9.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6284|       |
 6285|  9.44k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  9.44k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.92k, False: 2.52k]
  |  |  ------------------
  ------------------
 6286|       |            // No need to bit-twiddle with a mask, because with the
 6287|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6288|  6.92k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  6.92k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6289|   359k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6289:40): [True: 353k, False: 6.92k]
  ------------------
 6290|   353k|                m_specs.charset_literals[v / 8] |=
 6291|   353k|                    static_cast<unsigned char>(1ul << (v % 8));
 6292|   353k|            }
 6293|  6.92k|        }
 6294|  2.52k|        else {
 6295|  2.52k|            m_specs.charset_has_nonascii = true;
 6296|  2.52k|        }
 6297|  9.44k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6300|  5.37k|    {
 6301|  5.37k|        m_specs.charset_is_inverted = true;
 6302|  5.37k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6319|  42.7k|    {
 6320|  42.7k|        m_specs.regexp_flags = flags;
 6321|  42.7k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6325|  7.62k|    {
 6326|  7.62k|        SCN_UNLIKELY_ATTR
 6327|  7.62k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6328|  7.62k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6336|  1.94M|    {
 6337|  1.94M|        return static_cast<bool>(m_error);
 6338|  1.94M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3579|  65.7k|{
 3580|  65.7k|    return a.code() == b;
 3581|  65.7k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3583|  65.7k|{
 3584|  65.7k|    return !(a == b);
 3585|  65.7k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3878|   271k|{
 3879|   271k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3880|       |
 3881|   271k|    const auto is_trailing_code_unit = [](char ch) {
 3882|   271k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3883|   271k|    };
 3884|       |
 3885|   271k|    if (input.size() == 1) {
  ------------------
  |  Branch (3885:9): [True: 248k, False: 22.8k]
  ------------------
 3886|   248k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   248k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   248k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3887|   248k|        return static_cast<char32_t>(input[0]);
 3888|   248k|    }
 3889|       |
 3890|  22.8k|    if (input.size() == 2) {
  ------------------
  |  Branch (3890:9): [True: 21.0k, False: 1.82k]
  ------------------
 3891|  21.0k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3892|  21.0k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3893|       |
 3894|  21.0k|        char32_t cp{};
 3895|  21.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3896|  21.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3897|  21.0k|        return cp;
 3898|  21.0k|    }
 3899|       |
 3900|  1.82k|    if (input.size() == 3) {
  ------------------
  |  Branch (3900:9): [True: 1.12k, False: 702]
  ------------------
 3901|  1.12k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3902|  1.12k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3903|  1.12k|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|  1.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3904|       |
 3905|  1.12k|        char32_t cp{};
 3906|  1.12k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3907|  1.12k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3908|  1.12k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3909|  1.12k|        return cp;
 3910|  1.12k|    }
 3911|       |
 3912|    702|    if (input.size() == 4) {
  ------------------
  |  Branch (3912:9): [True: 702, False: 0]
  ------------------
 3913|    702|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    702|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    702|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3914|    702|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    702|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    702|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3915|    702|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    702|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    702|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|    702|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    702|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    702|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3917|    702|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    702|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    702|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3918|       |
 3919|    702|        char32_t cp{};
 3920|    702|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3921|    702|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3922|    702|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3923|    702|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3924|    702|        return cp;
 3925|    702|    }
 3926|       |
 3927|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3928|       |    // gcc 7 thinks we'll get here, even when we won't
 3929|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3930|      0|#endif
 3931|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3932|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6071|  65.4k|{
 6072|  65.4k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6073|  65.4k|                                    static_cast<unsigned>(b));
 6074|  65.4k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6076|  8.68k|{
 6077|  8.68k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6078|  8.68k|                                    static_cast<unsigned>(b));
 6079|  8.68k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6091|  8.68k|{
 6092|  8.68k|    return a = a | b;
 6093|  8.68k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7023|    574|{
 7024|    574|    switch (type) {
 7025|     70|        case arg_type::none_type:
  ------------------
  |  Branch (7025:9): [True: 70, False: 504]
  ------------------
 7026|     70|            return arg_type_category::none;
 7027|       |
 7028|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7028:9): [True: 0, False: 574]
  ------------------
 7029|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7029:9): [True: 0, False: 574]
  ------------------
 7030|     56|        case arg_type::int_type:
  ------------------
  |  Branch (7030:9): [True: 56, False: 518]
  ------------------
 7031|     56|        case arg_type::long_type:
  ------------------
  |  Branch (7031:9): [True: 0, False: 574]
  ------------------
 7032|     56|        case arg_type::llong_type:
  ------------------
  |  Branch (7032:9): [True: 0, False: 574]
  ------------------
 7033|     56|            return arg_type_category::integer;
 7034|       |
 7035|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7035:9): [True: 0, False: 574]
  ------------------
 7036|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7036:9): [True: 0, False: 574]
  ------------------
 7037|     56|        case arg_type::uint_type:
  ------------------
  |  Branch (7037:9): [True: 56, False: 518]
  ------------------
 7038|     56|        case arg_type::ulong_type:
  ------------------
  |  Branch (7038:9): [True: 0, False: 574]
  ------------------
 7039|     56|        case arg_type::ullong_type:
  ------------------
  |  Branch (7039:9): [True: 0, False: 574]
  ------------------
 7040|     56|            return arg_type_category::unsigned_integer;
 7041|       |
 7042|     56|        case arg_type::pointer_type:
  ------------------
  |  Branch (7042:9): [True: 56, False: 518]
  ------------------
 7043|     56|            return arg_type_category::pointer;
 7044|     56|        case arg_type::bool_type:
  ------------------
  |  Branch (7044:9): [True: 56, False: 518]
  ------------------
 7045|     56|            return arg_type_category::boolean;
 7046|     56|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7046:9): [True: 56, False: 518]
  ------------------
 7047|     56|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7047:9): [True: 0, False: 574]
  ------------------
 7048|     56|        case arg_type::code_point_type:
  ------------------
  |  Branch (7048:9): [True: 0, False: 574]
  ------------------
 7049|     56|            return arg_type_category::character;
 7050|       |
 7051|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7051:9): [True: 0, False: 574]
  ------------------
 7052|     56|        case arg_type::double_type:
  ------------------
  |  Branch (7052:9): [True: 56, False: 518]
  ------------------
 7053|     56|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7053:9): [True: 0, False: 574]
  ------------------
 7054|     56|            return arg_type_category::floating;
 7055|       |
 7056|     56|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7056:9): [True: 56, False: 518]
  ------------------
 7057|    112|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7057:9): [True: 56, False: 518]
  ------------------
 7058|    112|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7058:9): [True: 0, False: 574]
  ------------------
 7059|    168|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7059:9): [True: 56, False: 518]
  ------------------
 7060|    168|            return arg_type_category::string;
 7061|       |
 7062|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7062:9): [True: 0, False: 574]
  ------------------
 7063|      0|            return arg_type_category::custom;
 7064|       |
 7065|      0|            SCN_CLANG_PUSH
 7066|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7067|      0|        default:
  ------------------
  |  Branch (7067:9): [True: 0, False: 574]
  ------------------
 7068|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7069|    574|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7070|    574|            SCN_CLANG_POP
 7071|    574|    }
 7072|       |
 7073|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7074|    574|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3624|  1.26k|{
 3625|  1.26k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  1.26k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7109|  14.5k|{
 7110|  14.5k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 1.20k]
  |  |  ------------------
  ------------------
 7111|  13.3k|        return handler.on_error("Invalid type specifier for integer type");
 7112|  13.3k|    }
 7113|  1.20k|    if (specs.localized) {
  ------------------
  |  Branch (7113:9): [True: 68, False: 1.13k]
  ------------------
 7114|     68|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|     68|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 60]
  |  |  ------------------
  ------------------
 7115|       |            // clang-format off
 7116|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7117|       |            // clang-format on
 7118|      8|            return;
 7119|      8|        }
 7120|     60|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 60]
  |  |  ------------------
  ------------------
 7121|       |            // clang-format off
 7122|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7123|       |            // clang-format on
 7124|      0|        }
 7125|     60|    }
 7126|  1.20k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1919|      6|{
 1920|      6|    return SCN_FWD(t);
  ------------------
  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|      6|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3624|  1.18k|{
 3625|  1.18k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  1.18k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7153|  7.25k|{
 7154|  7.25k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7154:9): [True: 6.75k, False: 500]
  ------------------
 7155|  7.25k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7155:10): [True: 102, False: 6.65k]
  ------------------
 7156|  6.75k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7156:10): [True: 6.59k, False: 58]
  ------------------
 7157|  6.69k|        SCN_UNLIKELY_ATTR
 7158|  6.69k|        return handler.on_error("Invalid type specifier for float type");
 7159|  6.69k|    }
 7160|  7.25k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  480|  28.3k|    {
  481|  28.3k|        return m_has_value;
  482|  28.3k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1568|  14.1k|    {
 1569|  14.1k|        return has_value();
 1570|  14.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  446|  14.1k|    {
  447|  14.1k|        return m_value;
  448|  14.1k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1597|  14.1k|    {
 1598|  14.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  14.1k|        return this->get_value();
 1600|  14.1k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1633|  14.1k|    {
 1634|  14.1k|        return std::move(value());
 1635|  14.1k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3624|  8.31k|{
 3625|  8.31k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  8.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  8.31k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3624|  3.60k|{
 3625|  3.60k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  3.60k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3624|    246|{
 3625|    246|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    246|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|    246|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3624|    590|{
 3625|    590|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    590|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|    590|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7165|  21.6k|{
 7166|  21.6k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7166:9): [True: 1.45k, False: 20.1k]
  ------------------
 7167|  21.6k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7167:9): [True: 216, False: 19.9k]
  ------------------
 7168|  21.6k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7168:9): [True: 4.98k, False: 14.9k]
  ------------------
 7169|  21.6k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7169:9): [True: 12.5k, False: 2.43k]
  ------------------
 7170|  21.6k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7170:9): [True: 1.63k, False: 798]
  ------------------
 7171|  20.8k|        return;
 7172|  20.8k|    }
 7173|    798|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7173:9): [True: 366, False: 432]
  ------------------
 7174|    366|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    366|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 366, False: 0]
  |  |  ------------------
  ------------------
 7175|       |            // clang-format off
 7176|    366|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7177|       |            // clang-format on
 7178|    366|        }
 7179|      0|        return;
 7180|    366|    }
 7181|    432|    SCN_UNLIKELY_ATTR
 7182|    432|    handler.on_error("Invalid type specifier for string");
 7183|    432|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3624|  3.48k|{
 3625|  3.48k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.48k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  3.48k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3624|     20|{
 3625|     20|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|     20|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7199|  7.25k|{
 7200|  7.25k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7200:9): [True: 6.75k, False: 500]
  ------------------
 7201|  7.25k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7201:9): [True: 6.68k, False: 76]
  ------------------
 7202|  7.25k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7202:9): [True: 6.64k, False: 34]
  ------------------
 7203|  7.25k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7203:9): [True: 6.63k, False: 14]
  ------------------
 7204|  7.25k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7204:9): [True: 6.60k, False: 26]
  ------------------
 7205|  7.25k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7205:9): [True: 6.60k, False: 6]
  ------------------
 7206|  7.25k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7206:9): [True: 6.59k, False: 10]
  ------------------
 7207|  7.25k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7207:9): [True: 6.57k, False: 12]
  ------------------
 7208|  6.57k|        SCN_UNLIKELY_ATTR
 7209|  6.57k|        return handler.on_error("Invalid type specifier for boolean");
 7210|  6.57k|    }
 7211|  7.25k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7131|  7.21k|{
 7132|  7.21k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7132:9): [True: 6.64k, False: 568]
  ------------------
 7133|  7.21k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7133:9): [True: 0, False: 568]
  ------------------
 7134|  6.64k|        SCN_UNLIKELY_ATTR
 7135|  6.64k|        return handler.on_error("Invalid type specifier for character type");
 7136|  6.64k|    }
 7137|  7.21k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7188|  7.21k|{
 7189|  7.21k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7189:9): [True: 6.72k, False: 484]
  ------------------
 7190|  7.21k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7190:9): [True: 6.72k, False: 8]
  ------------------
 7191|  6.72k|        SCN_UNLIKELY_ATTR
 7192|  6.72k|        return handler.on_error("Invalid type specifier for pointer");
 7193|  6.72k|    }
 7194|  7.21k|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|   206k|{
 3686|   206k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|   206k|                                          const CharT*, const CharT*>) {
 3688|   206k|        return {first, last};
 3689|   206k|    }
 3690|   206k|    else {
 3691|   206k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|   206k|    }
 3693|   206k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|   227k|{
 3686|   227k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|   227k|                                          const CharT*, const CharT*>) {
 3688|   227k|        return {first, last};
 3689|   227k|    }
 3690|   227k|    else {
 3691|   227k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|   227k|    }
 3693|   227k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3300|  2.36M|    {
 3301|  2.36M|        return m_iterator;
 3302|  2.36M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3304|  2.51M|    {
 3305|  2.51M|        return m_sentinel;
 3306|  2.51M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3300|   189k|    {
 3301|   189k|        return m_iterator;
 3302|   189k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3304|   402k|    {
 3305|   402k|        return m_sentinel;
 3306|   402k|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7951|   128k|    constexpr locale_ref() = default;
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|    372|    {
  357|    372|        return m_unexpected;
  358|    372|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3624|  5.20k|{
 3625|  5.20k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  5.20k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|  25.5k|    {
  343|  25.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  25.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  25.5k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|   117k|    {
 1447|   117k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|   119k|    {
  443|   119k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   167k|    {
 1148|   167k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  38.9k|    {
 1401|  38.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  38.9k|    {
  433|  38.9k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1568|   169k|    {
 1569|   169k|        return has_value();
 1570|   169k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|   333k|    {
  481|   333k|        return m_has_value;
  482|   333k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1574|   117k|    {
 1575|   117k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   117k|        return this->get_unexpected().error();
 1577|   117k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   117k|    {
  464|   117k|        return m_unexpected;
  465|   117k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  33.7k|    {
 1634|  33.7k|        return std::move(value());
 1635|  33.7k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  47.0k|    {
 1598|  47.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  47.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  47.0k|        return this->get_value();
 1600|  47.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  47.0k|    {
  447|  47.0k|        return m_value;
  448|  47.0k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|  1.58k|    {
 1447|  1.58k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  1.67k|    {
  443|  1.67k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  3.29k|    {
 1148|  3.29k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  1.59k|    {
 1401|  1.59k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.59k|    {
  433|  1.59k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1568|  3.38k|    {
 1569|  3.38k|        return has_value();
 1570|  3.38k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  6.49k|    {
  481|  6.49k|        return m_has_value;
  482|  6.49k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1574|  1.58k|    {
 1575|  1.58k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.58k|        return this->get_unexpected().error();
 1577|  1.58k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.58k|    {
  464|  1.58k|        return m_unexpected;
  465|  1.58k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  1.36k|    {
 1634|  1.36k|        return std::move(value());
 1635|  1.36k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  1.53k|    {
 1598|  1.53k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.53k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.53k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  1.53k|        return this->get_value();
 1600|  1.53k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|  1.53k|    {
  447|  1.53k|        return m_value;
  448|  1.53k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  16.1k|    {
 1808|  16.1k|        return detail::transform_error_impl(std::move(*this),
 1809|  16.1k|                                            std::forward<F>(f));
 1810|  16.1k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  16.1k|{
 1294|  16.1k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  16.1k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  16.1k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  16.1k|            return result(*std::forward<Exp>(exp));
 1298|  16.1k|        }
 1299|       |
 1300|  16.1k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  16.1k|        return result(unexpect, monostate{});
 1302|  16.1k|    }
 1303|  16.1k|    else {
 1304|  16.1k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  16.1k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  16.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.1k, False: 0]
  |  |  ------------------
  ------------------
 1306|  16.1k|                   ? result(*std::forward<Exp>(exp))
 1307|  16.1k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  16.1k|    }
 1311|  16.1k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  49.1k|    {
  481|  49.1k|        return m_has_value;
  482|  49.1k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  19.2k|    {
 1634|  19.2k|        return std::move(value());
 1635|  19.2k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  19.3k|    {
 1598|  19.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  19.3k|        return this->get_value();
 1600|  19.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  19.3k|    {
  447|  19.3k|        return m_value;
  448|  19.3k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1584|    168|    {
 1585|    168|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    168|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    168|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|    168|        return std::move(this->get_unexpected().error());
 1587|    168|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    168|    {
  464|    168|        return m_unexpected;
  465|    168|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|  1.67k|    {
 1457|  1.67k|    }
_ZN3scn2v310scan_errorC2Ev:
 3533|   360k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6147|  2.50k|    {
 6148|  2.50k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  2.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6149|  2.50k|        CharT r{};
 6150|  2.50k|        std::memcpy(&r, m_data, m_size);
 6151|  2.50k|        return r;
 6152|  2.50k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|    186|    {
  343|    186|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    186|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|    186|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|    186|    {
  352|    186|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    186|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|    186|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6156|     48|    {
 6157|     48|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6158|     48|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2932|      6|    {
 2933|      6|        return fn::impl(std::forward<T>(t));
 2934|      6|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2923|      6|    {
 2924|      6|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2925|      6|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|      6|    {
 2901|      6|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|      6|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2866|      6|    {
 2867|      6|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|      6|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|      8|    {
  343|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  12.5k|    {
  357|  12.5k|        return m_unexpected;
  358|  12.5k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  2.10k|    {
  352|  2.10k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.10k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  2.10k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  21.3k|    {
  343|  21.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  21.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  21.3k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  21.3k|    {
  357|  21.3k|        return m_unexpected;
  358|  21.3k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  21.3k|    {
  352|  21.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  21.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  21.3k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|    186|{
 1182|    186|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|    186|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  1.90k|    {
  343|  1.90k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.90k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  1.90k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   145k|{
  322|   145k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   145k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3316|   190k|    {
 3317|   190k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|   190k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|    168|    {
 1447|    168|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    168|    {
  443|    168|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  29.6k|    {
 1148|  29.6k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  29.4k|    {
 1401|  29.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  29.4k|    {
  433|  29.4k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1568|  10.1k|    {
 1569|  10.1k|        return has_value();
 1570|  10.1k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1623|     40|    {
 1624|     40|        return value();
 1625|     40|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1400|     10|    {
 1401|     10|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|     10|    {
  433|     10|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|     10|    {
 1148|     10|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1568|     10|    {
 1569|     10|        return has_value();
 1570|     10|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  480|     20|    {
  481|     20|        return m_has_value;
  482|     20|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1623|     10|    {
 1624|     10|        return value();
 1625|     10|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1597|     10|    {
 1598|     10|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|     10|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     10|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|     10|        return this->get_value();
 1600|     10|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  446|     10|    {
  447|     10|        return m_value;
  448|     10|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  29.5k|    {
 1148|  29.5k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  29.5k|    {
 1401|  29.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  29.5k|    {
  433|  29.5k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1568|  29.5k|    {
 1569|  29.5k|        return has_value();
 1570|  29.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  59.0k|    {
  481|  59.0k|        return m_has_value;
  482|  59.0k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  29.5k|    {
 1634|  29.5k|        return std::move(value());
 1635|  29.5k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  29.5k|    {
 1598|  29.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  29.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  29.5k|        return this->get_value();
 1600|  29.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  29.5k|    {
  447|  29.5k|        return m_value;
  448|  29.5k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3304|     20|    {
 3305|     20|        return m_sentinel;
 3306|     20|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3300|     10|    {
 3301|     10|        return m_iterator;
 3302|     10|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3286|     10|    {
 3287|     10|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  1.80k|    {
 1447|  1.80k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.97k|    {
  443|  1.97k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  25.3k|    {
 1148|  25.3k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  20.2k|    {
 1447|  20.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  20.2k|    {
  443|  20.2k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1568|  26.9k|    {
 1569|  26.9k|        return has_value();
 1570|  26.9k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  41.8k|    {
  481|  41.8k|        return m_has_value;
  482|  41.8k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1574|  10.1k|    {
 1575|  10.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  10.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  10.1k|        return this->get_unexpected().error();
 1577|  10.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  10.1k|    {
  464|  10.1k|        return m_unexpected;
  465|  10.1k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|  6.62k|    {
 1401|  6.62k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  6.62k|    {
  433|  6.62k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  6.62k|    {
 1148|  6.62k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|  3.13k|    {
 1598|  3.13k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.13k|        return this->get_value();
 1600|  3.13k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  3.13k|    {
  447|  3.13k|        return m_value;
  448|  3.13k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|  4.99k|    {
 1569|  4.99k|        return has_value();
 1570|  4.99k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  13.2k|    {
  481|  13.2k|        return m_has_value;
  482|  13.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  4.99k|    {
 1148|  4.99k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|  6.62k|    {
 1634|  6.62k|        return std::move(value());
 1635|  6.62k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|  6.62k|    {
 1598|  6.62k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  6.62k|        return this->get_value();
 1600|  6.62k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  6.62k|    {
  447|  6.62k|        return m_value;
  448|  6.62k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3191|   195k|    {
 3192|   195k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 3.12k, False: 192k]
  ------------------
 3193|   195k|                   ? nullptr
 3194|   195k|                   : std::addressof(*ranges::begin(derived()));
 3195|   195k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   195k|    {
 2976|   195k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   195k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   195k|    {
 2949|   195k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   195k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3309|   195k|    {
 3310|   195k|        return m_iterator == m_sentinel;
 3311|   195k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3150|   387k|    {
 3151|   387k|        return static_cast<D&>(*this);
 3152|   387k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   192k|    {
 2695|   192k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   192k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   192k|    {
 2676|   192k|        return decay_copy(t.begin());
 2677|   192k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|  3.13k|    {
 1401|  3.13k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  3.13k|    {
  433|  3.13k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1400|  4.99k|    {
 1401|  4.99k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  4.99k|    {
  433|  4.99k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  4.99k|    {
 1808|  4.99k|        return detail::transform_error_impl(std::move(*this),
 1809|  4.99k|                                            std::forward<F>(f));
 1810|  4.99k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1293|  4.99k|{
 1294|  4.99k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  4.99k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  4.99k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  4.99k|            return result(*std::forward<Exp>(exp));
 1298|  4.99k|        }
 1299|       |
 1300|  4.99k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  4.99k|        return result(unexpect, monostate{});
 1302|  4.99k|    }
 1303|  4.99k|    else {
 1304|  4.99k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  4.99k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  4.99k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.99k, False: 0]
  |  |  ------------------
  ------------------
 1306|  4.99k|                   ? result(*std::forward<Exp>(exp))
 1307|  4.99k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  4.99k|    }
 1311|  4.99k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  480|  9.98k|    {
  481|  9.98k|        return m_has_value;
  482|  9.98k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1633|  4.99k|    {
 1634|  4.99k|        return std::move(value());
 1635|  4.99k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1597|  4.99k|    {
 1598|  4.99k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  4.99k|        return this->get_value();
 1600|  4.99k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  446|  4.99k|    {
  447|  4.99k|        return m_value;
  448|  4.99k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  4.99k|    {
 1401|  4.99k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  4.99k|    {
  433|  4.99k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  4.99k|    {
 1148|  4.99k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1568|  4.99k|    {
 1569|  4.99k|        return has_value();
 1570|  4.99k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  480|  9.98k|    {
  481|  9.98k|        return m_has_value;
  482|  9.98k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  4.99k|    {
 1634|  4.99k|        return std::move(value());
 1635|  4.99k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  4.99k|    {
 1598|  4.99k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  4.99k|        return this->get_value();
 1600|  4.99k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  446|  4.99k|    {
  447|  4.99k|        return m_value;
  448|  4.99k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1446|     60|    {
 1447|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  621|     60|    {
  622|     60|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  684|     60|    {
  685|     60|        scn::detail::construct_at(unexpected_ptr(),
  686|     60|                                  std::forward<Args>(args)...);
  687|     60|        m_has_value = false;
  688|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|    180|    {
  714|    180|        return reinterpret_cast<unexpected<E>*>(
  715|    180|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    180|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|    180|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|     60|    {
 1148|     60|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1568|     60|    {
 1569|     60|        return has_value();
 1570|     60|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|    180|    {
  671|    180|        return m_has_value;
  672|    180|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1574|     60|    {
 1575|     60|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     60|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     60|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     60|        return this->get_unexpected().error();
 1577|     60|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     60|    {
  654|     60|        return *unexpected_ptr();
  655|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  626|     60|    {
  627|     60|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 60]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     60|        else {
  631|     60|            destroy_unexpected();
  632|     60|        }
  633|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     60|    {
  696|     60|        scn::detail::destroy_at(unexpected_ptr());
  697|     60|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   174k|    {
 2826|   174k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   174k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   174k|    {
 2807|   174k|        return t.data();
 2808|   174k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  5.94k|    {
 1401|  5.94k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.94k|    {
  433|  5.94k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1446|   244k|    {
 1447|   244k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|   244k|    {
  443|   244k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   247k|    {
 1148|   247k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1400|  3.01k|    {
 1401|  3.01k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  3.01k|    {
  433|  3.01k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1181|  1.76k|{
 1182|  1.76k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  1.76k|}
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|  1.63k|    {
 1808|  1.63k|        return detail::transform_error_impl(std::move(*this),
 1809|  1.63k|                                            std::forward<F>(f));
 1810|  1.63k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|  1.63k|{
 1294|  1.63k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  1.63k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  1.63k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  1.63k|            return result(*std::forward<Exp>(exp));
 1298|  1.63k|        }
 1299|       |
 1300|  1.63k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  1.63k|        return result(unexpect, monostate{});
 1302|  1.63k|    }
 1303|  1.63k|    else {
 1304|  1.63k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  1.63k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.63k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.63k, False: 0]
  |  |  ------------------
  ------------------
 1306|  1.63k|                   ? result(*std::forward<Exp>(exp))
 1307|  1.63k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  1.63k|    }
 1311|  1.63k|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  1.63k|    {
 1401|  1.63k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  1.63k|    {
  433|  1.63k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.63k|    {
 1148|  1.63k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|  1.63k|    {
 1569|  1.63k|        return has_value();
 1570|  1.63k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  3.26k|    {
  481|  3.26k|        return m_has_value;
  482|  3.26k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  1.63k|    {
 1634|  1.63k|        return std::move(value());
 1635|  1.63k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  1.63k|    {
 1598|  1.63k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  1.63k|        return this->get_value();
 1600|  1.63k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  1.63k|    {
  447|  1.63k|        return m_value;
  448|  1.63k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1793|  1.67k|    {
 1794|  1.67k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|  1.67k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|  1.67k|{
 1294|  1.67k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  1.67k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  1.67k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  1.67k|            return result(*std::forward<Exp>(exp));
 1298|  1.67k|        }
 1299|       |
 1300|  1.67k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  1.67k|        return result(unexpect, monostate{});
 1302|  1.67k|    }
 1303|  1.67k|    else {
 1304|  1.67k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  1.67k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.67k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.67k]
  |  |  ------------------
  ------------------
 1306|  1.67k|                   ? result(*std::forward<Exp>(exp))
 1307|  1.67k|                   : result(unexpect,
 1308|  1.67k|                            trivial_invoke(std::forward<F>(f),
 1309|  1.67k|                                           std::forward<Exp>(exp).error()));
 1310|  1.67k|    }
 1311|  1.67k|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|  1.67k|    {
 3619|  1.67k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  13.3k|    {
 1624|  13.3k|        return value();
 1625|  13.3k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6657|  4.39k|{
 6658|  4.39k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  4.39k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  4.39k|    auto start = begin;
 6662|  4.39k|    ++begin;
 6663|       |
 6664|  4.39k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.39k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|      0|        return {};
 6669|      0|    }
 6670|  4.39k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 1.39k, False: 2.99k]
  ------------------
 6671|  1.39k|        handler.on_charset_inverted();
 6672|  1.39k|        ++begin;
 6673|  1.39k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.39k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|  1.39k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 12, False: 1.38k]
  ------------------
 6680|     12|            handler.on_charset_single(char32_t{']'});
 6681|     12|            ++begin;
 6682|     12|        }
 6683|  1.39k|    }
 6684|  2.99k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 2.99k]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|   621k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 621k, False: 0]
  ------------------
 6689|   621k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   621k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 621k]
  |  |  ------------------
  ------------------
 6690|      0|            break;
 6691|      0|        }
 6692|       |
 6693|   621k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 4.39k, False: 617k]
  ------------------
 6694|  4.39k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  4.39k|        }
 6696|       |
 6697|   617k|        parse_presentation_set_literal(begin, end, handler);
 6698|   617k|    }
 6699|       |
 6700|      0|    SCN_UNLIKELY_ATTR
 6701|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6702|      0|    return {};
 6703|  4.39k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6621|   617k|{
 6622|   617k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   617k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   617k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|   617k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|   617k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
 6626|      0|        return;
 6627|      0|    }
 6628|       |
 6629|   617k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 617k, False: 0]
  |  Branch (6629:25): [True: 2.91k, False: 614k]
  |  Branch (6629:49): [True: 2.91k, False: 0]
  ------------------
 6630|   617k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 2.88k, False: 36]
  ------------------
 6631|  2.88k|        ++begin;
 6632|       |
 6633|  2.88k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  2.88k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.88k]
  |  |  ------------------
  ------------------
 6635|      0|            return;
 6636|      0|        }
 6637|       |
 6638|  2.88k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  2.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.88k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|  2.88k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  2.88k|        return;
 6647|  2.88k|    }
 6648|       |
 6649|   614k|    handler.on_charset_single(cp_first);
 6650|   614k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6597|   620k|{
 6598|   620k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   620k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   620k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|   620k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|   620k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 620k]
  |  |  |  Branch (859:45): [True: 0, False: 620k]
  |  |  |  Branch (859:45): [True: 0, False: 620k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|   620k|    const auto cp =
 6607|   620k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|   620k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 620k]
  |  |  ------------------
  ------------------
 6609|      0|        handler.on_error("Invalid encoding in format string");
 6610|      0|        return invalid_code_point;
 6611|      0|    }
 6612|       |
 6613|   620k|    begin += len;
 6614|   620k|    return cp;
 6615|   620k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.1k|    {
 1148|  14.1k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1400|  14.1k|    {
 1401|  14.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  432|  14.1k|    {
  433|  14.1k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6212|  18.5k|    {
 6213|  18.5k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6214|  18.5k|                charset_string_size};
 6215|  18.5k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1400|  3.77k|    {
 1401|  3.77k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|  3.77k|    {
  433|  3.77k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4003|   271k|{
 4004|   271k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4004:19): [Folded - Ignored]
  ------------------
 4005|   271k|        return decode_utf8_code_point_exhaustive_valid(input);
 4006|   271k|    }
 4007|   271k|    else if constexpr (sizeof(CharT) == 2) {
 4008|   271k|        return decode_utf16_code_point_exhaustive_valid(input);
 4009|   271k|    }
 4010|   271k|    else {
 4011|   271k|        SCN_EXPECT(input.size() == 1);
 4012|   271k|        return static_cast<char32_t>(input.front());
 4013|   271k|    }
 4014|   271k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3881|  25.3k|    const auto is_trailing_code_unit = [](char ch) {
 3882|  25.3k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3883|  25.3k|    };
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3777|   239k|{
 3778|   239k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|   239k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|   239k|    }
 3781|   239k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3781:24): [Folded - Ignored]
  ------------------
 3782|   239k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|   239k|    }
 3784|   239k|    else {
 3785|       |        // utf-32
 3786|   239k|        static_assert(sizeof(U) == 4);
 3787|   239k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   239k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   239k|        return 1;
 3789|   239k|    }
 3790|   239k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|   239k|{
 3984|   239k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|   239k|        return decode_utf8_code_point_exhaustive(input);
 3986|   239k|    }
 3987|   239k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (3987:24): [Folded - Ignored]
  ------------------
 3988|   239k|        return decode_utf16_code_point_exhaustive(input);
 3989|   239k|    }
 3990|   239k|    else {
 3991|   239k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   239k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   239k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3992|   239k|        auto cp = static_cast<char32_t>(input.front());
 3993|   239k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   239k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.1k, False: 160k]
  |  |  ------------------
  ------------------
 3994|  79.1k|            return invalid_code_point;
 3995|  79.1k|        }
 3996|   160k|        return cp;
 3997|   239k|    }
 3998|   239k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|  6.09k|{
 3670|  6.09k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|  6.09k|                                          decltype(first), decltype(last)> &&
 3672|  6.09k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|  6.09k|        return {first, last};
 3674|  6.09k|    }
 3675|  6.09k|    else {
 3676|  6.09k|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|  6.09k|                                       to_address(first), to_address(last)))};
 3678|  6.09k|    }
 3679|  6.09k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  18.2k|{
  322|  18.2k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  18.2k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  18.5k|{
  302|  18.5k|    return p;
  303|  18.5k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|    334|{
 3701|    334|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|    334|                      typename std::basic_string_view<CharT>::iterator,
 3703|    334|                      decltype(it)> &&
 3704|    334|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|    334|        SCN_UNUSED(sv);
  ------------------
  |  |  909|    334|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|    334|        return it;
 3707|    334|    }
 3708|    334|    else {
 3709|    334|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|    334|    }
 3711|    334|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|    224|{
  322|    224|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|    224|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|    224|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3316|  1.62k|    {
 3317|  1.62k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  1.62k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|     18|    {
 1447|     18|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|     18|    {
  443|     18|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.97k|    {
 1148|  1.97k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  1.95k|    {
 1401|  1.95k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.95k|    {
  433|  1.95k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1568|    540|    {
 1569|    540|        return has_value();
 1570|    540|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  3.41k|    {
  481|  3.41k|        return m_has_value;
  482|  3.41k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  1.41k|    {
 1598|  1.41k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  1.41k|        return this->get_value();
 1600|  1.41k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  1.41k|    {
  447|  1.41k|        return m_value;
  448|  1.41k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    440|    {
 1148|    440|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|    440|    {
 1401|    440|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|    440|    {
  433|    440|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|    896|    {
 1808|    896|        return detail::transform_error_impl(std::move(*this),
 1809|    896|                                            std::forward<F>(f));
 1810|    896|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|    896|{
 1294|    896|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    896|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    896|        if (SCN_LIKELY(exp.has_value())) {
 1297|    896|            return result(*std::forward<Exp>(exp));
 1298|    896|        }
 1299|       |
 1300|    896|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    896|        return result(unexpect, monostate{});
 1302|    896|    }
 1303|    896|    else {
 1304|    896|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    896|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    896|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 896, False: 0]
  |  |  ------------------
  ------------------
 1306|    896|                   ? result(*std::forward<Exp>(exp))
 1307|    896|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|    896|    }
 1311|    896|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  1.41k|    {
 1634|  1.41k|        return std::move(value());
 1635|  1.41k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1584|     18|    {
 1585|     18|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|     18|        return std::move(this->get_unexpected().error());
 1587|     18|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|     18|    {
  464|     18|        return m_unexpected;
  465|     18|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|     90|    {
 1457|     90|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1568|    440|    {
 1569|    440|        return has_value();
 1570|    440|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|    880|    {
  481|    880|        return m_has_value;
  482|    880|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|    440|    {
 1634|    440|        return std::move(value());
 1635|    440|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|    440|    {
 1598|    440|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    440|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    440|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    440|        return this->get_value();
 1600|    440|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|    440|    {
  447|    440|        return m_value;
  448|    440|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|    108|    {
 1447|    108|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    126|    {
  443|    126|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.71k|    {
 1148|  1.71k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  1.06k|    {
 1447|  1.06k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  1.06k|    {
  443|  1.06k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1568|  1.80k|    {
 1569|  1.80k|        return has_value();
 1570|  1.80k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  2.97k|    {
  481|  2.97k|        return m_has_value;
  482|  2.97k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1574|    558|    {
 1575|    558|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    558|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    558|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|    558|        return this->get_unexpected().error();
 1577|    558|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|    558|    {
  464|    558|        return m_unexpected;
  465|    558|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|    360|    {
 1401|    360|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|    360|    {
  433|    360|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    360|    {
 1148|    360|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|    522|    {
 1598|    522|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    522|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    522|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    522|        return this->get_value();
 1600|    522|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|    522|    {
  447|    522|        return m_value;
  448|    522|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|    270|    {
 1569|    270|        return has_value();
 1570|    270|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|    720|    {
  481|    720|        return m_has_value;
  482|    720|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    270|    {
 1148|    270|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|    360|    {
 1634|    360|        return std::move(value());
 1635|    360|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|    360|    {
 1598|    360|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    360|        return this->get_value();
 1600|    360|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|    360|    {
  447|    360|        return m_value;
  448|    360|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|    540|    {
 1808|    540|        return detail::transform_error_impl(std::move(*this),
 1809|    540|                                            std::forward<F>(f));
 1810|    540|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|    540|{
 1294|    540|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    540|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    540|        if (SCN_LIKELY(exp.has_value())) {
 1297|    540|            return result(*std::forward<Exp>(exp));
 1298|    540|        }
 1299|       |
 1300|    540|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    540|        return result(unexpect, monostate{});
 1302|    540|    }
 1303|    540|    else {
 1304|    540|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    540|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    540|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 522, False: 18]
  |  |  ------------------
  ------------------
 1306|    540|                   ? result(*std::forward<Exp>(exp))
 1307|    540|                   : result(unexpect,
 1308|     18|                            trivial_invoke(std::forward<F>(f),
 1309|     18|                                           std::forward<Exp>(exp).error()));
 1310|    540|    }
 1311|    540|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|    522|    {
 1401|    522|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|    522|    {
  433|    522|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1456|     18|    {
 1457|     18|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1633|    522|    {
 1634|    522|        return std::move(value());
 1635|    522|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1400|    270|    {
 1401|    270|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|    270|    {
  433|    270|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|    270|    {
 1808|    270|        return detail::transform_error_impl(std::move(*this),
 1809|    270|                                            std::forward<F>(f));
 1810|    270|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1293|    270|{
 1294|    270|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    270|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    270|        if (SCN_LIKELY(exp.has_value())) {
 1297|    270|            return result(*std::forward<Exp>(exp));
 1298|    270|        }
 1299|       |
 1300|    270|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    270|        return result(unexpect, monostate{});
 1302|    270|    }
 1303|    270|    else {
 1304|    270|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    270|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    270|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 270, False: 0]
  |  |  ------------------
  ------------------
 1306|    270|                   ? result(*std::forward<Exp>(exp))
 1307|    270|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|    270|    }
 1311|    270|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  480|    540|    {
  481|    540|        return m_has_value;
  482|    540|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1633|    270|    {
 1634|    270|        return std::move(value());
 1635|    270|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1597|    270|    {
 1598|    270|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    270|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    270|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    270|        return this->get_value();
 1600|    270|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  446|    270|    {
  447|    270|        return m_value;
  448|    270|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|    270|    {
 1401|    270|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|    270|    {
  433|    270|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    270|    {
 1148|    270|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1568|    270|    {
 1569|    270|        return has_value();
 1570|    270|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  480|    540|    {
  481|    540|        return m_has_value;
  482|    540|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|    270|    {
 1634|    270|        return std::move(value());
 1635|    270|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|    270|    {
 1598|    270|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    270|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    270|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    270|        return this->get_value();
 1600|    270|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  446|    270|    {
  447|    270|        return m_value;
  448|    270|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  1.08k|    {
 2826|  1.08k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  1.08k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  1.08k|    {
 2807|  1.08k|        return t.data();
 2808|  1.08k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3191|  1.08k|    {
 3192|  1.08k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 360, False: 724]
  ------------------
 3193|  1.08k|                   ? nullptr
 3194|  1.08k|                   : std::addressof(*ranges::begin(derived()));
 3195|  1.08k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  1.08k|    {
 2976|  1.08k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  1.08k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  1.08k|    {
 2949|  1.08k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.08k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  1.08k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3309|  1.08k|    {
 3310|  1.08k|        return m_iterator == m_sentinel;
 3311|  1.08k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3150|  1.80k|    {
 3151|  1.80k|        return static_cast<D&>(*this);
 3152|  1.80k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|    724|    {
 2695|    724|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    724|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|    724|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|    724|    {
 2676|    724|        return decay_copy(t.begin());
 2677|    724|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|     28|    {
 1401|     28|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|     28|    {
  433|     28|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|     90|    {
 1808|     90|        return detail::transform_error_impl(std::move(*this),
 1809|     90|                                            std::forward<F>(f));
 1810|     90|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|     90|{
 1294|     90|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|     90|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|     90|        if (SCN_LIKELY(exp.has_value())) {
 1297|     90|            return result(*std::forward<Exp>(exp));
 1298|     90|        }
 1299|       |
 1300|     90|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|     90|        return result(unexpect, monostate{});
 1302|     90|    }
 1303|     90|    else {
 1304|     90|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|     90|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|     90|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 90, False: 0]
  |  |  ------------------
  ------------------
 1306|     90|                   ? result(*std::forward<Exp>(exp))
 1307|     90|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|     90|    }
 1311|     90|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|     90|    {
 1401|     90|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|     90|    {
  433|     90|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|     90|    {
 1148|     90|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|     90|    {
 1569|     90|        return has_value();
 1570|     90|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    180|    {
  481|    180|        return m_has_value;
  482|    180|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|     90|    {
 1634|     90|        return std::move(value());
 1635|     90|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|     90|    {
 1598|     90|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|     90|        return this->get_value();
 1600|     90|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|     90|    {
  447|     90|        return m_value;
  448|     90|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1793|     90|    {
 1794|     90|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|     90|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|     90|{
 1294|     90|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|     90|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|     90|        if (SCN_LIKELY(exp.has_value())) {
 1297|     90|            return result(*std::forward<Exp>(exp));
 1298|     90|        }
 1299|       |
 1300|     90|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|     90|        return result(unexpect, monostate{});
 1302|     90|    }
 1303|     90|    else {
 1304|     90|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|     90|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|     90|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 90]
  |  |  ------------------
  ------------------
 1306|     90|                   ? result(*std::forward<Exp>(exp))
 1307|     90|                   : result(unexpect,
 1308|     90|                            trivial_invoke(std::forward<F>(f),
 1309|     90|                                           std::forward<Exp>(exp).error()));
 1310|     90|    }
 1311|     90|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|     90|    {
 3619|     90|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|    170|    {
 1624|    170|        return value();
 1625|    170|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3624|  1.67k|{
 3625|  1.67k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  1.67k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5426|  81.3k|    {
 5427|  81.3k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  81.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 81.3k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|  81.3k|        return static_cast<std::size_t>(m_desc &
 5432|  81.3k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|  81.3k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5451|   160k|    {
 5452|   160k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   160k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5394|  78.9k|    {
 5395|  78.9k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78.9k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  78.9k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90, False: 78.9k]
  |  |  ------------------
  ------------------
 5403|     90|            return {};
 5404|     90|        }
 5405|       |
 5406|  78.9k|        const auto t = type(id);
 5407|  78.9k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 77.0k]
  |  |  ------------------
  ------------------
 5408|  1.80k|            return {};
 5409|  1.80k|        }
 5410|       |
 5411|  77.0k|        basic_scan_arg<Context> arg;
 5412|  77.0k|        arg.m_type = t;
 5413|  77.0k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 77.0k, False: 0]
  ------------------
 5414|  77.0k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  77.0k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  77.0k|        return arg;
 5420|  78.9k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5201|  78.9k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4858|  81.6k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5460|  78.9k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  78.9k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  78.9k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  78.9k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  78.9k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5455|  77.0k|    {
 5456|  77.0k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  77.0k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5207|   153k|    {
 5208|   153k|        return m_type != detail::arg_type::none_type;
 5209|   153k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  10.0k|{
 8378|  10.0k|#define SCN_VISIT(Type)                                         \
 8379|  10.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  10.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  10.0k|    }                                                           \
 8382|  10.0k|    else {                                                      \
 8383|  10.0k|        return vis(monostate_val);                              \
 8384|  10.0k|    }
 8385|       |
 8386|  10.0k|    monostate monostate_val{};
 8387|       |
 8388|  10.0k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 10.0k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 10.0k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|  1.11k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 1.11k, False: 8.94k]
  ------------------
 8394|  1.11k|            SCN_VISIT(int);
  ------------------
  |  | 8379|  1.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.11k|    }                                                           \
  |  | 8382|  1.11k|    else {                                                      \
  |  | 8383|  1.11k|        return vis(monostate_val);                              \
  |  | 8384|  1.11k|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 10.0k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 10.0k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 10.0k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 10.0k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|  1.11k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 1.11k, False: 8.94k]
  ------------------
 8404|  1.11k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|  1.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.11k|    }                                                           \
  |  | 8382|  1.11k|    else {                                                      \
  |  | 8383|  1.11k|        return vis(monostate_val);                              \
  |  | 8384|  1.11k|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 10.0k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 10.0k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|  1.11k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 1.11k, False: 8.94k]
  ------------------
 8410|  1.11k|            SCN_VISIT(void*);
  ------------------
  |  | 8379|  1.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.11k|    }                                                           \
  |  | 8382|  1.11k|    else {                                                      \
  |  | 8383|  1.11k|        return vis(monostate_val);                              \
  |  | 8384|  1.11k|    }
  ------------------
 8411|  1.11k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 1.11k, False: 8.94k]
  ------------------
 8412|  1.11k|            SCN_VISIT(bool);
  ------------------
  |  | 8379|  1.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.11k|    }                                                           \
  |  | 8382|  1.11k|    else {                                                      \
  |  | 8383|  1.11k|        return vis(monostate_val);                              \
  |  | 8384|  1.11k|    }
  ------------------
 8413|  1.11k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 1.11k, False: 8.94k]
  ------------------
 8414|  1.11k|            SCN_VISIT(char);
  ------------------
  |  | 8379|  1.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.11k|    }                                                           \
  |  | 8382|  1.11k|    else {                                                      \
  |  | 8383|  1.11k|        return vis(monostate_val);                              \
  |  | 8384|  1.11k|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 10.0k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 10.0k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 10.0k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|  1.11k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 1.11k, False: 8.94k]
  ------------------
 8422|  1.11k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  1.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.11k|    }                                                           \
  |  | 8382|  1.11k|    else {                                                      \
  |  | 8383|  1.11k|        return vis(monostate_val);                              \
  |  | 8384|  1.11k|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 10.0k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|  1.11k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 1.11k, False: 8.94k]
  ------------------
 8426|  1.11k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|  1.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.11k|    }                                                           \
  |  | 8382|  1.11k|    else {                                                      \
  |  | 8383|  1.11k|        return vis(monostate_val);                              \
  |  | 8384|  1.11k|    }
  ------------------
 8427|  1.11k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 1.11k, False: 8.94k]
  ------------------
 8428|  1.11k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  1.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.11k|    }                                                           \
  |  | 8382|  1.11k|    else {                                                      \
  |  | 8383|  1.11k|        return vis(monostate_val);                              \
  |  | 8384|  1.11k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 10.0k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|  1.11k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 1.11k, False: 8.94k]
  ------------------
 8432|  1.11k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  1.11k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  1.11k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  1.11k|    }                                                           \
  |  | 8382|  1.11k|    else {                                                      \
  |  | 8383|  1.11k|        return vis(monostate_val);                              \
  |  | 8384|  1.11k|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 10.0k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 10.0k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 10.0k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 10.0k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 10.0k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  10.0k|            SCN_CLANG_POP
 8456|  10.0k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  3.30k|    {
 1808|  3.30k|        return detail::transform_error_impl(std::move(*this),
 1809|  3.30k|                                            std::forward<F>(f));
 1810|  3.30k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  3.30k|{
 1294|  3.30k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  3.30k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  3.30k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  3.30k|            return result(*std::forward<Exp>(exp));
 1298|  3.30k|        }
 1299|       |
 1300|  3.30k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  3.30k|        return result(unexpect, monostate{});
 1302|  3.30k|    }
 1303|  3.30k|    else {
 1304|  3.30k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  3.30k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.30k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.13k, False: 168]
  |  |  ------------------
  ------------------
 1306|  3.30k|                   ? result(*std::forward<Exp>(exp))
 1307|  3.30k|                   : result(unexpect,
 1308|    168|                            trivial_invoke(std::forward<F>(f),
 1309|    168|                                           std::forward<Exp>(exp).error()));
 1310|  3.30k|    }
 1311|  3.30k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1456|    168|    {
 1457|    168|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1633|  3.13k|    {
 1634|  3.13k|        return std::move(value());
 1635|  3.13k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5505|  81.3k|    {
 5506|  81.3k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8016|  81.3k|    {
 8017|  81.3k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  81.3k|{
 7005|  81.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  81.3k|    handler.check_args_exhausted();
 7007|  81.3k|    return handler.get_error();
 7008|  81.3k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  81.3k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  81.3k|    auto begin = format.data();
 6974|  81.3k|    auto it = begin;
 6975|  81.3k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   334k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 326k, False: 7.63k]
  ------------------
 6978|   326k|        const auto ch = *it++;
 6979|   326k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 90.6k, False: 236k]
  ------------------
 6980|  90.6k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  90.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  90.6k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 72.5k, False: 18.0k]
  ------------------
 6984|  72.5k|                return;
 6985|  72.5k|            }
 6986|  90.6k|        }
 6987|   236k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 3.80k, False: 232k]
  ------------------
 6988|  3.80k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  7.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.12k, False: 2.68k]
  |  |  |  Branch (859:45): [True: 130, False: 3.67k]
  |  |  |  Branch (859:45): [True: 990, False: 2.68k]
  |  |  ------------------
  ------------------
 6989|  1.12k|                handler.on_error("Unmatched '}' in format string");
 6990|  1.12k|                return;
 6991|  1.12k|            }
 6992|       |
 6993|  2.68k|            handler.on_literal_text(begin, it);
 6994|  2.68k|            begin = ++it;
 6995|  2.68k|        }
 6996|   326k|    }
 6997|       |
 6998|  7.63k|    handler.on_literal_text(begin, end);
 6999|  7.63k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6902|  90.6k|{
 6903|  90.6k|    struct id_adapter {
 6904|  90.6k|        constexpr void operator()()
 6905|  90.6k|        {
 6906|  90.6k|            arg_id = handler.on_arg_id();
 6907|  90.6k|        }
 6908|  90.6k|        constexpr void operator()(std::size_t id)
 6909|  90.6k|        {
 6910|  90.6k|            arg_id = handler.on_arg_id(id);
 6911|  90.6k|        }
 6912|       |
 6913|  90.6k|        constexpr void on_error(const char* msg)
 6914|  90.6k|        {
 6915|  90.6k|            SCN_UNLIKELY_ATTR
 6916|  90.6k|            handler.on_error(msg);
 6917|  90.6k|        }
 6918|       |
 6919|  90.6k|        Handler& handler;
 6920|  90.6k|        std::size_t arg_id;
 6921|  90.6k|    };
 6922|       |
 6923|  90.6k|    ++begin;
 6924|  90.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  90.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 90.5k]
  |  |  ------------------
  ------------------
 6925|     72|        handler.on_error("Unexpected end of replacement field");
 6926|     72|        return begin;
 6927|     72|    }
 6928|       |
 6929|  90.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 10.1k, False: 80.4k]
  ------------------
 6930|  10.1k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|  10.1k|    }
 6932|  80.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 9.31k, False: 71.0k]
  ------------------
 6933|  9.31k|        handler.on_literal_text(begin, begin + 1);
 6934|  9.31k|    }
 6935|  71.0k|    else {
 6936|  71.0k|        auto adapter = id_adapter{handler, 0};
 6937|  71.0k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  71.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 122, False: 70.9k]
  |  |  ------------------
  ------------------
 6940|    122|            handler.on_error("Missing '}' in format string");
 6941|    122|            return begin;
 6942|    122|        }
 6943|       |
 6944|  70.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 242, False: 70.7k]
  ------------------
 6945|    242|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|    242|        }
 6947|  70.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 68.6k, False: 2.03k]
  ------------------
 6948|  68.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  68.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 68.6k]
  |  |  ------------------
  ------------------
 6949|     92|                handler.on_error("Unexpected end of replacement field");
 6950|     92|                return begin;
 6951|     92|            }
 6952|  68.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  68.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.45k, False: 65.1k]
  |  |  |  Branch (859:45): [True: 0, False: 68.6k]
  |  |  |  Branch (859:45): [True: 3.45k, False: 65.1k]
  |  |  ------------------
  ------------------
 6954|  3.45k|                handler.on_error("Unknown format specifier");
 6955|  3.45k|                return begin;
 6956|  3.45k|            }
 6957|  68.6k|        }
 6958|  2.03k|        else {
 6959|  2.03k|            SCN_UNLIKELY_ATTR
 6960|  2.03k|            handler.on_error("Missing '}' in format string");
 6961|  2.03k|            return begin;
 6962|  2.03k|        }
 6963|  70.9k|    }
 6964|  84.8k|    return begin + 1;
 6965|  90.5k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 7999|  78.9k|    {
 8000|  78.9k|        return m_args.get(id);
 8001|  78.9k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8004|  10.3k|    {
 8005|  10.3k|        return m_args;
 8006|  10.3k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8009|  75.2k|    {
 8010|  75.2k|        return m_locale;
 8011|  75.2k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5526|  74.2k|    {
 5527|  74.2k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  74.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62, False: 74.1k]
  |  |  ------------------
  ------------------
 5528|     62|            on_error(
 5529|     62|                "Cannot switch from manual to automatic argument indexing");
 5530|     62|            return 0;
 5531|     62|        }
 5532|       |
 5533|  74.1k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  74.1k|        do_check_arg_id(id);
 5535|  74.1k|        return id;
 5536|  74.2k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5550|    162|    {
 5551|    162|        return detail::handle_error(
 5552|    162|            scan_error{scan_error::invalid_format_string, msg});
 5553|    162|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6014|  78.9k|{
 6015|  78.9k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  78.9k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  78.9k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  71.0k|{
 6404|  71.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  71.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  71.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 71.0k, False: 0]
  |  Branch (6405:26): [True: 7.01k, False: 64.0k]
  ------------------
 6406|  7.01k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  7.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|  7.01k|    }
 6408|       |
 6409|  64.0k|    handler();
 6410|  64.0k|    return begin;
 6411|  71.0k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6373|  7.01k|{
 6374|  7.01k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6375|       |
 6376|  7.01k|    CharT c = *begin;
 6377|  7.01k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6377:9): [True: 1.67k, False: 5.33k]
  |  Branch (6377:27): [True: 184, False: 5.15k]
  ------------------
 6378|  1.86k|        handler.on_error("Invalid argument ID");
 6379|  1.86k|        return begin;
 6380|  1.86k|    }
 6381|       |
 6382|  5.15k|    int idx = 0;
 6383|  5.15k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6383:9): [True: 450, False: 4.70k]
  ------------------
 6384|    450|        idx = parse_simple_int(begin, end);
 6385|    450|    }
 6386|  4.70k|    else {
 6387|  4.70k|        ++begin;
 6388|  4.70k|    }
 6389|       |
 6390|  5.15k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6390:9): [True: 122, False: 5.03k]
  |  Branch (6390:26): [True: 4.78k, False: 242]
  |  Branch (6390:50): [True: 178, False: 4.61k]
  ------------------
 6391|    300|        handler.on_error("Invalid argument ID");
 6392|    300|        return begin;
 6393|    300|    }
 6394|  4.85k|    handler(idx);
 6395|       |
 6396|  4.85k|    return begin;
 6397|  5.15k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6914|  2.16k|        {
 6915|  2.16k|            SCN_UNLIKELY_ATTR
 6916|  2.16k|            handler.on_error(msg);
 6917|  2.16k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6352|  8.48k|{
 6353|  8.48k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6354|  8.48k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  8.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6355|       |
 6356|  8.48k|    unsigned long long value = 0;
 6357|  26.4k|    do {
 6358|  26.4k|        value *= 10;
 6359|  26.4k|        value += static_cast<unsigned long long>(*begin - '0');
 6360|  26.4k|        if (value >
  ------------------
  |  Branch (6360:13): [True: 72, False: 26.4k]
  ------------------
 6361|  26.4k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6362|     72|            return -1;
 6363|     72|        }
 6364|  26.4k|        ++begin;
 6365|  26.4k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6365:14): [True: 26.2k, False: 214]
  |  Branch (6365:30): [True: 24.6k, False: 1.51k]
  |  Branch (6365:47): [True: 18.0k, False: 6.68k]
  ------------------
 6366|  8.41k|    return static_cast<int>(value);
 6367|  8.48k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6909|  4.85k|        {
 6910|  4.85k|            arg_id = handler.on_arg_id(id);
 6911|  4.85k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5539|  4.85k|    {
 5540|  4.85k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  4.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100, False: 4.75k]
  |  |  ------------------
  ------------------
 5541|    100|            on_error(
 5542|    100|                "Cannot switch from manual to automatic argument indexing");
 5543|    100|            return;
 5544|    100|        }
 5545|  4.75k|        m_next_arg_id = -1;
 5546|  4.75k|        do_check_arg_id(id);
 5547|  4.75k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  64.0k|        {
 6906|  64.0k|            arg_id = handler.on_arg_id();
 6907|  64.0k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5212|   137k|    {
 5213|   137k|        return m_type;
 5214|   137k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5521|  64.8k|    {
 5522|  64.8k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  64.8k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5510|   133k|    {
 5511|   133k|        return m_format.data();
 5512|   133k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  68.6k|    {
 7083|  68.6k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  68.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  68.6k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6818|  68.6k|{
 6819|  68.6k|    auto do_presentation = [&]() -> const CharT* {
 6820|  68.6k|        if (*begin == CharT{'['}) {
 6821|  68.6k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  68.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  68.6k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  68.6k|                return begin;
 6827|  68.6k|            }
 6828|  68.6k|            handler.on_character_set_string(set);
 6829|  68.6k|            return begin;
 6830|  68.6k|        }
 6831|  68.6k|        if (*begin == CharT{'/'}) {
 6832|  68.6k|            return parse_presentation_regex(begin, end, handler);
 6833|  68.6k|        }
 6834|  68.6k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  68.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  68.6k|            handler.on_error("Invalid type specifier in format string");
 6837|  68.6k|            return begin;
 6838|  68.6k|        }
 6839|  68.6k|        handler.on_type(type);
 6840|  68.6k|        return begin;
 6841|  68.6k|    };
 6842|       |
 6843|  68.6k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 67.4k, False: 1.14k]
  |  Branch (6843:28): [True: 3.87k, False: 63.5k]
  ------------------
 6844|  68.6k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 1.71k, False: 2.15k]
  |  Branch (6844:36): [True: 1.60k, False: 108]
  ------------------
 6845|  1.60k|        return do_presentation();
 6846|  1.60k|    }
 6847|       |
 6848|  66.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  66.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 66.9k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  66.9k|    begin = parse_align(begin, end, handler);
 6854|  66.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  66.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 156, False: 66.8k]
  |  |  ------------------
  ------------------
 6855|    156|        handler.on_error("Unexpected end of format string");
 6856|    156|        return begin;
 6857|    156|    }
 6858|       |
 6859|  66.8k|    begin = parse_width(begin, end, handler);
 6860|  66.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  66.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 66.7k]
  |  |  ------------------
  ------------------
 6861|    126|        handler.on_error("Unexpected end of format string");
 6862|    126|        return begin;
 6863|    126|    }
 6864|       |
 6865|  66.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 66.7k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  66.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 574, False: 66.1k]
  ------------------
 6879|    574|        handler.on_localized();
 6880|    574|        ++begin;
 6881|    574|    }
 6882|  66.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  66.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 66.6k]
  |  |  ------------------
  ------------------
 6883|     72|        handler.on_error("Unexpected end of format string");
 6884|     72|        return begin;
 6885|     72|    }
 6886|       |
 6887|  66.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 66.6k, False: 0]
  |  Branch (6887:25): [True: 62.4k, False: 4.21k]
  ------------------
 6888|  62.4k|        do_presentation();
 6889|  62.4k|    }
 6890|  66.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  66.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 64.5k]
  |  |  ------------------
  ------------------
 6891|  2.10k|        handler.on_error("Unexpected end of format string");
 6892|  2.10k|        return begin;
 6893|  2.10k|    }
 6894|       |
 6895|  64.5k|    return begin;
 6896|  66.6k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6467|  3.87k|{
 6468|  3.87k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 1.97k, False: 1.90k]
  |  Branch (6468:33): [True: 1.51k, False: 456]
  ------------------
 6469|  3.87k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 674, False: 1.68k]
  |  Branch (6469:33): [True: 198, False: 476]
  ------------------
 6470|  3.87k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  64.0k|    auto do_presentation = [&]() -> const CharT* {
 6820|  64.0k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 16.2k, False: 47.8k]
  ------------------
 6821|  16.2k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  16.2k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.22k, False: 14.9k]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|  1.22k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  1.22k|                return begin;
 6827|  1.22k|            }
 6828|  14.9k|            handler.on_character_set_string(set);
 6829|  14.9k|            return begin;
 6830|  16.2k|        }
 6831|  47.8k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 43.2k, False: 4.52k]
  ------------------
 6832|  43.2k|            return parse_presentation_regex(begin, end, handler);
 6833|  43.2k|        }
 6834|  4.52k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  4.52k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 444, False: 4.08k]
  |  |  ------------------
  ------------------
 6836|    444|            handler.on_error("Invalid type specifier in format string");
 6837|    444|            return begin;
 6838|    444|        }
 6839|  4.08k|        handler.on_type(type);
 6840|  4.08k|        return begin;
 6841|  4.52k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6657|  16.2k|{
 6658|  16.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  16.2k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  16.2k|    auto start = begin;
 6662|  16.2k|    ++begin;
 6663|       |
 6664|  16.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 16.1k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|     44|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|     44|        return {};
 6669|     44|    }
 6670|  16.1k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 5.37k, False: 10.8k]
  ------------------
 6671|  5.37k|        handler.on_charset_inverted();
 6672|  5.37k|        ++begin;
 6673|  5.37k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 5.33k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     36|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|     36|            return {};
 6678|     36|        }
 6679|  5.33k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 72, False: 5.26k]
  ------------------
 6680|     72|            handler.on_charset_single(char32_t{']'});
 6681|     72|            ++begin;
 6682|     72|        }
 6683|  5.33k|    }
 6684|  10.8k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 36, False: 10.7k]
  ------------------
 6685|     36|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|     36|    }
 6687|       |
 6688|  1.87M|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 1.87M, False: 648]
  ------------------
 6689|  1.87M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.87M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 458, False: 1.87M]
  |  |  ------------------
  ------------------
 6690|    458|            break;
 6691|    458|        }
 6692|       |
 6693|  1.87M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 14.9k, False: 1.85M]
  ------------------
 6694|  14.9k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  14.9k|        }
 6696|       |
 6697|  1.85M|        parse_presentation_set_literal(begin, end, handler);
 6698|  1.85M|    }
 6699|       |
 6700|  1.10k|    SCN_UNLIKELY_ATTR
 6701|  1.10k|    handler.on_error("Invalid [character set] specifier in format string");
 6702|  1.10k|    return {};
 6703|  16.1k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6621|  1.85M|{
 6622|  1.85M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  1.85M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  1.85M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 296, False: 1.85M]
  |  |  ------------------
  ------------------
 6626|    296|        return;
 6627|    296|    }
 6628|       |
 6629|  1.85M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 1.85M, False: 364]
  |  Branch (6629:25): [True: 9.75k, False: 1.84M]
  |  Branch (6629:49): [True: 9.71k, False: 36]
  ------------------
 6630|  1.85M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 9.57k, False: 144]
  ------------------
 6631|  9.57k|        ++begin;
 6632|       |
 6633|  9.57k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  9.57k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  9.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 9.50k]
  |  |  ------------------
  ------------------
 6635|     70|            return;
 6636|     70|        }
 6637|       |
 6638|  9.50k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  9.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 9.44k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|     60|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|     60|            return;
 6643|     60|        }
 6644|       |
 6645|  9.44k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  9.44k|        return;
 6647|  9.50k|    }
 6648|       |
 6649|  1.84M|    handler.on_charset_single(cp_first);
 6650|  1.84M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6597|  1.86M|{
 6598|  1.86M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  1.86M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  1.86M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  3.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 100, False: 1.86M]
  |  |  |  Branch (859:45): [True: 74, False: 1.86M]
  |  |  |  Branch (859:45): [True: 26, False: 1.86M]
  |  |  ------------------
  ------------------
 6602|    100|        handler.on_error("Invalid encoding in format string");
 6603|    100|        return invalid_code_point;
 6604|    100|    }
 6605|       |
 6606|  1.86M|    const auto cp =
 6607|  1.86M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  1.86M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266, False: 1.86M]
  |  |  ------------------
  ------------------
 6609|    266|        handler.on_error("Invalid encoding in format string");
 6610|    266|        return invalid_code_point;
 6611|    266|    }
 6612|       |
 6613|  1.86M|    begin += len;
 6614|  1.86M|    return cp;
 6615|  1.86M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6306|  14.9k|    {
 6307|  14.9k|        m_specs.charset_string_data = fmt.data();
 6308|  14.9k|        m_specs.charset_string_size = fmt.size();
 6309|  14.9k|        on_type(presentation_type::string_set);
 6310|  14.9k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6709|  43.2k|{
 6710|  43.2k|#if !SCN_DISABLE_REGEX
 6711|  43.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  43.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6712|  43.2k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  43.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6713|       |
 6714|  43.2k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  86.5k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6714:19): [Folded - Ignored]
  |  Branch (6714:19): [Folded - Ignored]
  ------------------
 6715|  43.2k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6715:19): [Folded - Ignored]
  ------------------
 6716|  43.2k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6717|  43.2k|        return begin;
 6718|  43.2k|    }
 6719|       |
 6720|  43.2k|    auto start = begin;
 6721|  43.2k|    ++begin;
 6722|       |
 6723|  43.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 43.2k]
  |  |  ------------------
  ------------------
 6724|     42|        handler.on_error("Unexpected end of regex in format string");
 6725|     42|        return begin;
 6726|     42|    }
 6727|       |
 6728|  43.2k|    handler.on_type(presentation_type::regex);
 6729|  12.7M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6729:12): [True: 12.7M, False: 178]
  ------------------
 6730|  12.7M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6730:13): [True: 60.1k, False: 12.6M]
  ------------------
 6731|  60.1k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6731:17): [True: 43.0k, False: 17.0k]
  ------------------
 6732|  43.0k|                break;
 6733|  43.0k|            }
 6734|  17.0k|            else {
 6735|  17.0k|                handler.on_type(presentation_type::regex_escaped);
 6736|  17.0k|            }
 6737|  60.1k|        }
 6738|  12.7M|    }
 6739|  43.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 178, False: 43.0k]
  |  |  ------------------
  ------------------
 6740|    178|        handler.on_error("Unexpected end of regex in format string");
 6741|    178|        return begin;
 6742|    178|    }
 6743|       |
 6744|  43.0k|    auto regex_end = begin;
 6745|  43.0k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6746|  43.0k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54, False: 43.0k]
  |  |  ------------------
  ------------------
 6747|     54|        handler.on_error("Invalid (empty) regex in format string");
 6748|     54|        return begin;
 6749|     54|    }
 6750|  43.0k|    handler.on_regex_pattern(regex_pattern);
 6751|  43.0k|    ++begin;
 6752|       |
 6753|  43.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48, False: 42.9k]
  |  |  ------------------
  ------------------
 6754|     48|        handler.on_error("Unexpected end of regex in format string");
 6755|     48|        return begin;
 6756|     48|    }
 6757|       |
 6758|  42.9k|    regex_flags flags{regex_flags::none};
 6759|  42.9k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6760|  42.9k|        {{'m', regex_flags::multiline},
 6761|  42.9k|         {'s', regex_flags::singleline},
 6762|  42.9k|         {'i', regex_flags::nocase},
 6763|  42.9k|         {'n', regex_flags::nocapture}}};
 6764|  51.6k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 51.5k, False: 62]
  ------------------
 6765|  51.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6765:13): [True: 42.7k, False: 8.88k]
  ------------------
 6766|  42.7k|            break;
 6767|  42.7k|        }
 6768|  8.88k|        bool found_flag = false;
 6769|  23.6k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6769:24): [True: 23.6k, False: 158]
  ------------------
 6770|  23.6k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6770:17): [True: 14.9k, False: 8.72k]
  ------------------
 6771|  14.9k|                continue;
 6772|  14.9k|            }
 6773|  8.72k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6773:17): [True: 36, False: 8.68k]
  ------------------
 6774|     36|                handler.on_error("Flag set multiple times in regex");
 6775|     36|                return begin;
 6776|     36|            }
 6777|  8.68k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6778|  8.68k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6778:17): [True: 54, False: 8.63k]
  ------------------
 6779|       |                // clang-format off
 6780|     54|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6781|       |                // clang-format on
 6782|     54|            }
 6783|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6784|       |            if (*begin == CharT{'m'}) {
 6785|       |                // clang-format off
 6786|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6787|       |                // clang-format on
 6788|       |            }
 6789|       |#endif
 6790|  8.68k|#endif
 6791|  8.68k|            flags |= flag.second;
 6792|  8.68k|            found_flag = true;
 6793|  8.68k|            break;
 6794|  8.72k|        }
 6795|  8.84k|        if (!found_flag) {
  ------------------
  |  Branch (6795:13): [True: 158, False: 8.68k]
  ------------------
 6796|    158|            handler.on_error("Invalid flag in regex");
 6797|    158|            return begin;
 6798|    158|        }
 6799|  8.84k|    }
 6800|  42.7k|    handler.on_regex_flags(flags);
 6801|       |
 6802|  42.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62, False: 42.7k]
  |  |  ------------------
  ------------------
 6803|     62|        handler.on_error("Unexpected end of regex in format string");
 6804|     62|        return begin;
 6805|     62|    }
 6806|       |
 6807|  42.7k|    return begin;
 6808|       |#else
 6809|       |    handler.on_error("Regular expression support is disabled");
 6810|       |    return {};
 6811|       |#endif
 6812|  42.7k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6314|  43.0k|    {
 6315|  43.0k|        m_specs.charset_string_data = pattern.data();
 6316|  43.0k|        m_specs.charset_string_size = pattern.size();
 6317|  43.0k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6415|  4.52k|{
 6416|  4.52k|    switch (type) {
 6417|    258|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 258, False: 4.26k]
  ------------------
 6418|    312|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 54, False: 4.47k]
  ------------------
 6419|    312|            return presentation_type::int_binary;
 6420|    152|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 152, False: 4.37k]
  ------------------
 6421|    152|            return presentation_type::int_decimal;
 6422|    360|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 360, False: 4.16k]
  ------------------
 6423|    360|            return presentation_type::int_generic;
 6424|     90|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 90, False: 4.43k]
  ------------------
 6425|     90|            return presentation_type::int_unsigned_decimal;
 6426|    132|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 132, False: 4.39k]
  ------------------
 6427|    132|            return presentation_type::int_octal;
 6428|    144|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 144, False: 4.38k]
  ------------------
 6429|    196|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 52, False: 4.47k]
  ------------------
 6430|    196|            return presentation_type::int_hex;
 6431|     44|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 44, False: 4.48k]
  ------------------
 6432|     80|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 36, False: 4.49k]
  ------------------
 6433|     80|            return presentation_type::int_arbitrary_base;
 6434|     90|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 90, False: 4.43k]
  ------------------
 6435|    180|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 90, False: 4.43k]
  ------------------
 6436|    180|            return presentation_type::float_hex;
 6437|     90|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 90, False: 4.43k]
  ------------------
 6438|    144|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 54, False: 4.47k]
  ------------------
 6439|    144|            return presentation_type::float_scientific;
 6440|    306|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 306, False: 4.22k]
  ------------------
 6441|    378|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 72, False: 4.45k]
  ------------------
 6442|    378|            return presentation_type::float_fixed;
 6443|     44|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 44, False: 4.48k]
  ------------------
 6444|    142|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 98, False: 4.42k]
  ------------------
 6445|    142|            return presentation_type::float_general;
 6446|    720|        case 's':
  ------------------
  |  Branch (6446:9): [True: 720, False: 3.80k]
  ------------------
 6447|    720|            return presentation_type::string;
 6448|  1.06k|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 1.06k, False: 3.46k]
  ------------------
 6449|  1.06k|            return presentation_type::character;
 6450|     36|        case '?':
  ------------------
  |  Branch (6450:9): [True: 36, False: 4.49k]
  ------------------
 6451|     36|            return presentation_type::escaped_character;
 6452|     98|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 98, False: 4.42k]
  ------------------
 6453|     98|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 4.52k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 4.52k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|    444|        default:
  ------------------
  |  Branch (6460:9): [True: 444, False: 4.08k]
  ------------------
 6461|    444|            return presentation_type::none;
 6462|  4.52k|    }
 6463|  4.52k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6492|  66.9k|{
 6493|  66.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  66.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  66.9k|    auto check_align = [](wchar_t ch) {
 6496|  66.9k|        switch (ch) {
 6497|  66.9k|            case L'<':
 6498|  66.9k|                return align_type::left;
 6499|  66.9k|            case L'>':
 6500|  66.9k|                return align_type::right;
 6501|  66.9k|            case L'^':
 6502|  66.9k|                return align_type::center;
 6503|  66.9k|            default:
 6504|  66.9k|                return align_type::none;
 6505|  66.9k|        }
 6506|  66.9k|    };
 6507|       |
 6508|  66.9k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  66.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 66.9k]
  |  |  |  Branch (859:45): [True: 38, False: 66.9k]
  |  |  |  Branch (859:45): [True: 4, False: 66.9k]
  |  |  ------------------
  ------------------
 6510|  66.9k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|     42|        handler.on_error("Invalid encoding in fill character");
 6512|     42|        return begin;
 6513|     42|    }
 6514|       |
 6515|  66.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  66.9k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  66.9k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  66.9k|    const auto begin_before_fill = begin;
 6520|  66.9k|    begin += potential_fill_len;
 6521|       |
 6522|  66.9k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 1.10k, False: 65.8k]
  ------------------
 6523|  1.10k|        return begin_before_fill;
 6524|  1.10k|    }
 6525|       |
 6526|  65.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  65.8k|    const auto begin_after_fill = begin;
 6528|  65.8k|    ++begin;
 6529|       |
 6530|  65.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 65.6k, False: 192]
  ------------------
 6531|  65.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 65.5k]
  |  |  ------------------
  ------------------
 6532|     80|            handler.on_error("Invalid fill character '{' in format string");
 6533|     80|            return begin;
 6534|     80|        }
 6535|  65.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 13.6k, False: 51.9k]
  ------------------
 6536|  13.6k|            return begin_before_fill;
 6537|  13.6k|        }
 6538|  65.5k|    }
 6539|       |
 6540|  52.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 45.9k, False: 6.19k]
  ------------------
 6541|  45.9k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 1.66k, False: 44.2k]
  ------------------
 6542|  1.66k|            handler.on_align(potential_align_on_fill);
 6543|  1.66k|            return begin_after_fill;
 6544|  1.66k|        }
 6545|  44.2k|        return begin_before_fill;
 6546|  45.9k|    }
 6547|       |
 6548|  6.19k|    handler.on_fill(potential_fill);
 6549|  6.19k|    handler.on_align(potential_align_after_fill);
 6550|  6.19k|    return begin;
 6551|  52.1k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6474|  66.9k|{
 6475|  66.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  66.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  66.9k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  66.9k|        return 1;
 6478|  66.9k|    }
 6479|  66.9k|    else {
 6480|  66.9k|        const auto lengths =
 6481|  66.9k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  66.9k|            "\3\4";
 6483|  66.9k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  66.9k|        return len;
 6485|  66.9k|    }
 6486|  66.9k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|   132k|    auto check_align = [](wchar_t ch) {
 6496|   132k|        switch (ch) {
 6497|    486|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 486, False: 132k]
  ------------------
 6498|    486|                return align_type::left;
 6499|    808|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 808, False: 131k]
  ------------------
 6500|    808|                return align_type::right;
 6501|  10.4k|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 10.4k, False: 122k]
  ------------------
 6502|  10.4k|                return align_type::center;
 6503|   121k|            default:
  ------------------
  |  Branch (6503:13): [True: 121k, False: 11.7k]
  ------------------
 6504|   121k|                return align_type::none;
 6505|   132k|        }
 6506|   132k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6228|  6.19k|    {
 6229|  6.19k|        m_specs.fill = fill;
 6230|  6.19k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6109|  6.19k|    {
 6110|  6.19k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  6.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6111|  6.19k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  6.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6112|  6.19k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6112:23): [Folded - Ignored]
  ------------------
 6113|  12.6k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6113:32): [True: 6.41k, False: 6.19k]
  ------------------
 6114|  6.41k|                SCN_GCC_PUSH
 6115|  6.41k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6116|  6.41k|                m_data[i] = s[i];
 6117|  6.41k|                SCN_GCC_POP
 6118|  6.41k|            }
 6119|  6.19k|            m_size = static_cast<unsigned char>(s.size());
 6120|  6.19k|        }
 6121|  6.19k|        else if constexpr (sizeof(CharT) == 2) {
 6122|  6.19k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6123|  6.19k|            m_data[1] =
 6124|  6.19k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6125|  6.19k|            if (s.size() == 1) {
 6126|  6.19k|                return;
 6127|  6.19k|            }
 6128|  6.19k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6129|  6.19k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6130|  6.19k|        }
 6131|  6.19k|        else {
 6132|  6.19k|            const auto front = static_cast<unsigned>(s.front());
 6133|  6.19k|            m_data[0] = static_cast<char>(front);
 6134|  6.19k|            m_data[1] = static_cast<char>(front >> 8);
 6135|  6.19k|            m_data[2] = static_cast<char>(front >> 16);
 6136|  6.19k|            m_data[3] = static_cast<char>(front >> 24);
 6137|  6.19k|        }
 6138|  6.19k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6557|  66.8k|{
 6558|  66.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  66.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  66.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 24.7k, False: 42.0k]
  |  Branch (6560:33): [True: 8.03k, False: 16.7k]
  ------------------
 6561|  8.03k|        int width = parse_simple_int(begin, end);
 6562|  8.03k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.00k, False: 36]
  |  |  ------------------
  ------------------
 6563|  8.00k|            handler.on_width(width);
 6564|  8.00k|        }
 6565|     36|        else {
 6566|     36|            handler.on_error("Invalid field width");
 6567|     36|            return begin;
 6568|     36|        }
 6569|  8.03k|    }
 6570|  66.8k|    return begin;
 6571|  66.8k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7087|    574|    {
 7088|    574|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|    574|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 518, False: 56]
  ------------------
 7090|    574|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 462, False: 56]
  ------------------
 7091|    574|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 406, False: 56]
  ------------------
 7092|    574|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 350, False: 56]
  ------------------
 7093|    350|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|    350|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|    350|        }
 7098|       |
 7099|    224|        Handler::on_localized();
 7100|    224|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  64.5k|{
 8378|  64.5k|#define SCN_VISIT(Type)                                         \
 8379|  64.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  64.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  64.5k|    }                                                           \
 8382|  64.5k|    else {                                                      \
 8383|  64.5k|        return vis(monostate_val);                              \
 8384|  64.5k|    }
 8385|       |
 8386|  64.5k|    monostate monostate_val{};
 8387|       |
 8388|  64.5k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 64.5k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 64.5k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|  7.20k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 7.20k, False: 57.3k]
  ------------------
 8394|  7.20k|            SCN_VISIT(int);
  ------------------
  |  | 8379|  7.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.20k|    }                                                           \
  |  | 8382|  7.20k|    else {                                                      \
  |  | 8383|  7.20k|        return vis(monostate_val);                              \
  |  | 8384|  7.20k|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 64.5k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 64.5k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 64.5k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 64.5k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|  7.20k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 7.20k, False: 57.3k]
  ------------------
 8404|  7.20k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|  7.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.20k|    }                                                           \
  |  | 8382|  7.20k|    else {                                                      \
  |  | 8383|  7.20k|        return vis(monostate_val);                              \
  |  | 8384|  7.20k|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 64.5k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 64.5k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|  7.15k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 7.15k, False: 57.4k]
  ------------------
 8410|  7.15k|            SCN_VISIT(void*);
  ------------------
  |  | 8379|  7.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.15k|    }                                                           \
  |  | 8382|  7.15k|    else {                                                      \
  |  | 8383|  7.15k|        return vis(monostate_val);                              \
  |  | 8384|  7.15k|    }
  ------------------
 8411|  7.20k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 7.20k, False: 57.3k]
  ------------------
 8412|  7.20k|            SCN_VISIT(bool);
  ------------------
  |  | 8379|  7.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.20k|    }                                                           \
  |  | 8382|  7.20k|    else {                                                      \
  |  | 8383|  7.20k|        return vis(monostate_val);                              \
  |  | 8384|  7.20k|    }
  ------------------
 8413|  7.15k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 7.15k, False: 57.4k]
  ------------------
 8414|  7.15k|            SCN_VISIT(char);
  ------------------
  |  | 8379|  7.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.15k|    }                                                           \
  |  | 8382|  7.15k|    else {                                                      \
  |  | 8383|  7.15k|        return vis(monostate_val);                              \
  |  | 8384|  7.15k|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 64.5k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 64.5k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 64.5k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|  7.20k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 7.20k, False: 57.3k]
  ------------------
 8422|  7.20k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  7.20k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.20k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.20k|    }                                                           \
  |  | 8382|  7.20k|    else {                                                      \
  |  | 8383|  7.20k|        return vis(monostate_val);                              \
  |  | 8384|  7.20k|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 64.5k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|  7.15k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 7.15k, False: 57.4k]
  ------------------
 8426|  7.15k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|  7.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.15k|    }                                                           \
  |  | 8382|  7.15k|    else {                                                      \
  |  | 8383|  7.15k|        return vis(monostate_val);                              \
  |  | 8384|  7.15k|    }
  ------------------
 8427|  7.15k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 7.15k, False: 57.4k]
  ------------------
 8428|  7.15k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  7.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.15k|    }                                                           \
  |  | 8382|  7.15k|    else {                                                      \
  |  | 8383|  7.15k|        return vis(monostate_val);                              \
  |  | 8384|  7.15k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 64.5k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|  7.15k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 7.15k, False: 57.4k]
  ------------------
 8432|  7.15k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  7.15k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.15k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.15k|    }                                                           \
  |  | 8382|  7.15k|    else {                                                      \
  |  | 8383|  7.15k|        return vis(monostate_val);                              \
  |  | 8384|  7.15k|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 64.5k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 64.5k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 64.5k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 64.5k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 64.5k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  64.5k|            SCN_CLANG_POP
 8456|  64.5k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5426|   162k|    {
 5427|   162k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|   162k|        return static_cast<std::size_t>(m_desc &
 5432|   162k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|   162k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5451|   165k|    {
 5452|   165k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   165k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5394|  2.68k|    {
 5395|  2.68k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.68k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  2.68k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  2.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 2.66k]
  |  |  ------------------
  ------------------
 5403|     18|            return {};
 5404|     18|        }
 5405|       |
 5406|  2.66k|        const auto t = type(id);
 5407|  2.66k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  2.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 2.62k]
  |  |  ------------------
  ------------------
 5408|     40|            return {};
 5409|     40|        }
 5410|       |
 5411|  2.62k|        basic_scan_arg<Context> arg;
 5412|  2.62k|        arg.m_type = t;
 5413|  2.62k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 2.62k, False: 0]
  ------------------
 5414|  2.62k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  2.62k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  2.62k|        return arg;
 5420|  2.66k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5201|  2.68k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5460|  2.66k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  2.66k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  2.66k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  2.66k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  2.66k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5455|  2.62k|    {
 5456|  2.62k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  2.62k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5207|  3.60k|    {
 5208|  3.60k|        return m_type != detail::arg_type::none_type;
 5209|  3.60k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|    414|{
 8378|    414|#define SCN_VISIT(Type)                                         \
 8379|    414|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|    414|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|    414|    }                                                           \
 8382|    414|    else {                                                      \
 8383|    414|        return vis(monostate_val);                              \
 8384|    414|    }
 8385|       |
 8386|    414|    monostate monostate_val{};
 8387|       |
 8388|    414|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 414]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 414]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|     46|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 46, False: 368]
  ------------------
 8394|     46|            SCN_VISIT(int);
  ------------------
  |  | 8379|     46|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     46|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     46|    }                                                           \
  |  | 8382|     46|    else {                                                      \
  |  | 8383|     46|        return vis(monostate_val);                              \
  |  | 8384|     46|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 414]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 414]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 414]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 414]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|     46|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 46, False: 368]
  ------------------
 8404|     46|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|     46|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     46|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     46|    }                                                           \
  |  | 8382|     46|    else {                                                      \
  |  | 8383|     46|        return vis(monostate_val);                              \
  |  | 8384|     46|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 414]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 414]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|     46|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 46, False: 368]
  ------------------
 8410|     46|            SCN_VISIT(void*);
  ------------------
  |  | 8379|     46|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     46|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     46|    }                                                           \
  |  | 8382|     46|    else {                                                      \
  |  | 8383|     46|        return vis(monostate_val);                              \
  |  | 8384|     46|    }
  ------------------
 8411|     46|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 46, False: 368]
  ------------------
 8412|     46|            SCN_VISIT(bool);
  ------------------
  |  | 8379|     46|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     46|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     46|    }                                                           \
  |  | 8382|     46|    else {                                                      \
  |  | 8383|     46|        return vis(monostate_val);                              \
  |  | 8384|     46|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 414]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|     46|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 46, False: 368]
  ------------------
 8416|     46|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|     46|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     46|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     46|    }                                                           \
  |  | 8382|     46|    else {                                                      \
  |  | 8383|     46|        return vis(monostate_val);                              \
  |  | 8384|     46|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 414]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 414]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|     46|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 46, False: 368]
  ------------------
 8422|     46|            SCN_VISIT(double);
  ------------------
  |  | 8379|     46|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     46|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     46|    }                                                           \
  |  | 8382|     46|    else {                                                      \
  |  | 8383|     46|        return vis(monostate_val);                              \
  |  | 8384|     46|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 414]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 414]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|     46|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 46, False: 368]
  ------------------
 8428|     46|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|     46|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     46|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     46|    }                                                           \
  |  | 8382|     46|    else {                                                      \
  |  | 8383|     46|        return vis(monostate_val);                              \
  |  | 8384|     46|    }
  ------------------
 8429|     46|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 46, False: 368]
  ------------------
 8430|     46|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|     46|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     46|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     46|    }                                                           \
  |  | 8382|     46|    else {                                                      \
  |  | 8383|     46|        return vis(monostate_val);                              \
  |  | 8384|     46|    }
  ------------------
 8431|     46|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 46, False: 368]
  ------------------
 8432|     46|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|     46|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     46|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     46|    }                                                           \
  |  | 8382|     46|    else {                                                      \
  |  | 8383|     46|        return vis(monostate_val);                              \
  |  | 8384|     46|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 414]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 414]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 414]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 414]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 414]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|    414|            SCN_CLANG_POP
 8456|    414|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5505|   162k|    {
 5506|   162k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8016|   162k|    {
 8017|   162k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   162k|{
 7005|   162k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   162k|    handler.check_args_exhausted();
 7007|   162k|    return handler.get_error();
 7008|   162k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   162k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   162k|    auto begin = format.data();
 6974|   162k|    auto it = begin;
 6975|   162k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   337M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 337M, False: 77.6k]
  ------------------
 6978|   337M|        const auto ch = *it++;
 6979|   337M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 2.99k, False: 337M]
  ------------------
 6980|  2.99k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  2.99k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  2.99k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 2.82k, False: 170]
  ------------------
 6984|  2.82k|                return;
 6985|  2.82k|            }
 6986|  2.99k|        }
 6987|   337M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 82.2k, False: 337M]
  ------------------
 6988|  82.2k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82.2k, False: 0]
  |  |  |  Branch (859:45): [True: 378, False: 81.8k]
  |  |  |  Branch (859:45): [True: 81.8k, False: 0]
  |  |  ------------------
  ------------------
 6989|  82.2k|                handler.on_error("Unmatched '}' in format string");
 6990|  82.2k|                return;
 6991|  82.2k|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|   337M|    }
 6997|       |
 6998|  77.6k|    handler.on_literal_text(begin, end);
 6999|  77.6k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6902|  2.99k|{
 6903|  2.99k|    struct id_adapter {
 6904|  2.99k|        constexpr void operator()()
 6905|  2.99k|        {
 6906|  2.99k|            arg_id = handler.on_arg_id();
 6907|  2.99k|        }
 6908|  2.99k|        constexpr void operator()(std::size_t id)
 6909|  2.99k|        {
 6910|  2.99k|            arg_id = handler.on_arg_id(id);
 6911|  2.99k|        }
 6912|       |
 6913|  2.99k|        constexpr void on_error(const char* msg)
 6914|  2.99k|        {
 6915|  2.99k|            SCN_UNLIKELY_ATTR
 6916|  2.99k|            handler.on_error(msg);
 6917|  2.99k|        }
 6918|       |
 6919|  2.99k|        Handler& handler;
 6920|  2.99k|        std::size_t arg_id;
 6921|  2.99k|    };
 6922|       |
 6923|  2.99k|    ++begin;
 6924|  2.99k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 2.95k]
  |  |  ------------------
  ------------------
 6925|     36|        handler.on_error("Unexpected end of replacement field");
 6926|     36|        return begin;
 6927|     36|    }
 6928|       |
 6929|  2.95k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 846, False: 2.11k]
  ------------------
 6930|    846|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|    846|    }
 6932|  2.11k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 2.11k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  2.11k|    else {
 6936|  2.11k|        auto adapter = id_adapter{handler, 0};
 6937|  2.11k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  2.11k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 2.07k]
  |  |  ------------------
  ------------------
 6940|     36|            handler.on_error("Missing '}' in format string");
 6941|     36|            return begin;
 6942|     36|        }
 6943|       |
 6944|  2.07k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 36, False: 2.03k]
  ------------------
 6945|     36|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|     36|        }
 6947|  2.03k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 1.84k, False: 198]
  ------------------
 6948|  1.84k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 1.80k]
  |  |  ------------------
  ------------------
 6949|     36|                handler.on_error("Unexpected end of replacement field");
 6950|     36|                return begin;
 6951|     36|            }
 6952|  1.80k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  1.80k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 436, False: 1.36k]
  |  |  |  Branch (859:45): [True: 0, False: 1.80k]
  |  |  |  Branch (859:45): [True: 436, False: 1.36k]
  |  |  ------------------
  ------------------
 6954|    436|                handler.on_error("Unknown format specifier");
 6955|    436|                return begin;
 6956|    436|            }
 6957|  1.80k|        }
 6958|    198|        else {
 6959|    198|            SCN_UNLIKELY_ATTR
 6960|    198|            handler.on_error("Missing '}' in format string");
 6961|    198|            return begin;
 6962|    198|        }
 6963|  2.07k|    }
 6964|  2.25k|    return begin + 1;
 6965|  2.95k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 7999|  2.68k|    {
 8000|  2.68k|        return m_args.get(id);
 8001|  2.68k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8004|    882|    {
 8005|    882|        return m_args;
 8006|    882|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8009|  2.25k|    {
 8010|  2.25k|        return m_locale;
 8011|  2.25k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5526|  2.68k|    {
 5527|  2.68k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  2.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.68k]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|  2.68k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  2.68k|        do_check_arg_id(id);
 5535|  2.68k|        return id;
 5536|  2.68k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6014|  2.72k|{
 6015|  2.72k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  2.72k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  2.72k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  2.11k|{
 6404|  2.11k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  2.11k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 2.11k, False: 0]
  |  Branch (6405:26): [True: 270, False: 1.84k]
  ------------------
 6406|    270|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|    270|    }
 6408|       |
 6409|  1.84k|    handler();
 6410|  1.84k|    return begin;
 6411|  2.11k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6373|    270|{
 6374|    270|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    270|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    270|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6375|       |
 6376|    270|    CharT c = *begin;
 6377|    270|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6377:9): [True: 90, False: 180]
  |  Branch (6377:27): [True: 90, False: 90]
  ------------------
 6378|    180|        handler.on_error("Invalid argument ID");
 6379|    180|        return begin;
 6380|    180|    }
 6381|       |
 6382|     90|    int idx = 0;
 6383|     90|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6383:9): [True: 72, False: 18]
  ------------------
 6384|     72|        idx = parse_simple_int(begin, end);
 6385|     72|    }
 6386|     18|    else {
 6387|     18|        ++begin;
 6388|     18|    }
 6389|       |
 6390|     90|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6390:9): [True: 36, False: 54]
  |  Branch (6390:26): [True: 18, False: 36]
  |  Branch (6390:50): [True: 18, False: 0]
  ------------------
 6391|     54|        handler.on_error("Invalid argument ID");
 6392|     54|        return begin;
 6393|     54|    }
 6394|     36|    handler(idx);
 6395|       |
 6396|     36|    return begin;
 6397|     90|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6914|    234|        {
 6915|    234|            SCN_UNLIKELY_ATTR
 6916|    234|            handler.on_error(msg);
 6917|    234|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6352|  1.22k|{
 6353|  1.22k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6354|  1.22k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  1.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6355|       |
 6356|  1.22k|    unsigned long long value = 0;
 6357|  1.24k|    do {
 6358|  1.24k|        value *= 10;
 6359|  1.24k|        value += static_cast<unsigned long long>(*begin - '0');
 6360|  1.24k|        if (value >
  ------------------
  |  Branch (6360:13): [True: 0, False: 1.24k]
  ------------------
 6361|  1.24k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6362|      0|            return -1;
 6363|      0|        }
 6364|  1.24k|        ++begin;
 6365|  1.24k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6365:14): [True: 1.20k, False: 36]
  |  Branch (6365:30): [True: 1.17k, False: 36]
  |  Branch (6365:47): [True: 18, False: 1.15k]
  ------------------
 6366|  1.22k|    return static_cast<int>(value);
 6367|  1.22k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6909|     36|        {
 6910|     36|            arg_id = handler.on_arg_id(id);
 6911|     36|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5539|     36|    {
 5540|     36|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 5541|      0|            on_error(
 5542|      0|                "Cannot switch from manual to automatic argument indexing");
 5543|      0|            return;
 5544|      0|        }
 5545|     36|        m_next_arg_id = -1;
 5546|     36|        do_check_arg_id(id);
 5547|     36|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  1.84k|        {
 6906|  1.84k|            arg_id = handler.on_arg_id();
 6907|  1.84k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5212|  3.60k|    {
 5213|  3.60k|        return m_type;
 5214|  3.60k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5521|  1.36k|    {
 5522|  1.36k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  1.36k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5510|  3.17k|    {
 5511|  3.17k|        return m_format.data();
 5512|  3.17k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  1.80k|    {
 7083|  1.80k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  1.80k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6818|  1.80k|{
 6819|  1.80k|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.80k|        if (*begin == CharT{'['}) {
 6821|  1.80k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  1.80k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  1.80k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  1.80k|                return begin;
 6827|  1.80k|            }
 6828|  1.80k|            handler.on_character_set_string(set);
 6829|  1.80k|            return begin;
 6830|  1.80k|        }
 6831|  1.80k|        if (*begin == CharT{'/'}) {
 6832|  1.80k|            return parse_presentation_regex(begin, end, handler);
 6833|  1.80k|        }
 6834|  1.80k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.80k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  1.80k|            handler.on_error("Invalid type specifier in format string");
 6837|  1.80k|            return begin;
 6838|  1.80k|        }
 6839|  1.80k|        handler.on_type(type);
 6840|  1.80k|        return begin;
 6841|  1.80k|    };
 6842|       |
 6843|  1.80k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 1.58k, False: 216]
  |  Branch (6843:28): [True: 1.11k, False: 472]
  ------------------
 6844|  1.80k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 108, False: 1.00k]
  |  Branch (6844:36): [True: 108, False: 0]
  ------------------
 6845|    108|        return do_presentation();
 6846|    108|    }
 6847|       |
 6848|  1.69k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.69k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  1.69k|    begin = parse_align(begin, end, handler);
 6854|  1.69k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.69k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 1.66k]
  |  |  ------------------
  ------------------
 6855|     36|        handler.on_error("Unexpected end of format string");
 6856|     36|        return begin;
 6857|     36|    }
 6858|       |
 6859|  1.66k|    begin = parse_width(begin, end, handler);
 6860|  1.66k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 1.64k]
  |  |  ------------------
  ------------------
 6861|     18|        handler.on_error("Unexpected end of format string");
 6862|     18|        return begin;
 6863|     18|    }
 6864|       |
 6865|  1.64k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 1.64k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  1.64k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 0, False: 1.64k]
  ------------------
 6879|      0|        handler.on_localized();
 6880|      0|        ++begin;
 6881|      0|    }
 6882|  1.64k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.64k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  1.64k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 1.64k, False: 0]
  |  Branch (6887:25): [True: 526, False: 1.11k]
  ------------------
 6888|    526|        do_presentation();
 6889|    526|    }
 6890|  1.64k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.64k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 200, False: 1.44k]
  |  |  ------------------
  ------------------
 6891|    200|        handler.on_error("Unexpected end of format string");
 6892|    200|        return begin;
 6893|    200|    }
 6894|       |
 6895|  1.44k|    return begin;
 6896|  1.64k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6467|  1.11k|{
 6468|  1.11k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 144, False: 972]
  |  Branch (6468:33): [True: 108, False: 36]
  ------------------
 6469|  1.11k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 36, False: 972]
  |  Branch (6469:33): [True: 0, False: 36]
  ------------------
 6470|  1.11k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|    634|    auto do_presentation = [&]() -> const CharT* {
 6820|    634|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 112, False: 522]
  ------------------
 6821|    112|            auto set = parse_presentation_set(begin, end, handler);
 6822|    112|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|    112|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|    112|                return begin;
 6827|    112|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|    112|        }
 6831|    522|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 54, False: 468]
  ------------------
 6832|     54|            return parse_presentation_regex(begin, end, handler);
 6833|     54|        }
 6834|    468|        presentation_type type = parse_presentation_type(*begin++);
 6835|    468|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|    468|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 342]
  |  |  ------------------
  ------------------
 6836|    126|            handler.on_error("Invalid type specifier in format string");
 6837|    126|            return begin;
 6838|    126|        }
 6839|    342|        handler.on_type(type);
 6840|    342|        return begin;
 6841|    468|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6657|    112|{
 6658|    112|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|    112|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|    112|    auto start = begin;
 6662|    112|    ++begin;
 6663|       |
 6664|    112|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 94]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|     18|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|     18|        return {};
 6669|     18|    }
 6670|     94|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 0, False: 94]
  ------------------
 6671|      0|        handler.on_charset_inverted();
 6672|      0|        ++begin;
 6673|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 0, False: 0]
  ------------------
 6680|      0|            handler.on_charset_single(char32_t{']'});
 6681|      0|            ++begin;
 6682|      0|        }
 6683|      0|    }
 6684|     94|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 94]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|    196|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 176, False: 20]
  ------------------
 6689|    176|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|    176|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 102]
  |  |  ------------------
  ------------------
 6690|     74|            break;
 6691|     74|        }
 6692|       |
 6693|    102|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 0, False: 102]
  ------------------
 6694|      0|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|      0|        }
 6696|       |
 6697|    102|        parse_presentation_set_literal(begin, end, handler);
 6698|    102|    }
 6699|       |
 6700|     94|    SCN_UNLIKELY_ATTR
 6701|     94|    handler.on_error("Invalid [character set] specifier in format string");
 6702|     94|    return {};
 6703|     94|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6621|    102|{
 6622|    102|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|    102|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|    102|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|    102|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 56]
  |  |  ------------------
  ------------------
 6626|     46|        return;
 6627|     46|    }
 6628|       |
 6629|     56|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 36, False: 20]
  |  Branch (6629:25): [True: 28, False: 8]
  |  Branch (6629:49): [True: 28, False: 0]
  ------------------
 6630|     56|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 28, False: 0]
  ------------------
 6631|     28|        ++begin;
 6632|       |
 6633|     28|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|     28|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|     28|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
 6635|     28|            return;
 6636|     28|        }
 6637|       |
 6638|      0|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|      0|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|      0|        return;
 6647|      0|    }
 6648|       |
 6649|     28|    handler.on_charset_single(cp_first);
 6650|     28|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6597|    130|{
 6598|    130|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    130|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    130|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|    130|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|    130|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 130]
  |  |  |  Branch (859:45): [True: 0, False: 130]
  |  |  |  Branch (859:45): [True: 0, False: 130]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|    130|    const auto cp =
 6607|    130|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|    130|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|    130|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 56]
  |  |  ------------------
  ------------------
 6609|     74|        handler.on_error("Invalid encoding in format string");
 6610|     74|        return invalid_code_point;
 6611|     74|    }
 6612|       |
 6613|     56|    begin += len;
 6614|     56|    return cp;
 6615|    130|}
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6709|     54|{
 6710|     54|#if !SCN_DISABLE_REGEX
 6711|     54|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|     54|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     54|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6712|     54|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|     54|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     54|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6713|       |
 6714|     54|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    108|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6714:19): [Folded - Ignored]
  |  Branch (6714:19): [Folded - Ignored]
  ------------------
 6715|     54|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6715:19): [Folded - Ignored]
  ------------------
 6716|     54|        handler.on_error("Regex backend doesn't support wide strings as input");
 6717|     54|        return begin;
 6718|     54|    }
 6719|       |
 6720|     54|    auto start = begin;
 6721|     54|    ++begin;
 6722|       |
 6723|     54|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|     54|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 36]
  |  |  ------------------
  ------------------
 6724|     18|        handler.on_error("Unexpected end of regex in format string");
 6725|     18|        return begin;
 6726|     18|    }
 6727|       |
 6728|     36|    handler.on_type(presentation_type::regex);
 6729|     54|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6729:12): [True: 54, False: 0]
  ------------------
 6730|     54|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6730:13): [True: 36, False: 18]
  ------------------
 6731|     36|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6731:17): [True: 36, False: 0]
  ------------------
 6732|     36|                break;
 6733|     36|            }
 6734|      0|            else {
 6735|      0|                handler.on_type(presentation_type::regex_escaped);
 6736|      0|            }
 6737|     36|        }
 6738|     54|    }
 6739|     36|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 6740|      0|        handler.on_error("Unexpected end of regex in format string");
 6741|      0|        return begin;
 6742|      0|    }
 6743|       |
 6744|     36|    auto regex_end = begin;
 6745|     36|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6746|     36|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 18]
  |  |  ------------------
  ------------------
 6747|     18|        handler.on_error("Invalid (empty) regex in format string");
 6748|     18|        return begin;
 6749|     18|    }
 6750|     18|    handler.on_regex_pattern(regex_pattern);
 6751|     18|    ++begin;
 6752|       |
 6753|     18|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 6754|      0|        handler.on_error("Unexpected end of regex in format string");
 6755|      0|        return begin;
 6756|      0|    }
 6757|       |
 6758|     18|    regex_flags flags{regex_flags::none};
 6759|     18|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6760|     18|        {{'m', regex_flags::multiline},
 6761|     18|         {'s', regex_flags::singleline},
 6762|     18|         {'i', regex_flags::nocase},
 6763|     18|         {'n', regex_flags::nocapture}}};
 6764|     18|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 18, False: 0]
  ------------------
 6765|     18|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6765:13): [True: 0, False: 18]
  ------------------
 6766|      0|            break;
 6767|      0|        }
 6768|     18|        bool found_flag = false;
 6769|     72|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6769:24): [True: 72, False: 18]
  ------------------
 6770|     72|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6770:17): [True: 72, False: 0]
  ------------------
 6771|     72|                continue;
 6772|     72|            }
 6773|      0|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6773:17): [True: 0, False: 0]
  ------------------
 6774|      0|                handler.on_error("Flag set multiple times in regex");
 6775|      0|                return begin;
 6776|      0|            }
 6777|      0|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6778|      0|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6778:17): [True: 0, False: 0]
  ------------------
 6779|       |                // clang-format off
 6780|      0|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6781|       |                // clang-format on
 6782|      0|            }
 6783|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6784|       |            if (*begin == CharT{'m'}) {
 6785|       |                // clang-format off
 6786|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6787|       |                // clang-format on
 6788|       |            }
 6789|       |#endif
 6790|      0|#endif
 6791|      0|            flags |= flag.second;
 6792|      0|            found_flag = true;
 6793|      0|            break;
 6794|      0|        }
 6795|     18|        if (!found_flag) {
  ------------------
  |  Branch (6795:13): [True: 18, False: 0]
  ------------------
 6796|     18|            handler.on_error("Invalid flag in regex");
 6797|     18|            return begin;
 6798|     18|        }
 6799|     18|    }
 6800|      0|    handler.on_regex_flags(flags);
 6801|       |
 6802|      0|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6803|      0|        handler.on_error("Unexpected end of regex in format string");
 6804|      0|        return begin;
 6805|      0|    }
 6806|       |
 6807|      0|    return begin;
 6808|       |#else
 6809|       |    handler.on_error("Regular expression support is disabled");
 6810|       |    return {};
 6811|       |#endif
 6812|      0|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6314|     18|    {
 6315|     18|        m_specs.charset_string_data = pattern.data();
 6316|     18|        m_specs.charset_string_size = pattern.size();
 6317|     18|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6415|    468|{
 6416|    468|    switch (type) {
 6417|     36|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 36, False: 432]
  ------------------
 6418|     36|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 468]
  ------------------
 6419|     36|            return presentation_type::int_binary;
 6420|     18|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 18, False: 450]
  ------------------
 6421|     18|            return presentation_type::int_decimal;
 6422|     18|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 18, False: 450]
  ------------------
 6423|     18|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 468]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 468]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|     18|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 18, False: 450]
  ------------------
 6429|     36|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 18, False: 450]
  ------------------
 6430|     36|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 468]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 468]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|      0|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 0, False: 468]
  ------------------
 6435|      0|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 468]
  ------------------
 6436|      0|            return presentation_type::float_hex;
 6437|     18|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 18, False: 450]
  ------------------
 6438|     18|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 468]
  ------------------
 6439|     18|            return presentation_type::float_scientific;
 6440|      0|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 0, False: 468]
  ------------------
 6441|      0|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 468]
  ------------------
 6442|      0|            return presentation_type::float_fixed;
 6443|      0|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 0, False: 468]
  ------------------
 6444|      0|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 468]
  ------------------
 6445|      0|            return presentation_type::float_general;
 6446|     18|        case 's':
  ------------------
  |  Branch (6446:9): [True: 18, False: 450]
  ------------------
 6447|     18|            return presentation_type::string;
 6448|    198|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 198, False: 270]
  ------------------
 6449|    198|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 468]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 468]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 468]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 468]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|    126|        default:
  ------------------
  |  Branch (6460:9): [True: 126, False: 342]
  ------------------
 6461|    126|            return presentation_type::none;
 6462|    468|    }
 6463|    468|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6492|  1.69k|{
 6493|  1.69k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  1.69k|    auto check_align = [](wchar_t ch) {
 6496|  1.69k|        switch (ch) {
 6497|  1.69k|            case L'<':
 6498|  1.69k|                return align_type::left;
 6499|  1.69k|            case L'>':
 6500|  1.69k|                return align_type::right;
 6501|  1.69k|            case L'^':
 6502|  1.69k|                return align_type::center;
 6503|  1.69k|            default:
 6504|  1.69k|                return align_type::none;
 6505|  1.69k|        }
 6506|  1.69k|    };
 6507|       |
 6508|  1.69k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  1.69k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  3.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.69k]
  |  |  |  Branch (859:45): [True: 0, False: 1.69k]
  |  |  |  Branch (859:45): [True: 0, False: 1.69k]
  |  |  ------------------
  ------------------
 6510|  1.69k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  1.69k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  1.69k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  1.69k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  1.69k|    const auto begin_before_fill = begin;
 6520|  1.69k|    begin += potential_fill_len;
 6521|       |
 6522|  1.69k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 216, False: 1.48k]
  ------------------
 6523|    216|        return begin_before_fill;
 6524|    216|    }
 6525|       |
 6526|  1.48k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  1.48k|    const auto begin_after_fill = begin;
 6528|  1.48k|    ++begin;
 6529|       |
 6530|  1.48k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 1.48k, False: 0]
  ------------------
 6531|  1.48k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  1.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 1.46k]
  |  |  ------------------
  ------------------
 6532|     18|            handler.on_error("Invalid fill character '{' in format string");
 6533|     18|            return begin;
 6534|     18|        }
 6535|  1.46k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 94, False: 1.36k]
  ------------------
 6536|     94|            return begin_before_fill;
 6537|     94|        }
 6538|  1.46k|    }
 6539|       |
 6540|  1.36k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 1.35k, False: 18]
  ------------------
 6541|  1.35k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 18, False: 1.33k]
  ------------------
 6542|     18|            handler.on_align(potential_align_on_fill);
 6543|     18|            return begin_after_fill;
 6544|     18|        }
 6545|  1.33k|        return begin_before_fill;
 6546|  1.35k|    }
 6547|       |
 6548|     18|    handler.on_fill(potential_fill);
 6549|     18|    handler.on_align(potential_align_after_fill);
 6550|     18|    return begin;
 6551|  1.36k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6474|  1.69k|{
 6475|  1.69k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  1.69k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  1.69k|        return 1;
 6478|  1.69k|    }
 6479|  1.69k|    else {
 6480|  1.69k|        const auto lengths =
 6481|  1.69k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  1.69k|            "\3\4";
 6483|  1.69k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  1.69k|        return len;
 6485|  1.69k|    }
 6486|  1.69k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|  3.17k|    auto check_align = [](wchar_t ch) {
 6496|  3.17k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 3.17k]
  ------------------
 6498|      0|                return align_type::left;
 6499|     18|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 18, False: 3.15k]
  ------------------
 6500|     18|                return align_type::right;
 6501|     36|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 36, False: 3.14k]
  ------------------
 6502|     36|                return align_type::center;
 6503|  3.12k|            default:
  ------------------
  |  Branch (6503:13): [True: 3.12k, False: 54]
  ------------------
 6504|  3.12k|                return align_type::none;
 6505|  3.17k|        }
 6506|  3.17k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6228|     18|    {
 6229|     18|        m_specs.fill = fill;
 6230|     18|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6109|     18|    {
 6110|     18|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6111|     18|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|     18|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     18|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6112|     18|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6112:23): [Folded - Ignored]
  ------------------
 6113|     18|            for (size_t i = 0; i < s.size(); ++i) {
 6114|     18|                SCN_GCC_PUSH
 6115|     18|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6116|     18|                m_data[i] = s[i];
 6117|     18|                SCN_GCC_POP
 6118|     18|            }
 6119|     18|            m_size = static_cast<unsigned char>(s.size());
 6120|     18|        }
 6121|     18|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6121:28): [Folded - Ignored]
  ------------------
 6122|     18|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6123|     18|            m_data[1] =
 6124|     18|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6125|     18|            if (s.size() == 1) {
 6126|     18|                return;
 6127|     18|            }
 6128|     18|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6129|     18|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6130|     18|        }
 6131|     18|        else {
 6132|     18|            const auto front = static_cast<unsigned>(s.front());
 6133|     18|            m_data[0] = static_cast<char>(front);
 6134|     18|            m_data[1] = static_cast<char>(front >> 8);
 6135|     18|            m_data[2] = static_cast<char>(front >> 16);
 6136|     18|            m_data[3] = static_cast<char>(front >> 24);
 6137|     18|        }
 6138|     18|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6557|  1.66k|{
 6558|  1.66k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  1.66k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 1.58k, False: 72]
  |  Branch (6560:33): [True: 1.15k, False: 436]
  ------------------
 6561|  1.15k|        int width = parse_simple_int(begin, end);
 6562|  1.15k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  1.15k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.15k, False: 0]
  |  |  ------------------
  ------------------
 6563|  1.15k|            handler.on_width(width);
 6564|  1.15k|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|  1.15k|    }
 6570|  1.66k|    return begin;
 6571|  1.66k|}
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|    504|{
 8378|    504|#define SCN_VISIT(Type)                                         \
 8379|    504|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|    504|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|    504|    }                                                           \
 8382|    504|    else {                                                      \
 8383|    504|        return vis(monostate_val);                              \
 8384|    504|    }
 8385|       |
 8386|    504|    monostate monostate_val{};
 8387|       |
 8388|    504|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 504]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 504]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|     56|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 56, False: 448]
  ------------------
 8394|     56|            SCN_VISIT(int);
  ------------------
  |  | 8379|     56|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     56|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     56|    }                                                           \
  |  | 8382|     56|    else {                                                      \
  |  | 8383|     56|        return vis(monostate_val);                              \
  |  | 8384|     56|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 504]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 504]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 504]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 504]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|     56|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 56, False: 448]
  ------------------
 8404|     56|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|     56|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     56|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     56|    }                                                           \
  |  | 8382|     56|    else {                                                      \
  |  | 8383|     56|        return vis(monostate_val);                              \
  |  | 8384|     56|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 504]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 504]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|     56|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 56, False: 448]
  ------------------
 8410|     56|            SCN_VISIT(void*);
  ------------------
  |  | 8379|     56|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     56|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     56|    }                                                           \
  |  | 8382|     56|    else {                                                      \
  |  | 8383|     56|        return vis(monostate_val);                              \
  |  | 8384|     56|    }
  ------------------
 8411|     56|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 56, False: 448]
  ------------------
 8412|     56|            SCN_VISIT(bool);
  ------------------
  |  | 8379|     56|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     56|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     56|    }                                                           \
  |  | 8382|     56|    else {                                                      \
  |  | 8383|     56|        return vis(monostate_val);                              \
  |  | 8384|     56|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 504]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|     56|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 56, False: 448]
  ------------------
 8416|     56|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|     56|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     56|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     56|    }                                                           \
  |  | 8382|     56|    else {                                                      \
  |  | 8383|     56|        return vis(monostate_val);                              \
  |  | 8384|     56|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 504]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 504]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|     56|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 56, False: 448]
  ------------------
 8422|     56|            SCN_VISIT(double);
  ------------------
  |  | 8379|     56|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     56|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     56|    }                                                           \
  |  | 8382|     56|    else {                                                      \
  |  | 8383|     56|        return vis(monostate_val);                              \
  |  | 8384|     56|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 504]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 504]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|     56|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 56, False: 448]
  ------------------
 8428|     56|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|     56|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     56|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     56|    }                                                           \
  |  | 8382|     56|    else {                                                      \
  |  | 8383|     56|        return vis(monostate_val);                              \
  |  | 8384|     56|    }
  ------------------
 8429|     56|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 56, False: 448]
  ------------------
 8430|     56|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|     56|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     56|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     56|    }                                                           \
  |  | 8382|     56|    else {                                                      \
  |  | 8383|     56|        return vis(monostate_val);                              \
  |  | 8384|     56|    }
  ------------------
 8431|     56|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 56, False: 448]
  ------------------
 8432|     56|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|     56|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|     56|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|     56|    }                                                           \
  |  | 8382|     56|    else {                                                      \
  |  | 8383|     56|        return vis(monostate_val);                              \
  |  | 8384|     56|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 504]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 504]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 504]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 504]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 504]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|    504|            SCN_CLANG_POP
 8456|    504|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.04k|{
   89|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.04k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  81.3k|{
   44|  81.3k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  81.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  81.3k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.04k|{
  127|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.04k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  81.3k|{
   60|  81.3k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  81.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  81.3k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.04k|{
   89|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.04k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.04k|{
  127|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.04k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.04k|{
   89|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.04k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.04k|{
  127|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.04k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.04k|{
   89|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.04k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.04k|{
  127|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.04k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.04k|{
   89|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.04k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.04k|{
  127|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.04k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.04k|{
   89|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.04k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.04k|{
  127|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.04k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  9.04k|{
   89|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.04k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  9.04k|{
  127|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.04k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  9.04k|{
   89|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.04k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  9.04k|{
  127|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.04k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  9.04k|{
   89|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.04k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.04k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  9.04k|{
  127|  9.04k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.04k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.04k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.04k|    static_cast<    \
  |  |  929|  9.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.04k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   122k|{
  653|   122k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   122k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    102|{
  659|    102|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    102|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 51, False: 51]
  ------------------
  661|    102|                    : std::locale{};
  662|    102|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.58k|{
 1221|  1.58k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.58k|                                  m_nan_payload_buffer, value);
 1223|  1.58k|    value = this->setsign(value);
 1224|  1.58k|    return n;
 1225|  1.58k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|     90|{
 1221|     90|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|     90|                                  m_nan_payload_buffer, value);
 1223|     90|    value = this->setsign(value);
 1224|     90|    return n;
 1225|     90|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     84|{
 1461|     84|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     84|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     84|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     84|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     84|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     84|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     84|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     84|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     84|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     84|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     84|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     84|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     84|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 84, False: 0]
  ------------------
 1467|     84|        SCN_UNLIKELY_ATTR
 1468|     84|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     84|                                     "Invalid integer value");
 1470|     84|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.64k|{
 1461|  1.64k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.64k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.64k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.64k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.64k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.64k, False: 0]
  ------------------
 1467|  1.64k|        SCN_UNLIKELY_ATTR
 1468|  1.64k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.64k|                                     "Invalid integer value");
 1470|  1.64k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     90|{
 1461|     90|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     90|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     90|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     90|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     90|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 90, False: 0]
  ------------------
 1467|     90|        SCN_UNLIKELY_ATTR
 1468|     90|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     90|                                     "Invalid integer value");
 1470|     90|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.64k|{
 1461|  1.64k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.64k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.64k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.64k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.64k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.64k, False: 0]
  ------------------
 1467|  1.64k|        SCN_UNLIKELY_ATTR
 1468|  1.64k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.64k|                                     "Invalid integer value");
 1470|  1.64k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     90|{
 1461|     90|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     90|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     90|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     90|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     90|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 90, False: 0]
  ------------------
 1467|     90|        SCN_UNLIKELY_ATTR
 1468|     90|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     90|                                     "Invalid integer value");
 1470|     90|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.56k|{
 1461|  1.56k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.56k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.56k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.56k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.56k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.56k, False: 0]
  ------------------
 1467|  1.56k|        SCN_UNLIKELY_ATTR
 1468|  1.56k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.56k|                                     "Invalid integer value");
 1470|  1.56k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     90|{
 1461|     90|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     90|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     90|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     90|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     90|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 90, False: 0]
  ------------------
 1467|     90|        SCN_UNLIKELY_ATTR
 1468|     90|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     90|                                     "Invalid integer value");
 1470|     90|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  40.6k|{
 2176|  40.6k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  40.6k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|  81.3k|{
 2200|  81.3k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|  81.3k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  4.89k|{
  194|  4.89k|    return find_classic_impl(
  195|  4.89k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  4.89k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  4.89k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   145k|{
  202|   145k|    return find_classic_impl(
  203|   145k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   145k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   145k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    162|{
  673|    162|    return e;
  674|    162|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  40.6k|{
 2133|  40.6k|    return vscan_internal(source, format, args);
 2134|  40.6k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|  81.3k|{
 2153|  81.3k|    return vscan_internal(source, format, args);
 2154|  81.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.89k|{
  118|  4.89k|    auto it = source.begin();
  119|       |
  120|  42.2k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 38.5k, False: 3.64k]
  ------------------
  121|  38.5k|        auto sv =
  122|  38.5k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  38.5k|                .substr(0, 8);
  124|       |
  125|  38.5k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 21.7k, False: 16.8k]
  ------------------
  126|  21.7k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  21.7k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  21.7k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 780, False: 20.9k]
  ------------------
  129|    780|                break;
  130|    780|            }
  131|  20.9k|            continue;
  132|  21.7k|        }
  133|       |
  134|  69.4k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 53.1k, False: 16.3k]
  ------------------
  135|  53.1k|            auto tmp =
  136|  53.1k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  53.1k|            auto res = get_next_code_point(tmp);
  138|  53.1k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 468, False: 52.6k]
  ------------------
  139|    468|                return it;
  140|    468|            }
  141|  52.6k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  52.6k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  52.6k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  52.6k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  52.6k|        }
  145|  16.8k|    }
  146|       |
  147|  4.42k|    return detail::make_string_view_iterator(source, it);
  148|  4.89k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|   190k|{
  105|   190k|    static_assert(sizeof(*source.data()) == 1);
  106|   190k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|   190k|    uint64_t word{};
  108|   190k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|   190k|    return has_byte_greater(word, 127) != 0;
  111|   190k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|   161k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  53.1k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   145k|{
  118|   145k|    auto it = source.begin();
  119|       |
  120|   152k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 151k, False: 894]
  ------------------
  121|   151k|        auto sv =
  122|   151k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   151k|                .substr(0, 8);
  124|       |
  125|   151k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 115k, False: 35.9k]
  ------------------
  126|   115k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   115k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   115k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 111k, False: 4.18k]
  ------------------
  129|   111k|                break;
  130|   111k|            }
  131|  4.18k|            continue;
  132|   115k|        }
  133|       |
  134|  46.6k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 43.6k, False: 2.99k]
  ------------------
  135|  43.6k|            auto tmp =
  136|  43.6k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  43.6k|            auto res = get_next_code_point(tmp);
  138|  43.6k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 32.9k, False: 10.7k]
  ------------------
  139|  32.9k|                return it;
  140|  32.9k|            }
  141|  10.7k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  10.7k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  10.7k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  10.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  10.7k|        }
  145|  35.9k|    }
  146|       |
  147|   112k|    return detail::make_string_view_iterator(source, it);
  148|   145k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|   144k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  43.6k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.58k|{
 1138|  1.58k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 1.58k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  1.58k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 1.58k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  1.58k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 1.58k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  1.58k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 1.58k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  1.58k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.58k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 12, False: 1.57k]
  ------------------
 1185|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1186|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     12|                                         "Invalid floating-point digit");
 1188|     12|        }
 1189|     12|    }
 1190|  1.57k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.57k, False: 0]
  |  |  ------------------
  ------------------
 1191|  1.57k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  1.57k|                                     "Invalid floating-point digit");
 1193|  1.57k|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|     90|{
 1138|     90|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 90]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|     90|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 90]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|     90|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 90]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|     90|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 90]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|     90|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|     90|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 0, False: 90]
  ------------------
 1185|      0|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1186|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|      0|                                         "Invalid floating-point digit");
 1188|      0|        }
 1189|      0|    }
 1190|     90|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90, False: 0]
  |  |  ------------------
  ------------------
 1191|     90|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|     90|                                     "Invalid floating-point digit");
 1193|     90|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  81.3k|{
 1625|  81.3k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 80.9k, False: 432]
  ------------------
 1626|  80.9k|        return false;
 1627|  80.9k|    }
 1628|    432|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 306]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|  81.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  81.3k|    {
 1903|  81.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   244k|    {
 1722|   244k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 244k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   244k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  81.3k|    {
 1853|  81.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  81.3k|{
 2030|  81.3k|    const auto beg = handler.get_ctx().begin();
 2031|  81.3k|    detail::parse_format_string<false>(format, handler);
 2032|  81.3k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  81.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78.3k, False: 2.99k]
  |  |  ------------------
  ------------------
 2033|  78.3k|        return unexpected(handler.error);
 2034|  78.3k|    }
 2035|  2.99k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  81.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|  1.02M|    {
 2014|  1.02M|        return ctx.get();
 2015|  1.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  1.02M|    {
 1857|  1.02M|        return contiguous_ctx;
 1858|  1.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   110k|    {
 1907|   268k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 165k, False: 102k]
  ------------------
 1908|   165k|            auto it = get_ctx().begin();
 1909|   165k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 2.25k, False: 163k]
  ------------------
 1910|  2.25k|                SCN_UNLIKELY_ATTR
 1911|  2.25k|                return on_error("Unexpected end of source");
 1912|  2.25k|            }
 1913|       |
 1914|   163k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   163k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   163k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.11k, False: 161k]
  ------------------
 1917|  2.11k|                return on_error("Invalid encoding in format string");
 1918|  2.11k|            }
 1919|   161k|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 131k, False: 29.5k]
  ------------------
 1920|   131k|                get_ctx().advance_to(
 1921|   131k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|   131k|                begin = detail::to_address(std::prev(after_space_it));
 1923|   131k|                continue;
 1924|   131k|            }
 1925|       |
 1926|  29.5k|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 3.07k, False: 26.4k]
  ------------------
 1927|  3.07k|                SCN_UNLIKELY_ATTR
 1928|  3.07k|                return on_error("Unexpected literal character in source");
 1929|  3.07k|            }
 1930|  26.4k|            get_ctx().advance_to(ranges::next(it));
 1931|  26.4k|        }
 1932|   110k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1963|  10.3k|    {
 1964|  10.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  10.3k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  10.3k|        on_visit_scan_arg(
 1968|  10.3k|            impl::default_arg_reader<context_type>{
 1969|  10.3k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  10.3k|            arg);
 1971|  10.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  78.9k|{
 1681|  78.9k|    auto arg = ctx.arg(id);
 1682|  78.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  78.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.89k, False: 77.0k]
  |  |  ------------------
  ------------------
 1683|  1.89k|        handler.on_error("Failed to find argument with ID");
 1684|  1.89k|    }
 1685|  78.9k|    return arg;
 1686|  78.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  81.6k|    {
 1797|  81.6k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.95k, False: 79.7k]
  |  |  ------------------
  ------------------
 1798|  1.95k|            on_error("Invalid out-of-range argument ID");
 1799|  1.95k|            return;
 1800|  1.95k|        }
 1801|       |
 1802|  79.7k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90, False: 79.6k]
  |  |  ------------------
  ------------------
 1803|     90|            return on_error("Argument with this ID has already been scanned");
 1804|     90|        }
 1805|       |
 1806|  79.6k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  79.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 79.6k, False: 0]
  |  |  ------------------
  ------------------
 1807|  79.6k|            visited_args_lower64 |= (1ull << id);
 1808|  79.6k|            return;
 1809|  79.6k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  79.7k|    {
 1782|  79.7k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  79.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 79.7k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  79.7k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  79.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 79.7k, False: 0]
  |  |  ------------------
  ------------------
 1788|  79.7k|            return (visited_args_lower64 >> id) & 1ull;
 1789|  79.7k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  79.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  10.3k|    {
 1948|  10.3k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 324, False: 10.0k]
  |  Branch (1948:23): [True: 0, False: 10.0k]
  ------------------
 1949|    324|            SCN_UNLIKELY_ATTR
 1950|    324|            return;
 1951|    324|        }
 1952|       |
 1953|  10.0k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  10.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.40k, False: 3.64k]
  |  |  ------------------
  ------------------
 1955|  6.40k|            on_error(r.error());
 1956|  6.40k|        }
 1957|  3.64k|        else {
 1958|  3.64k|            get_ctx().advance_to(*r);
 1959|  3.64k|        }
 1960|  10.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  65.7k|    {
 1766|  65.7k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  65.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.7k, False: 0]
  |  |  ------------------
  ------------------
 1767|  65.7k|            error = err;
 1768|  65.7k|        }
 1769|  65.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  74.2k|    {
 1936|  74.2k|        return parse_ctx.next_arg_id();
 1937|  74.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1939|  4.85k|    {
 1940|  4.85k|        parse_ctx.check_arg_id(id);
 1941|  4.85k|        return id;
 1942|  4.85k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  68.6k|    {
 1977|  68.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  68.6k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  68.6k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 68.6k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  68.6k|        auto specs = detail::format_specs{};
 1990|  68.6k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  68.6k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  68.6k|            arg.type()};
 1993|       |
 1994|  68.6k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  68.6k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 2.45k, False: 66.1k]
  |  Branch (1995:29): [True: 1.00k, False: 65.1k]
  ------------------
 1996|  3.46k|            SCN_UNLIKELY_ATTR
 1997|  3.46k|            on_error("Missing '}' in format string");
 1998|  3.46k|            return parse_ctx.begin();
 1999|  3.46k|        }
 2000|  65.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  65.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 298, False: 64.8k]
  |  |  ------------------
  ------------------
 2001|    298|            return parse_ctx.begin();
 2002|    298|        }
 2003|  64.8k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  64.8k|        on_visit_scan_arg(
 2006|  64.8k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  64.8k|                                           get_ctx().locale()},
 2008|  64.8k|            arg);
 2009|  64.8k|        return parse_ctx.begin();
 2010|  65.1k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  68.6k|    {
 1701|  68.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  64.8k|    {
 1948|  64.8k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 266, False: 64.5k]
  |  Branch (1948:23): [True: 0, False: 64.5k]
  ------------------
 1949|    266|            SCN_UNLIKELY_ATTR
 1950|    266|            return;
 1951|    266|        }
 1952|       |
 1953|  64.5k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  64.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  64.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  64.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58.6k, False: 5.94k]
  |  |  ------------------
  ------------------
 1955|  58.6k|            on_error(r.error());
 1956|  58.6k|        }
 1957|  5.94k|        else {
 1958|  5.94k|            get_ctx().advance_to(*r);
 1959|  5.94k|        }
 1960|  64.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   350k|    {
 1761|   350k|        SCN_UNLIKELY_ATTR
 1762|   350k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   350k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   244k|    {
 1729|   244k|        {
 1730|   244k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 244k]
  ------------------
 1731|   244k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 244k]
  ------------------
 1732|   244k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   244k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   244k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 164k, False: 79.6k]
  ------------------
 1736|   164k|                return on_error("Argument list not exhausted");
 1737|   164k|            }
 1738|   244k|        }
 1739|       |
 1740|  79.6k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 79.6k, False: 0]
  ------------------
 1741|  79.6k|            return;
 1742|  79.6k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   244k|    {
 1777|   244k|        return error;
 1778|   244k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   415k|    {
 1773|   415k|        return static_cast<bool>(error);
 1774|   415k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  81.3k|{
 2045|  81.3k|    const auto argcount = args.size();
 2046|  81.3k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 81.3k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|  81.3k|    auto handler = format_handler<true, CharT>{
 2052|  81.3k|        ranges::subrange<const CharT*>{source.data(),
 2053|  81.3k|                                       source.data() + source.size()},
 2054|  81.3k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  81.3k|    static_cast<    \
  |  |  929|  81.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  81.3k|    static_cast<    \
  |  |  929|  81.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  81.3k|    return vscan_parse_format_string(format, handler);
 2056|  81.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   162k|{
 2045|   162k|    const auto argcount = args.size();
 2046|   162k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 0, False: 162k]
  |  Branch (2046:60): [True: 0, False: 0]
  ------------------
 2047|      0|        auto arg = args.get(0);
 2048|      0|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|      0|    }
 2050|       |
 2051|   162k|    auto handler = format_handler<true, CharT>{
 2052|   162k|        ranges::subrange<const CharT*>{source.data(),
 2053|   162k|                                       source.data() + source.size()},
 2054|   162k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   162k|    return vscan_parse_format_string(format, handler);
 2056|   162k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   162k|{
 1625|   162k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 149k, False: 13.2k]
  ------------------
 1626|   149k|        return false;
 1627|   149k|    }
 1628|  13.2k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 18, False: 13.1k]
  |  Branch (1628:39): [True: 0, False: 18]
  ------------------
 1629|   162k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   162k|    {
 1903|   162k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   162k|    {
 1853|   162k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   162k|{
 2030|   162k|    const auto beg = handler.get_ctx().begin();
 2031|   162k|    detail::parse_format_string<false>(format, handler);
 2032|   162k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162k, False: 8]
  |  |  ------------------
  ------------------
 2033|   162k|        return unexpected(handler.error);
 2034|   162k|    }
 2035|      8|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   162k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|   777k|    {
 2014|   777k|        return ctx.get();
 2015|   777k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   777k|    {
 1857|   777k|        return contiguous_ctx;
 1858|   777k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  80.6k|    {
 1907|   229k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 227k, False: 1.82k]
  ------------------
 1908|   227k|            auto it = get_ctx().begin();
 1909|   227k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 108, False: 227k]
  ------------------
 1910|    108|                SCN_UNLIKELY_ATTR
 1911|    108|                return on_error("Unexpected end of source");
 1912|    108|            }
 1913|       |
 1914|   227k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   227k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   227k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 78.6k, False: 148k]
  ------------------
 1917|  78.6k|                return on_error("Invalid encoding in format string");
 1918|  78.6k|            }
 1919|   148k|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 224, False: 148k]
  ------------------
 1920|    224|                get_ctx().advance_to(
 1921|    224|                    impl::read_while_classic_space(get_ctx().range()));
 1922|    224|                begin = detail::to_address(std::prev(after_space_it));
 1923|    224|                continue;
 1924|    224|            }
 1925|       |
 1926|   148k|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 22, False: 148k]
  ------------------
 1927|     22|                SCN_UNLIKELY_ATTR
 1928|     22|                return on_error("Unexpected literal character in source");
 1929|     22|            }
 1930|   148k|            get_ctx().advance_to(ranges::next(it));
 1931|   148k|        }
 1932|  80.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1963|    882|    {
 1964|    882|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|    882|        set_arg_as_visited(arg_id);
 1966|       |
 1967|    882|        on_visit_scan_arg(
 1968|    882|            impl::default_arg_reader<context_type>{
 1969|    882|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|    882|            arg);
 1971|    882|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  2.68k|{
 1681|  2.68k|    auto arg = ctx.arg(id);
 1682|  2.68k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  2.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 2.62k]
  |  |  ------------------
  ------------------
 1683|     58|        handler.on_error("Failed to find argument with ID");
 1684|     58|    }
 1685|  2.68k|    return arg;
 1686|  2.68k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|    882|    {
 1948|    882|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 468, False: 414]
  |  Branch (1948:23): [True: 0, False: 414]
  ------------------
 1949|    468|            SCN_UNLIKELY_ATTR
 1950|    468|            return;
 1951|    468|        }
 1952|       |
 1953|    414|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|    414|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|    414|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    414|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 272, False: 142]
  |  |  ------------------
  ------------------
 1955|    272|            on_error(r.error());
 1956|    272|        }
 1957|    142|        else {
 1958|    142|            get_ctx().advance_to(*r);
 1959|    142|        }
 1960|    414|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|  2.68k|    {
 1936|  2.68k|        return parse_ctx.next_arg_id();
 1937|  2.68k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1939|     36|    {
 1940|     36|        parse_ctx.check_arg_id(id);
 1941|     36|        return id;
 1942|     36|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|  1.80k|    {
 1977|  1.80k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.80k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.80k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.80k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.80k|        auto specs = detail::format_specs{};
 1990|  1.80k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.80k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.80k|            arg.type()};
 1993|       |
 1994|  1.80k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.80k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 254, False: 1.55k]
  |  Branch (1995:29): [True: 146, False: 1.40k]
  ------------------
 1996|    400|            SCN_UNLIKELY_ATTR
 1997|    400|            on_error("Missing '}' in format string");
 1998|    400|            return parse_ctx.begin();
 1999|    400|        }
 2000|  1.40k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 1.36k]
  |  |  ------------------
  ------------------
 2001|     36|            return parse_ctx.begin();
 2002|     36|        }
 2003|  1.36k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.36k|        on_visit_scan_arg(
 2006|  1.36k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.36k|                                           get_ctx().locale()},
 2008|  1.36k|            arg);
 2009|  1.36k|        return parse_ctx.begin();
 2010|  1.40k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  1.80k|    {
 1701|  1.80k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  1.36k|    {
 1948|  1.36k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 864, False: 504]
  |  Branch (1948:23): [True: 0, False: 504]
  ------------------
 1949|    864|            SCN_UNLIKELY_ATTR
 1950|    864|            return;
 1951|    864|        }
 1952|       |
 1953|    504|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|    504|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|    504|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    504|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 476, False: 28]
  |  |  ------------------
  ------------------
 1955|    476|            on_error(r.error());
 1956|    476|        }
 1957|     28|        else {
 1958|     28|            get_ctx().advance_to(*r);
 1959|     28|        }
 1960|    504|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  4.52k|{
 1363|  4.52k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  4.52k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  4.52k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  4.52k|            std::u32string tmp;
 1368|  4.52k|            transcode_to_string_impl_to32(src, tmp);
 1369|  4.52k|            return transcode_to_string_impl_32to16<false>(
 1370|  4.52k|                std::u32string_view{tmp}, dest);
 1371|  4.52k|        }
 1372|  4.52k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  4.52k|            return transcode_to_string_impl_to32(src, dest);
 1374|  4.52k|        }
 1375|  4.52k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  4.52k|{
 1256|  4.52k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  4.52k|    auto it = src.begin();
 1259|   921k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 917k, False: 4.52k]
  ------------------
 1260|   917k|        auto res = get_next_code_point(
 1261|   917k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   917k|                                                                 src.end()));
 1263|   917k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   917k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.23k, False: 909k]
  |  |  ------------------
  ------------------
 1264|  8.23k|            dest.push_back(DestCharT{0xfffd});
 1265|  8.23k|        }
 1266|   909k|        else {
 1267|   909k|            dest.push_back(res.value);
 1268|   909k|        }
 1269|   917k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   917k|    }
 1271|  4.52k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.20M|{
 1169|  1.20M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.20M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.20M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.6k, False: 1.19M]
  |  |  ------------------
  ------------------
 1173|  10.6k|        return {get_start_for_next_code_point(input),
 1174|  10.6k|                detail::invalid_code_point};
 1175|  10.6k|    }
 1176|  1.19M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.10k, False: 1.19M]
  |  |  ------------------
  ------------------
 1177|  1.10k|        return {input.end(), detail::invalid_code_point};
 1178|  1.10k|    }
 1179|       |
 1180|  1.19M|    return {input.begin() + len,
 1181|  1.19M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.19M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  10.6k|{
 1155|  10.6k|    auto it = input.begin();
 1156|  60.0k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 57.6k, False: 2.44k]
  ------------------
 1157|  57.6k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 8.22k, False: 49.3k]
  ------------------
 1158|  8.22k|            break;
 1159|  8.22k|        }
 1160|  57.6k|    }
 1161|  10.6k|    return it;
 1162|  10.6k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  32.0k|    {
  809|  32.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  32.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  32.0k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  10.5k|    {
  823|  10.5k|        return a.m_code == b.m_code;
  824|  10.5k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  40.7k|    {
 2931|  40.7k|        SCN_UNLIKELY_ATTR
 2932|  40.7k|        m_msg = msg;
 2933|  40.7k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  65.0k|    {
 2936|  65.0k|        return m_msg == nullptr;
 2937|  65.0k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3645|    558|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4991|   614k|    {
 4992|   614k|        on_charset_range(cp, cp + 1);
 4993|   614k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4996|   617k|    {
 4997|   617k|        if (end <= 127) {
  ------------------
  |  Branch (4997:13): [True: 453k, False: 164k]
  ------------------
 4998|   453k|            return;
 4999|   453k|        }
 5000|       |
 5001|  17.9M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5001:25): [True: 17.9M, False: 163k]
  ------------------
 5002|       |            // TODO: check for overlap
 5003|  17.9M|            if (elem.first == end) {
  ------------------
  |  Branch (5003:17): [True: 72, False: 17.9M]
  ------------------
 5004|     72|                elem.first = begin;
 5005|     72|                return;
 5006|     72|            }
 5007|       |
 5008|  17.9M|            if (elem.second == begin) {
  ------------------
  |  Branch (5008:17): [True: 366, False: 17.9M]
  ------------------
 5009|    366|                elem.second = end;
 5010|    366|                return;
 5011|    366|            }
 5012|  17.9M|        }
 5013|       |
 5014|   163k|        extra_ranges.push_back(std::make_pair(begin, end));
 5015|   163k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5018|  1.39k|    {
 5019|       |        // no-op
 5020|  1.39k|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5033|   626k|    {
 5034|   626k|        return static_cast<bool>(err);
 5035|   626k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5351|    678|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|   306k|{
  458|   306k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   306k|        static_cast<unsigned char>(ch))];
  460|   306k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   554k|{
  469|   554k|    return static_cast<unsigned char>(ch) <= 127;
  470|   554k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   596k|{
  483|   596k|    return cp <= 127;
  484|   596k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   190k|{
  539|   190k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   190k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  41.5k|{
  784|  41.5k|    return e != eof_error::good;
  785|  41.5k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    194|{
  845|    194|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    194|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    194|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    194|    return parse_error::eof;
  847|    194|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  1.76k|{
  854|  1.76k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 1.76k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  1.76k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 4, False: 1.76k]
  ------------------
  859|      4|        return scan_error{scan_error::end_of_range, "EOF"};
  860|      4|    }
  861|       |
  862|  1.76k|    return scan_error{code, msg};
  863|  1.76k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  1.76k|{
  868|  1.76k|    return [code, msg](parse_error err) {
  869|  1.76k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  1.76k|    };
  871|  1.76k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   493k|{
 1200|       |    // Pattern_White_Space property
 1201|   493k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 324k, False: 168k]
  |  Branch (1201:27): [True: 113k, False: 211k]
  ------------------
 1202|   493k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 11.7k, False: 368k]
  ------------------
 1203|   493k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 14.7k, False: 353k]
  ------------------
 1204|   493k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 784, False: 352k]
  ------------------
 1205|   493k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 1.65k, False: 350k]
  ------------------
 1206|   493k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 842, False: 350k]
  ------------------
 1207|   493k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 34, False: 350k]
  ------------------
 1208|   493k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  6.83k|{
 2220|  6.83k|    unsigned char running_diff{0};
 2221|  23.7k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 16.9k, False: 6.83k]
  ------------------
 2222|  16.9k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  16.9k|    }
 2224|  6.83k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 6.83k]
  |  Branch (2224:33): [True: 0, False: 6.83k]
  ------------------
 2225|  6.83k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|  24.7k|{
 2303|  24.7k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 458, False: 24.2k]
  ------------------
 2304|  24.7k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 78, False: 380]
  ------------------
 2305|    458|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 6, False: 374]
  ------------------
 2306|    458|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 6, False: 368]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|    458|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 252, False: 116]
  |  Branch (2308:27): [True: 48, False: 204]
  |  Branch (2308:43): [True: 30, False: 18]
  ------------------
 2309|    458|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 204, False: 134]
  |  Branch (2309:27): [True: 30, False: 174]
  ------------------
 2310|    458|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 150, False: 158]
  |  Branch (2310:27): [True: 6, False: 144]
  ------------------
 2311|    458|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 144, False: 158]
  |  Branch (2311:27): [True: 6, False: 138]
  ------------------
 2312|    458|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 138, False: 158]
  |  Branch (2312:27): [True: 30, False: 108]
  ------------------
 2313|    458|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 108, False: 158]
  |  Branch (2313:27): [True: 6, False: 102]
  ------------------
 2314|    458|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 102, False: 158]
  |  Branch (2314:27): [True: 18, False: 84]
  ------------------
 2315|    458|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 60, False: 182]
  |  Branch (2315:28): [True: 0, False: 60]
  ------------------
 2316|    458|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 60, False: 182]
  |  Branch (2316:28): [True: 42, False: 18]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|    458|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 42, False: 158]
  |  Branch (2318:28): [True: 18, False: 24]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|    458|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 24, False: 158]
  |  Branch (2320:28): [True: 6, False: 18]
  ------------------
 2321|    282|        return 2;
 2322|    282|    }
 2323|  24.4k|    return 1;
 2324|  24.7k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|     24|{
 2328|     24|    return calculate_text_width_for_fmt_v10(cp);
 2329|     24|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|     42|{
 2343|     42|    return calculate_text_width_for_fmt_v10(cp);
 2344|     42|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  12.2k|{
 3123|  12.2k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  12.2k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|    630|{
 3127|    630|#if WCHAR_MIN < 0
 3128|    630|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 630, False: 0]
  |  Branch (3128:20): [True: 630, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|    630|        return char_to_int(static_cast<char>(ch));
 3133|    630|    }
 3134|      0|    return 255;
 3135|    630|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4272|  14.1k|{
 4273|  14.1k|    std::regex_constants::syntax_option_type result{};
 4274|  14.1k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4274:9): [True: 510, False: 13.6k]
  ------------------
 4275|    510|#if SCN_HAS_STD_REGEX_MULTILINE
 4276|    510|        result |= std::regex_constants::multiline;
 4277|       |#else
 4278|       |        return unexpected_scan_error(
 4279|       |            scan_error::invalid_format_string,
 4280|       |            "/m flag for regex isn't supported by regex backend");
 4281|       |#endif
 4282|    510|    }
 4283|  14.1k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4283:9): [True: 0, False: 14.1k]
  ------------------
 4284|  14.1k|        detail::regex_flags::none) {
 4285|      0|        return unexpected_scan_error(
 4286|      0|            scan_error::invalid_format_string,
 4287|      0|            "/s flag for regex isn't supported by regex backend");
 4288|      0|    }
 4289|  14.1k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4289:9): [True: 2.30k, False: 11.8k]
  ------------------
 4290|  2.30k|        result |= std::regex_constants::icase;
 4291|  2.30k|    }
 4292|  14.1k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4292:9): [True: 6, False: 14.1k]
  ------------------
 4293|      6|        result |= std::regex_constants::nosubs;
 4294|      6|    }
 4295|  14.1k|    return result;
 4296|  14.1k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4639|  1.63k|{
 4640|  1.63k|    std::string result{pattern};
 4641|  7.25k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4641:24): [True: 5.62k, False: 1.63k]
  ------------------
 4642|  5.62k|        result.replace(n, 2, "/");
 4643|  5.62k|        ++n;
 4644|  5.62k|    }
 4645|  1.63k|    return result;
 4646|  1.63k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6009|  7.05k|{
 6010|  7.05k|    if (specs.width != 0) {
  ------------------
  |  Branch (6010:9): [True: 1.38k, False: 5.67k]
  ------------------
 6011|  1.38k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6011:13): [True: 1.08k, False: 302]
  ------------------
 6012|  1.08k|            return {scan_error::invalid_scanned_value,
 6013|  1.08k|                    "Scanned value too narrow, width did not exceed what "
 6014|  1.08k|                    "was specified in the format string"};
 6015|  1.08k|        }
 6016|  1.38k|    }
 6017|  5.97k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6017:9): [True: 0, False: 5.97k]
  ------------------
 6018|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6018:13): [True: 0, False: 0]
  ------------------
 6019|      0|            return {scan_error::invalid_scanned_value,
 6020|      0|                    "Scanned value too wide, width exceeded the specified "
 6021|      0|                    "precision"};
 6022|      0|        }
 6023|      0|    }
 6024|  5.97k|    return {};
 6025|  5.97k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   155k|    {
  304|   155k|        ranges::advance(x, n);
  305|   155k|        return x;
  306|   155k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   155k|    {
  268|   155k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   155k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   217k|    {
  151|   217k|        i += n;
  152|   217k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   220k|    {
  108|   220k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   220k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   220k|    {
   87|   220k|        return s - i;
   88|   220k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|    522|    {
  304|    522|        ranges::advance(x, n);
  305|    522|        return x;
  306|    522|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|    522|    {
  268|    522|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|    522|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|    522|    {
  151|    522|        i += n;
  152|    522|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|      8|    {
  108|      8|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|      8|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|      8|    {
   87|      8|        return s - i;
   88|      8|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5625|  7.15k|    {
 5626|  7.15k|        reader_error_handler eh{};
 5627|  7.15k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5627:23): [Folded - Ignored]
  ------------------
 5628|  7.15k|            detail::check_code_point_type_specs(specs, eh);
 5629|  7.15k|        }
 5630|  7.15k|        else {
 5631|  7.15k|            detail::check_char_type_specs(specs, eh);
 5632|  7.15k|        }
 5633|  7.15k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.63k, False: 524]
  |  |  ------------------
  ------------------
 5634|  6.63k|            return {scan_error::invalid_format_string, eh.m_msg};
 5635|  6.63k|        }
 5636|    524|        return {};
 5637|  7.15k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  19.5k|    {
  763|  19.5k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  19.5k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  2.77k|    {
  754|  2.77k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  4.56k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.56k|              cvref<T> obj = *get<T>(fn);
  745|  4.56k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.56k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.56k|              }
  748|  4.56k|              else {
  749|  4.56k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.56k|              }
  751|  4.56k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  4.56k|    {
  684|  4.56k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.56k|            return static_cast<T*>(s.m_cp);
  686|  4.56k|        }
  687|  4.56k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.56k|            return static_cast<T*>(s.m_p);
  689|  4.56k|        }
  690|  4.56k|        else {
  691|  4.56k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.56k|        }
  693|  4.56k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  2.77k|        {
  662|  2.77k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  1.16M|    {
  763|  1.16M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.16M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.16M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.97k|    {
  754|  3.97k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   558k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   558k|              cvref<T> obj = *get<T>(fn);
  745|   558k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   558k|                  obj(static_cast<decltype(args)>(args)...);
  747|   558k|              }
  748|   558k|              else {
  749|   558k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   558k|              }
  751|   558k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   558k|    {
  684|   558k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   558k|            return static_cast<T*>(s.m_cp);
  686|   558k|        }
  687|   558k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   558k|            return static_cast<T*>(s.m_p);
  689|   558k|        }
  690|   558k|        else {
  691|   558k|            return reinterpret_cast<T*>(s.m_fp);
  692|   558k|        }
  693|   558k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  3.97k|        {
  662|  3.97k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5620|  2.08k|    {
 5621|  2.08k|        return false;
 5622|  2.08k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  1.76k|    return [code, msg](parse_error err) {
  869|  1.76k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  1.76k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|     82|    {
 1780|     82|        auto stdloc = loc.get<std::locale>();
 1781|     82|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     82|        grouping = numpunct.grouping();
 1783|     82|        thousands_sep =
 1784|     82|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 82]
  ------------------
 1785|     82|        decimal_point = numpunct.decimal_point();
 1786|     82|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|    102|{
 1717|    102|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 102, False: 0]
  ------------------
 1718|    102|        return std::use_facet<Facet>(stdloc);
 1719|    102|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    102|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  3.95k|{
 2349|  3.95k|    size_t count{0};
 2350|  3.95k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  3.95k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  3.95k|    });
 2353|  3.95k|    return count;
 2354|  3.95k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  3.95k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  3.95k|    auto it = input.begin();
 1448|  28.2k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 24.3k, False: 3.95k]
  ------------------
 1449|  24.3k|        auto res = get_next_code_point(
 1450|  24.3k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  24.3k|        cb(res.value);
 1452|  24.3k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  24.3k|    }
 1454|  3.95k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  24.6k|    {
  763|  24.6k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  24.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  24.6k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  3.95k|    {
  754|  3.95k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  24.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  24.3k|              cvref<T> obj = *get<T>(fn);
  745|  24.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  24.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  24.3k|              }
  748|  24.3k|              else {
  749|  24.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  24.3k|              }
  751|  24.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  24.3k|    {
  684|  24.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  24.3k|            return static_cast<T*>(s.m_cp);
  686|  24.3k|        }
  687|  24.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  24.3k|            return static_cast<T*>(s.m_p);
  689|  24.3k|        }
  690|  24.3k|        else {
  691|  24.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  24.3k|        }
  693|  24.3k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  24.3k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  24.3k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  24.3k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  3.95k|        {
  662|  3.95k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  3.17k|    {
 1582|  3.17k|        return m_view;
 1583|  3.17k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  3.26k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|     48|    {
 2382|     48|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|     54|    {
 2426|     54|        return *m_current;
 2427|     54|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|     26|    {
 2435|     26|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|     26|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     26|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|     26|        _increment_current();
 2437|     26|        return *this;
 2438|     26|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|     26|    {
 2668|     26|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 26, False: 0]
  ------------------
 2669|     26|            auto cplen = _get_cp_length_at_current();
 2670|     26|            m_multibyte_left = cplen - 1;
 2671|     26|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|     26|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|     26|        ++m_current;
 2678|     26|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|     26|    {
 2639|     26|        return static_cast<difference_type>(
 2640|     26|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|     26|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|     26|    {
 2645|     26|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|     26|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 24, False: 2]
  ------------------
 2650|     24|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|     24|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     24|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|     24|            auto cp = static_cast<char32_t>(*m_current);
 2652|     24|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|     24|        }
 2654|       |
 2655|      2|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      2|                                           cplen);
 2657|      2|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      2|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      2|        return static_cast<difference_type>(
 2663|      2|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      2|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  3.34k|{
 1857|  3.34k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.34k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.34k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.34k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 168, False: 3.17k]
  ------------------
 1862|    168|            return unexpected(eof_error::eof);
 1863|    168|        }
 1864|       |
 1865|  3.17k|        return ranges::next(range.begin(), count);
 1866|  3.34k|    }
 1867|  3.34k|    else {
 1868|  3.34k|        auto it = range.begin();
 1869|  3.34k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  3.34k|            return ranges::next(it, count);
 1871|  3.34k|        }
 1872|       |
 1873|  3.34k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  3.34k|            if (it == range.end()) {
 1875|  3.34k|                return unexpected(eof_error::eof);
 1876|  3.34k|            }
 1877|  3.34k|        }
 1878|       |
 1879|  3.34k|        return it;
 1880|  3.34k|    }
 1881|  3.34k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|     10|    {
 2531|     10|        return !(a == b);
 2532|     10|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|     10|    {
 2523|     10|        return a.m_current == b.m_current;
 2524|     10|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|     48|    {
 2832|     48|        return take_width_view{r, n};
 2833|     48|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|     48|    {
 2801|     48|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|     48|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|     74|        {
 2770|     74|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 0, False: 74]
  |  Branch (2770:39): [True: 0, False: 0]
  ------------------
 2771|     74|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 74]
  ------------------
 2772|     74|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|     64|    {
 2816|     64|        return sentinel<true>{m_base.get().end()};
 2817|     64|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|    160|    {
 2717|    160|        return view;
 2718|    160|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|     64|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|     48|    {
 2810|     48|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|     48|                                      m_count};
 2812|     48|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|     10|{
 1857|     10|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|     10|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     10|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|     10|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|     10|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|     10|        if (sz < count) {
 1862|     10|            return unexpected(eof_error::eof);
 1863|     10|        }
 1864|       |
 1865|     10|        return ranges::next(range.begin(), count);
 1866|     10|    }
 1867|     10|    else {
 1868|     10|        auto it = range.begin();
 1869|     10|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 10]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|     30|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 20, False: 10]
  ------------------
 1874|     20|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 0, False: 20]
  ------------------
 1875|      0|                return unexpected(eof_error::eof);
 1876|      0|            }
 1877|     20|        }
 1878|       |
 1879|     10|        return it;
 1880|     10|    }
 1881|     10|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|     10|{
 1095|     10|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|     10|        return r.size();
 1097|     10|    }
 1098|     10|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|     10|                           ranges::const_iterator_t<Range>,
 1100|     10|                           typename detail::basic_scan_buffer<
 1101|     10|                               detail::char_t<Range>>::forward_iterator>) {
 1102|     10|        if constexpr (ranges::common_range<Range>) {
 1103|     10|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|     10|        }
 1105|     10|        else {
 1106|     10|            if (r.begin().stores_parent()) {
 1107|     10|                return static_cast<size_t>(
 1108|     10|                    r.begin().parent()->chars_available() -
 1109|     10|                    r.begin().position());
 1110|     10|            }
 1111|     10|            return r.begin().contiguous_segment().size();
 1112|     10|        }
 1113|     10|    }
 1114|     10|    else {
 1115|     10|        return 0;
 1116|     10|    }
 1117|     10|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|     54|        {
 2781|     54|            return !(y == x);
 2782|     54|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|    122|    {
 2413|    122|        return m_current;
 2414|    122|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|    122|    {
 2417|    122|        return m_count;
 2418|    122|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5664|    524|    {
 5665|    524|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5665:13): [True: 440, False: 84]
  ------------------
 5666|    524|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5666:13): [True: 0, False: 84]
  ------------------
 5667|    440|            return read_default(range, value, loc);
 5668|    440|        }
 5669|       |
 5670|     84|        reader_impl_for_int<CharT> reader{};
 5671|     84|        signed char tmp_value{};
 5672|     84|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5673|     84|        value = static_cast<signed char>(value);
 5674|     84|        return ret;
 5675|    524|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5646|  1.55k|    {
 5647|  1.55k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.55k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5648|  1.55k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5648:23): [Folded - Ignored]
  ------------------
 5649|  1.55k|            return code_unit_reader<char>{}.read(range, value);
 5650|  1.55k|        }
 5651|  1.55k|        else {
 5652|  1.55k|            SCN_UNUSED(range);
 5653|  1.55k|            SCN_EXPECT(false);
 5654|  1.55k|            SCN_UNREACHABLE;
 5655|  1.55k|        }
 5656|  1.55k|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5565|  1.55k|    {
 5566|  1.55k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3643|  1.55k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.55k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.55k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.55k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.55k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.55k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5567|  1.55k|        ch = *range.begin();
 5568|  1.55k|        return it;
 5569|  1.55k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  11.6k|{
 1846|  11.6k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  11.6k|    return ranges::next(range.begin());
 1851|  11.6k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  39.5k|{
  950|  39.5k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  39.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.5k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  39.5k|    return eof_error::good;
  954|  39.5k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   635k|{
  944|   635k|    return is_range_eof(r.begin(), r.end());
  945|   635k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   801k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   801k|    {
  937|   801k|        return begin == end;
  938|   801k|    }
  939|   801k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  38.1k|    {
  296|  38.1k|        ++x;
  297|  38.1k|        return x;
  298|  38.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|     84|    {
 3540|     84|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|     84|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     84|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     84|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 84]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     84|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     84|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|     84|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|     84|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 84]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|     84|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 84]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|     84|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     84|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 84, False: 0]
  |  |  ------------------
  ------------------
 3566|     84|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|     84|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     84|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     84|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 84]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     84|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     84|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|     84|                    parse_integer_digits_without_thsep(
 3568|     84|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|     84|                        prefix_result.parsed_base));
 3570|       |
 3571|     84|            auto buf = make_contiguous_buffer(
 3572|     84|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|     84|            SCN_TRY(result_it,
  ------------------
  |  | 3643|     84|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     84|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     84|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     84|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 84, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     84|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     84|    }                                                  \
  |  |  |  | 3642|     84|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|     84|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  4.99k|{
 3326|  4.99k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3643|  4.99k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  4.99k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  4.99k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.99k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  4.99k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.99k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  4.99k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  4.99k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  4.99k|        parse_integer_base_prefix(
 3331|  4.99k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  4.99k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 4.99k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it =
 3337|      0|                ranges::prev_backtrack(digits_begin_it, range.begin());
 3338|      0|        }
 3339|      0|        else {
 3340|      0|            parsed_zero = false;
 3341|      0|        }
 3342|      0|    }
 3343|  4.99k|    else {
 3344|  4.99k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3344:13): [True: 0, False: 4.99k]
  ------------------
 3345|  4.99k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3345:13): [True: 4.99k, False: 0]
  ------------------
 3346|  4.99k|            digits_begin_it = base_prefix_begin_it;
 3347|  4.99k|        }
 3348|  4.99k|    }
 3349|       |
 3350|  4.99k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3350:9): [True: 4.99k, False: 0]
  ------------------
 3351|  4.99k|        sign = sign_type::plus_sign;
 3352|  4.99k|    }
 3353|  4.99k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3354|  4.99k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3355|  4.99k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  6.62k|{
 3141|  6.62k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  6.62k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 6.62k, False: 0]
  ------------------
 3143|  6.62k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 6.62k, False: 0]
  ------------------
 3144|  6.62k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  6.62k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  6.62k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  6.62k|{
 2272|  6.62k|    auto it = read_code_unit(range);
 2273|  6.62k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  6.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.62k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  13.2k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 13.2k, False: 6.62k]
  ------------------
 2278|  13.2k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 13.2k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  13.2k|    }
 2282|       |
 2283|  6.62k|    return unexpected(parse_error::error);
 2284|  6.62k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  4.99k|{
 3293|  4.99k|    switch (base) {
 3294|     66|        case 2:
  ------------------
  |  Branch (3294:9): [True: 66, False: 4.92k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     66|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     66|                    false};
 3298|       |
 3299|     28|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 28, False: 4.96k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     28|            bool zero_parsed = false;
 3302|     28|            auto it = apply_opt(
 3303|     28|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     28|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  1.60k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 1.60k, False: 3.38k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  1.60k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  1.60k|                    false};
 3311|       |
 3312|     98|        case 0:
  ------------------
  |  Branch (3312:9): [True: 98, False: 4.89k]
  ------------------
 3313|       |            // detect base
 3314|     98|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  3.19k|        default:
  ------------------
  |  Branch (3316:9): [True: 3.19k, False: 1.79k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  3.19k|            return {range.begin(), base, false};
 3319|  4.99k|    }
 3320|  4.99k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  1.70k|{
 2291|  1.70k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 1.70k, False: 0]
  ------------------
 2292|  1.70k|        return range.begin();
 2293|  1.70k|    }
 2294|      0|    return *result;
 2295|  1.70k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|    164|{
 3244|    164|    return read_matching_string_classic_nocase(range, "0b");
 3245|    164|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  6.84k|{
 2231|  6.84k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.84k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.84k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.84k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 6.83k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  6.83k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 6.83k, False: 0]
  ------------------
 2239|  6.83k|            return unexpected(parse_error::error);
 2240|  6.83k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  6.83k|    }
 2243|  6.84k|    else {
 2244|  6.84k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.84k|            if (ch < 'A' || ch > 'Z') {
 2246|  6.84k|                return ch;
 2247|  6.84k|            }
 2248|  6.84k|            return static_cast<char_type>(ch +
 2249|  6.84k|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.84k|        };
 2251|       |
 2252|  6.84k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  6.84k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.84k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.84k|        if (SCN_UNLIKELY(!std::equal(
 2257|  6.84k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.84k|                    return ascii_tolower(a) ==
 2259|  6.84k|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.84k|                }))) {
 2261|  6.84k|            return unexpected(parse_error::error);
 2262|  6.84k|        }
 2263|       |
 2264|  6.84k|        return it;
 2265|  6.84k|    }
 2266|  6.84k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|    126|{
 3258|    126|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 126]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|    126|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 126]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|    126|    return unexpected(parse_error::error);
 3268|    126|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  3.47k|{
 2146|  3.47k|    auto it = read_code_unit(range);
 2147|  3.47k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.47k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  3.47k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  3.47k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.47k, False: 0]
  |  |  ------------------
  ------------------
 2152|  3.47k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  3.47k|        return unexpected(parse_error::error);
 2154|  3.47k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  3.47k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  1.70k|{
 3251|  1.70k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  1.70k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     98|{
 3274|     98|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 98]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     98|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 98]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     98|    {
 3281|     98|        bool zero_parsed{false};
 3282|     98|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 98]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     98|    }
 3286|     98|    return {range.begin(), 10, false};
 3287|     98|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3360|  4.93k|{
 3361|  4.93k|    using char_type = detail::char_t<Range>;
 3362|       |
 3363|  4.93k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3363:19): [Folded - Ignored]
  ------------------
 3364|  4.93k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.93k]
  |  |  ------------------
  ------------------
 3365|      0|            return unexpected_scan_error(
 3366|      0|                scan_error::invalid_scanned_value,
 3367|      0|                "Failed to parse integer: No digits found");
 3368|      0|        }
 3369|  4.93k|        return range.end();
 3370|  4.93k|    }
 3371|  4.93k|    else {
 3372|  4.93k|        return read_while1_code_unit(range,
 3373|  4.93k|                                     [&](char_type ch) noexcept {
 3374|  4.93k|                                         return char_to_int(ch) < base;
 3375|  4.93k|                                     })
 3376|  4.93k|            .transform_error(map_parse_error_to_scan_error(
 3377|  4.93k|                scan_error::invalid_scanned_value,
 3378|  4.93k|                "Failed to parse integer: No digits found"));
 3379|  4.93k|    }
 3380|  4.93k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3390|     60|{
 3391|     60|    std::basic_string<CharT> output;
 3392|     60|    std::string thsep_indices;
 3393|     60|    auto it = range.begin();
 3394|     60|    bool digit_matched = false;
 3395|     60|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3395:12): [True: 60, False: 0]
  ------------------
 3396|     60|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3396:13): [True: 0, False: 60]
  ------------------
 3397|      0|            thsep_indices.push_back(
 3398|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3399|      0|        }
 3400|     60|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3400:18): [True: 60, False: 0]
  ------------------
 3401|     60|            break;
 3402|     60|        }
 3403|      0|        else {
 3404|      0|            output.push_back(*it);
 3405|      0|            digit_matched = true;
 3406|      0|        }
 3407|     60|    }
 3408|     60|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 0]
  |  |  ------------------
  ------------------
 3409|     60|        return unexpected_scan_error(
 3410|     60|            scan_error::invalid_scanned_value,
 3411|     60|            "Failed to parse integer: No digits found");
 3412|     60|    }
 3413|      0|    return std::tuple{it, output, thsep_indices};
 3414|     60|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  22.7k|{
 1683|  22.7k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  22.7k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  22.7k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  22.7k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  22.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  22.7k|    }
 1688|  22.7k|    else {
 1689|  22.7k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  22.7k|    }
 1691|  22.7k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  22.7k|    {
 1490|  22.7k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|   329k|    {
 1503|   329k|        return sv;
 1504|   329k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5952|  2.55k|{
 5953|  2.55k|    using char_type = detail::char_t<Range>;
 5954|  2.55k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5955|       |
 5956|  2.55k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5956:9): [True: 2.50k, False: 48]
  ------------------
 5957|  2.50k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5958|  2.50k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5959|       |
 5960|  2.50k|        if (max_width == 0) {
  ------------------
  |  Branch (5960:13): [True: 2.46k, False: 38]
  ------------------
 5961|  2.46k|            auto it = read_while_code_unit(range, pred);
 5962|       |
 5963|  2.46k|            if (want_skipped_width) {
  ------------------
  |  Branch (5963:17): [True: 42, False: 2.42k]
  ------------------
 5964|     42|                auto prefix_width =
 5965|     42|                    static_cast<std::ptrdiff_t>(
 5966|     42|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5967|     42|                    ranges::distance(range.begin(), it);
 5968|     42|                return result_type{it, prefix_width};
 5969|     42|            }
 5970|  2.42k|            return result_type{it, 0};
 5971|  2.46k|        }
 5972|       |
 5973|     38|        auto max_width_view = take_width(range, max_width);
 5974|     38|        auto w_it = read_while_code_unit(max_width_view, pred);
 5975|       |
 5976|     38|        if (want_skipped_width) {
  ------------------
  |  Branch (5976:13): [True: 38, False: 0]
  ------------------
 5977|     38|            return result_type{w_it.base(), max_width - w_it.count()};
 5978|     38|        }
 5979|      0|        return result_type{w_it.base(), 0};
 5980|     38|    }
 5981|       |
 5982|     48|    const auto fill_chars = fill.template get_code_units<char_type>();
 5983|     48|    if (max_width == 0) {
  ------------------
  |  Branch (5983:9): [True: 38, False: 10]
  ------------------
 5984|     38|        auto it = read_while_code_units(range, fill_chars);
 5985|       |
 5986|     38|        if (want_skipped_width) {
  ------------------
  |  Branch (5986:13): [True: 6, False: 32]
  ------------------
 5987|      6|            auto prefix_width =
 5988|      6|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5989|      6|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5990|      6|            return result_type{it, prefix_width};
 5991|      6|        }
 5992|     32|        return result_type{it, 0};
 5993|     38|    }
 5994|       |
 5995|     10|    auto max_width_view = take_width(range, max_width);
 5996|     10|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5997|       |
 5998|     10|    if (want_skipped_width) {
  ------------------
  |  Branch (5998:9): [True: 10, False: 0]
  ------------------
 5999|     10|        return result_type{w_it.base(), max_width - w_it.count()};
 6000|     10|    }
 6001|      0|    return result_type{w_it.base(), 0};
 6002|     10|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  2.74k|{
 1976|  2.74k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.74k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  3.10k|{
 1957|  3.10k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  3.10k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  3.10k|    }
 1960|  3.10k|    else {
 1961|  3.10k|        auto first = range.begin();
 1962|  3.10k|        for (; first != range.end(); ++first) {
 1963|  3.10k|            if (pred(*first)) {
 1964|  3.10k|                return first;
 1965|  3.10k|            }
 1966|  3.10k|        }
 1967|  3.10k|        return first;
 1968|  3.10k|    }
 1969|  3.10k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  2.50k|    {
  754|  2.50k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  2.52k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.52k|              cvref<T> obj = *get<T>(fn);
  745|  2.52k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.52k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.52k|              }
  748|  2.52k|              else {
  749|  2.52k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.52k|              }
  751|  2.52k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  2.52k|    {
  684|  2.52k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.52k|            return static_cast<T*>(s.m_cp);
  686|  2.52k|        }
  687|  2.52k|        else if constexpr (std::is_object_v<T>) {
  688|  2.52k|            return static_cast<T*>(s.m_p);
  689|  2.52k|        }
  690|  2.52k|        else {
  691|  2.52k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.52k|        }
  693|  2.52k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5958|  2.52k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  2.50k|        {
  667|  2.50k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     38|{
 1976|     38|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     38|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|     38|{
 1957|     38|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|     38|        return std::find_if(range.begin(), range.end(), pred);
 1959|     38|    }
 1960|     38|    else {
 1961|     38|        auto first = range.begin();
 1962|     44|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 44, False: 0]
  ------------------
 1963|     44|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 38, False: 6]
  ------------------
 1964|     38|                return first;
 1965|     38|            }
 1966|     44|        }
 1967|      0|        return first;
 1968|     38|    }
 1969|     38|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|     38|{
 2037|     38|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|     38|    auto it = range.begin();
 2040|     38|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 38, False: 0]
  ------------------
 2041|     38|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|     38|                                           needle.size());
 2043|     38|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 0, False: 38]
  ------------------
 2044|      0|            return it;
 2045|      0|        }
 2046|     38|        static_assert(
 2047|     38|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|     38|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 38, False: 0]
  ------------------
 2049|     38|            return it;
 2050|     38|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|     10|{
 2037|     10|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|     10|    auto it = range.begin();
 2040|     10|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 10, False: 0]
  ------------------
 2041|     10|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|     10|                                           needle.size());
 2043|     10|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 0, False: 10]
  ------------------
 2044|      0|            return it;
 2045|      0|        }
 2046|     10|        static_assert(
 2047|     10|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|     10|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 10, False: 0]
  ------------------
 2049|     10|            return it;
 2050|     10|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  13.4k|{
 2951|  13.4k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 12.8k, False: 608]
  ------------------
 2952|  12.8k|        auto it = read_while_classic_space(range);
 2953|  12.8k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  12.8k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.8k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  12.8k|        return it;
 2959|  12.8k|    }
 2960|       |
 2961|    608|    return read_while_classic_space(range);
 2962|  13.4k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   145k|{
 2117|   145k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   145k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   145k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   145k|        auto buf = make_contiguous_buffer(range);
 2121|   145k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   145k|        return ranges::next(range.begin(),
 2123|   145k|                            ranges::distance(buf.view().begin(), it));
 2124|   145k|    }
 2125|   145k|    else {
 2126|   145k|        auto it = range.begin();
 2127|       |
 2128|   145k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   145k|            auto seg = get_contiguous_beginning(range);
 2130|   145k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   145k|                seg_it != seg.end()) {
 2132|   145k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   145k|            }
 2134|   145k|            ranges::advance(it, seg.size());
 2135|   145k|        }
 2136|       |
 2137|   145k|        return read_while_code_point(
 2138|   145k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   145k|    }
 2140|   145k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   150k|{
 1683|   150k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   150k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   150k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   150k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   150k|    }
 1688|   150k|    else {
 1689|   150k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   150k|    }
 1691|   150k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   150k|    {
 1490|   150k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  14.4k|    {
 3040|  14.4k|        reader_error_handler eh{};
 3041|  14.4k|        get_derived().check_specs_impl(specs, eh);
 3042|  14.4k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.2k, False: 1.10k]
  |  |  ------------------
  ------------------
 3043|  13.2k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  13.2k|        }
 3045|  1.10k|        return {};
 3046|  14.4k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  14.4k|    {
 3051|  14.4k|        return static_cast<Derived&>(*this);
 3052|  14.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3485|  14.4k|    {
 3486|  14.4k|        detail::check_int_type_specs(specs, eh);
 3487|  14.4k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  3.34k|    {
 3035|  3.34k|        return true;
 3036|  3.34k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    554|    {
 3540|    554|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    554|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    554|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    554|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    554|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 554]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    554|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    554|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    554|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    554|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 554]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    554|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 554]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    554|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    554|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 524, False: 30]
  |  |  ------------------
  ------------------
 3566|    524|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    524|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    524|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    524|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    524|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 524]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    524|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    524|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    524|                    parse_integer_digits_without_thsep(
 3568|    524|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    524|                        prefix_result.parsed_base));
 3570|       |
 3571|    524|            auto buf = make_contiguous_buffer(
 3572|    524|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    524|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    524|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    524|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    524|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    524|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 524, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    524|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    524|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    524|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    524|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    524|    }                                                  \
  |  |  |  | 3642|    524|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    524|        }
 3581|       |
 3582|     30|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     30|            localized_number_formatting_options<CharT>{loc};
 3587|     30|#endif
 3588|       |
 3589|     30|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     30|    }                                                  \
  |  |  |  | 3642|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    554|    {
 3540|    554|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    554|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    554|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    554|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    554|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 554]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    554|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    554|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    554|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    554|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 554]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    554|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 554]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    554|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    554|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 524, False: 30]
  |  |  ------------------
  ------------------
 3566|    524|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    524|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    524|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    524|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    524|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 524]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    524|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    524|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    524|                    parse_integer_digits_without_thsep(
 3568|    524|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    524|                        prefix_result.parsed_base));
 3570|       |
 3571|    524|            auto buf = make_contiguous_buffer(
 3572|    524|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    524|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    524|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    524|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    524|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    524|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 524, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    524|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    524|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    524|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    524|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    524|    }                                                  \
  |  |  |  | 3642|    524|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    524|        }
 3581|       |
 3582|     30|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     30|            localized_number_formatting_options<CharT>{loc};
 3587|     30|#endif
 3588|       |
 3589|     30|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     30|    }                                                  \
  |  |  |  | 3642|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|  1.56k|    {
 3540|  1.56k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|  1.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|  1.56k|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|  1.56k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 1.56k]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|  1.56k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 1.56k]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|  1.56k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  1.56k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.56k, False: 0]
  |  |  ------------------
  ------------------
 3566|  1.56k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|  1.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|  1.56k|                    parse_integer_digits_without_thsep(
 3568|  1.56k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|  1.56k|                        prefix_result.parsed_base));
 3570|       |
 3571|  1.56k|            auto buf = make_contiguous_buffer(
 3572|  1.56k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|  1.56k|            SCN_TRY(result_it,
  ------------------
  |  | 3643|  1.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.56k|    }                                                  \
  |  |  |  | 3642|  1.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|  1.56k|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  7.20k|    {
 3040|  7.20k|        reader_error_handler eh{};
 3041|  7.20k|        get_derived().check_specs_impl(specs, eh);
 3042|  7.20k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.68k, False: 514]
  |  |  ------------------
  ------------------
 3043|  6.68k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  6.68k|        }
 3045|    514|        return {};
 3046|  7.20k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  7.20k|    {
 3051|  7.20k|        return static_cast<Derived&>(*this);
 3052|  7.20k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4146|  7.20k|    {
 4147|  7.20k|        detail::check_float_type_specs(specs, eh);
 4148|  7.20k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.63k|    {
 3035|  1.63k|        return true;
 3036|  1.63k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4218|    514|    {
 4219|    514|        unsigned options{};
 4220|    514|        if (specs.localized) {
  ------------------
  |  Branch (4220:13): [True: 22, False: 492]
  ------------------
 4221|     22|            options |= float_reader_base::allow_thsep;
 4222|     22|        }
 4223|       |
 4224|    514|        SCN_GCC_COMPAT_PUSH
 4225|    514|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4226|       |
 4227|    514|        switch (specs.type) {
 4228|     34|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4228:13): [True: 34, False: 480]
  ------------------
 4229|     34|                return options | float_reader_base::allow_fixed;
 4230|       |
 4231|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4231:13): [True: 6, False: 508]
  ------------------
 4232|      6|                return options | float_reader_base::allow_scientific;
 4233|       |
 4234|     12|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4234:13): [True: 12, False: 502]
  ------------------
 4235|     12|                return options | float_reader_base::allow_hex;
 4236|       |
 4237|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4237:13): [True: 6, False: 508]
  ------------------
 4238|      6|                return options | float_reader_base::allow_scientific |
 4239|      6|                       float_reader_base::allow_fixed;
 4240|       |
 4241|    456|            case detail::presentation_type::none:
  ------------------
  |  Branch (4241:13): [True: 456, False: 58]
  ------------------
 4242|    456|                return options | float_reader_base::allow_scientific |
 4243|    456|                       float_reader_base::allow_fixed |
 4244|    456|                       float_reader_base::allow_hex;
 4245|       |
 4246|      0|            default:
  ------------------
  |  Branch (4246:13): [True: 0, False: 514]
  ------------------
 4247|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4248|    514|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4249|    514|        }
 4250|       |
 4251|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4252|    514|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3660|    514|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.63k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  3.26k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4057|  1.58k|    {
 4058|  1.58k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 1.58k, False: 0]
  ------------------
 4059|  1.58k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 1.58k, False: 0]
  ------------------
 4060|  1.58k|            return;
 4061|  1.58k|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.63k|    {
  763|  1.63k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.63k|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|     22|    {
 3680|     22|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|     22|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     22|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 22]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|     22|        return read_source_impl(range);
 3686|     22|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|  1.63k|    {
 3706|  1.63k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|  1.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.63k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|  1.63k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|  1.63k|        auto it = sign_result.first;
 3709|  1.63k|        m_sign = sign_result.second;
 3710|       |
 3711|  1.63k|        auto digits_begin = it;
 3712|  1.63k|        auto r = ranges::subrange{it, range.end()};
 3713|  1.63k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.63k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|  1.63k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  3.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.63k]
  |  |  |  Branch (859:45): [True: 0, False: 1.63k]
  |  |  |  Branch (859:45): [True: 0, False: 1.63k]
  |  |  ------------------
  ------------------
 3716|  1.63k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|  1.63k|            else {
 3725|  1.63k|                auto cb = [&](const auto& rr)
 3726|  1.63k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  1.63k|                    auto res = read_all(rr);
 3728|  1.63k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|  1.63k|                        return unexpected_scan_error(
 3730|  1.63k|                            scan_error::invalid_scanned_value,
 3731|  1.63k|                            "Invalid float value");
 3732|  1.63k|                    }
 3733|  1.63k|                    return res;
 3734|  1.63k|                };
 3735|  1.63k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|  1.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  1.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 46, False: 1.58k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     46|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     46|    }                                                  \
  |  | 3642|  1.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.63k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|  1.58k|            }
 3737|  1.63k|        }
 3738|  1.58k|        else {
 3739|  1.58k|            SCN_TRY_ASSIGN(
 3740|  1.58k|                it,
 3741|  1.58k|                do_read_source_impl(
 3742|  1.58k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  1.58k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  1.58k|        }
 3745|       |
 3746|  1.58k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  1.58k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 1.58k, False: 0]
  |  Branch (3748:48): [True: 1.58k, False: 0]
  ------------------
 3749|  1.58k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 1.58k, False: 0]
  ------------------
 3750|  1.58k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 1.58k, False: 0]
  ------------------
 3751|  1.58k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  1.58k|        }
 3753|       |
 3754|  1.58k|        handle_separators();
 3755|       |
 3756|  1.58k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 1.58k]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  1.58k|        return it;
 3769|  1.58k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|  1.63k|    {
 3812|  1.63k|        auto it = range.begin();
 3813|  1.63k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 1.63k, False: 0]
  ------------------
 3814|  1.63k|            return unexpected(r.error());
 3815|  1.63k|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|  1.63k|    {
 3835|  1.63k|        auto it = range.begin();
 3836|  1.63k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 1.63k, False: 0]
  ------------------
 3837|  1.63k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|  1.63k|                scan_error::invalid_scanned_value,
 3839|  1.63k|                "Invalid floating-point NaN value"));
 3840|  1.63k|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|  1.58k|    {
 3805|  1.58k|        return read_matching_string_classic_nocase(range, "0x");
 3806|  1.58k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     46|{
 1996|     46|    auto it = read_while_code_unit(range, pred);
 1997|     46|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 46, False: 0]
  ------------------
 1998|     46|        return unexpected(parse_error::error);
 1999|     46|    }
 2000|      0|    return it;
 2001|     46|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|     46|    {
 3945|     46|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|     46|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 12, False: 34]
  |  Branch (3946:50): [True: 6, False: 6]
  ------------------
 3947|       |
 3948|     46|        auto it = ranges::begin(range);
 3949|     46|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|     46|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|     46|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 0]
  |  |  ------------------
  ------------------
 3953|     46|            return r.transform_error(
 3954|     46|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|     46|                                              "Invalid floating-point value"));
 3956|     46|        }
 3957|      0|        else {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        m_integral_part_length = digits_count;
 3963|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 0]
  ------------------
 3964|      0|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|      0|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|      0|        auto beg_exp_it = it;
 3980|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 0, False: 0]
  ------------------
 3981|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|      0|        }
 3983|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 0, False: 0]
  |  Branch (3983:29): [True: 0, False: 0]
  ------------------
 3984|      0|            return unexpected_scan_error(
 3985|      0|                scan_error::invalid_scanned_value,
 3986|      0|                "No exponent given to scientific float");
 3987|      0|        }
 3988|       |
 3989|      0|        m_kind =
 3990|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|       |
 3992|      0|        return it;
 3993|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|     46|    {
 3775|     46|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  Branch (859:45): [True: 0, False: 46]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|     46|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|     46|        return read_while1_code_unit(
 3784|     46|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     46|    {
  754|     46|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     46|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     46|              cvref<T> obj = *get<T>(fn);
  745|     46|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     46|                  obj(static_cast<decltype(args)>(args)...);
  747|     46|              }
  748|     46|              else {
  749|     46|                  return obj(static_cast<decltype(args)>(args)...);
  750|     46|              }
  751|     46|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     46|    {
  684|     46|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     46|            return static_cast<T*>(s.m_cp);
  686|     46|        }
  687|     46|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     46|            return static_cast<T*>(s.m_p);
  689|     46|        }
  690|     46|        else {
  691|     46|            return reinterpret_cast<T*>(s.m_fp);
  692|     46|        }
  693|     46|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3784|     46|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     46|        {
  662|     46|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|  1.63k|    {
 4001|  1.63k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|  1.63k|        const bool allowed_nonhex =
 4003|  1.63k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|  1.63k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|  1.63k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 1.63k, False: 0]
  |  Branch (4006:45): [True: 0, False: 1.63k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|  1.63k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 1.63k]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|  1.63k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 1.63k, False: 0]
  |  Branch (4015:45): [True: 0, False: 1.63k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|  1.63k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 1.63k]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|  1.63k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 1.58k, False: 46]
  |  Branch (4022:28): [True: 12, False: 1.57k]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|     12|            auto it = range.begin();
 4026|       |
 4027|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 12]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|     12|            else {
 4032|     12|                m_kind = float_kind::hex_without_prefix;
 4033|     12|            }
 4034|       |
 4035|     12|            return read_hex(ranges::subrange{it, range.end()});
 4036|     12|        }
 4037|  1.62k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 46, False: 1.57k]
  |  Branch (4037:29): [True: 46, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|     46|            m_kind = float_kind::generic;
 4041|     46|            return read_regular_float(range);
 4042|     46|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|  1.57k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.57k]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|  1.57k|        m_kind = float_kind::generic;
 4053|  1.57k|        return read_regular(range);
 4054|  1.57k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|  1.58k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  1.58k|                    auto res = read_all(rr);
 3728|  1.58k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.58k]
  |  |  ------------------
  ------------------
 3729|      0|                        return unexpected_scan_error(
 3730|      0|                            scan_error::invalid_scanned_value,
 3731|      0|                            "Invalid float value");
 3732|      0|                    }
 3733|  1.58k|                    return res;
 3734|  1.58k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.58k|{
 1839|  1.58k|    return ranges::next(range.begin(), range.end());
 1840|  1.58k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.58k|    {
  313|  1.58k|        ranges::advance(x, bound);
  314|  1.58k|        return x;
  315|  1.58k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.58k|    {
  275|  1.58k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.58k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.64k|    {
  190|  1.64k|        i = std::move(bound);
  191|  1.64k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|  1.58k|    {
 1577|  1.58k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.58k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  1.58k|    {
 1621|  1.58k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.58k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.58k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.58k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.58k|            m_storage.reset();
 1627|  1.58k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.58k|        }
 1629|  1.58k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.58k|                                          std::basic_string<CharT>>) {
 1631|  1.58k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.58k|            m_view = string_view_type{*m_storage};
 1633|  1.58k|        }
 1634|  1.58k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  1.58k|                                          typename detail::basic_scan_buffer<
 1636|  1.58k|                                              value_t>::forward_iterator> &&
 1637|  1.58k|                           ranges::common_range<Range>) {
 1638|  1.58k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.58k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.58k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.58k|                             detail::to_address(end_seg.end()))) {
 1642|  1.58k|                auto& str = m_storage.emplace();
 1643|  1.58k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.58k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.58k|                m_view = string_view_type{str};
 1646|  1.58k|                return;
 1647|  1.58k|            }
 1648|       |
 1649|  1.58k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.58k|                                                            end_seg.data());
 1651|  1.58k|            m_storage.reset();
 1652|  1.58k|        }
 1653|  1.58k|        else {
 1654|  1.58k|            auto& str = m_storage.emplace();
 1655|  1.58k|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.58k|                str.reserve(range.size());
 1657|  1.58k|            }
 1658|  1.58k|            if constexpr (ranges::common_range<Range>) {
 1659|  1.58k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.58k|                          std::back_inserter(str));
 1661|  1.58k|            }
 1662|  1.58k|            else {
 1663|  1.58k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.58k|                     ++it) {
 1665|  1.58k|                    str.push_back(*it);
 1666|  1.58k|                }
 1667|  1.58k|            }
 1668|  1.58k|            m_view = string_view_type{str};
 1669|  1.58k|        }
 1670|  1.58k|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|  1.61k|    {
 3666|  1.61k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.61k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|  1.61k|        return read_source_impl(range);
 3672|  1.61k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|  1.58k|    {
 3692|  1.58k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  1.58k|        const std::ptrdiff_t sign_len =
 3695|  1.58k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 0, False: 1.58k]
  ------------------
 3696|       |
 3697|  1.58k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  1.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.58k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.58k|    }                                                  \
  |  |  |  | 3642|  1.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  1.58k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4171|    514|    {
 4172|    514|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|    514|#if !SCN_DISABLE_LOCALE
 4175|    514|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 22, False: 492]
  ------------------
 4176|     22|            return read_impl<Range>(
 4177|     22|                range, rd,
 4178|     22|                [](float_reader<CharT>& r, auto&&... args) {
 4179|     22|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|     22|                },
 4181|     22|                value, loc);
 4182|     22|        }
 4183|    492|#endif
 4184|       |
 4185|    492|        return read_impl<Range>(
 4186|    492|            range, rd,
 4187|    492|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    492|                return r.read_source(SCN_FWD(args)...);
 4189|    492|            },
 4190|    492|            value);
 4191|    514|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4207|  1.63k|    {
 4208|  1.63k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|  1.63k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 1.58k]
  |  |  ------------------
  ------------------
 4210|     46|            return unexpected(r.error());
 4211|     46|        }
 4212|       |
 4213|  1.58k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  1.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.58k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.58k|    }                                                  \
  |  |  |  | 3642|  1.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|      0|        return ranges::next(range.begin(), n);
 4215|  1.58k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     22|    {
  754|     22|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     22|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     22|              cvref<T> obj = *get<T>(fn);
  745|     22|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     22|                  obj(static_cast<decltype(args)>(args)...);
  747|     22|              }
  748|     22|              else {
  749|     22|                  return obj(static_cast<decltype(args)>(args)...);
  750|     22|              }
  751|     22|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     22|    {
  684|     22|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     22|            return static_cast<T*>(s.m_cp);
  686|     22|        }
  687|     22|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     22|            return static_cast<T*>(s.m_p);
  689|     22|        }
  690|     22|        else {
  691|     22|            return reinterpret_cast<T*>(s.m_fp);
  692|     22|        }
  693|     22|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4178|     22|                [](float_reader<CharT>& r, auto&&... args) {
 4179|     22|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|     22|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     22|        {
  662|     22|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    492|    {
  754|    492|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    492|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    492|              cvref<T> obj = *get<T>(fn);
  745|    492|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    492|                  obj(static_cast<decltype(args)>(args)...);
  747|    492|              }
  748|    492|              else {
  749|    492|                  return obj(static_cast<decltype(args)>(args)...);
  750|    492|              }
  751|    492|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    492|    {
  684|    492|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    492|            return static_cast<T*>(s.m_cp);
  686|    492|        }
  687|    492|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    492|            return static_cast<T*>(s.m_p);
  689|    492|        }
  690|    492|        else {
  691|    492|            return reinterpret_cast<T*>(s.m_fp);
  692|    492|        }
  693|    492|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4187|    492|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    492|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|    492|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    492|        {
  662|    492|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5810|  8.27k|{
 5811|  8.27k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5811:19): [Folded - Ignored]
  ------------------
 5812|  8.27k|        return reader_impl_for_bool<CharT>{};
 5813|  8.27k|    }
 5814|  8.27k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5814:24): [Folded - Ignored]
  ------------------
 5815|  8.27k|        return reader_impl_for_char<CharT>{};
 5816|  8.27k|    }
 5817|  8.27k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5817:24): [Folded - Ignored]
  ------------------
 5818|  8.27k|        return reader_impl_for_wchar<CharT>{};
 5819|  8.27k|    }
 5820|  8.27k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5820:24): [Folded - Ignored]
  ------------------
 5821|  8.27k|        return reader_impl_for_code_point<CharT>{};
 5822|  8.27k|    }
 5823|  8.27k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  8.27k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5824:24): [Folded - Ignored]
  ------------------
 5825|  8.27k|        return reader_impl_for_string<CharT>{};
 5826|  8.27k|    }
 5827|  8.27k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  8.27k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5828:24): [Folded - Ignored]
  ------------------
 5829|  8.27k|        return reader_impl_for_string<CharT>{};
 5830|  8.27k|    }
 5831|  8.27k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5832|  8.27k|                       std::is_same_v<T, wregex_matches>) {
 5833|  8.27k|        return reader_impl_for_regex_matches<CharT>{};
 5834|  8.27k|    }
 5835|  8.27k|    else if constexpr (std::is_same_v<T, void*>) {
 5836|  8.27k|        return reader_impl_for_voidptr<CharT>{};
 5837|  8.27k|    }
 5838|  8.27k|    else if constexpr (std::is_floating_point_v<T>) {
 5839|  8.27k|        return reader_impl_for_float<CharT>{};
 5840|  8.27k|    }
 5841|  8.27k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5842|  8.27k|                       !std::is_same_v<T, wchar_t> &&
 5843|  8.27k|                       !std::is_same_v<T, char32_t> &&
 5844|  8.27k|                       !std::is_same_v<T, bool>) {
 5845|  8.27k|        return reader_impl_for_int<CharT>{};
 5846|  8.27k|    }
 5847|  8.27k|    else {
 5848|  8.27k|        return reader_impl_for_monostate<CharT>{};
 5849|  8.27k|    }
 5850|  8.27k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5207|  24.8k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  21.4k|    {
 3040|  21.4k|        reader_error_handler eh{};
 3041|  21.4k|        get_derived().check_specs_impl(specs, eh);
 3042|  21.4k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  21.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 762, False: 20.7k]
  |  |  ------------------
  ------------------
 3043|    762|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    762|        }
 3045|  20.7k|        return {};
 3046|  21.4k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  21.4k|    {
 3051|  21.4k|        return static_cast<Derived&>(*this);
 3052|  21.4k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5211|  21.4k|    {
 5212|  21.4k|        detail::check_string_type_specs(specs, eh);
 5213|       |
 5214|  21.4k|        SCN_GCC_PUSH
 5215|  21.4k|        SCN_GCC_IGNORE("-Wswitch")
 5216|  21.4k|        SCN_GCC_IGNORE("-Wswitch-default")
 5217|       |
 5218|  21.4k|        SCN_CLANG_PUSH
 5219|  21.4k|        SCN_CLANG_IGNORE("-Wswitch")
 5220|  21.4k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5221|       |
 5222|  21.4k|        switch (specs.type) {
  ------------------
  |  Branch (5222:17): [True: 432, False: 21.0k]
  ------------------
 5223|  1.32k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5223:13): [True: 1.32k, False: 20.1k]
  ------------------
 5224|  1.32k|                m_type = reader_type::word;
 5225|  1.32k|                break;
 5226|       |
 5227|    216|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5227:13): [True: 216, False: 21.2k]
  ------------------
 5228|    216|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5228:21): [True: 0, False: 216]
  ------------------
 5229|    216|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5229:21): [True: 0, False: 216]
  ------------------
 5230|      0|                    m_type = reader_type::custom_word;
 5231|      0|                }
 5232|    216|                else {
 5233|    216|                    m_type = reader_type::word;
 5234|    216|                }
 5235|    216|                break;
 5236|      0|            }
 5237|       |
 5238|    330|            case detail::presentation_type::character:
  ------------------
  |  Branch (5238:13): [True: 330, False: 21.1k]
  ------------------
 5239|    330|                m_type = reader_type::character;
 5240|    330|                break;
 5241|       |
 5242|  4.98k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5242:13): [True: 4.98k, False: 16.4k]
  ------------------
 5243|  4.98k|                m_type = reader_type::character_set;
 5244|  4.98k|                break;
 5245|       |
 5246|  12.5k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5246:13): [True: 12.5k, False: 8.91k]
  ------------------
 5247|  12.5k|                m_type = reader_type::regex;
 5248|  12.5k|                break;
 5249|       |
 5250|  1.63k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5250:13): [True: 1.63k, False: 19.8k]
  ------------------
 5251|  1.63k|                m_type = reader_type::regex_escaped;
 5252|  1.63k|                break;
 5253|  21.4k|        }
 5254|       |
 5255|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5256|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5257|  21.4k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5260|  29.2k|    {
 5261|  29.2k|        return m_type == reader_type::word;
 5262|  29.2k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  13.7k|{
 1132|  13.7k|    auto it = src.begin();
 1133|  1.11M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 1.10M, False: 12.0k]
  ------------------
 1134|  1.10M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  1.10M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.02k, False: 1.10M]
  ------------------
 1136|  1.02k|            return false;
 1137|  1.02k|        }
 1138|  1.10M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 192, False: 1.10M]
  ------------------
 1139|    192|            return false;
 1140|    192|        }
 1141|  1.10M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  1.10M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  1.10M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 438, False: 1.10M]
  ------------------
 1144|    438|            return false;
 1145|    438|        }
 1146|  1.10M|        it += len;
 1147|  1.10M|    }
 1148|  12.0k|    return true;
 1149|  13.7k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5104|  4.98k|        {
 5105|  4.98k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5105:17): [True: 588, False: 4.39k]
  ------------------
 5106|    588|                return {};
 5107|    588|            }
 5108|       |
 5109|  4.39k|            auto charset_string = specs.charset_string<SourceCharT>();
 5110|  4.39k|            auto it = detail::to_address(charset_string.begin());
 5111|  4.39k|            auto set = detail::parse_presentation_set(
 5112|  4.39k|                it, detail::to_address(charset_string.end()), nonascii);
 5113|  4.39k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  4.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.39k]
  |  |  ------------------
  ------------------
 5114|      0|                return nonascii.err;
 5115|      0|            }
 5116|  4.39k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  4.39k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5117|  4.39k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  4.39k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|       |
 5119|  4.39k|            std::sort(nonascii.extra_ranges.begin(),
 5120|  4.39k|                      nonascii.extra_ranges.end());
 5121|  4.39k|            return {};
 5122|  4.39k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5139|   596k|        {
 5140|   596k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5140:17): [True: 61.8k, False: 534k]
  ------------------
 5141|  61.8k|                return helper.is_char_set_in_extra_literals(cp);
 5142|  61.8k|            }
 5143|       |
 5144|   534k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5145|   596k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5087|  61.8k|        {
 5088|       |            // TODO: binary search?
 5089|  61.8k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5089:17): [True: 0, False: 61.8k]
  ------------------
 5090|      0|                return false;
 5091|      0|            }
 5092|       |
 5093|  61.8k|            const auto cp_val = static_cast<uint32_t>(cp);
 5094|  61.8k|            return std::find_if(
 5095|  61.8k|                       nonascii.extra_ranges.begin(),
 5096|  61.8k|                       nonascii.extra_ranges.end(),
 5097|  61.8k|                       [cp_val](const auto& pair) noexcept {
 5098|  61.8k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5099|  61.8k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5100|  61.8k|                       }) != nonascii.extra_ranges.end();
 5101|  61.8k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5097|  5.11M|                       [cp_val](const auto& pair) noexcept {
 5098|  5.11M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5098:35): [True: 5.11M, False: 5.15k]
  ------------------
 5099|  5.11M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5099:35): [True: 58.7k, False: 5.05M]
  ------------------
 5100|  5.11M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5077|   541k|        {
 5078|   541k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   541k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   541k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5079|   541k|            const auto val =
 5080|   541k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5081|   541k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5082|   541k|                    (val % 8)) &
 5083|   541k|                   1u;
 5084|   541k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5130|  12.4k|        {
 5131|  12.4k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5131:17): [True: 4.85k, False: 7.60k]
  ------------------
 5132|  4.85k|                return false;
 5133|  4.85k|            }
 5134|       |
 5135|  7.60k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5136|  12.4k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5074|  4.98k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5278|  6.90k|    {
 5279|  6.90k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  6.90k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5280|  6.90k|        return read_impl(range, specs, value);
 5281|  6.90k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5296|  6.90k|    {
 5297|  6.90k|        SCN_CLANG_PUSH
 5298|  6.90k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5299|       |
 5300|  6.90k|        switch (m_type) {
 5301|    512|            case reader_type::word:
  ------------------
  |  Branch (5301:13): [True: 512, False: 6.39k]
  ------------------
 5302|    512|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5303|       |
 5304|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5304:13): [True: 0, False: 6.90k]
  ------------------
 5305|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5306|      0|                                                                   value);
 5307|       |
 5308|      0|            case reader_type::character:
  ------------------
  |  Branch (5308:13): [True: 0, False: 6.90k]
  ------------------
 5309|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5310|       |
 5311|  1.66k|            case reader_type::character_set:
  ------------------
  |  Branch (5311:13): [True: 1.66k, False: 5.24k]
  ------------------
 5312|  1.66k|                return character_set_reader_impl<SourceCharT>{}.read(
 5313|  1.66k|                    range, specs, value);
 5314|       |
 5315|      0|#if !SCN_DISABLE_REGEX
 5316|  4.18k|            case reader_type::regex:
  ------------------
  |  Branch (5316:13): [True: 4.18k, False: 2.71k]
  ------------------
 5317|  4.18k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5318|  4.18k|                    range, specs.charset_string<SourceCharT>(),
 5319|  4.18k|                    specs.regexp_flags, value);
 5320|       |
 5321|    544|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5321:13): [True: 544, False: 6.35k]
  ------------------
 5322|    544|                return regex_string_reader_impl<SourceCharT>{}.read(
 5323|    544|                    range,
 5324|    544|                    get_unescaped_regex_pattern(
 5325|    544|                        specs.charset_string<SourceCharT>()),
 5326|    544|                    specs.regexp_flags, value);
 5327|      0|#endif
 5328|       |
 5329|      0|            default:
  ------------------
  |  Branch (5329:13): [True: 0, False: 6.90k]
  ------------------
 5330|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5331|  6.90k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5332|  6.90k|        }
 5333|       |
 5334|  6.90k|        SCN_CLANG_POP
 5335|  6.90k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4821|  1.63k|    {
 4822|  1.63k|        return read_string_impl(range, read_until_classic_space(range), value);
 4823|  1.63k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4753|  1.63k|{
 4754|  1.63k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|  1.63k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|  1.63k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 430, False: 1.20k]
  ------------------
 4758|    430|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|    430|                                     "Invalid encoding in scanned string");
 4760|    430|    }
 4761|  1.20k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.20k|    static_cast<    \
  |  |  929|  1.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|  1.20k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.20k]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|  1.20k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.20k|    static_cast<    \
  |  |  929|  1.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|  1.20k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  3.01k|{
 3012|  3.01k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  3.01k|        dest.assign(source.view());
 3014|  3.01k|    }
 3015|  3.01k|    else {
 3016|  3.01k|        return transcode_impl(source.view(), dest);
 3017|  3.01k|    }
 3018|       |
 3019|  3.01k|    return {};
 3020|  3.01k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  4.89k|{
 2088|  4.89k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  4.89k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  4.89k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  4.89k|        auto buf = make_contiguous_buffer(range);
 2092|  4.89k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  4.89k|        return ranges::next(range.begin(),
 2094|  4.89k|                            ranges::distance(buf.view().begin(), it));
 2095|  4.89k|    }
 2096|  4.89k|    else {
 2097|  4.89k|        auto it = range.begin();
 2098|       |
 2099|  4.89k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  4.89k|            auto seg = get_contiguous_beginning(range);
 2101|  4.89k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  4.89k|                seg_it != seg.end()) {
 2103|  4.89k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  4.89k|            }
 2105|  4.89k|            ranges::advance(it, seg.size());
 2106|  4.89k|        }
 2107|       |
 2108|  4.89k|        return read_until_code_point(
 2109|  4.89k|            ranges::subrange{it, range.end()},
 2110|  4.89k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  4.89k|    }
 2112|  4.89k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5049|  1.66k|    {
 5050|  1.66k|        auto it = read_source_impl(range, {specs});
 5051|  1.66k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 402, False: 1.25k]
  |  |  ------------------
  ------------------
 5052|    402|            return unexpected(it.error());
 5053|    402|        }
 5054|       |
 5055|  1.25k|        return read_string_impl(range, *it, value);
 5056|  1.66k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5154|  4.98k|    {
 5155|  4.98k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5156|  4.98k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5157|       |
 5158|  4.98k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.98k]
  |  |  ------------------
  ------------------
 5159|      0|            return unexpected(e);
 5160|      0|        }
 5161|       |
 5162|  4.98k|        read_source_callback cb_wrapper{helper};
 5163|       |
 5164|  4.98k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5164:13): [True: 4.39k, False: 588]
  ------------------
 5165|  4.39k|            const auto cb = [&](char32_t cp) {
 5166|  4.39k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5167|  4.39k|            };
 5168|       |
 5169|  4.39k|            if (is_inverted) {
  ------------------
  |  Branch (5169:17): [True: 1.39k, False: 2.99k]
  ------------------
 5170|  1.39k|                auto it = read_until_code_point(range, cb);
 5171|  1.39k|                return check_nonempty(it, range);
 5172|  1.39k|            }
 5173|  2.99k|            auto it = read_while_code_point(range, cb);
 5174|  2.99k|            return check_nonempty(it, range);
 5175|  4.39k|        }
 5176|       |
 5177|    588|        const auto cb = [&](SourceCharT ch) {
 5178|    588|            return cb_wrapper.on_ascii_only(ch);
 5179|    588|        };
 5180|       |
 5181|    588|        if (is_inverted) {
  ------------------
  |  Branch (5181:13): [True: 360, False: 228]
  ------------------
 5182|    360|            auto it = read_until_code_unit(range, cb);
 5183|    360|            return check_nonempty(it, range);
 5184|    360|        }
 5185|    228|        auto it = read_while_code_unit(range, cb);
 5186|    228|        return check_nonempty(it, range);
 5187|    588|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  4.39k|{
 2061|  4.39k|    auto it = range.begin();
 2062|   596k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 596k, False: 228]
  ------------------
 2063|   596k|        const auto val =
 2064|   596k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   596k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   596k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 596k, False: 66]
  |  |  ------------------
  ------------------
 2066|   596k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   596k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   596k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 4.16k, False: 592k]
  ------------------
 2069|  4.16k|                return it;
 2070|  4.16k|            }
 2071|   596k|        }
 2072|   592k|        it = val.iterator;
 2073|   592k|    }
 2074|       |
 2075|    228|    return it;
 2076|  4.39k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   596k|{
 1899|   596k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   596k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   596k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   596k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   596k|    auto it = range.begin();
 1903|   596k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   596k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   596k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66, False: 596k]
  |  |  ------------------
  ------------------
 1906|     66|        ++it;
 1907|     66|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|     66|        return {it, {}};
 1909|     66|    }
 1910|       |
 1911|   596k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 533k, False: 62.5k]
  ------------------
 1912|   533k|        ++it;
 1913|   533k|        return {it, string_type(1, *range.begin())};
 1914|   533k|    }
 1915|       |
 1916|  62.5k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  62.5k|    return {it, string_type{range.begin(), it}};
 1918|   596k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|     66|{
 1155|     66|    auto it = input.begin();
 1156|    768|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 720, False: 48]
  ------------------
 1157|    720|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 18, False: 702]
  ------------------
 1158|     18|            break;
 1159|     18|        }
 1160|    720|    }
 1161|     66|    return it;
 1162|     66|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  62.5k|    {
  283|  62.5k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  62.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  62.5k|    {
  212|  62.5k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 60, False: 62.5k]
  ------------------
  213|     60|            auto dist = bound - i;
  214|     60|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     60|            return dist;
  216|     60|        }
  217|  62.5k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  62.5k|        return n;
  219|  62.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   125k|    {
  132|   125k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 125k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   125k|        return t;
  136|   125k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   596k|    {
 1890|   596k|        return !codepoint.empty();
 1891|   596k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  4.39k|    {
  754|  4.39k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|   596k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   596k|              cvref<T> obj = *get<T>(fn);
  745|   596k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   596k|                  obj(static_cast<decltype(args)>(args)...);
  747|   596k|              }
  748|   596k|              else {
  749|   596k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   596k|              }
  751|   596k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   596k|    {
  684|   596k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   596k|            return static_cast<T*>(s.m_cp);
  686|   596k|        }
  687|   596k|        else if constexpr (std::is_object_v<T>) {
  688|   596k|            return static_cast<T*>(s.m_p);
  689|   596k|        }
  690|   596k|        else {
  691|   596k|            return reinterpret_cast<T*>(s.m_fp);
  692|   596k|        }
  693|   596k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5165|   596k|            const auto cb = [&](char32_t cp) {
 5166|   596k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5167|   596k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  4.39k|        {
  667|  4.39k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5192|  4.98k|    {
 5193|  4.98k|        if (it == range.begin()) {
  ------------------
  |  Branch (5193:13): [True: 1.20k, False: 3.77k]
  ------------------
 5194|  1.20k|            return unexpected_scan_error(
 5195|  1.20k|                scan_error::invalid_scanned_value,
 5196|  1.20k|                "No characters matched in [character set]");
 5197|  1.20k|        }
 5198|       |
 5199|  3.77k|        return it;
 5200|  4.98k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.99k|{
 2082|  2.99k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.99k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    588|    {
  754|    588|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  12.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.4k|              cvref<T> obj = *get<T>(fn);
  745|  12.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.4k|              }
  748|  12.4k|              else {
  749|  12.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.4k|              }
  751|  12.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  12.4k|    {
  684|  12.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.4k|            return static_cast<T*>(s.m_cp);
  686|  12.4k|        }
  687|  12.4k|        else if constexpr (std::is_object_v<T>) {
  688|  12.4k|            return static_cast<T*>(s.m_p);
  689|  12.4k|        }
  690|  12.4k|        else {
  691|  12.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.4k|        }
  693|  12.4k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5177|  12.4k|        const auto cb = [&](SourceCharT ch) {
 5178|  12.4k|            return cb_wrapper.on_ascii_only(ch);
 5179|  12.4k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    588|        {
  667|    588|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4753|  1.93k|{
 4754|  1.93k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|  1.93k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|  1.93k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 122, False: 1.81k]
  ------------------
 4758|    122|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|    122|                                     "Invalid encoding in scanned string");
 4760|    122|    }
 4761|  1.81k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.81k|    static_cast<    \
  |  |  929|  1.81k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|  1.81k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81k]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|  1.81k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.81k|    static_cast<    \
  |  |  929|  1.81k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|  1.81k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4892|  4.73k|    {
 4893|  4.73k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.05k, False: 678]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  4.05k|    }                                                  \
  |  |  |  | 3642|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    678|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4894|    678|        return read_string_impl(range, it, value);
 4895|  4.73k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4914|  14.1k|    {
 4915|  14.1k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  28.3k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4915:23): [Folded - Ignored]
  |  Branch (4915:23): [Folded - Ignored]
  ------------------
 4916|  14.1k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4916:23): [Folded - Ignored]
  ------------------
 4917|  14.1k|            return unexpected_scan_error(
 4918|  14.1k|                scan_error::invalid_scanned_value,
 4919|  14.1k|                "Regex backend doesn't support wide strings as input");
 4920|  14.1k|        }
 4921|  14.1k|        else {
 4922|  14.1k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4922:17): [True: 0, False: 14.1k]
  ------------------
 4923|      0|                return unexpected_scan_error(
 4924|      0|                    scan_error::invalid_scanned_value,
 4925|      0|                    "Cannot use regex with a non-contiguous source "
 4926|      0|                    "range");
 4927|      0|            }
 4928|       |
 4929|  14.1k|            auto input = get_as_contiguous(range);
 4930|  14.1k|            SCN_TRY(it,
  ------------------
  |  | 3643|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.1k, False: 2.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  12.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  12.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  12.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  12.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  12.1k|    }                                                  \
  |  |  |  | 3642|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4931|  2.03k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4932|  2.03k|            return ranges::next(range.begin(),
 4933|  2.03k|                                ranges::distance(input.begin(), it));
 4934|  14.1k|        }
 4935|  14.1k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  14.1k|{
  959|  14.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  14.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  14.1k|        return true;
  962|  14.1k|    }
  963|  14.1k|    else if constexpr (std::is_same_v<
  964|  14.1k|                           ranges::const_iterator_t<Range>,
  965|  14.1k|                           typename detail::basic_scan_buffer<
  966|  14.1k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  14.1k|        auto beg = r.begin();
  968|  14.1k|        if (!beg.stores_parent()) {
  969|  14.1k|            return true;
  970|  14.1k|        }
  971|  14.1k|        return beg.parent()->is_contiguous();
  972|  14.1k|    }
  973|  14.1k|    else {
  974|  14.1k|        return false;
  975|  14.1k|    }
  976|  14.1k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  14.1k|{
 1065|  14.1k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  14.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  14.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  14.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  14.1k|        return r;
 1070|  14.1k|    }
 1071|  14.1k|    else if constexpr (std::is_same_v<
 1072|  14.1k|                           ranges::const_iterator_t<Range>,
 1073|  14.1k|                           typename detail::basic_scan_buffer<
 1074|  14.1k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  14.1k|        if constexpr (ranges::common_range<Range>) {
 1076|  14.1k|            return detail::make_string_view_from_pointers(
 1077|  14.1k|                r.begin().to_contiguous_segment_iterator(),
 1078|  14.1k|                r.end().to_contiguous_segment_iterator());
 1079|  14.1k|        }
 1080|  14.1k|        else {
 1081|  14.1k|            return r.begin().contiguous_segment();
 1082|  14.1k|        }
 1083|  14.1k|    }
 1084|  14.1k|    else {
 1085|  14.1k|        SCN_EXPECT(false);
 1086|  14.1k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  14.1k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  14.1k|    }
 1090|  14.1k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  14.1k|{
  981|  14.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  14.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  14.1k|        return true;
  984|  14.1k|    }
  985|  14.1k|    else if constexpr (std::is_same_v<
  986|  14.1k|                           ranges::const_iterator_t<Range>,
  987|  14.1k|                           typename detail::basic_scan_buffer<
  988|  14.1k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  14.1k|        auto beg = r.begin();
  990|  14.1k|        if (beg.contiguous_segment().empty()) {
  991|  14.1k|            return false;
  992|  14.1k|        }
  993|  14.1k|        if constexpr (ranges::common_range<Range>) {
  994|  14.1k|            return beg.contiguous_segment().end() ==
  995|  14.1k|                   ranges::end(r).contiguous_segment().end();
  996|  14.1k|        }
  997|  14.1k|        else {
  998|  14.1k|            if (beg.stores_parent()) {
  999|  14.1k|                return beg.contiguous_segment().end() ==
 1000|  14.1k|                       beg.parent()->current_view().end();
 1001|  14.1k|            }
 1002|  14.1k|            return true;
 1003|  14.1k|        }
 1004|  14.1k|    }
 1005|  14.1k|    else {
 1006|  14.1k|        return false;
 1007|  14.1k|    }
 1008|  14.1k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4347|  14.1k|{
 4348|  14.1k|    static_assert(ranges::contiguous_range<Input> &&
 4349|  14.1k|                  ranges::borrowed_range<Input> &&
 4350|  14.1k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4351|       |
 4352|  14.1k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4353|  14.1k|    std::basic_regex<CharT> re{};
 4354|  14.1k|    try {
 4355|  14.1k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3643|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4356|  14.1k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4357|  14.1k|                                     re_flags | std::regex_constants::nosubs};
 4358|  14.1k|    }
 4359|  14.1k|    catch (const std::regex_error& err) {
 4360|  8.31k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4361|  8.31k|                                     "Invalid regex");
 4362|  8.31k|    }
 4363|       |
 4364|  5.88k|    std::match_results<const CharT*> matches{};
 4365|  5.88k|    try {
 4366|  5.88k|        bool found = std::regex_search(input.data(),
 4367|  5.88k|                                       input.data() + input.size(), matches, re,
 4368|  5.88k|                                       std::regex_constants::match_continuous);
 4369|  5.88k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4369:13): [True: 3.84k, False: 2.03k]
  |  Branch (4369:23): [True: 0, False: 2.03k]
  ------------------
 4370|  3.60k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4371|  3.60k|                                         "Regular expression didn't match");
 4372|  3.60k|        }
 4373|  5.88k|    }
 4374|  5.88k|    catch (const std::regex_error& err) {
 4375|    246|        return unexpected_scan_error(scan_error::invalid_format_string,
 4376|    246|                                     "Regex matching failed with an error");
 4377|    246|    }
 4378|       |
 4379|  2.03k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4380|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4381|       |    auto re =
 4382|       |#if SCN_REGEX_BOOST_USE_ICU
 4383|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4384|       |                             make_regex_flags(flags) |
 4385|       |                                 boost::regex_constants::no_except |
 4386|       |                                 boost::regex_constants::nosubs);
 4387|       |#else
 4388|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4389|       |                                  make_regex_flags(flags) |
 4390|       |                                      boost::regex_constants::no_except |
 4391|       |                                      boost::regex_constants::nosubs};
 4392|       |#endif
 4393|       |    if (re.status() != 0) {
 4394|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4395|       |                                     "Invalid regex");
 4396|       |    }
 4397|       |
 4398|       |    boost::match_results<const CharT*> matches{};
 4399|       |    try {
 4400|       |        bool found =
 4401|       |#if SCN_REGEX_BOOST_USE_ICU
 4402|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4403|       |                                   matches, re,
 4404|       |                                   boost::regex_constants::match_continuous);
 4405|       |#else
 4406|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4407|       |                                matches, re,
 4408|       |                                boost::regex_constants::match_continuous);
 4409|       |#endif
 4410|       |        if (!found || matches.prefix().matched) {
 4411|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4412|       |                                         "Regular expression didn't match");
 4413|       |        }
 4414|       |    }
 4415|       |    catch (const std::runtime_error& err) {
 4416|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4417|       |                                     "Regex matching failed with an error");
 4418|       |    }
 4419|       |
 4420|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4421|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4422|       |    static_assert(std::is_same_v<CharT, char>);
 4423|       |    std::string flagged_pattern{};
 4424|       |    auto re = [&]() {
 4425|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4426|       |        opts.set_never_capture(true);
 4427|       |        if (flagstr.empty()) {
 4428|       |            return re2::RE2{pattern, opts};
 4429|       |        }
 4430|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4431|       |        flagged_pattern.append(flagstr);
 4432|       |        flagged_pattern.append(pattern);
 4433|       |        return re2::RE2{flagged_pattern, opts};
 4434|       |    }();
 4435|       |    if (!re.ok()) {
 4436|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4437|       |                                     "Failed to parse regular expression");
 4438|       |    }
 4439|       |
 4440|       |    auto new_input = detail::make_string_view_from_pointers(
 4441|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4442|       |    bool found = re2::RE2::Consume(&new_input, re);
 4443|       |    if (!found) {
 4444|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4445|       |                                     "Regular expression didn't match");
 4446|       |    }
 4447|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4448|       |#endif  // SCN_REGEX_BACKEND == ...
 4449|  5.88k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5810|  8.27k|{
 5811|  8.27k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5811:19): [Folded - Ignored]
  ------------------
 5812|  8.27k|        return reader_impl_for_bool<CharT>{};
 5813|  8.27k|    }
 5814|  8.27k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5814:24): [Folded - Ignored]
  ------------------
 5815|  8.27k|        return reader_impl_for_char<CharT>{};
 5816|  8.27k|    }
 5817|  8.27k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5817:24): [Folded - Ignored]
  ------------------
 5818|  8.27k|        return reader_impl_for_wchar<CharT>{};
 5819|  8.27k|    }
 5820|  8.27k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5820:24): [Folded - Ignored]
  ------------------
 5821|  8.27k|        return reader_impl_for_code_point<CharT>{};
 5822|  8.27k|    }
 5823|  8.27k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  8.27k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5824:24): [Folded - Ignored]
  ------------------
 5825|  8.27k|        return reader_impl_for_string<CharT>{};
 5826|  8.27k|    }
 5827|  8.27k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  8.27k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5828:24): [Folded - Ignored]
  ------------------
 5829|  8.27k|        return reader_impl_for_string<CharT>{};
 5830|  8.27k|    }
 5831|  8.27k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5832|  8.27k|                       std::is_same_v<T, wregex_matches>) {
 5833|  8.27k|        return reader_impl_for_regex_matches<CharT>{};
 5834|  8.27k|    }
 5835|  8.27k|    else if constexpr (std::is_same_v<T, void*>) {
 5836|  8.27k|        return reader_impl_for_voidptr<CharT>{};
 5837|  8.27k|    }
 5838|  8.27k|    else if constexpr (std::is_floating_point_v<T>) {
 5839|  8.27k|        return reader_impl_for_float<CharT>{};
 5840|  8.27k|    }
 5841|  8.27k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5842|  8.27k|                       !std::is_same_v<T, wchar_t> &&
 5843|  8.27k|                       !std::is_same_v<T, char32_t> &&
 5844|  8.27k|                       !std::is_same_v<T, bool>) {
 5845|  8.27k|        return reader_impl_for_int<CharT>{};
 5846|  8.27k|    }
 5847|  8.27k|    else {
 5848|  8.27k|        return reader_impl_for_monostate<CharT>{};
 5849|  8.27k|    }
 5850|  8.27k|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  3.01k|{
 2968|  3.01k|    dst.clear();
 2969|  3.01k|    transcode_valid_to_string(src, dst);
 2970|  3.01k|    return {};
 2971|  3.01k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  3.01k|{
 1403|  3.01k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  3.01k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  3.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  3.01k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  3.01k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  3.01k|            std::u32string tmp;
 1410|  3.01k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  3.01k|            return transcode_to_string_impl_32to16<true>(
 1412|  3.01k|                std::u32string_view{tmp}, dest);
 1413|  3.01k|        }
 1414|  3.01k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  3.01k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  3.01k|        }
 1417|  3.01k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  3.01k|{
 1277|  3.01k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  3.01k|    auto it = src.begin();
 1280|   274k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 271k, False: 3.01k]
  ------------------
 1281|   271k|        auto res = get_next_code_point_valid(
 1282|   271k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   271k|                                                                 src.end()));
 1284|   271k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   271k|        dest.push_back(res.value);
 1286|   271k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   271k|    }
 1288|  3.01k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   271k|{
 1189|   271k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   271k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   271k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   271k|    return {input.begin() + len,
 1195|   271k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   271k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5278|  6.90k|    {
 5279|  6.90k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  6.90k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5280|  6.90k|        return read_impl(range, specs, value);
 5281|  6.90k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5296|  6.90k|    {
 5297|  6.90k|        SCN_CLANG_PUSH
 5298|  6.90k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5299|       |
 5300|  6.90k|        switch (m_type) {
 5301|    512|            case reader_type::word:
  ------------------
  |  Branch (5301:13): [True: 512, False: 6.39k]
  ------------------
 5302|    512|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5303|       |
 5304|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5304:13): [True: 0, False: 6.90k]
  ------------------
 5305|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5306|      0|                                                                   value);
 5307|       |
 5308|      0|            case reader_type::character:
  ------------------
  |  Branch (5308:13): [True: 0, False: 6.90k]
  ------------------
 5309|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5310|       |
 5311|  1.66k|            case reader_type::character_set:
  ------------------
  |  Branch (5311:13): [True: 1.66k, False: 5.24k]
  ------------------
 5312|  1.66k|                return character_set_reader_impl<SourceCharT>{}.read(
 5313|  1.66k|                    range, specs, value);
 5314|       |
 5315|      0|#if !SCN_DISABLE_REGEX
 5316|  4.18k|            case reader_type::regex:
  ------------------
  |  Branch (5316:13): [True: 4.18k, False: 2.71k]
  ------------------
 5317|  4.18k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5318|  4.18k|                    range, specs.charset_string<SourceCharT>(),
 5319|  4.18k|                    specs.regexp_flags, value);
 5320|       |
 5321|    544|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5321:13): [True: 544, False: 6.35k]
  ------------------
 5322|    544|                return regex_string_reader_impl<SourceCharT>{}.read(
 5323|    544|                    range,
 5324|    544|                    get_unescaped_regex_pattern(
 5325|    544|                        specs.charset_string<SourceCharT>()),
 5326|    544|                    specs.regexp_flags, value);
 5327|      0|#endif
 5328|       |
 5329|      0|            default:
  ------------------
  |  Branch (5329:13): [True: 0, False: 6.90k]
  ------------------
 5330|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5331|  6.90k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5332|  6.90k|        }
 5333|       |
 5334|  6.90k|        SCN_CLANG_POP
 5335|  6.90k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4821|  1.63k|    {
 4822|  1.63k|        return read_string_impl(range, read_until_classic_space(range), value);
 4823|  1.63k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4753|  1.63k|{
 4754|  1.63k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|  1.63k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|  1.63k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 430, False: 1.20k]
  ------------------
 4758|    430|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|    430|                                     "Invalid encoding in scanned string");
 4760|    430|    }
 4761|  1.20k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.20k|    static_cast<    \
  |  |  929|  1.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|  1.20k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.20k]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|  1.20k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.20k|    static_cast<    \
  |  |  929|  1.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|  1.20k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  3.01k|{
 3012|  3.01k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  3.01k|        dest.assign(source.view());
 3014|  3.01k|    }
 3015|  3.01k|    else {
 3016|  3.01k|        return transcode_impl(source.view(), dest);
 3017|  3.01k|    }
 3018|       |
 3019|      0|    return {};
 3020|  3.01k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5049|  1.66k|    {
 5050|  1.66k|        auto it = read_source_impl(range, {specs});
 5051|  1.66k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 402, False: 1.25k]
  |  |  ------------------
  ------------------
 5052|    402|            return unexpected(it.error());
 5053|    402|        }
 5054|       |
 5055|  1.25k|        return read_string_impl(range, *it, value);
 5056|  1.66k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4753|  1.93k|{
 4754|  1.93k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|  1.93k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|  1.93k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 122, False: 1.81k]
  ------------------
 4758|    122|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|    122|                                     "Invalid encoding in scanned string");
 4760|    122|    }
 4761|  1.81k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.81k|    static_cast<    \
  |  |  929|  1.81k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|  1.81k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81k]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|  1.81k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.81k|    static_cast<    \
  |  |  929|  1.81k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|  1.81k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4892|  4.73k|    {
 4893|  4.73k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.05k, False: 678]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  4.05k|    }                                                  \
  |  |  |  | 3642|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    678|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4894|    678|        return read_string_impl(range, it, value);
 4895|  4.73k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5810|  8.27k|{
 5811|  8.27k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5811:19): [Folded - Ignored]
  ------------------
 5812|  8.27k|        return reader_impl_for_bool<CharT>{};
 5813|  8.27k|    }
 5814|  8.27k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5814:24): [Folded - Ignored]
  ------------------
 5815|  8.27k|        return reader_impl_for_char<CharT>{};
 5816|  8.27k|    }
 5817|  8.27k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5817:24): [Folded - Ignored]
  ------------------
 5818|  8.27k|        return reader_impl_for_wchar<CharT>{};
 5819|  8.27k|    }
 5820|  8.27k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5820:24): [Folded - Ignored]
  ------------------
 5821|  8.27k|        return reader_impl_for_code_point<CharT>{};
 5822|  8.27k|    }
 5823|  8.27k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  8.27k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5824:24): [Folded - Ignored]
  ------------------
 5825|  8.27k|        return reader_impl_for_string<CharT>{};
 5826|  8.27k|    }
 5827|  8.27k|    else if constexpr (std::is_same_v<T, std::string> ||
 5828|  8.27k|                       std::is_same_v<T, std::wstring>) {
 5829|  8.27k|        return reader_impl_for_string<CharT>{};
 5830|  8.27k|    }
 5831|  8.27k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5832|  8.27k|                       std::is_same_v<T, wregex_matches>) {
 5833|  8.27k|        return reader_impl_for_regex_matches<CharT>{};
 5834|  8.27k|    }
 5835|  8.27k|    else if constexpr (std::is_same_v<T, void*>) {
 5836|  8.27k|        return reader_impl_for_voidptr<CharT>{};
 5837|  8.27k|    }
 5838|  8.27k|    else if constexpr (std::is_floating_point_v<T>) {
 5839|  8.27k|        return reader_impl_for_float<CharT>{};
 5840|  8.27k|    }
 5841|  8.27k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5842|  8.27k|                       !std::is_same_v<T, wchar_t> &&
 5843|  8.27k|                       !std::is_same_v<T, char32_t> &&
 5844|  8.27k|                       !std::is_same_v<T, bool>) {
 5845|  8.27k|        return reader_impl_for_int<CharT>{};
 5846|  8.27k|    }
 5847|  8.27k|    else {
 5848|  8.27k|        return reader_impl_for_monostate<CharT>{};
 5849|  8.27k|    }
 5850|  8.27k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5278|  6.90k|    {
 5279|  6.90k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  6.90k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5280|  6.90k|        return read_impl(range, specs, value);
 5281|  6.90k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5296|  6.90k|    {
 5297|  6.90k|        SCN_CLANG_PUSH
 5298|  6.90k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5299|       |
 5300|  6.90k|        switch (m_type) {
 5301|    512|            case reader_type::word:
  ------------------
  |  Branch (5301:13): [True: 512, False: 6.39k]
  ------------------
 5302|    512|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5303|       |
 5304|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5304:13): [True: 0, False: 6.90k]
  ------------------
 5305|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5306|      0|                                                                   value);
 5307|       |
 5308|      0|            case reader_type::character:
  ------------------
  |  Branch (5308:13): [True: 0, False: 6.90k]
  ------------------
 5309|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5310|       |
 5311|  1.66k|            case reader_type::character_set:
  ------------------
  |  Branch (5311:13): [True: 1.66k, False: 5.24k]
  ------------------
 5312|  1.66k|                return character_set_reader_impl<SourceCharT>{}.read(
 5313|  1.66k|                    range, specs, value);
 5314|       |
 5315|      0|#if !SCN_DISABLE_REGEX
 5316|  4.18k|            case reader_type::regex:
  ------------------
  |  Branch (5316:13): [True: 4.18k, False: 2.71k]
  ------------------
 5317|  4.18k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5318|  4.18k|                    range, specs.charset_string<SourceCharT>(),
 5319|  4.18k|                    specs.regexp_flags, value);
 5320|       |
 5321|    544|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5321:13): [True: 544, False: 6.35k]
  ------------------
 5322|    544|                return regex_string_reader_impl<SourceCharT>{}.read(
 5323|    544|                    range,
 5324|    544|                    get_unescaped_regex_pattern(
 5325|    544|                        specs.charset_string<SourceCharT>()),
 5326|    544|                    specs.regexp_flags, value);
 5327|      0|#endif
 5328|       |
 5329|      0|            default:
  ------------------
  |  Branch (5329:13): [True: 0, False: 6.90k]
  ------------------
 5330|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5331|  6.90k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5332|  6.90k|        }
 5333|       |
 5334|  6.90k|        SCN_CLANG_POP
 5335|  6.90k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4828|  1.63k|    {
 4829|  1.63k|        return read_string_view_impl(range, read_until_classic_space(range),
 4830|  1.63k|                                     value);
 4831|  1.63k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4774|  1.63k|{
 4775|  1.63k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4776|       |
 4777|  1.63k|    auto src = [&]() {
 4778|  1.63k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4779|  1.63k|            return make_contiguous_buffer(
 4780|  1.63k|                ranges::subrange{range.begin().base(), result.base()});
 4781|  1.63k|        }
 4782|  1.63k|        else {
 4783|  1.63k|            return make_contiguous_buffer(
 4784|  1.63k|                ranges::subrange{range.begin(), result});
 4785|  1.63k|        }
 4786|  1.63k|    }();
 4787|  1.63k|    using src_type = decltype(src);
 4788|       |
 4789|  1.63k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4789:9): [Folded - Ignored]
  ------------------
 4790|      0|        return unexpected_scan_error(
 4791|      0|            scan_error::invalid_scanned_value,
 4792|      0|            "Cannot read a string_view from this source range (not "
 4793|      0|            "contiguous)");
 4794|      0|    }
 4795|  1.63k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4795:19): [Folded - Ignored]
  ------------------
 4796|  1.63k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4797|  1.63k|                                     "Cannot read a string_view from "
 4798|  1.63k|                                     "this source range (would require "
 4799|  1.63k|                                     "transcoding)");
 4800|  1.63k|    }
 4801|  1.63k|    else {
 4802|  1.63k|        const auto view = src.view();
 4803|  1.63k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4804|       |
 4805|  1.63k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4805:13): [True: 430, False: 1.20k]
  ------------------
 4806|    430|            return unexpected_scan_error(
 4807|    430|                scan_error::invalid_scanned_value,
 4808|    430|                "Invalid encoding in scanned string_view");
 4809|    430|        }
 4810|       |
 4811|  1.20k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.20k|    static_cast<    \
  |  |  929|  1.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4812|  1.63k|    }
 4813|  1.63k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4777|  1.63k|    auto src = [&]() {
 4778|  1.63k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4778:23): [Folded - Ignored]
  ------------------
 4779|  1.63k|            return make_contiguous_buffer(
 4780|  1.63k|                ranges::subrange{range.begin().base(), result.base()});
 4781|  1.63k|        }
 4782|  1.63k|        else {
 4783|  1.63k|            return make_contiguous_buffer(
 4784|  1.63k|                ranges::subrange{range.begin(), result});
 4785|  1.63k|        }
 4786|  1.63k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5063|  1.66k|    {
 5064|  1.66k|        auto it = read_source_impl(range, {specs});
 5065|  1.66k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 402, False: 1.25k]
  |  |  ------------------
  ------------------
 5066|    402|            return unexpected(it.error());
 5067|    402|        }
 5068|       |
 5069|  1.25k|        return read_string_view_impl(range, *it, value);
 5070|  1.66k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4774|  1.93k|{
 4775|  1.93k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4776|       |
 4777|  1.93k|    auto src = [&]() {
 4778|  1.93k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4779|  1.93k|            return make_contiguous_buffer(
 4780|  1.93k|                ranges::subrange{range.begin().base(), result.base()});
 4781|  1.93k|        }
 4782|  1.93k|        else {
 4783|  1.93k|            return make_contiguous_buffer(
 4784|  1.93k|                ranges::subrange{range.begin(), result});
 4785|  1.93k|        }
 4786|  1.93k|    }();
 4787|  1.93k|    using src_type = decltype(src);
 4788|       |
 4789|  1.93k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4789:9): [Folded - Ignored]
  ------------------
 4790|      0|        return unexpected_scan_error(
 4791|      0|            scan_error::invalid_scanned_value,
 4792|      0|            "Cannot read a string_view from this source range (not "
 4793|      0|            "contiguous)");
 4794|      0|    }
 4795|  1.93k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4795:19): [Folded - Ignored]
  ------------------
 4796|  1.93k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4797|  1.93k|                                     "Cannot read a string_view from "
 4798|  1.93k|                                     "this source range (would require "
 4799|  1.93k|                                     "transcoding)");
 4800|  1.93k|    }
 4801|  1.93k|    else {
 4802|  1.93k|        const auto view = src.view();
 4803|  1.93k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4804|       |
 4805|  1.93k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4805:13): [True: 122, False: 1.81k]
  ------------------
 4806|    122|            return unexpected_scan_error(
 4807|    122|                scan_error::invalid_scanned_value,
 4808|    122|                "Invalid encoding in scanned string_view");
 4809|    122|        }
 4810|       |
 4811|  1.81k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.81k|    static_cast<    \
  |  |  929|  1.81k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4812|  1.93k|    }
 4813|  1.93k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4777|  1.93k|    auto src = [&]() {
 4778|  1.93k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4778:23): [Folded - Ignored]
  ------------------
 4779|  1.93k|            return make_contiguous_buffer(
 4780|  1.93k|                ranges::subrange{range.begin().base(), result.base()});
 4781|  1.93k|        }
 4782|  1.93k|        else {
 4783|  1.93k|            return make_contiguous_buffer(
 4784|  1.93k|                ranges::subrange{range.begin(), result});
 4785|  1.93k|        }
 4786|  1.93k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4903|  4.73k|    {
 4904|  4.73k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.05k, False: 678]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  4.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  4.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  4.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  4.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  4.05k|    }                                                  \
  |  |  |  | 3642|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    678|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4905|    678|        return read_string_view_impl(range, it, value);
 4906|  4.73k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5625|     56|    {
 5626|     56|        reader_error_handler eh{};
 5627|     56|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5627:23): [Folded - Ignored]
  ------------------
 5628|     56|            detail::check_code_point_type_specs(specs, eh);
 5629|     56|        }
 5630|     56|        else {
 5631|     56|            detail::check_char_type_specs(specs, eh);
 5632|     56|        }
 5633|     56|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 5634|     12|            return {scan_error::invalid_format_string, eh.m_msg};
 5635|     12|        }
 5636|     44|        return {};
 5637|     56|    }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5620|    134|    {
 5621|    134|        return false;
 5622|    134|    }
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|    454|{
 2349|    454|    size_t count{0};
 2350|    454|    for_each_code_point(input, [&count](char32_t cp) {
 2351|    454|        count += calculate_text_width_for_fmt_v10(cp);
 2352|    454|    });
 2353|    454|    return count;
 2354|    454|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|    454|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|    454|    auto it = input.begin();
 1448|    788|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 334, False: 454]
  ------------------
 1449|    334|        auto res = get_next_code_point(
 1450|    334|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|    334|        cb(res.value);
 1452|    334|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|    334|    }
 1454|    454|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   227k|{
 1169|   227k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   227k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   227k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   227k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   227k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 227k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   227k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 227k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   227k|    return {input.begin() + len,
 1181|   227k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   227k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|    454|    {
  754|    454|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|    334|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    334|              cvref<T> obj = *get<T>(fn);
  745|    334|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    334|                  obj(static_cast<decltype(args)>(args)...);
  747|    334|              }
  748|    334|              else {
  749|    334|                  return obj(static_cast<decltype(args)>(args)...);
  750|    334|              }
  751|    334|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|    334|    {
  684|    334|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    334|            return static_cast<T*>(s.m_cp);
  686|    334|        }
  687|    334|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    334|            return static_cast<T*>(s.m_p);
  689|    334|        }
  690|    334|        else {
  691|    334|            return reinterpret_cast<T*>(s.m_fp);
  692|    334|        }
  693|    334|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|    334|    for_each_code_point(input, [&count](char32_t cp) {
 2351|    334|        count += calculate_text_width_for_fmt_v10(cp);
 2352|    334|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|    454|        {
  662|    454|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|    180|    {
 1582|    180|        return m_view;
 1583|    180|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|    180|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|    540|{
 1857|    540|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    540|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    540|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    540|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    540|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    540|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 18, False: 522]
  ------------------
 1862|     18|            return unexpected(eof_error::eof);
 1863|     18|        }
 1864|       |
 1865|    522|        return ranges::next(range.begin(), count);
 1866|    540|    }
 1867|    540|    else {
 1868|    540|        auto it = range.begin();
 1869|    540|        if (guaranteed_minimum_size(range) >= count) {
 1870|    540|            return ranges::next(it, count);
 1871|    540|        }
 1872|       |
 1873|    540|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|    540|            if (it == range.end()) {
 1875|    540|                return unexpected(eof_error::eof);
 1876|    540|            }
 1877|    540|        }
 1878|       |
 1879|    540|        return it;
 1880|    540|    }
 1881|    540|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  5.83k|{
 1899|  5.83k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  5.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  5.83k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  5.83k|    auto it = range.begin();
 1903|  5.83k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  5.83k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  5.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.83k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  5.83k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 5.83k, False: 0]
  ------------------
 1912|  5.83k|        ++it;
 1913|  5.83k|        return {it, string_type(1, *range.begin())};
 1914|  5.83k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  5.83k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  7.87k|{
  944|  7.87k|    return is_range_eof(r.begin(), r.end());
  945|  7.87k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   235k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   235k|    {
  937|   235k|        return begin == end;
  938|   235k|    }
  939|   235k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|     90|    {
  190|     90|        i = std::move(bound);
  191|     90|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  5.83k|    {
 1890|  5.83k|        return !codepoint.empty();
 1891|  5.83k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  2.03k|{
  950|  2.03k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.03k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  2.03k|    return eof_error::good;
  954|  2.03k|}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5700|     44|    {
 5701|     44|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5701:13): [True: 44, False: 0]
  ------------------
 5702|     44|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5702:13): [True: 0, False: 0]
  ------------------
 5703|     44|            return read_default(range, value, loc);
 5704|     44|        }
 5705|       |
 5706|      0|        reader_impl_for_int<CharT> reader{};
 5707|      0|        using integer_type =
 5708|      0|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5709|      0|        integer_type tmp_value{};
 5710|      0|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5711|      0|        value = static_cast<integer_type>(value);
 5712|      0|        return ret;
 5713|     44|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5684|     90|    {
 5685|     90|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     90|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5686|     90|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5686:23): [Folded - Ignored]
  ------------------
 5687|     90|            return code_point_reader<wchar_t>{}.read(range, value);
 5688|     90|        }
 5689|     90|        else {
 5690|     90|            return code_unit_reader<wchar_t>{}.read(range, value);
 5691|     90|        }
 5692|     90|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5565|     90|    {
 5566|     90|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3643|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5567|     90|        ch = *range.begin();
 5568|     90|        return it;
 5569|     90|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|    630|{
 1846|    630|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    630|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 630]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|    630|    return ranges::next(range.begin());
 1851|    630|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   149k|    {
  296|   149k|        ++x;
  297|   149k|        return x;
  298|   149k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|     44|    {
 3540|     44|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|     44|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|     44|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 44]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|     44|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 44]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|     44|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     44|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 44, False: 0]
  |  |  ------------------
  ------------------
 3566|     44|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|     44|                    parse_integer_digits_without_thsep(
 3568|     44|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|     44|                        prefix_result.parsed_base));
 3570|       |
 3571|     44|            auto buf = make_contiguous_buffer(
 3572|     44|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|     44|            SCN_TRY(result_it,
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     44|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|     44|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|    270|{
 3326|    270|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3643|    270|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    270|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    270|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    270|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    270|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    270|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    270|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    270|        parse_integer_base_prefix(
 3331|    270|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    270|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 270]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it =
 3337|      0|                ranges::prev_backtrack(digits_begin_it, range.begin());
 3338|      0|        }
 3339|      0|        else {
 3340|      0|            parsed_zero = false;
 3341|      0|        }
 3342|      0|    }
 3343|    270|    else {
 3344|    270|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3344:13): [True: 0, False: 270]
  ------------------
 3345|    270|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3345:13): [True: 270, False: 0]
  ------------------
 3346|    270|            digits_begin_it = base_prefix_begin_it;
 3347|    270|        }
 3348|    270|    }
 3349|       |
 3350|    270|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3350:9): [True: 270, False: 0]
  ------------------
 3351|    270|        sign = sign_type::plus_sign;
 3352|    270|    }
 3353|    270|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3354|    270|        digits_begin_it, parsed_base, sign, parsed_zero};
 3355|    270|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|    360|{
 3141|    360|    auto r = read_one_of_code_unit(range, "+-");
 3142|    360|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 360, False: 0]
  ------------------
 3143|    360|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 360, False: 0]
  ------------------
 3144|    360|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    360|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    360|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|    360|{
 2272|    360|    auto it = read_code_unit(range);
 2273|    360|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|    720|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 720, False: 360]
  ------------------
 2278|    720|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 720]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|    720|    }
 2282|       |
 2283|    360|    return unexpected(parse_error::error);
 2284|    360|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|    270|{
 3293|    270|    switch (base) {
 3294|      0|        case 2:
  ------------------
  |  Branch (3294:9): [True: 0, False: 270]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      0|                    false};
 3298|       |
 3299|      0|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 0, False: 270]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|      0|            bool zero_parsed = false;
 3302|      0|            auto it = apply_opt(
 3303|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|      0|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|     90|        case 16:
  ------------------
  |  Branch (3307:9): [True: 90, False: 180]
  ------------------
 3308|       |            // allow 0x/0X
 3309|     90|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|     90|                    false};
 3311|       |
 3312|      0|        case 0:
  ------------------
  |  Branch (3312:9): [True: 0, False: 270]
  ------------------
 3313|       |            // detect base
 3314|      0|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    180|        default:
  ------------------
  |  Branch (3316:9): [True: 180, False: 90]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    180|            return {range.begin(), base, false};
 3319|    270|    }
 3320|    270|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|     90|{
 2291|     90|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 90, False: 0]
  ------------------
 2292|     90|        return range.begin();
 2293|     90|    }
 2294|      0|    return *result;
 2295|     90|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|    360|{
 2231|    360|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|    360|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|    360|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|    360|        if (range.size() < str.size()) {
 2236|    360|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    360|        }
 2238|    360|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|    360|            return unexpected(parse_error::error);
 2240|    360|        }
 2241|    360|        return ranges::next(range.begin(), str.size());
 2242|    360|    }
 2243|    360|    else {
 2244|    360|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    360|            if (ch < 'A' || ch > 'Z') {
 2246|    360|                return ch;
 2247|    360|            }
 2248|    360|            return static_cast<char_type>(ch +
 2249|    360|                                          static_cast<char_type>('a' - 'A'));
 2250|    360|        };
 2251|       |
 2252|    360|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|    360|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    360|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    360|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 360]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    360|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    360|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    360|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    360|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    360|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    360|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 0]
  |  |  ------------------
  ------------------
 2257|    360|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    360|                    return ascii_tolower(a) ==
 2259|    360|                           static_cast<detail::char_t<Range>>(b);
 2260|    360|                }))) {
 2261|    360|            return unexpected(parse_error::error);
 2262|    360|        }
 2263|       |
 2264|      0|        return it;
 2265|    360|    }
 2266|    360|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    360|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    360|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 0, False: 360]
  |  Branch (2245:29): [True: 360, False: 0]
  ------------------
 2246|    360|                return ch;
 2247|    360|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    360|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|    180|{
 2146|    180|    auto it = read_code_unit(range);
 2147|    180|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 180]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    180|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 0]
  |  |  ------------------
  ------------------
 2152|    180|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    180|        return unexpected(parse_error::error);
 2154|    180|    }
 2155|       |
 2156|      0|    return *it;
 2157|    180|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|     90|{
 3251|     90|    return read_matching_string_classic_nocase(range, "0x");
 3252|     90|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3360|    270|{
 3361|    270|    using char_type = detail::char_t<Range>;
 3362|       |
 3363|    270|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3363:19): [Folded - Ignored]
  ------------------
 3364|    270|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    270|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 270]
  |  |  ------------------
  ------------------
 3365|      0|            return unexpected_scan_error(
 3366|      0|                scan_error::invalid_scanned_value,
 3367|      0|                "Failed to parse integer: No digits found");
 3368|      0|        }
 3369|    270|        return range.end();
 3370|    270|    }
 3371|    270|    else {
 3372|    270|        return read_while1_code_unit(range,
 3373|    270|                                     [&](char_type ch) noexcept {
 3374|    270|                                         return char_to_int(ch) < base;
 3375|    270|                                     })
 3376|    270|            .transform_error(map_parse_error_to_scan_error(
 3377|    270|                scan_error::invalid_scanned_value,
 3378|    270|                "Failed to parse integer: No digits found"));
 3379|    270|    }
 3380|    270|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|    994|{
 1683|    994|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    994|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    994|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    994|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|    994|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|    994|    }
 1688|    994|    else {
 1689|    994|        return contiguous_range_factory{SCN_FWD(range)};
 1690|    994|    }
 1691|    994|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|    994|    {
 1490|    994|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  1.09k|    {
 1503|  1.09k|        return sv;
 1504|  1.09k|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|    760|{
 2951|    760|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 720, False: 40]
  ------------------
 2952|    720|        auto it = read_while_classic_space(range);
 2953|    720|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|    720|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    720|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 720]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|    720|        return it;
 2959|    720|    }
 2960|       |
 2961|     40|    return read_while_classic_space(range);
 2962|    760|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|    984|{
 2117|    984|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    984|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    984|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    984|        auto buf = make_contiguous_buffer(range);
 2121|    984|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    984|        return ranges::next(range.begin(),
 2123|    984|                            ranges::distance(buf.view().begin(), it));
 2124|    984|    }
 2125|    984|    else {
 2126|    984|        auto it = range.begin();
 2127|       |
 2128|    984|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    984|            auto seg = get_contiguous_beginning(range);
 2130|    984|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    984|                seg_it != seg.end()) {
 2132|    984|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    984|            }
 2134|    984|            ranges::advance(it, seg.size());
 2135|    984|        }
 2136|       |
 2137|    984|        return read_while_code_point(
 2138|    984|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    984|    }
 2140|    984|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|    984|{
 2082|    984|    return read_until_code_point(range, std::not_fn(pred));
 2083|    984|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  1.25k|{
 2061|  1.25k|    auto it = range.begin();
 2062|  6.24k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 5.83k, False: 408]
  ------------------
 2063|  5.83k|        const auto val =
 2064|  5.83k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  5.83k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  5.83k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.83k, False: 0]
  |  |  ------------------
  ------------------
 2066|  5.83k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  5.83k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  5.83k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 846, False: 4.99k]
  ------------------
 2069|    846|                return it;
 2070|    846|            }
 2071|  5.83k|        }
 2072|  4.99k|        it = val.iterator;
 2073|  4.99k|    }
 2074|       |
 2075|    408|    return it;
 2076|  1.25k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|    984|    {
  754|    984|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  1.11k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.11k|              cvref<T> obj = *get<T>(fn);
  745|  1.11k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.11k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.11k|              }
  748|  1.11k|              else {
  749|  1.11k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.11k|              }
  751|  1.11k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.11k|    {
  684|  1.11k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.11k|            return static_cast<T*>(s.m_cp);
  686|  1.11k|        }
  687|  1.11k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.11k|            return static_cast<T*>(s.m_p);
  689|  1.11k|        }
  690|  1.11k|        else {
  691|  1.11k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.11k|        }
  693|  1.11k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  1.11k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|    984|        {
  662|    984|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    112|    {
 3040|    112|        reader_error_handler eh{};
 3041|    112|        get_derived().check_specs_impl(specs, eh);
 3042|    112|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    112|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 88]
  |  |  ------------------
  ------------------
 3043|     24|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|     24|        }
 3045|     88|        return {};
 3046|    112|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|    112|    {
 3051|    112|        return static_cast<Derived&>(*this);
 3052|    112|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3485|    112|    {
 3486|    112|        detail::check_int_type_specs(specs, eh);
 3487|    112|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|    180|    {
 3035|    180|        return true;
 3036|    180|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|     44|    {
 3540|     44|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|     44|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|     44|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 44]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|     44|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 44]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|     44|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     44|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 44, False: 0]
  |  |  ------------------
  ------------------
 3566|     44|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|     44|                    parse_integer_digits_without_thsep(
 3568|     44|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|     44|                        prefix_result.parsed_base));
 3570|       |
 3571|     44|            auto buf = make_contiguous_buffer(
 3572|     44|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|     44|            SCN_TRY(result_it,
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     44|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|     44|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|     90|    {
 3540|     90|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|     90|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|     90|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 90]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|     90|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 90]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|     90|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     90|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 90, False: 0]
  |  |  ------------------
  ------------------
 3566|     90|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|     90|                    parse_integer_digits_without_thsep(
 3568|     90|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|     90|                        prefix_result.parsed_base));
 3570|       |
 3571|     90|            auto buf = make_contiguous_buffer(
 3572|     90|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|     90|            SCN_TRY(result_it,
  ------------------
  |  | 3643|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     90|    }                                                  \
  |  |  |  | 3642|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|     90|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|     56|    {
 3040|     56|        reader_error_handler eh{};
 3041|     56|        get_derived().check_specs_impl(specs, eh);
 3042|     56|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 3043|     12|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|     12|        }
 3045|     44|        return {};
 3046|     56|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|     56|    {
 3051|     56|        return static_cast<Derived&>(*this);
 3052|     56|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4146|     56|    {
 4147|     56|        detail::check_float_type_specs(specs, eh);
 4148|     56|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|     90|    {
 3035|     90|        return true;
 3036|     90|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4218|     44|    {
 4219|     44|        unsigned options{};
 4220|     44|        if (specs.localized) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 44]
  ------------------
 4221|      0|            options |= float_reader_base::allow_thsep;
 4222|      0|        }
 4223|       |
 4224|     44|        SCN_GCC_COMPAT_PUSH
 4225|     44|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4226|       |
 4227|     44|        switch (specs.type) {
 4228|      0|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4228:13): [True: 0, False: 44]
  ------------------
 4229|      0|                return options | float_reader_base::allow_fixed;
 4230|       |
 4231|      0|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4231:13): [True: 0, False: 44]
  ------------------
 4232|      0|                return options | float_reader_base::allow_scientific;
 4233|       |
 4234|      0|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4234:13): [True: 0, False: 44]
  ------------------
 4235|      0|                return options | float_reader_base::allow_hex;
 4236|       |
 4237|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4237:13): [True: 0, False: 44]
  ------------------
 4238|      0|                return options | float_reader_base::allow_scientific |
 4239|      0|                       float_reader_base::allow_fixed;
 4240|       |
 4241|     44|            case detail::presentation_type::none:
  ------------------
  |  Branch (4241:13): [True: 44, False: 0]
  ------------------
 4242|     44|                return options | float_reader_base::allow_scientific |
 4243|     44|                       float_reader_base::allow_fixed |
 4244|     44|                       float_reader_base::allow_hex;
 4245|       |
 4246|      0|            default:
  ------------------
  |  Branch (4246:13): [True: 0, False: 44]
  ------------------
 4247|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4248|     44|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4249|     44|        }
 4250|       |
 4251|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4252|     44|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3660|     44|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|     90|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|    180|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4057|     90|    {
 4058|     90|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 90, False: 0]
  ------------------
 4059|     90|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 90, False: 0]
  ------------------
 4060|     90|            return;
 4061|     90|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|     90|    {
  763|     90|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|     90|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|     90|    {
 3706|     90|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|     90|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|     90|        auto it = sign_result.first;
 3709|     90|        m_sign = sign_result.second;
 3710|       |
 3711|     90|        auto digits_begin = it;
 3712|     90|        auto r = ranges::subrange{it, range.end()};
 3713|     90|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|     90|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|     90|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  |  Branch (859:45): [True: 0, False: 90]
  |  |  |  Branch (859:45): [True: 0, False: 90]
  |  |  ------------------
  ------------------
 3716|     90|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|     90|            else {
 3725|     90|                auto cb = [&](const auto& rr)
 3726|     90|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|     90|                    auto res = read_all(rr);
 3728|     90|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|     90|                        return unexpected_scan_error(
 3730|     90|                            scan_error::invalid_scanned_value,
 3731|     90|                            "Invalid float value");
 3732|     90|                    }
 3733|     90|                    return res;
 3734|     90|                };
 3735|     90|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|     90|            }
 3737|     90|        }
 3738|     90|        else {
 3739|     90|            SCN_TRY_ASSIGN(
 3740|     90|                it,
 3741|     90|                do_read_source_impl(
 3742|     90|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|     90|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|     90|        }
 3745|       |
 3746|     90|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|     90|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 90, False: 0]
  |  Branch (3748:48): [True: 90, False: 0]
  ------------------
 3749|     90|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 90, False: 0]
  ------------------
 3750|     90|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 90, False: 0]
  ------------------
 3751|     90|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|     90|        }
 3753|       |
 3754|     90|        handle_separators();
 3755|       |
 3756|     90|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 90]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|     90|        return it;
 3769|     90|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|     90|    {
 3812|     90|        auto it = range.begin();
 3813|     90|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 90, False: 0]
  ------------------
 3814|     90|            return unexpected(r.error());
 3815|     90|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|     90|    {
 3835|     90|        auto it = range.begin();
 3836|     90|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 90, False: 0]
  ------------------
 3837|     90|            return r.transform_error(map_parse_error_to_scan_error(
 3838|     90|                scan_error::invalid_scanned_value,
 3839|     90|                "Invalid floating-point NaN value"));
 3840|     90|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|     90|    {
 3805|     90|        return read_matching_string_classic_nocase(range, "0x");
 3806|     90|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|     90|    {
 4001|     90|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|     90|        const bool allowed_nonhex =
 4003|     90|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|     90|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|     90|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 90, False: 0]
  |  Branch (4006:45): [True: 0, False: 90]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|     90|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 90]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|     90|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 90, False: 0]
  |  Branch (4015:45): [True: 0, False: 90]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|     90|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 90]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|     90|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 90, False: 0]
  |  Branch (4022:28): [True: 0, False: 90]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|      0|            auto it = range.begin();
 4026|       |
 4027|      0|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 0]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|      0|            else {
 4032|      0|                m_kind = float_kind::hex_without_prefix;
 4033|      0|            }
 4034|       |
 4035|      0|            return read_hex(ranges::subrange{it, range.end()});
 4036|      0|        }
 4037|     90|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 0, False: 90]
  |  Branch (4037:29): [True: 0, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|      0|            m_kind = float_kind::generic;
 4041|      0|            return read_regular_float(range);
 4042|      0|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|     90|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|     90|        m_kind = float_kind::generic;
 4053|     90|        return read_regular(range);
 4054|     90|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|     90|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|     90|                    auto res = read_all(rr);
 3728|     90|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  ------------------
  ------------------
 3729|      0|                        return unexpected_scan_error(
 3730|      0|                            scan_error::invalid_scanned_value,
 3731|      0|                            "Invalid float value");
 3732|      0|                    }
 3733|     90|                    return res;
 3734|     90|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|     90|{
 1839|     90|    return ranges::next(range.begin(), range.end());
 1840|     90|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|     90|    {
  313|     90|        ranges::advance(x, bound);
  314|     90|        return x;
  315|     90|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|     90|    {
  275|     90|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     90|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|     90|    {
 1577|     90|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|     90|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|     90|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|     90|    {
 1621|     90|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|     90|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|     90|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|     90|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|     90|            m_storage.reset();
 1627|     90|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|     90|        }
 1629|     90|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|     90|                                          std::basic_string<CharT>>) {
 1631|     90|            m_storage.emplace(SCN_FWD(range));
 1632|     90|            m_view = string_view_type{*m_storage};
 1633|     90|        }
 1634|     90|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|     90|                                          typename detail::basic_scan_buffer<
 1636|     90|                                              value_t>::forward_iterator> &&
 1637|     90|                           ranges::common_range<Range>) {
 1638|     90|            auto beg_seg = range.begin().contiguous_segment();
 1639|     90|            auto end_seg = range.end().contiguous_segment();
 1640|     90|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|     90|                             detail::to_address(end_seg.end()))) {
 1642|     90|                auto& str = m_storage.emplace();
 1643|     90|                str.reserve(range.end().position() - range.begin().position());
 1644|     90|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|     90|                m_view = string_view_type{str};
 1646|     90|                return;
 1647|     90|            }
 1648|       |
 1649|     90|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|     90|                                                            end_seg.data());
 1651|     90|            m_storage.reset();
 1652|     90|        }
 1653|     90|        else {
 1654|     90|            auto& str = m_storage.emplace();
 1655|     90|            if constexpr (ranges::sized_range<Range>) {
 1656|     90|                str.reserve(range.size());
 1657|     90|            }
 1658|     90|            if constexpr (ranges::common_range<Range>) {
 1659|     90|                std::copy(ranges::begin(range), ranges::end(range),
 1660|     90|                          std::back_inserter(str));
 1661|     90|            }
 1662|     90|            else {
 1663|     90|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|     90|                     ++it) {
 1665|     90|                    str.push_back(*it);
 1666|     90|                }
 1667|     90|            }
 1668|     90|            m_view = string_view_type{str};
 1669|     90|        }
 1670|     90|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|     90|    {
 3666|     90|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|     90|        return read_source_impl(range);
 3672|     90|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|     90|    {
 3692|     90|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|     90|        const std::ptrdiff_t sign_len =
 3695|     90|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 0, False: 90]
  ------------------
 3696|       |
 3697|     90|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     90|    }                                                  \
  |  |  |  | 3642|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|     90|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4171|     44|    {
 4172|     44|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|     44|#if !SCN_DISABLE_LOCALE
 4175|     44|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 0, False: 44]
  ------------------
 4176|      0|            return read_impl<Range>(
 4177|      0|                range, rd,
 4178|      0|                [](float_reader<CharT>& r, auto&&... args) {
 4179|      0|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|      0|                },
 4181|      0|                value, loc);
 4182|      0|        }
 4183|     44|#endif
 4184|       |
 4185|     44|        return read_impl<Range>(
 4186|     44|            range, rd,
 4187|     44|            [](float_reader<CharT>& r, auto&&... args) {
 4188|     44|                return r.read_source(SCN_FWD(args)...);
 4189|     44|            },
 4190|     44|            value);
 4191|     44|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4207|     90|    {
 4208|     90|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|     90|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 90]
  |  |  ------------------
  ------------------
 4210|      0|            return unexpected(r.error());
 4211|      0|        }
 4212|       |
 4213|     90|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     90|    }                                                  \
  |  |  |  | 3642|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|      0|        return ranges::next(range.begin(), n);
 4215|     90|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|     44|    {
  754|     44|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     44|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     44|              cvref<T> obj = *get<T>(fn);
  745|     44|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     44|                  obj(static_cast<decltype(args)>(args)...);
  747|     44|              }
  748|     44|              else {
  749|     44|                  return obj(static_cast<decltype(args)>(args)...);
  750|     44|              }
  751|     44|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|     44|    {
  684|     44|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     44|            return static_cast<T*>(s.m_cp);
  686|     44|        }
  687|     44|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     44|            return static_cast<T*>(s.m_p);
  689|     44|        }
  690|     44|        else {
  691|     44|            return reinterpret_cast<T*>(s.m_fp);
  692|     44|        }
  693|     44|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4187|     44|            [](float_reader<CharT>& r, auto&&... args) {
 4188|     44|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|     44|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|     44|        {
  662|     44|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5810|    102|{
 5811|    102|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5811:19): [Folded - Ignored]
  ------------------
 5812|    102|        return reader_impl_for_bool<CharT>{};
 5813|    102|    }
 5814|    102|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5814:24): [Folded - Ignored]
  ------------------
 5815|    102|        return reader_impl_for_char<CharT>{};
 5816|    102|    }
 5817|    102|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5817:24): [Folded - Ignored]
  ------------------
 5818|    102|        return reader_impl_for_wchar<CharT>{};
 5819|    102|    }
 5820|    102|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5820:24): [Folded - Ignored]
  ------------------
 5821|    102|        return reader_impl_for_code_point<CharT>{};
 5822|    102|    }
 5823|    102|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|    102|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5824:24): [Folded - Ignored]
  ------------------
 5825|    102|        return reader_impl_for_string<CharT>{};
 5826|    102|    }
 5827|    102|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|    102|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5828:24): [Folded - Ignored]
  ------------------
 5829|    102|        return reader_impl_for_string<CharT>{};
 5830|    102|    }
 5831|    102|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5832|    102|                       std::is_same_v<T, wregex_matches>) {
 5833|    102|        return reader_impl_for_regex_matches<CharT>{};
 5834|    102|    }
 5835|    102|    else if constexpr (std::is_same_v<T, void*>) {
 5836|    102|        return reader_impl_for_voidptr<CharT>{};
 5837|    102|    }
 5838|    102|    else if constexpr (std::is_floating_point_v<T>) {
 5839|    102|        return reader_impl_for_float<CharT>{};
 5840|    102|    }
 5841|    102|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5842|    102|                       !std::is_same_v<T, wchar_t> &&
 5843|    102|                       !std::is_same_v<T, char32_t> &&
 5844|    102|                       !std::is_same_v<T, bool>) {
 5845|    102|        return reader_impl_for_int<CharT>{};
 5846|    102|    }
 5847|    102|    else {
 5848|    102|        return reader_impl_for_monostate<CharT>{};
 5849|    102|    }
 5850|    102|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5207|    306|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    168|    {
 3040|    168|        reader_error_handler eh{};
 3041|    168|        get_derived().check_specs_impl(specs, eh);
 3042|    168|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 132]
  |  |  ------------------
  ------------------
 3043|     36|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|     36|        }
 3045|    132|        return {};
 3046|    168|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|    168|    {
 3051|    168|        return static_cast<Derived&>(*this);
 3052|    168|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5211|    168|    {
 5212|    168|        detail::check_string_type_specs(specs, eh);
 5213|       |
 5214|    168|        SCN_GCC_PUSH
 5215|    168|        SCN_GCC_IGNORE("-Wswitch")
 5216|    168|        SCN_GCC_IGNORE("-Wswitch-default")
 5217|       |
 5218|    168|        SCN_CLANG_PUSH
 5219|    168|        SCN_CLANG_IGNORE("-Wswitch")
 5220|    168|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5221|       |
 5222|    168|        switch (specs.type) {
  ------------------
  |  Branch (5222:17): [True: 0, False: 168]
  ------------------
 5223|    132|            case detail::presentation_type::none:
  ------------------
  |  Branch (5223:13): [True: 132, False: 36]
  ------------------
 5224|    132|                m_type = reader_type::word;
 5225|    132|                break;
 5226|       |
 5227|      0|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5227:13): [True: 0, False: 168]
  ------------------
 5228|      0|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5228:21): [True: 0, False: 0]
  ------------------
 5229|      0|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5229:21): [True: 0, False: 0]
  ------------------
 5230|      0|                    m_type = reader_type::custom_word;
 5231|      0|                }
 5232|      0|                else {
 5233|      0|                    m_type = reader_type::word;
 5234|      0|                }
 5235|      0|                break;
 5236|      0|            }
 5237|       |
 5238|     36|            case detail::presentation_type::character:
  ------------------
  |  Branch (5238:13): [True: 36, False: 132]
  ------------------
 5239|     36|                m_type = reader_type::character;
 5240|     36|                break;
 5241|       |
 5242|      0|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5242:13): [True: 0, False: 168]
  ------------------
 5243|      0|                m_type = reader_type::character_set;
 5244|      0|                break;
 5245|       |
 5246|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5246:13): [True: 0, False: 168]
  ------------------
 5247|      0|                m_type = reader_type::regex;
 5248|      0|                break;
 5249|       |
 5250|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5250:13): [True: 0, False: 168]
  ------------------
 5251|      0|                m_type = reader_type::regex_escaped;
 5252|      0|                break;
 5253|    168|        }
 5254|       |
 5255|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5256|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5257|    168|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5260|    270|    {
 5261|    270|        return m_type == reader_type::word;
 5262|    270|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|    322|{
 1132|    322|    auto it = src.begin();
 1133|  5.97k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 5.76k, False: 208]
  ------------------
 1134|  5.76k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  5.76k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 5.76k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  5.76k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 5.76k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  5.76k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  5.76k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  5.76k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 114, False: 5.65k]
  ------------------
 1144|    114|            return false;
 1145|    114|        }
 1146|  5.65k|        it += len;
 1147|  5.65k|    }
 1148|    208|    return true;
 1149|    322|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|     52|{
 2968|     52|    dst.clear();
 2969|     52|    transcode_valid_to_string(src, dst);
 2970|     52|    return {};
 2971|     52|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|     52|{
 1403|     52|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|     52|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|     52|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     52|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|     52|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|     52|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|     52|            std::u32string tmp;
 1410|     52|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|     52|            return transcode_to_string_impl_32to16<true>(
 1412|     52|                std::u32string_view{tmp}, dest);
 1413|     52|        }
 1414|     52|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|     52|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|     52|        }
 1417|     52|    }
 1418|     52|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|     52|        if constexpr (sizeof(DestCharT) == 1) {
 1420|     52|            std::u32string tmp;
 1421|     52|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|     52|            return transcode_to_string_impl_32to8<true>(
 1423|     52|                std::u32string_view{tmp}, dest);
 1424|     52|        }
 1425|     52|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|     52|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|     52|        }
 1428|     52|    }
 1429|     52|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|     52|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|     52|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|     52|        }
 1433|     52|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|     52|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|     52|        }
 1436|     52|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|     52|{
 1294|     52|    static_assert(sizeof(SourceCharT) == 4);
 1295|     52|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  1.28k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 1.28k, False: 52]
  ------------------
 1298|  1.28k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  1.28k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  1.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  1.28k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 666, False: 622]
  ------------------
 1306|    666|            dest.push_back(static_cast<char>(cp));
 1307|    666|        }
 1308|    622|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 14, False: 608]
  ------------------
 1309|     14|            dest.push_back(
 1310|     14|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|     14|            dest.push_back(
 1312|     14|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|     14|        }
 1314|    608|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 246, False: 362]
  ------------------
 1315|    246|            dest.push_back(
 1316|    246|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    246|            dest.push_back(static_cast<char>(
 1318|    246|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    246|            dest.push_back(
 1320|    246|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    246|        }
 1322|    362|        else {
 1323|    362|            dest.push_back(
 1324|    362|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    362|            dest.push_back(static_cast<char>(
 1326|    362|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    362|            dest.push_back(static_cast<char>(
 1328|    362|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    362|            dest.push_back(
 1330|    362|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    362|        }
 1332|  1.28k|    }
 1333|     52|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5278|     44|    {
 5279|     44|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     44|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5280|     44|        return read_impl(range, specs, value);
 5281|     44|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5296|     44|    {
 5297|     44|        SCN_CLANG_PUSH
 5298|     44|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5299|       |
 5300|     44|        switch (m_type) {
 5301|     44|            case reader_type::word:
  ------------------
  |  Branch (5301:13): [True: 44, False: 0]
  ------------------
 5302|     44|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5303|       |
 5304|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5304:13): [True: 0, False: 44]
  ------------------
 5305|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5306|      0|                                                                   value);
 5307|       |
 5308|      0|            case reader_type::character:
  ------------------
  |  Branch (5308:13): [True: 0, False: 44]
  ------------------
 5309|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5310|       |
 5311|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5311:13): [True: 0, False: 44]
  ------------------
 5312|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5313|      0|                    range, specs, value);
 5314|       |
 5315|      0|#if !SCN_DISABLE_REGEX
 5316|      0|            case reader_type::regex:
  ------------------
  |  Branch (5316:13): [True: 0, False: 44]
  ------------------
 5317|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5318|      0|                    range, specs.charset_string<SourceCharT>(),
 5319|      0|                    specs.regexp_flags, value);
 5320|       |
 5321|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5321:13): [True: 0, False: 44]
  ------------------
 5322|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5323|      0|                    range,
 5324|      0|                    get_unescaped_regex_pattern(
 5325|      0|                        specs.charset_string<SourceCharT>()),
 5326|      0|                    specs.regexp_flags, value);
 5327|      0|#endif
 5328|       |
 5329|      0|            default:
  ------------------
  |  Branch (5329:13): [True: 0, False: 44]
  ------------------
 5330|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5331|     44|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5332|     44|        }
 5333|       |
 5334|     44|        SCN_CLANG_POP
 5335|     44|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4821|     90|    {
 4822|     90|        return read_string_impl(range, read_until_classic_space(range), value);
 4823|     90|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4753|     90|{
 4754|     90|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|     90|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|     90|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 38, False: 52]
  ------------------
 4758|     38|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|     38|                                     "Invalid encoding in scanned string");
 4760|     38|    }
 4761|     52|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     52|    static_cast<    \
  |  |  929|     52|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|     52|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|     52|    return SCN_MOVE(result);
  ------------------
  |  |  928|     52|    static_cast<    \
  |  |  929|     52|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|     52|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|     52|{
 3012|     52|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|     52|        dest.assign(source.view());
 3014|     52|    }
 3015|     52|    else {
 3016|     52|        return transcode_impl(source.view(), dest);
 3017|     52|    }
 3018|       |
 3019|      0|    return {};
 3020|     52|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|    270|{
 2088|    270|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    270|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    270|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    270|        auto buf = make_contiguous_buffer(range);
 2092|    270|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    270|        return ranges::next(range.begin(),
 2094|    270|                            ranges::distance(buf.view().begin(), it));
 2095|    270|    }
 2096|    270|    else {
 2097|    270|        auto it = range.begin();
 2098|       |
 2099|    270|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    270|            auto seg = get_contiguous_beginning(range);
 2101|    270|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    270|                seg_it != seg.end()) {
 2103|    270|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    270|            }
 2105|    270|            ranges::advance(it, seg.size());
 2106|    270|        }
 2107|       |
 2108|    270|        return read_until_code_point(
 2109|    270|            ranges::subrange{it, range.end()},
 2110|    270|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    270|    }
 2112|    270|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|    270|    {
  754|    270|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  4.72k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.72k|              cvref<T> obj = *get<T>(fn);
  745|  4.72k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.72k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.72k|              }
  748|  4.72k|              else {
  749|  4.72k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.72k|              }
  751|  4.72k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  4.72k|    {
  684|  4.72k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.72k|            return static_cast<T*>(s.m_cp);
  686|  4.72k|        }
  687|  4.72k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.72k|            return static_cast<T*>(s.m_p);
  689|  4.72k|        }
  690|  4.72k|        else {
  691|  4.72k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.72k|        }
  693|  4.72k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  4.72k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|    270|        {
  662|    270|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5810|    102|{
 5811|    102|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5811:19): [Folded - Ignored]
  ------------------
 5812|    102|        return reader_impl_for_bool<CharT>{};
 5813|    102|    }
 5814|    102|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5814:24): [Folded - Ignored]
  ------------------
 5815|    102|        return reader_impl_for_char<CharT>{};
 5816|    102|    }
 5817|    102|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5817:24): [Folded - Ignored]
  ------------------
 5818|    102|        return reader_impl_for_wchar<CharT>{};
 5819|    102|    }
 5820|    102|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5820:24): [Folded - Ignored]
  ------------------
 5821|    102|        return reader_impl_for_code_point<CharT>{};
 5822|    102|    }
 5823|    102|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|    102|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5824:24): [Folded - Ignored]
  ------------------
 5825|    102|        return reader_impl_for_string<CharT>{};
 5826|    102|    }
 5827|    102|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|    102|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5828:24): [Folded - Ignored]
  ------------------
 5829|    102|        return reader_impl_for_string<CharT>{};
 5830|    102|    }
 5831|    102|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5832|    102|                       std::is_same_v<T, wregex_matches>) {
 5833|    102|        return reader_impl_for_regex_matches<CharT>{};
 5834|    102|    }
 5835|    102|    else if constexpr (std::is_same_v<T, void*>) {
 5836|    102|        return reader_impl_for_voidptr<CharT>{};
 5837|    102|    }
 5838|    102|    else if constexpr (std::is_floating_point_v<T>) {
 5839|    102|        return reader_impl_for_float<CharT>{};
 5840|    102|    }
 5841|    102|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5842|    102|                       !std::is_same_v<T, wchar_t> &&
 5843|    102|                       !std::is_same_v<T, char32_t> &&
 5844|    102|                       !std::is_same_v<T, bool>) {
 5845|    102|        return reader_impl_for_int<CharT>{};
 5846|    102|    }
 5847|    102|    else {
 5848|    102|        return reader_impl_for_monostate<CharT>{};
 5849|    102|    }
 5850|    102|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5278|     44|    {
 5279|     44|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     44|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5280|     44|        return read_impl(range, specs, value);
 5281|     44|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5296|     44|    {
 5297|     44|        SCN_CLANG_PUSH
 5298|     44|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5299|       |
 5300|     44|        switch (m_type) {
 5301|     44|            case reader_type::word:
  ------------------
  |  Branch (5301:13): [True: 44, False: 0]
  ------------------
 5302|     44|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5303|       |
 5304|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5304:13): [True: 0, False: 44]
  ------------------
 5305|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5306|      0|                                                                   value);
 5307|       |
 5308|      0|            case reader_type::character:
  ------------------
  |  Branch (5308:13): [True: 0, False: 44]
  ------------------
 5309|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5310|       |
 5311|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5311:13): [True: 0, False: 44]
  ------------------
 5312|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5313|      0|                    range, specs, value);
 5314|       |
 5315|      0|#if !SCN_DISABLE_REGEX
 5316|      0|            case reader_type::regex:
  ------------------
  |  Branch (5316:13): [True: 0, False: 44]
  ------------------
 5317|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5318|      0|                    range, specs.charset_string<SourceCharT>(),
 5319|      0|                    specs.regexp_flags, value);
 5320|       |
 5321|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5321:13): [True: 0, False: 44]
  ------------------
 5322|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5323|      0|                    range,
 5324|      0|                    get_unescaped_regex_pattern(
 5325|      0|                        specs.charset_string<SourceCharT>()),
 5326|      0|                    specs.regexp_flags, value);
 5327|      0|#endif
 5328|       |
 5329|      0|            default:
  ------------------
  |  Branch (5329:13): [True: 0, False: 44]
  ------------------
 5330|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5331|     44|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5332|     44|        }
 5333|       |
 5334|     44|        SCN_CLANG_POP
 5335|     44|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4821|     90|    {
 4822|     90|        return read_string_impl(range, read_until_classic_space(range), value);
 4823|     90|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4753|     90|{
 4754|     90|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4755|       |
 4756|     90|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4757|     90|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4757:9): [True: 38, False: 52]
  ------------------
 4758|     38|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4759|     38|                                     "Invalid encoding in scanned string");
 4760|     38|    }
 4761|     52|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     52|    static_cast<    \
  |  |  929|     52|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4762|     52|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52]
  |  |  ------------------
  ------------------
 4763|      0|        return unexpected(e);
 4764|      0|    }
 4765|       |
 4766|     52|    return SCN_MOVE(result);
  ------------------
  |  |  928|     52|    static_cast<    \
  |  |  929|     52|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4767|     52|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|     52|{
 3012|     52|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|     52|        dest.assign(source.view());
 3014|     52|    }
 3015|     52|    else {
 3016|     52|        return transcode_impl(source.view(), dest);
 3017|     52|    }
 3018|       |
 3019|     52|    return {};
 3020|     52|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5810|    102|{
 5811|    102|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5811:19): [Folded - Ignored]
  ------------------
 5812|    102|        return reader_impl_for_bool<CharT>{};
 5813|    102|    }
 5814|    102|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5814:24): [Folded - Ignored]
  ------------------
 5815|    102|        return reader_impl_for_char<CharT>{};
 5816|    102|    }
 5817|    102|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5817:24): [Folded - Ignored]
  ------------------
 5818|    102|        return reader_impl_for_wchar<CharT>{};
 5819|    102|    }
 5820|    102|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5820:24): [Folded - Ignored]
  ------------------
 5821|    102|        return reader_impl_for_code_point<CharT>{};
 5822|    102|    }
 5823|    102|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|    102|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5824:24): [Folded - Ignored]
  ------------------
 5825|    102|        return reader_impl_for_string<CharT>{};
 5826|    102|    }
 5827|    102|    else if constexpr (std::is_same_v<T, std::string> ||
 5828|    102|                       std::is_same_v<T, std::wstring>) {
 5829|    102|        return reader_impl_for_string<CharT>{};
 5830|    102|    }
 5831|    102|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5832|    102|                       std::is_same_v<T, wregex_matches>) {
 5833|    102|        return reader_impl_for_regex_matches<CharT>{};
 5834|    102|    }
 5835|    102|    else if constexpr (std::is_same_v<T, void*>) {
 5836|    102|        return reader_impl_for_voidptr<CharT>{};
 5837|    102|    }
 5838|    102|    else if constexpr (std::is_floating_point_v<T>) {
 5839|    102|        return reader_impl_for_float<CharT>{};
 5840|    102|    }
 5841|    102|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5842|    102|                       !std::is_same_v<T, wchar_t> &&
 5843|    102|                       !std::is_same_v<T, char32_t> &&
 5844|    102|                       !std::is_same_v<T, bool>) {
 5845|    102|        return reader_impl_for_int<CharT>{};
 5846|    102|    }
 5847|    102|    else {
 5848|    102|        return reader_impl_for_monostate<CharT>{};
 5849|    102|    }
 5850|    102|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5278|     44|    {
 5279|     44|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     44|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5280|     44|        return read_impl(range, specs, value);
 5281|     44|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5296|     44|    {
 5297|     44|        SCN_CLANG_PUSH
 5298|     44|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5299|       |
 5300|     44|        switch (m_type) {
 5301|     44|            case reader_type::word:
  ------------------
  |  Branch (5301:13): [True: 44, False: 0]
  ------------------
 5302|     44|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5303|       |
 5304|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5304:13): [True: 0, False: 44]
  ------------------
 5305|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5306|      0|                                                                   value);
 5307|       |
 5308|      0|            case reader_type::character:
  ------------------
  |  Branch (5308:13): [True: 0, False: 44]
  ------------------
 5309|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5310|       |
 5311|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5311:13): [True: 0, False: 44]
  ------------------
 5312|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5313|      0|                    range, specs, value);
 5314|       |
 5315|      0|#if !SCN_DISABLE_REGEX
 5316|      0|            case reader_type::regex:
  ------------------
  |  Branch (5316:13): [True: 0, False: 44]
  ------------------
 5317|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5318|      0|                    range, specs.charset_string<SourceCharT>(),
 5319|      0|                    specs.regexp_flags, value);
 5320|       |
 5321|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5321:13): [True: 0, False: 44]
  ------------------
 5322|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5323|      0|                    range,
 5324|      0|                    get_unescaped_regex_pattern(
 5325|      0|                        specs.charset_string<SourceCharT>()),
 5326|      0|                    specs.regexp_flags, value);
 5327|      0|#endif
 5328|       |
 5329|      0|            default:
  ------------------
  |  Branch (5329:13): [True: 0, False: 44]
  ------------------
 5330|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5331|     44|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5332|     44|        }
 5333|       |
 5334|     44|        SCN_CLANG_POP
 5335|     44|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4828|     90|    {
 4829|     90|        return read_string_view_impl(range, read_until_classic_space(range),
 4830|     90|                                     value);
 4831|     90|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4774|     90|{
 4775|     90|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4776|       |
 4777|     90|    auto src = [&]() {
 4778|     90|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4779|     90|            return make_contiguous_buffer(
 4780|     90|                ranges::subrange{range.begin().base(), result.base()});
 4781|     90|        }
 4782|     90|        else {
 4783|     90|            return make_contiguous_buffer(
 4784|     90|                ranges::subrange{range.begin(), result});
 4785|     90|        }
 4786|     90|    }();
 4787|     90|    using src_type = decltype(src);
 4788|       |
 4789|     90|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4789:9): [Folded - Ignored]
  ------------------
 4790|      0|        return unexpected_scan_error(
 4791|      0|            scan_error::invalid_scanned_value,
 4792|      0|            "Cannot read a string_view from this source range (not "
 4793|      0|            "contiguous)");
 4794|      0|    }
 4795|     90|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4795:19): [Folded - Ignored]
  ------------------
 4796|     90|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4797|     90|                                     "Cannot read a string_view from "
 4798|     90|                                     "this source range (would require "
 4799|     90|                                     "transcoding)");
 4800|     90|    }
 4801|     90|    else {
 4802|     90|        const auto view = src.view();
 4803|     90|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4804|       |
 4805|     90|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4805:13): [True: 38, False: 52]
  ------------------
 4806|     38|            return unexpected_scan_error(
 4807|     38|                scan_error::invalid_scanned_value,
 4808|     38|                "Invalid encoding in scanned string_view");
 4809|     38|        }
 4810|       |
 4811|     52|        return SCN_MOVE(result);
  ------------------
  |  |  928|     52|    static_cast<    \
  |  |  929|     52|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4812|     90|    }
 4813|     90|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4777|     90|    auto src = [&]() {
 4778|     90|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4778:23): [Folded - Ignored]
  ------------------
 4779|     90|            return make_contiguous_buffer(
 4780|     90|                ranges::subrange{range.begin().base(), result.base()});
 4781|     90|        }
 4782|     90|        else {
 4783|     90|            return make_contiguous_buffer(
 4784|     90|                ranges::subrange{range.begin(), result});
 4785|     90|        }
 4786|     90|    }();
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4100|  1.58k|    {
 4101|  1.58k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  924|  1.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4102|  1.58k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4102:13): [True: 0, False: 1.58k]
  ------------------
 4103|      0|            return -value;
 4104|      0|        }
 4105|  1.58k|        return value;
 4106|  1.58k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4100|     90|    {
 4101|     90|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  924|     90|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     90|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4102|     90|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4102:13): [True: 0, False: 90]
  ------------------
 4103|      0|            return -value;
 4104|      0|        }
 4105|     90|        return value;
 4106|     90|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5796|  10.0k|{
 5797|  10.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  10.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.0k]
  |  |  ------------------
  ------------------
 5798|      0|        return unexpected(e);
 5799|      0|    }
 5800|       |
 5801|  10.0k|    if (!is_required) {
  ------------------
  |  Branch (5801:9): [True: 1.11k, False: 8.94k]
  ------------------
 5802|  1.11k|        return range.begin();
 5803|  1.11k|    }
 5804|       |
 5805|  8.94k|    return skip_classic_whitespace(range);
 5806|  10.0k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5872|  1.11k|    {
 5873|  1.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  1.11k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  1.11k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  1.11k|            auto rd = make_reader<T, char_type>();
 5878|  1.11k|            return impl(rd, range, value);
 5879|  1.11k|        }
 5880|  1.11k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  1.11k|            auto rd = make_reader<T, char_type>();
 5882|  1.11k|            if (!is_segment_contiguous(range)) {
 5883|  1.11k|                return impl(rd, range, value);
 5884|  1.11k|            }
 5885|  1.11k|            auto crange = get_as_contiguous(range);
 5886|  1.11k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  1.11k|            return ranges::next(range.begin(),
 5888|  1.11k|                                ranges::distance(crange.begin(), it));
 5889|  1.11k|        }
 5890|  1.11k|        else {
 5891|  1.11k|            SCN_EXPECT(false);
 5892|  1.11k|            SCN_UNREACHABLE;
 5893|  1.11k|        }
 5894|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|  1.11k|    {
 5865|  1.11k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  1.11k|                        .transform_error(make_eof_scan_error));
 5867|  1.11k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  1.11k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|  1.11k|    {
 3529|  1.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|  1.11k|        return read_default_with_base(range, value, 10);
 3531|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5872|  1.11k|    {
 5873|  1.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  1.11k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  1.11k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  1.11k|            auto rd = make_reader<T, char_type>();
 5878|  1.11k|            return impl(rd, range, value);
 5879|  1.11k|        }
 5880|  1.11k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  1.11k|            auto rd = make_reader<T, char_type>();
 5882|  1.11k|            if (!is_segment_contiguous(range)) {
 5883|  1.11k|                return impl(rd, range, value);
 5884|  1.11k|            }
 5885|  1.11k|            auto crange = get_as_contiguous(range);
 5886|  1.11k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  1.11k|            return ranges::next(range.begin(),
 5888|  1.11k|                                ranges::distance(crange.begin(), it));
 5889|  1.11k|        }
 5890|  1.11k|        else {
 5891|  1.11k|            SCN_EXPECT(false);
 5892|  1.11k|            SCN_UNREACHABLE;
 5893|  1.11k|        }
 5894|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|  1.11k|    {
 5865|  1.11k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  1.11k|                        .transform_error(make_eof_scan_error));
 5867|  1.11k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  1.11k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|  1.11k|    {
 3529|  1.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|  1.11k|        return read_default_with_base(range, value, 10);
 3531|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5872|  1.11k|    {
 5873|  1.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  1.11k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  1.11k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  1.11k|            auto rd = make_reader<T, char_type>();
 5878|  1.11k|            return impl(rd, range, value);
 5879|  1.11k|        }
 5880|  1.11k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  1.11k|            auto rd = make_reader<T, char_type>();
 5882|  1.11k|            if (!is_segment_contiguous(range)) {
 5883|  1.11k|                return impl(rd, range, value);
 5884|  1.11k|            }
 5885|  1.11k|            auto crange = get_as_contiguous(range);
 5886|  1.11k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  1.11k|            return ranges::next(range.begin(),
 5888|  1.11k|                                ranges::distance(crange.begin(), it));
 5889|  1.11k|        }
 5890|  1.11k|        else {
 5891|  1.11k|            SCN_EXPECT(false);
 5892|  1.11k|            SCN_UNREACHABLE;
 5893|  1.11k|        }
 5894|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5864|  1.11k|    {
 5865|  1.11k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  1.11k|                        .transform_error(make_eof_scan_error));
 5867|  1.11k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  1.11k|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5749|  1.56k|    {
 5750|  1.56k|        return true;
 5751|  1.56k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5766|  1.56k|    {
 5767|  1.56k|        detail::format_specs specs{};
 5768|  1.56k|        specs.type = detail::presentation_type::int_hex;
 5769|       |
 5770|  1.56k|        std::uintptr_t intvalue{};
 5771|  1.56k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3643|  1.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.56k|    }                                                  \
  |  |  |  | 3642|  1.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5772|      0|                                                                intvalue, loc));
 5773|      0|        value = reinterpret_cast<void*>(intvalue);
 5774|      0|        return result;
 5775|  1.56k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5872|  1.11k|    {
 5873|  1.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  1.11k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  1.11k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  1.11k|            auto rd = make_reader<T, char_type>();
 5878|  1.11k|            return impl(rd, range, value);
 5879|  1.11k|        }
 5880|  1.11k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  1.11k|            auto rd = make_reader<T, char_type>();
 5882|  1.11k|            if (!is_segment_contiguous(range)) {
 5883|  1.11k|                return impl(rd, range, value);
 5884|  1.11k|            }
 5885|  1.11k|            auto crange = get_as_contiguous(range);
 5886|  1.11k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  1.11k|            return ranges::next(range.begin(),
 5888|  1.11k|                                ranges::distance(crange.begin(), it));
 5889|  1.11k|        }
 5890|  1.11k|        else {
 5891|  1.11k|            SCN_EXPECT(false);
 5892|  1.11k|            SCN_UNREACHABLE;
 5893|  1.11k|        }
 5894|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|  1.11k|    {
 5865|  1.11k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  1.11k|                        .transform_error(make_eof_scan_error));
 5867|  1.11k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  1.11k|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.75k|    {
 3035|  1.75k|        return true;
 3036|  1.75k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5505|  1.11k|    {
 5506|  1.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5507|       |
 5508|  1.11k|        return bool_reader<CharT>{}.read_classic(range, value);
 5509|  1.11k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5350|  1.16k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5356|  1.71k|    {
 5357|  1.71k|        scan_error err{scan_error::invalid_scanned_value,
 5358|  1.71k|                       "Failed to read boolean"};
 5359|       |
 5360|  1.71k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5360:13): [True: 1.64k, False: 72]
  ------------------
 5361|  1.64k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5361:22): [True: 0, False: 1.64k]
  ------------------
 5362|      0|                return *r;
 5363|      0|            }
 5364|  1.64k|            else {
 5365|  1.64k|                err = r.error();
 5366|  1.64k|            }
 5367|  1.64k|        }
 5368|       |
 5369|  1.71k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5369:13): [True: 1.63k, False: 84]
  ------------------
 5370|  1.63k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5370:22): [True: 0, False: 1.63k]
  ------------------
 5371|      0|                return *r;
 5372|      0|            }
 5373|  1.63k|            else {
 5374|  1.63k|                err = r.error();
 5375|  1.63k|            }
 5376|  1.63k|        }
 5377|       |
 5378|  1.71k|        return unexpected(err);
 5379|  1.71k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5385|  1.67k|    {
 5386|  1.67k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5386:18): [True: 0, False: 1.67k]
  ------------------
 5387|      0|            value = false;
 5388|      0|            return *r;
 5389|      0|        }
 5390|  1.67k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5390:18): [True: 0, False: 1.67k]
  ------------------
 5391|      0|            value = true;
 5392|      0|            return *r;
 5393|      0|        }
 5394|       |
 5395|  1.67k|        return unexpected_scan_error(
 5396|  1.67k|            scan_error::invalid_scanned_value,
 5397|  1.67k|            "Failed to read numeric boolean value: No match");
 5398|  1.67k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5403|  1.63k|    {
 5404|  1.63k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5404:18): [True: 0, False: 1.63k]
  ------------------
 5405|      0|            value = true;
 5406|      0|            return *r;
 5407|      0|        }
 5408|  1.63k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5408:18): [True: 0, False: 1.63k]
  ------------------
 5409|      0|            value = false;
 5410|      0|            return *r;
 5411|      0|        }
 5412|       |
 5413|  1.63k|        return unexpected_scan_error(
 5414|  1.63k|            scan_error::invalid_scanned_value,
 5415|  1.63k|            "Failed to read textual boolean value: No match");
 5416|  1.63k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  3.26k|{
 2194|  3.26k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  3.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 166, False: 3.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    166|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    166|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    166|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    166|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    166|    }                                                  \
  |  |  |  | 3642|  3.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  3.09k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  3.09k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  3.09k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  3.09k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  3.09k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  3.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.09k, False: 0]
  |  |  ------------------
  ------------------
 2201|  3.09k|            return unexpected(parse_error::error);
 2202|  3.09k|        }
 2203|      0|        return it;
 2204|  3.09k|    }
 2205|  3.09k|    else {
 2206|  3.09k|        auto range_it = range.begin();
 2207|  3.09k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  3.09k|            if (SCN_UNLIKELY(*range_it !=
 2209|  3.09k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  3.09k|                return unexpected(parse_error::error);
 2211|  3.09k|            }
 2212|  3.09k|        }
 2213|  3.09k|        return it;
 2214|  3.09k|    }
 2215|  3.09k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5872|  1.11k|    {
 5873|  1.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  1.11k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  1.11k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  1.11k|            auto rd = make_reader<T, char_type>();
 5878|  1.11k|            return impl(rd, range, value);
 5879|  1.11k|        }
 5880|  1.11k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  1.11k|            auto rd = make_reader<T, char_type>();
 5882|  1.11k|            if (!is_segment_contiguous(range)) {
 5883|  1.11k|                return impl(rd, range, value);
 5884|  1.11k|            }
 5885|  1.11k|            auto crange = get_as_contiguous(range);
 5886|  1.11k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  1.11k|            return ranges::next(range.begin(),
 5888|  1.11k|                                ranges::distance(crange.begin(), it));
 5889|  1.11k|        }
 5890|  1.11k|        else {
 5891|  1.11k|            SCN_EXPECT(false);
 5892|  1.11k|            SCN_UNREACHABLE;
 5893|  1.11k|        }
 5894|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|  1.11k|    {
 5865|  1.11k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  1.11k|                        .transform_error(make_eof_scan_error));
 5867|  1.11k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  1.11k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3658|  1.11k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3644|  1.16k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5872|  1.11k|    {
 5873|  1.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  1.11k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  1.11k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  1.11k|            auto rd = make_reader<T, char_type>();
 5878|  1.11k|            return impl(rd, range, value);
 5879|  1.11k|        }
 5880|  1.11k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  1.11k|            auto rd = make_reader<T, char_type>();
 5882|  1.11k|            if (!is_segment_contiguous(range)) {
 5883|  1.11k|                return impl(rd, range, value);
 5884|  1.11k|            }
 5885|  1.11k|            auto crange = get_as_contiguous(range);
 5886|  1.11k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  1.11k|            return ranges::next(range.begin(),
 5888|  1.11k|                                ranges::distance(crange.begin(), it));
 5889|  1.11k|        }
 5890|  1.11k|        else {
 5891|  1.11k|            SCN_EXPECT(false);
 5892|  1.11k|            SCN_UNREACHABLE;
 5893|  1.11k|        }
 5894|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|  1.11k|    {
 5865|  1.11k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  1.11k|                        .transform_error(make_eof_scan_error));
 5867|  1.11k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  1.11k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4153|  1.11k|    {
 4154|  1.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|  1.11k|        float_reader<CharT> rd{};
 4157|  1.11k|        return read_impl<Range>(
 4158|  1.11k|            range, rd,
 4159|  1.11k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  1.11k|                return r.read_source(SCN_FWD(args)...);
 4161|  1.11k|            },
 4162|  1.11k|            value);
 4163|  1.11k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  1.11k|    {
  754|  1.11k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  1.11k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.11k|              cvref<T> obj = *get<T>(fn);
  745|  1.11k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.11k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.11k|              }
  748|  1.11k|              else {
  749|  1.11k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.11k|              }
  751|  1.11k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  1.11k|    {
  684|  1.11k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.11k|            return static_cast<T*>(s.m_cp);
  686|  1.11k|        }
  687|  1.11k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.11k|            return static_cast<T*>(s.m_p);
  689|  1.11k|        }
  690|  1.11k|        else {
  691|  1.11k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.11k|        }
  693|  1.11k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4159|  1.11k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  1.11k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|  1.11k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  1.11k|        {
  662|  1.11k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5872|  1.11k|    {
 5873|  1.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  1.11k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  1.11k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  1.11k|            auto rd = make_reader<T, char_type>();
 5878|  1.11k|            return impl(rd, range, value);
 5879|  1.11k|        }
 5880|  1.11k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  1.11k|            auto rd = make_reader<T, char_type>();
 5882|  1.11k|            if (!is_segment_contiguous(range)) {
 5883|  1.11k|                return impl(rd, range, value);
 5884|  1.11k|            }
 5885|  1.11k|            auto crange = get_as_contiguous(range);
 5886|  1.11k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  1.11k|            return ranges::next(range.begin(),
 5888|  1.11k|                                ranges::distance(crange.begin(), it));
 5889|  1.11k|        }
 5890|  1.11k|        else {
 5891|  1.11k|            SCN_EXPECT(false);
 5892|  1.11k|            SCN_UNREACHABLE;
 5893|  1.11k|        }
 5894|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5864|  1.11k|    {
 5865|  1.11k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  1.11k|                        .transform_error(make_eof_scan_error));
 5867|  1.11k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  1.11k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5267|  1.11k|    {
 5268|  1.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5269|  1.11k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5270|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5872|  1.11k|    {
 5873|  1.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  1.11k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  1.11k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  1.11k|            auto rd = make_reader<T, char_type>();
 5878|  1.11k|            return impl(rd, range, value);
 5879|  1.11k|        }
 5880|  1.11k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  1.11k|            auto rd = make_reader<T, char_type>();
 5882|  1.11k|            if (!is_segment_contiguous(range)) {
 5883|  1.11k|                return impl(rd, range, value);
 5884|  1.11k|            }
 5885|  1.11k|            auto crange = get_as_contiguous(range);
 5886|  1.11k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  1.11k|            return ranges::next(range.begin(),
 5888|  1.11k|                                ranges::distance(crange.begin(), it));
 5889|  1.11k|        }
 5890|  1.11k|        else {
 5891|  1.11k|            SCN_EXPECT(false);
 5892|  1.11k|            SCN_UNREACHABLE;
 5893|  1.11k|        }
 5894|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5864|  1.11k|    {
 5865|  1.11k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  1.11k|                        .transform_error(make_eof_scan_error));
 5867|  1.11k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  1.11k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5267|  1.11k|    {
 5268|  1.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5269|  1.11k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5270|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5872|  1.11k|    {
 5873|  1.11k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  1.11k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  1.11k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  1.11k|            auto rd = make_reader<T, char_type>();
 5878|  1.11k|            return impl(rd, range, value);
 5879|  1.11k|        }
 5880|  1.11k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  1.11k|            auto rd = make_reader<T, char_type>();
 5882|  1.11k|            if (!is_segment_contiguous(range)) {
 5883|  1.11k|                return impl(rd, range, value);
 5884|  1.11k|            }
 5885|  1.11k|            auto crange = get_as_contiguous(range);
 5886|  1.11k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  1.11k|            return ranges::next(range.begin(),
 5888|  1.11k|                                ranges::distance(crange.begin(), it));
 5889|  1.11k|        }
 5890|  1.11k|        else {
 5891|  1.11k|            SCN_EXPECT(false);
 5892|  1.11k|            SCN_UNREACHABLE;
 5893|  1.11k|        }
 5894|  1.11k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5864|  1.11k|    {
 5865|  1.11k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  1.11k|                        .transform_error(make_eof_scan_error));
 5867|  1.11k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  1.11k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5267|  1.11k|    {
 5268|  1.11k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5269|  1.11k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5270|  1.11k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  81.3k|    {
 2879|  81.3k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   457k|    {
 2883|   457k|        return m_current;
 2884|   457k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   540k|    {
 2888|   540k|        return m_range.end();
 2889|   540k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   163k|{
 1221|       |    // TODO: optimize
 1222|   163k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   163k|    auto res = get_next_code_point(str);
 1224|   163k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   163k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   167k|    {
 2903|   167k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   167k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   167k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 167k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   167k|        }
 2909|   167k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   167k|    static_cast<    \
  |  |  929|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   167k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   207k|    {
 2893|   207k|        return ranges::subrange{begin(), end()};
 2894|   207k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6038|  23.9k|    {
 6039|  23.9k|        const bool need_skipped_width =
 6040|  23.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6040:13): [True: 3.68k, False: 20.2k]
  |  Branch (6040:33): [True: 0, False: 20.2k]
  ------------------
 6041|  23.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6042|       |
 6043|       |        // Read prefix
 6044|  23.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6044:13): [True: 216, False: 23.7k]
  ------------------
 6045|  23.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6045:13): [True: 2.19k, False: 21.5k]
  ------------------
 6046|  2.40k|            return skip_fill(rng, specs.precision, specs.fill,
 6047|  2.40k|                             need_skipped_width);
 6048|  2.40k|        }
 6049|  21.5k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6049:13): [True: 21.1k, False: 334]
  |  Branch (6049:56): [True: 3.93k, False: 17.2k]
  ------------------
 6050|       |            // Default alignment:
 6051|       |            // Skip preceding whitespace, if required by the reader
 6052|  3.93k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6052:17): [True: 0, False: 3.93k]
  ------------------
 6053|      0|                auto max_width_view = take_width(rng, specs.precision);
 6054|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6055|      0|                                  .transform_error(make_eof_scan_error));
 6056|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6057|      0|            }
 6058|  7.86k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  3.93k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.93k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.93k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.93k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  3.93k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6059|  7.86k|                            make_eof_scan_error));
 6060|       |
 6061|  7.86k|            if (need_skipped_width) {
  ------------------
  |  Branch (6061:17): [True: 2.04k, False: 1.88k]
  ------------------
 6062|  2.04k|                return result_type{
 6063|  2.04k|                    it,
 6064|  2.04k|                    calculate_text_width(make_contiguous_buffer(
 6065|  2.04k|                                             ranges::subrange{rng.begin(), it})
 6066|  2.04k|                                             .view())};
 6067|  2.04k|            }
 6068|  1.88k|            return result_type{it, 0};
 6069|  7.86k|        }
 6070|       |
 6071|  17.5k|        return result_type{rng.begin(), 0};
 6072|  21.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6080|  5.61k|    {
 6081|  5.61k|        const bool need_skipped_width =
 6082|  5.61k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6082:13): [True: 858, False: 4.75k]
  |  Branch (6082:33): [True: 0, False: 4.75k]
  ------------------
 6083|  5.61k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6084|       |
 6085|  5.61k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6085:13): [True: 66, False: 5.54k]
  ------------------
 6086|  5.61k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6086:13): [True: 80, False: 5.46k]
  ------------------
 6087|    146|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6088|    146|                             specs.fill, need_skipped_width);
 6089|    146|        }
 6090|  5.46k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6090:13): [True: 5.29k, False: 168]
  ------------------
 6091|  5.46k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6091:13): [True: 5.01k, False: 282]
  ------------------
 6092|  5.46k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6092:15): [True: 678, False: 4.33k]
  |  Branch (6092:35): [True: 608, False: 70]
  ------------------
 6093|  5.01k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6093:15): [True: 0, False: 4.40k]
  ------------------
 6094|  4.40k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  ------------------
 6095|    608|            if (specs.precision != 0) {
  ------------------
  |  Branch (6095:17): [True: 0, False: 608]
  ------------------
 6096|      0|                const auto initial_width =
 6097|      0|                    specs.precision - prefix_width - value_width;
 6098|      0|                auto max_width_view = take_width(rng, initial_width);
 6099|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6100|      0|                                  .transform_error(make_eof_scan_error));
 6101|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6102|      0|            }
 6103|  1.21k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|    608|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    608|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    608|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    608|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 608]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    608|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    608|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6104|  1.21k|                            make_eof_scan_error));
 6105|       |
 6106|  1.21k|            if (need_skipped_width) {
  ------------------
  |  Branch (6106:17): [True: 608, False: 0]
  ------------------
 6107|    608|                return result_type{
 6108|    608|                    it,
 6109|    608|                    calculate_text_width(make_contiguous_buffer(
 6110|    608|                                             ranges::subrange{rng.begin(), it})
 6111|    608|                                             .view())};
 6112|    608|            }
 6113|      0|            return result_type{it, 0};
 6114|  1.21k|        }
 6115|  4.85k|        return result_type{rng.begin(), 0};
 6116|  5.46k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6179|  7.20k|    {
 6180|  7.20k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  7.20k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  7.20k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  7.20k|            auto rd = make_reader<T, char_type>();
 6185|  7.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.64k, False: 554]
  |  |  ------------------
  ------------------
 6186|  6.64k|                return unexpected(e);
 6187|  6.64k|            }
 6188|       |
 6189|    554|            return impl(rd, range, value);
 6190|  7.20k|        }
 6191|  7.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  7.20k|            auto rd = make_reader<T, char_type>();
 6193|  7.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  7.20k|                return unexpected(e);
 6195|  7.20k|            }
 6196|       |
 6197|  7.20k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  7.20k|                specs.width != 0) {
 6199|  7.20k|                return impl(rd, range, value);
 6200|  7.20k|            }
 6201|       |
 6202|  7.20k|            auto crange = get_as_contiguous(range);
 6203|  7.20k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  7.20k|            return ranges::next(range.begin(),
 6205|  7.20k|                                ranges::distance(crange.begin(), it));
 6206|  7.20k|        }
 6207|  7.20k|        else {
 6208|  7.20k|            SCN_EXPECT(false);
 6209|  7.20k|            SCN_UNREACHABLE;
 6210|  7.20k|        }
 6211|  7.20k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|    554|    {
 6122|    554|        const bool need_skipped_width =
 6123|    554|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 300, False: 254]
  |  Branch (6123:33): [True: 0, False: 254]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|    554|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    554|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    554|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    554|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    554|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 554]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    554|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    554|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|    554|        auto [it, prefix_width] = prefix_result;
 6128|    554|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|    554|        std::ptrdiff_t value_width = 0;
 6132|    554|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 554]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|    554|        else {
 6148|    554|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    554|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    554|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    554|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 554, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    554|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    554|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    554|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    554|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    554|    }                                                  \
  |  | 3642|    554|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    554|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6179|  7.20k|    {
 6180|  7.20k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  7.20k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  7.20k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  7.20k|            auto rd = make_reader<T, char_type>();
 6185|  7.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.64k, False: 554]
  |  |  ------------------
  ------------------
 6186|  6.64k|                return unexpected(e);
 6187|  6.64k|            }
 6188|       |
 6189|    554|            return impl(rd, range, value);
 6190|  7.20k|        }
 6191|  7.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  7.20k|            auto rd = make_reader<T, char_type>();
 6193|  7.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  7.20k|                return unexpected(e);
 6195|  7.20k|            }
 6196|       |
 6197|  7.20k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  7.20k|                specs.width != 0) {
 6199|  7.20k|                return impl(rd, range, value);
 6200|  7.20k|            }
 6201|       |
 6202|  7.20k|            auto crange = get_as_contiguous(range);
 6203|  7.20k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  7.20k|            return ranges::next(range.begin(),
 6205|  7.20k|                                ranges::distance(crange.begin(), it));
 6206|  7.20k|        }
 6207|  7.20k|        else {
 6208|  7.20k|            SCN_EXPECT(false);
 6209|  7.20k|            SCN_UNREACHABLE;
 6210|  7.20k|        }
 6211|  7.20k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|    554|    {
 6122|    554|        const bool need_skipped_width =
 6123|    554|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 300, False: 254]
  |  Branch (6123:33): [True: 0, False: 254]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|    554|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    554|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    554|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    554|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    554|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 554]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    554|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    554|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|    554|        auto [it, prefix_width] = prefix_result;
 6128|    554|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|    554|        std::ptrdiff_t value_width = 0;
 6132|    554|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 554]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|    554|        else {
 6148|    554|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    554|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    554|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    554|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 554, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    554|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    554|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    554|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    554|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    554|    }                                                  \
  |  | 3642|    554|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    554|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6179|  7.15k|    {
 6180|  7.15k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  7.15k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  7.15k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  7.15k|            auto rd = make_reader<T, char_type>();
 6185|  7.15k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.70k, False: 448]
  |  |  ------------------
  ------------------
 6186|  6.70k|                return unexpected(e);
 6187|  6.70k|            }
 6188|       |
 6189|    448|            return impl(rd, range, value);
 6190|  7.15k|        }
 6191|  7.15k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  7.15k|            auto rd = make_reader<T, char_type>();
 6193|  7.15k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  7.15k|                return unexpected(e);
 6195|  7.15k|            }
 6196|       |
 6197|  7.15k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  7.15k|                specs.width != 0) {
 6199|  7.15k|                return impl(rd, range, value);
 6200|  7.15k|            }
 6201|       |
 6202|  7.15k|            auto crange = get_as_contiguous(range);
 6203|  7.15k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  7.15k|            return ranges::next(range.begin(),
 6205|  7.15k|                                ranges::distance(crange.begin(), it));
 6206|  7.15k|        }
 6207|  7.15k|        else {
 6208|  7.15k|            SCN_EXPECT(false);
 6209|  7.15k|            SCN_UNREACHABLE;
 6210|  7.15k|        }
 6211|  7.15k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5754|  7.15k|    {
 5755|  7.15k|        reader_error_handler eh{};
 5756|  7.15k|        detail::check_pointer_type_specs(specs, eh);
 5757|  7.15k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.70k, False: 448]
  |  |  ------------------
  ------------------
 5758|  6.70k|            return {scan_error::invalid_format_string, eh.m_msg};
 5759|  6.70k|        }
 5760|    448|        return {};
 5761|  7.15k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6121|    448|    {
 6122|    448|        const bool need_skipped_width =
 6123|    448|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 276, False: 172]
  |  Branch (6123:33): [True: 0, False: 172]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|    448|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 448]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|    448|        auto [it, prefix_width] = prefix_result;
 6128|    448|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|    448|        std::ptrdiff_t value_width = 0;
 6132|    448|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 448]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|    448|        else {
 6148|    448|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 448, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    448|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    448|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    448|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    448|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    448|    }                                                  \
  |  | 3642|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    448|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5783|    448|    {
 5784|    448|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    448|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5785|    448|        return read_default(range, value, loc);
 5786|    448|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6179|  7.20k|    {
 6180|  7.20k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  7.20k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  7.20k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  7.20k|            auto rd = make_reader<T, char_type>();
 6185|  7.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.56k, False: 634]
  |  |  ------------------
  ------------------
 6186|  6.56k|                return unexpected(e);
 6187|  6.56k|            }
 6188|       |
 6189|    634|            return impl(rd, range, value);
 6190|  7.20k|        }
 6191|  7.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  7.20k|            auto rd = make_reader<T, char_type>();
 6193|  7.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  7.20k|                return unexpected(e);
 6195|  7.20k|            }
 6196|       |
 6197|  7.20k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  7.20k|                specs.width != 0) {
 6199|  7.20k|                return impl(rd, range, value);
 6200|  7.20k|            }
 6201|       |
 6202|  7.20k|            auto crange = get_as_contiguous(range);
 6203|  7.20k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  7.20k|            return ranges::next(range.begin(),
 6205|  7.20k|                                ranges::distance(crange.begin(), it));
 6206|  7.20k|        }
 6207|  7.20k|        else {
 6208|  7.20k|            SCN_EXPECT(false);
 6209|  7.20k|            SCN_UNREACHABLE;
 6210|  7.20k|        }
 6211|  7.20k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  7.20k|    {
 3040|  7.20k|        reader_error_handler eh{};
 3041|  7.20k|        get_derived().check_specs_impl(specs, eh);
 3042|  7.20k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.56k, False: 634]
  |  |  ------------------
  ------------------
 3043|  6.56k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  6.56k|        }
 3045|    634|        return {};
 3046|  7.20k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  7.20k|    {
 3051|  7.20k|        return static_cast<Derived&>(*this);
 3052|  7.20k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5498|  7.20k|    {
 5499|  7.20k|        detail::check_bool_type_specs(specs, eh);
 5500|  7.20k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|    634|    {
 6122|    634|        const bool need_skipped_width =
 6123|    634|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 308, False: 326]
  |  Branch (6123:33): [True: 0, False: 326]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|    634|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    634|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 634]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|    634|        auto [it, prefix_width] = prefix_result;
 6128|    634|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|    634|        std::ptrdiff_t value_width = 0;
 6132|    634|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 634]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|    634|        else {
 6148|    634|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    634|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    634|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 634, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    634|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    634|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    634|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    634|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    634|    }                                                  \
  |  | 3642|    634|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    634|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5530|    634|    {
 5531|    634|        SCN_GCC_COMPAT_PUSH
 5532|    634|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5533|       |
 5534|    634|        switch (specs.type) {
 5535|     76|            case detail::presentation_type::string:
  ------------------
  |  Branch (5535:13): [True: 76, False: 558]
  ------------------
 5536|     76|                return bool_reader_base::allow_text;
 5537|       |
 5538|     34|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5538:13): [True: 34, False: 600]
  ------------------
 5539|     60|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5539:13): [True: 26, False: 608]
  ------------------
 5540|     72|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5540:13): [True: 12, False: 622]
  ------------------
 5541|     86|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5541:13): [True: 14, False: 620]
  ------------------
 5542|     96|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5542:13): [True: 10, False: 624]
  ------------------
 5543|    102|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5543:13): [True: 6, False: 628]
  ------------------
 5544|    102|                return bool_reader_base::allow_numeric;
 5545|       |
 5546|    456|            default:
  ------------------
  |  Branch (5546:13): [True: 456, False: 178]
  ------------------
 5547|    456|                return bool_reader_base::allow_text |
 5548|    456|                       bool_reader_base::allow_numeric;
 5549|    634|        }
 5550|       |
 5551|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5552|    634|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5517|    634|    {
 5518|    634|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5519|       |
 5520|    634|#if !SCN_DISABLE_LOCALE
 5521|    634|        if (specs.localized) {
  ------------------
  |  Branch (5521:13): [True: 38, False: 596]
  ------------------
 5522|     38|            return rd.read_localized(range, loc, value);
 5523|     38|        }
 5524|    596|#endif
 5525|       |
 5526|    596|        return rd.read_classic(range, value);
 5527|    634|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5429|     38|    {
 5430|     38|        scan_error err{scan_error::invalid_scanned_value,
 5431|     38|                       "Failed to read boolean"};
 5432|       |
 5433|     38|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5433:13): [True: 34, False: 4]
  ------------------
 5434|     34|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5434:22): [True: 0, False: 34]
  ------------------
 5435|      0|                return *r;
 5436|      0|            }
 5437|     34|            else {
 5438|     34|                err = r.error();
 5439|     34|            }
 5440|     34|        }
 5441|       |
 5442|     38|        if (m_options & allow_text) {
  ------------------
  |  Branch (5442:13): [True: 20, False: 18]
  ------------------
 5443|     20|            auto stdloc = loc.get<std::locale>();
 5444|     20|            const auto& numpunct =
 5445|     20|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5446|     20|            const auto truename = numpunct.truename();
 5447|     20|            const auto falsename = numpunct.falsename();
 5448|       |
 5449|     20|            if (auto r =
  ------------------
  |  Branch (5449:22): [True: 0, False: 20]
  ------------------
 5450|     20|                    read_textual_custom(range, value, truename, falsename)) {
 5451|      0|                return *r;
 5452|      0|            }
 5453|     20|            else {
 5454|     20|                err = r.error();
 5455|     20|            }
 5456|     20|        }
 5457|       |
 5458|     38|        return unexpected(err);
 5459|     38|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5469|     20|    {
 5470|     20|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5471|     20|        const auto shorter = std::pair{
 5472|     20|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 20, False: 0]
  ------------------
 5473|     20|        const auto longer = std::pair{
 5474|     20|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5474:13): [True: 0, False: 20]
  ------------------
 5475|       |
 5476|     20|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5476:18): [True: 0, False: 20]
  ------------------
 5477|      0|            value = shorter.second;
 5478|      0|            return *r;
 5479|      0|        }
 5480|     20|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5480:18): [True: 0, False: 20]
  ------------------
 5481|      0|            value = longer.second;
 5482|      0|            return *r;
 5483|      0|        }
 5484|       |
 5485|     20|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5486|     20|                                     "read_textual: No match");
 5487|     20|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     40|{
 2179|     40|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|     40|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     40|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     40|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 38]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      2|    }                                                  \
  |  |  |  | 3642|     40|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     38|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     38|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     38|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     38|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 2185|     38|        return unexpected(parse_error::error);
 2186|     38|    }
 2187|      0|    return it;
 2188|     38|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6179|  7.15k|    {
 6180|  7.15k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  7.15k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  7.15k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  7.15k|            auto rd = make_reader<T, char_type>();
 6185|  7.15k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.63k, False: 524]
  |  |  ------------------
  ------------------
 6186|  6.63k|                return unexpected(e);
 6187|  6.63k|            }
 6188|       |
 6189|    524|            return impl(rd, range, value);
 6190|  7.15k|        }
 6191|  7.15k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  7.15k|            auto rd = make_reader<T, char_type>();
 6193|  7.15k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  7.15k|                return unexpected(e);
 6195|  7.15k|            }
 6196|       |
 6197|  7.15k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  7.15k|                specs.width != 0) {
 6199|  7.15k|                return impl(rd, range, value);
 6200|  7.15k|            }
 6201|       |
 6202|  7.15k|            auto crange = get_as_contiguous(range);
 6203|  7.15k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  7.15k|            return ranges::next(range.begin(),
 6205|  7.15k|                                ranges::distance(crange.begin(), it));
 6206|  7.15k|        }
 6207|  7.15k|        else {
 6208|  7.15k|            SCN_EXPECT(false);
 6209|  7.15k|            SCN_UNREACHABLE;
 6210|  7.15k|        }
 6211|  7.15k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|    524|    {
 6122|    524|        const bool need_skipped_width =
 6123|    524|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 292, False: 232]
  |  Branch (6123:33): [True: 0, False: 232]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|    524|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    524|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    524|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    524|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    524|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 524]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    524|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    524|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|    524|        auto [it, prefix_width] = prefix_result;
 6128|    524|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|    524|        std::ptrdiff_t value_width = 0;
 6132|    524|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 524]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|    524|        else {
 6148|    524|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    524|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    524|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    524|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 84, False: 440]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     84|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     84|    }                                                  \
  |  | 3642|    524|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    524|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|    440|                                             specs, value, loc));
 6150|       |
 6151|    440|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 270, False: 170]
  ------------------
 6152|    270|                value_width = calculate_text_width(
 6153|    270|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|    270|                        .view());
 6155|    270|            }
 6156|    440|        }
 6157|       |
 6158|       |        // Read postfix
 6159|    440|        std::ptrdiff_t postfix_width = 0;
 6160|    440|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 440, False: 0]
  ------------------
 6161|    440|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|    440|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    440|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    440|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    440|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 440]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    440|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    440|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|    440|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|    440|                                 rd.skip_ws_before_read(), prefix_width,
 6164|    440|                                 value_width));
 6165|    440|            std::tie(it, postfix_width) = postfix_result;
 6166|    440|        }
 6167|       |
 6168|    440|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|    440|                                                 value_width, postfix_width);
 6170|    440|            !e) {
  ------------------
  |  Branch (6170:13): [True: 256, False: 184]
  ------------------
 6171|    256|            return unexpected(e);
 6172|    256|        }
 6173|       |
 6174|    184|        return it;
 6175|    440|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6179|  7.20k|    {
 6180|  7.20k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  7.20k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  7.20k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  7.20k|            auto rd = make_reader<T, char_type>();
 6185|  7.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.68k, False: 514]
  |  |  ------------------
  ------------------
 6186|  6.68k|                return unexpected(e);
 6187|  6.68k|            }
 6188|       |
 6189|    514|            return impl(rd, range, value);
 6190|  7.20k|        }
 6191|  7.20k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  7.20k|            auto rd = make_reader<T, char_type>();
 6193|  7.20k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  7.20k|                return unexpected(e);
 6195|  7.20k|            }
 6196|       |
 6197|  7.20k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  7.20k|                specs.width != 0) {
 6199|  7.20k|                return impl(rd, range, value);
 6200|  7.20k|            }
 6201|       |
 6202|  7.20k|            auto crange = get_as_contiguous(range);
 6203|  7.20k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  7.20k|            return ranges::next(range.begin(),
 6205|  7.20k|                                ranges::distance(crange.begin(), it));
 6206|  7.20k|        }
 6207|  7.20k|        else {
 6208|  7.20k|            SCN_EXPECT(false);
 6209|  7.20k|            SCN_UNREACHABLE;
 6210|  7.20k|        }
 6211|  7.20k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|    514|    {
 6122|    514|        const bool need_skipped_width =
 6123|    514|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 284, False: 230]
  |  Branch (6123:33): [True: 0, False: 230]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|    514|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    514|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 514]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|    514|        auto [it, prefix_width] = prefix_result;
 6128|    514|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|    514|        std::ptrdiff_t value_width = 0;
 6132|    514|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 514]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|    514|        else {
 6148|    514|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    514|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    514|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    514|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 514, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    514|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    514|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    514|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    514|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    514|    }                                                  \
  |  | 3642|    514|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    514|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6179|  7.15k|    {
 6180|  7.15k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  7.15k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  7.15k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  7.15k|            auto rd = make_reader<T, char_type>();
 6185|  7.15k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 254, False: 6.90k]
  |  |  ------------------
  ------------------
 6186|    254|                return unexpected(e);
 6187|    254|            }
 6188|       |
 6189|  6.90k|            return impl(rd, range, value);
 6190|  7.15k|        }
 6191|  7.15k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  7.15k|            auto rd = make_reader<T, char_type>();
 6193|  7.15k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  7.15k|                return unexpected(e);
 6195|  7.15k|            }
 6196|       |
 6197|  7.15k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  7.15k|                specs.width != 0) {
 6199|  7.15k|                return impl(rd, range, value);
 6200|  7.15k|            }
 6201|       |
 6202|  7.15k|            auto crange = get_as_contiguous(range);
 6203|  7.15k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  7.15k|            return ranges::next(range.begin(),
 6205|  7.15k|                                ranges::distance(crange.begin(), it));
 6206|  7.15k|        }
 6207|  7.15k|        else {
 6208|  7.15k|            SCN_EXPECT(false);
 6209|  7.15k|            SCN_UNREACHABLE;
 6210|  7.15k|        }
 6211|  7.15k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6121|  6.90k|    {
 6122|  6.90k|        const bool need_skipped_width =
 6123|  6.90k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 640, False: 6.26k]
  |  Branch (6123:33): [True: 0, False: 6.26k]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  6.90k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  6.90k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  6.90k|        auto [it, prefix_width] = prefix_result;
 6128|  6.90k|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  6.90k|        std::ptrdiff_t value_width = 0;
 6132|  6.90k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 6.90k]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  6.90k|        else {
 6148|  6.90k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  6.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  6.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  6.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.73k, False: 2.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  4.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  4.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  4.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  4.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  4.73k|    }                                                  \
  |  | 3642|  6.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  6.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  2.17k|                                             specs, value, loc));
 6150|       |
 6151|  2.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 340, False: 1.83k]
  ------------------
 6152|    340|                value_width = calculate_text_width(
 6153|    340|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|    340|                        .view());
 6155|    340|            }
 6156|  2.17k|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  2.17k|        std::ptrdiff_t postfix_width = 0;
 6160|  2.17k|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 1.72k, False: 446]
  ------------------
 6161|  1.72k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  1.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  1.72k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  1.72k|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  1.72k|                                 value_width));
 6165|  1.72k|            std::tie(it, postfix_width) = postfix_result;
 6166|  1.72k|        }
 6167|       |
 6168|  2.17k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  2.17k|                                                 value_width, postfix_width);
 6170|  2.17k|            !e) {
  ------------------
  |  Branch (6170:13): [True: 250, False: 1.92k]
  ------------------
 6171|    250|            return unexpected(e);
 6172|    250|        }
 6173|       |
 6174|  1.92k|        return it;
 6175|  2.17k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6179|  7.15k|    {
 6180|  7.15k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  7.15k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  7.15k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  7.15k|            auto rd = make_reader<T, char_type>();
 6185|  7.15k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 254, False: 6.90k]
  |  |  ------------------
  ------------------
 6186|    254|                return unexpected(e);
 6187|    254|            }
 6188|       |
 6189|  6.90k|            return impl(rd, range, value);
 6190|  7.15k|        }
 6191|  7.15k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  7.15k|            auto rd = make_reader<T, char_type>();
 6193|  7.15k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  7.15k|                return unexpected(e);
 6195|  7.15k|            }
 6196|       |
 6197|  7.15k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  7.15k|                specs.width != 0) {
 6199|  7.15k|                return impl(rd, range, value);
 6200|  7.15k|            }
 6201|       |
 6202|  7.15k|            auto crange = get_as_contiguous(range);
 6203|  7.15k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  7.15k|            return ranges::next(range.begin(),
 6205|  7.15k|                                ranges::distance(crange.begin(), it));
 6206|  7.15k|        }
 6207|  7.15k|        else {
 6208|  7.15k|            SCN_EXPECT(false);
 6209|  7.15k|            SCN_UNREACHABLE;
 6210|  7.15k|        }
 6211|  7.15k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6121|  6.90k|    {
 6122|  6.90k|        const bool need_skipped_width =
 6123|  6.90k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 640, False: 6.26k]
  |  Branch (6123:33): [True: 0, False: 6.26k]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  6.90k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  6.90k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  6.90k|        auto [it, prefix_width] = prefix_result;
 6128|  6.90k|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  6.90k|        std::ptrdiff_t value_width = 0;
 6132|  6.90k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 6.90k]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  6.90k|        else {
 6148|  6.90k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  6.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  6.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  6.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.73k, False: 2.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  4.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  4.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  4.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  4.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  4.73k|    }                                                  \
  |  | 3642|  6.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  6.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  2.17k|                                             specs, value, loc));
 6150|       |
 6151|  2.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 340, False: 1.83k]
  ------------------
 6152|    340|                value_width = calculate_text_width(
 6153|    340|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|    340|                        .view());
 6155|    340|            }
 6156|  2.17k|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  2.17k|        std::ptrdiff_t postfix_width = 0;
 6160|  2.17k|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 1.72k, False: 446]
  ------------------
 6161|  1.72k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  1.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  1.72k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  1.72k|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  1.72k|                                 value_width));
 6165|  1.72k|            std::tie(it, postfix_width) = postfix_result;
 6166|  1.72k|        }
 6167|       |
 6168|  2.17k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  2.17k|                                                 value_width, postfix_width);
 6170|  2.17k|            !e) {
  ------------------
  |  Branch (6170:13): [True: 250, False: 1.92k]
  ------------------
 6171|    250|            return unexpected(e);
 6172|    250|        }
 6173|       |
 6174|  1.92k|        return it;
 6175|  2.17k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6179|  7.15k|    {
 6180|  7.15k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  7.15k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  7.15k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  7.15k|            auto rd = make_reader<T, char_type>();
 6185|  7.15k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 254, False: 6.90k]
  |  |  ------------------
  ------------------
 6186|    254|                return unexpected(e);
 6187|    254|            }
 6188|       |
 6189|  6.90k|            return impl(rd, range, value);
 6190|  7.15k|        }
 6191|  7.15k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  7.15k|            auto rd = make_reader<T, char_type>();
 6193|  7.15k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  7.15k|                return unexpected(e);
 6195|  7.15k|            }
 6196|       |
 6197|  7.15k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  7.15k|                specs.width != 0) {
 6199|  7.15k|                return impl(rd, range, value);
 6200|  7.15k|            }
 6201|       |
 6202|  7.15k|            auto crange = get_as_contiguous(range);
 6203|  7.15k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  7.15k|            return ranges::next(range.begin(),
 6205|  7.15k|                                ranges::distance(crange.begin(), it));
 6206|  7.15k|        }
 6207|  7.15k|        else {
 6208|  7.15k|            SCN_EXPECT(false);
 6209|  7.15k|            SCN_UNREACHABLE;
 6210|  7.15k|        }
 6211|  7.15k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6121|  6.90k|    {
 6122|  6.90k|        const bool need_skipped_width =
 6123|  6.90k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 640, False: 6.26k]
  |  Branch (6123:33): [True: 0, False: 6.26k]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  6.90k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  6.90k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.90k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  6.90k|        auto [it, prefix_width] = prefix_result;
 6128|  6.90k|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  6.90k|        std::ptrdiff_t value_width = 0;
 6132|  6.90k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 6.90k]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  6.90k|        else {
 6148|  6.90k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  6.90k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  6.90k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  6.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.73k, False: 2.17k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  4.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  4.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  4.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  4.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  4.73k|    }                                                  \
  |  | 3642|  6.90k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  6.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  2.17k|                                             specs, value, loc));
 6150|       |
 6151|  2.17k|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 340, False: 1.83k]
  ------------------
 6152|    340|                value_width = calculate_text_width(
 6153|    340|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|    340|                        .view());
 6155|    340|            }
 6156|  2.17k|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  2.17k|        std::ptrdiff_t postfix_width = 0;
 6160|  2.17k|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 1.72k, False: 446]
  ------------------
 6161|  1.72k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  1.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.72k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  1.72k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  1.72k|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  1.72k|                                 value_width));
 6165|  1.72k|            std::tie(it, postfix_width) = postfix_result;
 6166|  1.72k|        }
 6167|       |
 6168|  2.17k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  2.17k|                                                 value_width, postfix_width);
 6170|  2.17k|            !e) {
  ------------------
  |  Branch (6170:13): [True: 250, False: 1.92k]
  ------------------
 6171|    250|            return unexpected(e);
 6172|    250|        }
 6173|       |
 6174|  1.92k|        return it;
 6175|  2.17k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5796|    414|{
 5797|    414|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    414|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 414]
  |  |  ------------------
  ------------------
 5798|      0|        return unexpected(e);
 5799|      0|    }
 5800|       |
 5801|    414|    if (!is_required) {
  ------------------
  |  Branch (5801:9): [True: 46, False: 368]
  ------------------
 5802|     46|        return range.begin();
 5803|     46|    }
 5804|       |
 5805|    368|    return skip_classic_whitespace(range);
 5806|    414|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5872|     46|    {
 5873|     46|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|     46|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|     46|                          basic_contiguous_scan_context<char_type>>) {
 5877|     46|            auto rd = make_reader<T, char_type>();
 5878|     46|            return impl(rd, range, value);
 5879|     46|        }
 5880|     46|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|     46|            auto rd = make_reader<T, char_type>();
 5882|     46|            if (!is_segment_contiguous(range)) {
 5883|     46|                return impl(rd, range, value);
 5884|     46|            }
 5885|     46|            auto crange = get_as_contiguous(range);
 5886|     46|            SCN_TRY(it, impl(rd, crange, value));
 5887|     46|            return ranges::next(range.begin(),
 5888|     46|                                ranges::distance(crange.begin(), it));
 5889|     46|        }
 5890|     46|        else {
 5891|     46|            SCN_EXPECT(false);
 5892|     46|            SCN_UNREACHABLE;
 5893|     46|        }
 5894|     46|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|     46|    {
 5865|     46|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|     46|                        .transform_error(make_eof_scan_error));
 5867|     46|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|     46|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|     46|    {
 3529|     46|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     46|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|     46|        return read_default_with_base(range, value, 10);
 3531|     46|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|     46|    {
 3493|     46|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|     46|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|     46|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|     46|            if (prefix_result.sign == sign_type::minus_sign) {
 3498|     46|                return unexpected_scan_error(
 3499|     46|                    scan_error::invalid_scanned_value,
 3500|     46|                    "Unexpected '-' sign when parsing an "
 3501|     46|                    "unsigned value");
 3502|     46|            }
 3503|     46|        }
 3504|       |
 3505|     46|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 46]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|     92|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|     92|                parse_integer_digits_without_thsep(
 3512|     92|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|     92|                    prefix_result.parsed_base));
 3514|       |
 3515|     92|        auto buf = make_contiguous_buffer(
 3516|     92|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|     92|        SCN_TRY(result_it,
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     46|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     46|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|     92|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5872|     46|    {
 5873|     46|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|     46|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|     46|                          basic_contiguous_scan_context<char_type>>) {
 5877|     46|            auto rd = make_reader<T, char_type>();
 5878|     46|            return impl(rd, range, value);
 5879|     46|        }
 5880|     46|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|     46|            auto rd = make_reader<T, char_type>();
 5882|     46|            if (!is_segment_contiguous(range)) {
 5883|     46|                return impl(rd, range, value);
 5884|     46|            }
 5885|     46|            auto crange = get_as_contiguous(range);
 5886|     46|            SCN_TRY(it, impl(rd, crange, value));
 5887|     46|            return ranges::next(range.begin(),
 5888|     46|                                ranges::distance(crange.begin(), it));
 5889|     46|        }
 5890|     46|        else {
 5891|     46|            SCN_EXPECT(false);
 5892|     46|            SCN_UNREACHABLE;
 5893|     46|        }
 5894|     46|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|     46|    {
 5865|     46|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|     46|                        .transform_error(make_eof_scan_error));
 5867|     46|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|     46|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|     46|    {
 3529|     46|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     46|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|     46|        return read_default_with_base(range, value, 10);
 3531|     46|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|     46|    {
 3493|     46|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|     46|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|     46|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|     46|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3497:17): [True: 0, False: 46]
  ------------------
 3498|      0|                return unexpected_scan_error(
 3499|      0|                    scan_error::invalid_scanned_value,
 3500|      0|                    "Unexpected '-' sign when parsing an "
 3501|      0|                    "unsigned value");
 3502|      0|            }
 3503|     46|        }
 3504|       |
 3505|     46|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 46]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|     92|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|     92|                parse_integer_digits_without_thsep(
 3512|     92|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|     92|                    prefix_result.parsed_base));
 3514|       |
 3515|     92|        auto buf = make_contiguous_buffer(
 3516|     92|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|     92|        SCN_TRY(result_it,
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 46, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     46|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     46|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     46|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     46|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     46|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|     92|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5872|     46|    {
 5873|     46|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|     46|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|     46|                          basic_contiguous_scan_context<char_type>>) {
 5877|     46|            auto rd = make_reader<T, char_type>();
 5878|     46|            return impl(rd, range, value);
 5879|     46|        }
 5880|     46|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|     46|            auto rd = make_reader<T, char_type>();
 5882|     46|            if (!is_segment_contiguous(range)) {
 5883|     46|                return impl(rd, range, value);
 5884|     46|            }
 5885|     46|            auto crange = get_as_contiguous(range);
 5886|     46|            SCN_TRY(it, impl(rd, crange, value));
 5887|     46|            return ranges::next(range.begin(),
 5888|     46|                                ranges::distance(crange.begin(), it));
 5889|     46|        }
 5890|     46|        else {
 5891|     46|            SCN_EXPECT(false);
 5892|     46|            SCN_UNREACHABLE;
 5893|     46|        }
 5894|     46|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5864|     46|    {
 5865|     46|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|     46|                        .transform_error(make_eof_scan_error));
 5867|     46|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|     46|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5749|     90|    {
 5750|     90|        return true;
 5751|     90|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5766|     90|    {
 5767|     90|        detail::format_specs specs{};
 5768|     90|        specs.type = detail::presentation_type::int_hex;
 5769|       |
 5770|     90|        std::uintptr_t intvalue{};
 5771|     90|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3643|     90|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     90|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     90|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     90|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 90, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     90|    }                                                  \
  |  |  |  | 3642|     90|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5772|      0|                                                                intvalue, loc));
 5773|      0|        value = reinterpret_cast<void*>(intvalue);
 5774|      0|        return result;
 5775|     90|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5872|     46|    {
 5873|     46|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|     46|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|     46|                          basic_contiguous_scan_context<char_type>>) {
 5877|     46|            auto rd = make_reader<T, char_type>();
 5878|     46|            return impl(rd, range, value);
 5879|     46|        }
 5880|     46|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|     46|            auto rd = make_reader<T, char_type>();
 5882|     46|            if (!is_segment_contiguous(range)) {
 5883|     46|                return impl(rd, range, value);
 5884|     46|            }
 5885|     46|            auto crange = get_as_contiguous(range);
 5886|     46|            SCN_TRY(it, impl(rd, crange, value));
 5887|     46|            return ranges::next(range.begin(),
 5888|     46|                                ranges::distance(crange.begin(), it));
 5889|     46|        }
 5890|     46|        else {
 5891|     46|            SCN_EXPECT(false);
 5892|     46|            SCN_UNREACHABLE;
 5893|     46|        }
 5894|     46|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|     46|    {
 5865|     46|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|     46|                        .transform_error(make_eof_scan_error));
 5867|     46|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|     46|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|     90|    {
 3035|     90|        return true;
 3036|     90|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5505|     46|    {
 5506|     46|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     46|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5507|       |
 5508|     46|        return bool_reader<CharT>{}.read_classic(range, value);
 5509|     46|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5356|     90|    {
 5357|     90|        scan_error err{scan_error::invalid_scanned_value,
 5358|     90|                       "Failed to read boolean"};
 5359|       |
 5360|     90|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5360:13): [True: 90, False: 0]
  ------------------
 5361|     90|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5361:22): [True: 0, False: 90]
  ------------------
 5362|      0|                return *r;
 5363|      0|            }
 5364|     90|            else {
 5365|     90|                err = r.error();
 5366|     90|            }
 5367|     90|        }
 5368|       |
 5369|     90|        if (m_options & allow_text) {
  ------------------
  |  Branch (5369:13): [True: 90, False: 0]
  ------------------
 5370|     90|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5370:22): [True: 0, False: 90]
  ------------------
 5371|      0|                return *r;
 5372|      0|            }
 5373|     90|            else {
 5374|     90|                err = r.error();
 5375|     90|            }
 5376|     90|        }
 5377|       |
 5378|     90|        return unexpected(err);
 5379|     90|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5385|     90|    {
 5386|     90|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5386:18): [True: 0, False: 90]
  ------------------
 5387|      0|            value = false;
 5388|      0|            return *r;
 5389|      0|        }
 5390|     90|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5390:18): [True: 0, False: 90]
  ------------------
 5391|      0|            value = true;
 5392|      0|            return *r;
 5393|      0|        }
 5394|       |
 5395|     90|        return unexpected_scan_error(
 5396|     90|            scan_error::invalid_scanned_value,
 5397|     90|            "Failed to read numeric boolean value: No match");
 5398|     90|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5403|     90|    {
 5404|     90|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5404:18): [True: 0, False: 90]
  ------------------
 5405|      0|            value = true;
 5406|      0|            return *r;
 5407|      0|        }
 5408|     90|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5408:18): [True: 0, False: 90]
  ------------------
 5409|      0|            value = false;
 5410|      0|            return *r;
 5411|      0|        }
 5412|       |
 5413|     90|        return unexpected_scan_error(
 5414|     90|            scan_error::invalid_scanned_value,
 5415|     90|            "Failed to read textual boolean value: No match");
 5416|     90|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|    180|{
 2194|    180|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|    180|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    180|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    180|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 162]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     18|    }                                                  \
  |  |  |  | 3642|    180|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    162|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    162|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    162|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    162|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    162|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    162|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    162|            return unexpected(parse_error::error);
 2202|    162|        }
 2203|    162|        return it;
 2204|    162|    }
 2205|    162|    else {
 2206|    162|        auto range_it = range.begin();
 2207|    162|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 162, False: 0]
  ------------------
 2208|    162|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    162|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162, False: 0]
  |  |  ------------------
  ------------------
 2209|    162|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    162|                return unexpected(parse_error::error);
 2211|    162|            }
 2212|    162|        }
 2213|      0|        return it;
 2214|    162|    }
 2215|    162|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5872|     46|    {
 5873|     46|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|     46|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|     46|                          basic_contiguous_scan_context<char_type>>) {
 5877|     46|            auto rd = make_reader<T, char_type>();
 5878|     46|            return impl(rd, range, value);
 5879|     46|        }
 5880|     46|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|     46|            auto rd = make_reader<T, char_type>();
 5882|     46|            if (!is_segment_contiguous(range)) {
 5883|     46|                return impl(rd, range, value);
 5884|     46|            }
 5885|     46|            auto crange = get_as_contiguous(range);
 5886|     46|            SCN_TRY(it, impl(rd, crange, value));
 5887|     46|            return ranges::next(range.begin(),
 5888|     46|                                ranges::distance(crange.begin(), it));
 5889|     46|        }
 5890|     46|        else {
 5891|     46|            SCN_EXPECT(false);
 5892|     46|            SCN_UNREACHABLE;
 5893|     46|        }
 5894|     46|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|     46|    {
 5865|     46|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|     46|                        .transform_error(make_eof_scan_error));
 5867|     46|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|     46|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3658|     46|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5872|     46|    {
 5873|     46|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|     46|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|     46|                          basic_contiguous_scan_context<char_type>>) {
 5877|     46|            auto rd = make_reader<T, char_type>();
 5878|     46|            return impl(rd, range, value);
 5879|     46|        }
 5880|     46|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|     46|            auto rd = make_reader<T, char_type>();
 5882|     46|            if (!is_segment_contiguous(range)) {
 5883|     46|                return impl(rd, range, value);
 5884|     46|            }
 5885|     46|            auto crange = get_as_contiguous(range);
 5886|     46|            SCN_TRY(it, impl(rd, crange, value));
 5887|     46|            return ranges::next(range.begin(),
 5888|     46|                                ranges::distance(crange.begin(), it));
 5889|     46|        }
 5890|     46|        else {
 5891|     46|            SCN_EXPECT(false);
 5892|     46|            SCN_UNREACHABLE;
 5893|     46|        }
 5894|     46|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|     46|    {
 5865|     46|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|     46|                        .transform_error(make_eof_scan_error));
 5867|     46|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|     46|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4153|     46|    {
 4154|     46|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     46|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|     46|        float_reader<CharT> rd{};
 4157|     46|        return read_impl<Range>(
 4158|     46|            range, rd,
 4159|     46|            [](float_reader<CharT>& r, auto&&... args) {
 4160|     46|                return r.read_source(SCN_FWD(args)...);
 4161|     46|            },
 4162|     46|            value);
 4163|     46|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|     46|    {
  754|     46|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|     46|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     46|              cvref<T> obj = *get<T>(fn);
  745|     46|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     46|                  obj(static_cast<decltype(args)>(args)...);
  747|     46|              }
  748|     46|              else {
  749|     46|                  return obj(static_cast<decltype(args)>(args)...);
  750|     46|              }
  751|     46|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     46|    {
  684|     46|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     46|            return static_cast<T*>(s.m_cp);
  686|     46|        }
  687|     46|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     46|            return static_cast<T*>(s.m_p);
  689|     46|        }
  690|     46|        else {
  691|     46|            return reinterpret_cast<T*>(s.m_fp);
  692|     46|        }
  693|     46|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4159|     46|            [](float_reader<CharT>& r, auto&&... args) {
 4160|     46|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|     46|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|     46|        {
  662|     46|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5872|     46|    {
 5873|     46|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|     46|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|     46|                          basic_contiguous_scan_context<char_type>>) {
 5877|     46|            auto rd = make_reader<T, char_type>();
 5878|     46|            return impl(rd, range, value);
 5879|     46|        }
 5880|     46|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|     46|            auto rd = make_reader<T, char_type>();
 5882|     46|            if (!is_segment_contiguous(range)) {
 5883|     46|                return impl(rd, range, value);
 5884|     46|            }
 5885|     46|            auto crange = get_as_contiguous(range);
 5886|     46|            SCN_TRY(it, impl(rd, crange, value));
 5887|     46|            return ranges::next(range.begin(),
 5888|     46|                                ranges::distance(crange.begin(), it));
 5889|     46|        }
 5890|     46|        else {
 5891|     46|            SCN_EXPECT(false);
 5892|     46|            SCN_UNREACHABLE;
 5893|     46|        }
 5894|     46|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5864|     46|    {
 5865|     46|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|     46|                        .transform_error(make_eof_scan_error));
 5867|     46|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|     46|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5267|     46|    {
 5268|     46|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     46|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5269|     46|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5270|     46|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5872|     46|    {
 5873|     46|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|     46|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|     46|                          basic_contiguous_scan_context<char_type>>) {
 5877|     46|            auto rd = make_reader<T, char_type>();
 5878|     46|            return impl(rd, range, value);
 5879|     46|        }
 5880|     46|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|     46|            auto rd = make_reader<T, char_type>();
 5882|     46|            if (!is_segment_contiguous(range)) {
 5883|     46|                return impl(rd, range, value);
 5884|     46|            }
 5885|     46|            auto crange = get_as_contiguous(range);
 5886|     46|            SCN_TRY(it, impl(rd, crange, value));
 5887|     46|            return ranges::next(range.begin(),
 5888|     46|                                ranges::distance(crange.begin(), it));
 5889|     46|        }
 5890|     46|        else {
 5891|     46|            SCN_EXPECT(false);
 5892|     46|            SCN_UNREACHABLE;
 5893|     46|        }
 5894|     46|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5864|     46|    {
 5865|     46|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|     46|                        .transform_error(make_eof_scan_error));
 5867|     46|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|     46|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5267|     46|    {
 5268|     46|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     46|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5269|     46|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5270|     46|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5872|     46|    {
 5873|     46|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|     46|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|     46|                          basic_contiguous_scan_context<char_type>>) {
 5877|     46|            auto rd = make_reader<T, char_type>();
 5878|     46|            return impl(rd, range, value);
 5879|     46|        }
 5880|     46|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|     46|            auto rd = make_reader<T, char_type>();
 5882|     46|            if (!is_segment_contiguous(range)) {
 5883|     46|                return impl(rd, range, value);
 5884|     46|            }
 5885|     46|            auto crange = get_as_contiguous(range);
 5886|     46|            SCN_TRY(it, impl(rd, crange, value));
 5887|     46|            return ranges::next(range.begin(),
 5888|     46|                                ranges::distance(crange.begin(), it));
 5889|     46|        }
 5890|     46|        else {
 5891|     46|            SCN_EXPECT(false);
 5892|     46|            SCN_UNREACHABLE;
 5893|     46|        }
 5894|     46|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5864|     46|    {
 5865|     46|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|     46|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     46|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     46|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     46|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 46]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     46|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     46|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|     46|                        .transform_error(make_eof_scan_error));
 5867|     46|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|     46|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5267|     46|    {
 5268|     46|        SCN_UNUSED(loc);
  ------------------
  |  |  909|     46|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5269|     46|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5270|     46|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   162k|    {
 2879|   162k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   392k|    {
 2883|   392k|        return m_current;
 2884|   392k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   379k|    {
 2888|   379k|        return m_range.end();
 2889|   379k|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   227k|{
 1221|       |    // TODO: optimize
 1222|   227k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   227k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   227k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   227k|    auto res = get_next_code_point(str);
 1224|   227k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   227k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   149k|    {
 2903|   149k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   149k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   149k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 149k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   149k|        }
 2909|   149k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   149k|    static_cast<    \
  |  |  929|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   149k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  2.47k|    {
 2893|  2.47k|        return ranges::subrange{begin(), end()};
 2894|  2.47k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6038|    396|    {
 6039|    396|        const bool need_skipped_width =
 6040|    396|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6040:13): [True: 360, False: 36]
  |  Branch (6040:33): [True: 0, False: 36]
  ------------------
 6041|    396|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6042|       |
 6043|       |        // Read prefix
 6044|    396|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6044:13): [True: 0, False: 396]
  ------------------
 6045|    396|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6045:13): [True: 0, False: 396]
  ------------------
 6046|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6047|      0|                             need_skipped_width);
 6048|      0|        }
 6049|    396|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6049:13): [True: 396, False: 0]
  |  Branch (6049:56): [True: 352, False: 44]
  ------------------
 6050|       |            // Default alignment:
 6051|       |            // Skip preceding whitespace, if required by the reader
 6052|    352|            if (specs.precision != 0) {
  ------------------
  |  Branch (6052:17): [True: 0, False: 352]
  ------------------
 6053|      0|                auto max_width_view = take_width(rng, specs.precision);
 6054|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6055|      0|                                  .transform_error(make_eof_scan_error));
 6056|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6057|      0|            }
 6058|    704|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    352|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6059|    704|                            make_eof_scan_error));
 6060|       |
 6061|    704|            if (need_skipped_width) {
  ------------------
  |  Branch (6061:17): [True: 320, False: 32]
  ------------------
 6062|    320|                return result_type{
 6063|    320|                    it,
 6064|    320|                    calculate_text_width(make_contiguous_buffer(
 6065|    320|                                             ranges::subrange{rng.begin(), it})
 6066|    320|                                             .view())};
 6067|    320|            }
 6068|     32|            return result_type{it, 0};
 6069|    704|        }
 6070|       |
 6071|     44|        return result_type{rng.begin(), 0};
 6072|    396|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6080|     44|    {
 6081|     44|        const bool need_skipped_width =
 6082|     44|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6082:13): [True: 40, False: 4]
  |  Branch (6082:33): [True: 0, False: 4]
  ------------------
 6083|     44|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6084|       |
 6085|     44|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6085:13): [True: 0, False: 44]
  ------------------
 6086|     44|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6086:13): [True: 0, False: 44]
  ------------------
 6087|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6088|      0|                             specs.fill, need_skipped_width);
 6089|      0|        }
 6090|     44|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6090:13): [True: 44, False: 0]
  ------------------
 6091|     44|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6091:13): [True: 44, False: 0]
  ------------------
 6092|     44|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6092:15): [True: 40, False: 4]
  |  Branch (6092:35): [True: 40, False: 0]
  ------------------
 6093|     44|             (specs.precision != 0 &&
  ------------------
  |  Branch (6093:15): [True: 0, False: 4]
  ------------------
 6094|     40|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  ------------------
 6095|     40|            if (specs.precision != 0) {
  ------------------
  |  Branch (6095:17): [True: 0, False: 40]
  ------------------
 6096|      0|                const auto initial_width =
 6097|      0|                    specs.precision - prefix_width - value_width;
 6098|      0|                auto max_width_view = take_width(rng, initial_width);
 6099|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6100|      0|                                  .transform_error(make_eof_scan_error));
 6101|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6102|      0|            }
 6103|     80|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|     40|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     40|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     40|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     40|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 40]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     40|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     40|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6104|     80|                            make_eof_scan_error));
 6105|       |
 6106|     80|            if (need_skipped_width) {
  ------------------
  |  Branch (6106:17): [True: 40, False: 0]
  ------------------
 6107|     40|                return result_type{
 6108|     40|                    it,
 6109|     40|                    calculate_text_width(make_contiguous_buffer(
 6110|     40|                                             ranges::subrange{rng.begin(), it})
 6111|     40|                                             .view())};
 6112|     40|            }
 6113|      0|            return result_type{it, 0};
 6114|     80|        }
 6115|      4|        return result_type{rng.begin(), 0};
 6116|     44|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6179|     56|    {
 6180|     56|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|     56|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|     56|                          basic_contiguous_scan_context<char_type>>) {
 6184|     56|            auto rd = make_reader<T, char_type>();
 6185|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 6186|     12|                return unexpected(e);
 6187|     12|            }
 6188|       |
 6189|     44|            return impl(rd, range, value);
 6190|     56|        }
 6191|     56|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|     56|            auto rd = make_reader<T, char_type>();
 6193|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|     56|                return unexpected(e);
 6195|     56|            }
 6196|       |
 6197|     56|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|     56|                specs.width != 0) {
 6199|     56|                return impl(rd, range, value);
 6200|     56|            }
 6201|       |
 6202|     56|            auto crange = get_as_contiguous(range);
 6203|     56|            SCN_TRY(it, impl(rd, crange, value));
 6204|     56|            return ranges::next(range.begin(),
 6205|     56|                                ranges::distance(crange.begin(), it));
 6206|     56|        }
 6207|     56|        else {
 6208|     56|            SCN_EXPECT(false);
 6209|     56|            SCN_UNREACHABLE;
 6210|     56|        }
 6211|     56|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|     44|    {
 6122|     44|        const bool need_skipped_width =
 6123|     44|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 40, False: 4]
  |  Branch (6123:33): [True: 0, False: 4]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|     44|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|     44|        auto [it, prefix_width] = prefix_result;
 6128|     44|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|     44|        std::ptrdiff_t value_width = 0;
 6132|     44|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 44]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|     44|        else {
 6148|     44|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 44, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     44|    }                                                  \
  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6179|     56|    {
 6180|     56|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|     56|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|     56|                          basic_contiguous_scan_context<char_type>>) {
 6184|     56|            auto rd = make_reader<T, char_type>();
 6185|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 6186|     12|                return unexpected(e);
 6187|     12|            }
 6188|       |
 6189|     44|            return impl(rd, range, value);
 6190|     56|        }
 6191|     56|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|     56|            auto rd = make_reader<T, char_type>();
 6193|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|     56|                return unexpected(e);
 6195|     56|            }
 6196|       |
 6197|     56|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|     56|                specs.width != 0) {
 6199|     56|                return impl(rd, range, value);
 6200|     56|            }
 6201|       |
 6202|     56|            auto crange = get_as_contiguous(range);
 6203|     56|            SCN_TRY(it, impl(rd, crange, value));
 6204|     56|            return ranges::next(range.begin(),
 6205|     56|                                ranges::distance(crange.begin(), it));
 6206|     56|        }
 6207|     56|        else {
 6208|     56|            SCN_EXPECT(false);
 6209|     56|            SCN_UNREACHABLE;
 6210|     56|        }
 6211|     56|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|     44|    {
 6122|     44|        const bool need_skipped_width =
 6123|     44|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 40, False: 4]
  |  Branch (6123:33): [True: 0, False: 4]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|     44|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|     44|        auto [it, prefix_width] = prefix_result;
 6128|     44|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|     44|        std::ptrdiff_t value_width = 0;
 6132|     44|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 44]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|     44|        else {
 6148|     44|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 44, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     44|    }                                                  \
  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6179|     56|    {
 6180|     56|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|     56|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|     56|                          basic_contiguous_scan_context<char_type>>) {
 6184|     56|            auto rd = make_reader<T, char_type>();
 6185|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 6186|     12|                return unexpected(e);
 6187|     12|            }
 6188|       |
 6189|     44|            return impl(rd, range, value);
 6190|     56|        }
 6191|     56|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|     56|            auto rd = make_reader<T, char_type>();
 6193|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|     56|                return unexpected(e);
 6195|     56|            }
 6196|       |
 6197|     56|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|     56|                specs.width != 0) {
 6199|     56|                return impl(rd, range, value);
 6200|     56|            }
 6201|       |
 6202|     56|            auto crange = get_as_contiguous(range);
 6203|     56|            SCN_TRY(it, impl(rd, crange, value));
 6204|     56|            return ranges::next(range.begin(),
 6205|     56|                                ranges::distance(crange.begin(), it));
 6206|     56|        }
 6207|     56|        else {
 6208|     56|            SCN_EXPECT(false);
 6209|     56|            SCN_UNREACHABLE;
 6210|     56|        }
 6211|     56|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5754|     56|    {
 5755|     56|        reader_error_handler eh{};
 5756|     56|        detail::check_pointer_type_specs(specs, eh);
 5757|     56|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 5758|     12|            return {scan_error::invalid_format_string, eh.m_msg};
 5759|     12|        }
 5760|     44|        return {};
 5761|     56|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6121|     44|    {
 6122|     44|        const bool need_skipped_width =
 6123|     44|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 40, False: 4]
  |  Branch (6123:33): [True: 0, False: 4]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|     44|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|     44|        auto [it, prefix_width] = prefix_result;
 6128|     44|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|     44|        std::ptrdiff_t value_width = 0;
 6132|     44|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 44]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|     44|        else {
 6148|     44|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 44, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     44|    }                                                  \
  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5783|     44|    {
 5784|     44|        SCN_UNUSED(specs);
  ------------------
  |  |  909|     44|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5785|     44|        return read_default(range, value, loc);
 5786|     44|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6179|     56|    {
 6180|     56|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|     56|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|     56|                          basic_contiguous_scan_context<char_type>>) {
 6184|     56|            auto rd = make_reader<T, char_type>();
 6185|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 6186|     12|                return unexpected(e);
 6187|     12|            }
 6188|       |
 6189|     44|            return impl(rd, range, value);
 6190|     56|        }
 6191|     56|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|     56|            auto rd = make_reader<T, char_type>();
 6193|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|     56|                return unexpected(e);
 6195|     56|            }
 6196|       |
 6197|     56|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|     56|                specs.width != 0) {
 6199|     56|                return impl(rd, range, value);
 6200|     56|            }
 6201|       |
 6202|     56|            auto crange = get_as_contiguous(range);
 6203|     56|            SCN_TRY(it, impl(rd, crange, value));
 6204|     56|            return ranges::next(range.begin(),
 6205|     56|                                ranges::distance(crange.begin(), it));
 6206|     56|        }
 6207|     56|        else {
 6208|     56|            SCN_EXPECT(false);
 6209|     56|            SCN_UNREACHABLE;
 6210|     56|        }
 6211|     56|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|     56|    {
 3040|     56|        reader_error_handler eh{};
 3041|     56|        get_derived().check_specs_impl(specs, eh);
 3042|     56|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 3043|     12|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|     12|        }
 3045|     44|        return {};
 3046|     56|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|     56|    {
 3051|     56|        return static_cast<Derived&>(*this);
 3052|     56|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5498|     56|    {
 5499|     56|        detail::check_bool_type_specs(specs, eh);
 5500|     56|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|     44|    {
 6122|     44|        const bool need_skipped_width =
 6123|     44|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 40, False: 4]
  |  Branch (6123:33): [True: 0, False: 4]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|     44|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|     44|        auto [it, prefix_width] = prefix_result;
 6128|     44|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|     44|        std::ptrdiff_t value_width = 0;
 6132|     44|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 44]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|     44|        else {
 6148|     44|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 44, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     44|    }                                                  \
  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5530|     44|    {
 5531|     44|        SCN_GCC_COMPAT_PUSH
 5532|     44|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5533|       |
 5534|     44|        switch (specs.type) {
 5535|      0|            case detail::presentation_type::string:
  ------------------
  |  Branch (5535:13): [True: 0, False: 44]
  ------------------
 5536|      0|                return bool_reader_base::allow_text;
 5537|       |
 5538|      0|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5538:13): [True: 0, False: 44]
  ------------------
 5539|      0|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5539:13): [True: 0, False: 44]
  ------------------
 5540|      0|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5540:13): [True: 0, False: 44]
  ------------------
 5541|      0|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5541:13): [True: 0, False: 44]
  ------------------
 5542|      0|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5542:13): [True: 0, False: 44]
  ------------------
 5543|      0|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5543:13): [True: 0, False: 44]
  ------------------
 5544|      0|                return bool_reader_base::allow_numeric;
 5545|       |
 5546|     44|            default:
  ------------------
  |  Branch (5546:13): [True: 44, False: 0]
  ------------------
 5547|     44|                return bool_reader_base::allow_text |
 5548|     44|                       bool_reader_base::allow_numeric;
 5549|     44|        }
 5550|       |
 5551|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5552|     44|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5517|     44|    {
 5518|     44|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5519|       |
 5520|     44|#if !SCN_DISABLE_LOCALE
 5521|     44|        if (specs.localized) {
  ------------------
  |  Branch (5521:13): [True: 0, False: 44]
  ------------------
 5522|      0|            return rd.read_localized(range, loc, value);
 5523|      0|        }
 5524|     44|#endif
 5525|       |
 5526|     44|        return rd.read_classic(range, value);
 5527|     44|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6179|     56|    {
 6180|     56|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|     56|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|     56|                          basic_contiguous_scan_context<char_type>>) {
 6184|     56|            auto rd = make_reader<T, char_type>();
 6185|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 6186|     12|                return unexpected(e);
 6187|     12|            }
 6188|       |
 6189|     44|            return impl(rd, range, value);
 6190|     56|        }
 6191|     56|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|     56|            auto rd = make_reader<T, char_type>();
 6193|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|     56|                return unexpected(e);
 6195|     56|            }
 6196|       |
 6197|     56|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|     56|                specs.width != 0) {
 6199|     56|                return impl(rd, range, value);
 6200|     56|            }
 6201|       |
 6202|     56|            auto crange = get_as_contiguous(range);
 6203|     56|            SCN_TRY(it, impl(rd, crange, value));
 6204|     56|            return ranges::next(range.begin(),
 6205|     56|                                ranges::distance(crange.begin(), it));
 6206|     56|        }
 6207|     56|        else {
 6208|     56|            SCN_EXPECT(false);
 6209|     56|            SCN_UNREACHABLE;
 6210|     56|        }
 6211|     56|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|     44|    {
 6122|     44|        const bool need_skipped_width =
 6123|     44|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 40, False: 4]
  |  Branch (6123:33): [True: 0, False: 4]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|     44|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|     44|        auto [it, prefix_width] = prefix_result;
 6128|     44|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|     44|        std::ptrdiff_t value_width = 0;
 6132|     44|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 44]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|     44|        else {
 6148|     44|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|     44|                                             specs, value, loc));
 6150|       |
 6151|     44|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 40, False: 4]
  ------------------
 6152|     40|                value_width = calculate_text_width(
 6153|     40|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|     40|                        .view());
 6155|     40|            }
 6156|     44|        }
 6157|       |
 6158|       |        // Read postfix
 6159|     44|        std::ptrdiff_t postfix_width = 0;
 6160|     44|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 44, False: 0]
  ------------------
 6161|     44|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|     44|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|     44|                                 rd.skip_ws_before_read(), prefix_width,
 6164|     44|                                 value_width));
 6165|     44|            std::tie(it, postfix_width) = postfix_result;
 6166|     44|        }
 6167|       |
 6168|     44|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|     44|                                                 value_width, postfix_width);
 6170|     44|            !e) {
  ------------------
  |  Branch (6170:13): [True: 40, False: 4]
  ------------------
 6171|     40|            return unexpected(e);
 6172|     40|        }
 6173|       |
 6174|      4|        return it;
 6175|     44|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6179|     56|    {
 6180|     56|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|     56|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|     56|                          basic_contiguous_scan_context<char_type>>) {
 6184|     56|            auto rd = make_reader<T, char_type>();
 6185|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 6186|     12|                return unexpected(e);
 6187|     12|            }
 6188|       |
 6189|     44|            return impl(rd, range, value);
 6190|     56|        }
 6191|     56|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|     56|            auto rd = make_reader<T, char_type>();
 6193|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|     56|                return unexpected(e);
 6195|     56|            }
 6196|       |
 6197|     56|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|     56|                specs.width != 0) {
 6199|     56|                return impl(rd, range, value);
 6200|     56|            }
 6201|       |
 6202|     56|            auto crange = get_as_contiguous(range);
 6203|     56|            SCN_TRY(it, impl(rd, crange, value));
 6204|     56|            return ranges::next(range.begin(),
 6205|     56|                                ranges::distance(crange.begin(), it));
 6206|     56|        }
 6207|     56|        else {
 6208|     56|            SCN_EXPECT(false);
 6209|     56|            SCN_UNREACHABLE;
 6210|     56|        }
 6211|     56|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|     44|    {
 6122|     44|        const bool need_skipped_width =
 6123|     44|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 40, False: 4]
  |  Branch (6123:33): [True: 0, False: 4]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|     44|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|     44|        auto [it, prefix_width] = prefix_result;
 6128|     44|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|     44|        std::ptrdiff_t value_width = 0;
 6132|     44|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 44]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|     44|        else {
 6148|     44|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 44, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     44|    }                                                  \
  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6179|     56|    {
 6180|     56|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|     56|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|     56|                          basic_contiguous_scan_context<char_type>>) {
 6184|     56|            auto rd = make_reader<T, char_type>();
 6185|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 6186|     12|                return unexpected(e);
 6187|     12|            }
 6188|       |
 6189|     44|            return impl(rd, range, value);
 6190|     56|        }
 6191|     56|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|     56|            auto rd = make_reader<T, char_type>();
 6193|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|     56|                return unexpected(e);
 6195|     56|            }
 6196|       |
 6197|     56|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|     56|                specs.width != 0) {
 6199|     56|                return impl(rd, range, value);
 6200|     56|            }
 6201|       |
 6202|     56|            auto crange = get_as_contiguous(range);
 6203|     56|            SCN_TRY(it, impl(rd, crange, value));
 6204|     56|            return ranges::next(range.begin(),
 6205|     56|                                ranges::distance(crange.begin(), it));
 6206|     56|        }
 6207|     56|        else {
 6208|     56|            SCN_EXPECT(false);
 6209|     56|            SCN_UNREACHABLE;
 6210|     56|        }
 6211|     56|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6121|     44|    {
 6122|     44|        const bool need_skipped_width =
 6123|     44|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 40, False: 4]
  |  Branch (6123:33): [True: 0, False: 4]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|     44|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|     44|        auto [it, prefix_width] = prefix_result;
 6128|     44|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|     44|        std::ptrdiff_t value_width = 0;
 6132|     44|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 44]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|     44|        else {
 6148|     44|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24, False: 20]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     24|    }                                                  \
  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|     20|                                             specs, value, loc));
 6150|       |
 6151|     20|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 18, False: 2]
  ------------------
 6152|     18|                value_width = calculate_text_width(
 6153|     18|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|     18|                        .view());
 6155|     18|            }
 6156|     20|        }
 6157|       |
 6158|       |        // Read postfix
 6159|     20|        std::ptrdiff_t postfix_width = 0;
 6160|     20|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 20]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|     20|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|     20|                                                 value_width, postfix_width);
 6170|     20|            !e) {
  ------------------
  |  Branch (6170:13): [True: 12, False: 8]
  ------------------
 6171|     12|            return unexpected(e);
 6172|     12|        }
 6173|       |
 6174|      8|        return it;
 6175|     20|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6179|     56|    {
 6180|     56|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|     56|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|     56|                          basic_contiguous_scan_context<char_type>>) {
 6184|     56|            auto rd = make_reader<T, char_type>();
 6185|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 6186|     12|                return unexpected(e);
 6187|     12|            }
 6188|       |
 6189|     44|            return impl(rd, range, value);
 6190|     56|        }
 6191|     56|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|     56|            auto rd = make_reader<T, char_type>();
 6193|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|     56|                return unexpected(e);
 6195|     56|            }
 6196|       |
 6197|     56|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|     56|                specs.width != 0) {
 6199|     56|                return impl(rd, range, value);
 6200|     56|            }
 6201|       |
 6202|     56|            auto crange = get_as_contiguous(range);
 6203|     56|            SCN_TRY(it, impl(rd, crange, value));
 6204|     56|            return ranges::next(range.begin(),
 6205|     56|                                ranges::distance(crange.begin(), it));
 6206|     56|        }
 6207|     56|        else {
 6208|     56|            SCN_EXPECT(false);
 6209|     56|            SCN_UNREACHABLE;
 6210|     56|        }
 6211|     56|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6121|     44|    {
 6122|     44|        const bool need_skipped_width =
 6123|     44|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 40, False: 4]
  |  Branch (6123:33): [True: 0, False: 4]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|     44|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|     44|        auto [it, prefix_width] = prefix_result;
 6128|     44|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|     44|        std::ptrdiff_t value_width = 0;
 6132|     44|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 44]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|     44|        else {
 6148|     44|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24, False: 20]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     24|    }                                                  \
  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|     20|                                             specs, value, loc));
 6150|       |
 6151|     20|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 18, False: 2]
  ------------------
 6152|     18|                value_width = calculate_text_width(
 6153|     18|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|     18|                        .view());
 6155|     18|            }
 6156|     20|        }
 6157|       |
 6158|       |        // Read postfix
 6159|     20|        std::ptrdiff_t postfix_width = 0;
 6160|     20|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 20]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|     20|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|     20|                                                 value_width, postfix_width);
 6170|     20|            !e) {
  ------------------
  |  Branch (6170:13): [True: 12, False: 8]
  ------------------
 6171|     12|            return unexpected(e);
 6172|     12|        }
 6173|       |
 6174|      8|        return it;
 6175|     20|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6179|     56|    {
 6180|     56|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|     56|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|     56|                          basic_contiguous_scan_context<char_type>>) {
 6184|     56|            auto rd = make_reader<T, char_type>();
 6185|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     56|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 44]
  |  |  ------------------
  ------------------
 6186|     12|                return unexpected(e);
 6187|     12|            }
 6188|       |
 6189|     44|            return impl(rd, range, value);
 6190|     56|        }
 6191|     56|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|     56|            auto rd = make_reader<T, char_type>();
 6193|     56|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|     56|                return unexpected(e);
 6195|     56|            }
 6196|       |
 6197|     56|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|     56|                specs.width != 0) {
 6199|     56|                return impl(rd, range, value);
 6200|     56|            }
 6201|       |
 6202|     56|            auto crange = get_as_contiguous(range);
 6203|     56|            SCN_TRY(it, impl(rd, crange, value));
 6204|     56|            return ranges::next(range.begin(),
 6205|     56|                                ranges::distance(crange.begin(), it));
 6206|     56|        }
 6207|     56|        else {
 6208|     56|            SCN_EXPECT(false);
 6209|     56|            SCN_UNREACHABLE;
 6210|     56|        }
 6211|     56|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6121|     44|    {
 6122|     44|        const bool need_skipped_width =
 6123|     44|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 40, False: 4]
  |  Branch (6123:33): [True: 0, False: 4]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|     44|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|     44|        auto [it, prefix_width] = prefix_result;
 6128|     44|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|     44|        std::ptrdiff_t value_width = 0;
 6132|     44|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 44]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|     44|        else {
 6148|     44|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 24, False: 20]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     24|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     24|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     24|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     24|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     24|    }                                                  \
  |  | 3642|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|     44|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|     20|                                             specs, value, loc));
 6150|       |
 6151|     20|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 18, False: 2]
  ------------------
 6152|     18|                value_width = calculate_text_width(
 6153|     18|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|     18|                        .view());
 6155|     18|            }
 6156|     20|        }
 6157|       |
 6158|       |        // Read postfix
 6159|     20|        std::ptrdiff_t postfix_width = 0;
 6160|     20|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 20]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|     20|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|     20|                                                 value_width, postfix_width);
 6170|     20|            !e) {
  ------------------
  |  Branch (6170:13): [True: 12, False: 8]
  ------------------
 6171|     12|            return unexpected(e);
 6172|     12|        }
 6173|       |
 6174|      8|        return it;
 6175|     20|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|  1.11k|    {
 3493|  1.11k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|  1.11k|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|  1.11k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|  1.11k|            if (prefix_result.sign == sign_type::minus_sign) {
 3498|  1.11k|                return unexpected_scan_error(
 3499|  1.11k|                    scan_error::invalid_scanned_value,
 3500|  1.11k|                    "Unexpected '-' sign when parsing an "
 3501|  1.11k|                    "unsigned value");
 3502|  1.11k|            }
 3503|  1.11k|        }
 3504|       |
 3505|  1.11k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 1.11k]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  2.23k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  2.23k|                parse_integer_digits_without_thsep(
 3512|  2.23k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  2.23k|                    prefix_result.parsed_base));
 3514|       |
 3515|  2.23k|        auto buf = make_contiguous_buffer(
 3516|  2.23k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  2.23k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.11k|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  2.23k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|  1.11k|    {
 3493|  1.11k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|  1.11k|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|  1.11k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|  1.11k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3497:17): [True: 0, False: 1.11k]
  ------------------
 3498|      0|                return unexpected_scan_error(
 3499|      0|                    scan_error::invalid_scanned_value,
 3500|      0|                    "Unexpected '-' sign when parsing an "
 3501|      0|                    "unsigned value");
 3502|      0|            }
 3503|  1.11k|        }
 3504|       |
 3505|  1.11k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 1.11k]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  2.23k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  2.23k|                parse_integer_digits_without_thsep(
 3512|  2.23k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  2.23k|                    prefix_result.parsed_base));
 3514|       |
 3515|  2.23k|        auto buf = make_contiguous_buffer(
 3516|  2.23k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  2.23k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|  1.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  1.11k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  1.11k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  1.11k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  1.11k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  1.11k|    }                                                  \
  |  |  |  | 3642|  1.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  2.23k|    }

LLVMFuzzerTestOneInput:
   68|  4.52k|{
   69|  4.52k|    scn::fuzz::run(data, size);
   70|  4.52k|    return 0;
   71|  4.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  4.52k|{
   52|  4.52k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.52k]
  |  Branch (52:35): [True: 0, False: 4.52k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.52k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  4.52k|    run_for_source(sv);
   59|  4.52k|    run_for_source(wsv_reinterpret);
   60|  4.52k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 4.52k, False: 0]
  ------------------
   61|  4.52k|        run_for_source(wsv_transcode);
   62|  4.52k|    }
   63|  4.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.52k|{
   37|  4.52k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.52k|    run_for_type<char_type>(source);
   40|  4.52k|    run_for_type<int>(source);
   41|  4.52k|    run_for_type<unsigned>(source);
   42|  4.52k|    run_for_type<double>(source);
   43|  4.52k|    run_for_type<bool>(source);
   44|  4.52k|    run_for_type<void*>(source);
   45|  4.52k|    run_for_type<std::string>(source);
   46|  4.52k|    run_for_type<std::wstring>(source);
   47|  4.52k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.52k|{
   25|  4.52k|    {
   26|  4.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.52k|    }
   28|  4.52k|    {
   29|  4.52k|        auto _ =
   30|  4.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.52k|    }
   32|  4.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.52k|{
   25|  4.52k|    {
   26|  4.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.52k|    }
   28|  4.52k|    {
   29|  4.52k|        auto _ =
   30|  4.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.52k|    }
   32|  4.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.52k|{
   25|  4.52k|    {
   26|  4.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.52k|    }
   28|  4.52k|    {
   29|  4.52k|        auto _ =
   30|  4.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.52k|    }
   32|  4.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.52k|{
   25|  4.52k|    {
   26|  4.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.52k|    }
   28|  4.52k|    {
   29|  4.52k|        auto _ =
   30|  4.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.52k|    }
   32|  4.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.52k|{
   25|  4.52k|    {
   26|  4.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.52k|    }
   28|  4.52k|    {
   29|  4.52k|        auto _ =
   30|  4.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.52k|    }
   32|  4.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.52k|{
   25|  4.52k|    {
   26|  4.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.52k|    }
   28|  4.52k|    {
   29|  4.52k|        auto _ =
   30|  4.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.52k|    }
   32|  4.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.52k|{
   25|  4.52k|    {
   26|  4.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.52k|    }
   28|  4.52k|    {
   29|  4.52k|        auto _ =
   30|  4.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.52k|    }
   32|  4.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.52k|{
   25|  4.52k|    {
   26|  4.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.52k|    }
   28|  4.52k|    {
   29|  4.52k|        auto _ =
   30|  4.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.52k|    }
   32|  4.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.52k|{
   25|  4.52k|    {
   26|  4.52k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.52k|    }
   28|  4.52k|    {
   29|  4.52k|        auto _ =
   30|  4.52k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.52k|    }
   32|  4.52k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  9.04k|{
   37|  9.04k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  9.04k|    run_for_type<char_type>(source);
   40|  9.04k|    run_for_type<int>(source);
   41|  9.04k|    run_for_type<unsigned>(source);
   42|  9.04k|    run_for_type<double>(source);
   43|  9.04k|    run_for_type<bool>(source);
   44|  9.04k|    run_for_type<void*>(source);
   45|  9.04k|    run_for_type<std::string>(source);
   46|  9.04k|    run_for_type<std::wstring>(source);
   47|  9.04k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  9.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.04k|{
   25|  9.04k|    {
   26|  9.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.04k|    }
   28|  9.04k|    {
   29|  9.04k|        auto _ =
   30|  9.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.04k|    }
   32|  9.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.04k|{
   25|  9.04k|    {
   26|  9.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.04k|    }
   28|  9.04k|    {
   29|  9.04k|        auto _ =
   30|  9.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.04k|    }
   32|  9.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.04k|{
   25|  9.04k|    {
   26|  9.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.04k|    }
   28|  9.04k|    {
   29|  9.04k|        auto _ =
   30|  9.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.04k|    }
   32|  9.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.04k|{
   25|  9.04k|    {
   26|  9.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.04k|    }
   28|  9.04k|    {
   29|  9.04k|        auto _ =
   30|  9.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.04k|    }
   32|  9.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  9.04k|{
   25|  9.04k|    {
   26|  9.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.04k|    }
   28|  9.04k|    {
   29|  9.04k|        auto _ =
   30|  9.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.04k|    }
   32|  9.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  9.04k|{
   25|  9.04k|    {
   26|  9.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.04k|    }
   28|  9.04k|    {
   29|  9.04k|        auto _ =
   30|  9.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.04k|    }
   32|  9.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  9.04k|{
   25|  9.04k|    {
   26|  9.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.04k|    }
   28|  9.04k|    {
   29|  9.04k|        auto _ =
   30|  9.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.04k|    }
   32|  9.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  9.04k|{
   25|  9.04k|    {
   26|  9.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.04k|    }
   28|  9.04k|    {
   29|  9.04k|        auto _ =
   30|  9.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.04k|    }
   32|  9.04k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  9.04k|{
   25|  9.04k|    {
   26|  9.04k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  9.04k|    }
   28|  9.04k|    {
   29|  9.04k|        auto _ =
   30|  9.04k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  9.04k|    }
   32|  9.04k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.52k|{
   52|  4.52k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  4.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.52k|    string_buffer.resize(size);
   56|  4.52k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.52k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.52k|    const auto wsv_reinterpret_size =
   61|  4.52k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 96, False: 4.42k]
  ------------------
   62|  4.52k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.52k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.52k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.52k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.52k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.52k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.52k|}

