_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIwcEEDaSL_SV_:
  859|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  13.5M|{
 3807|  13.5M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  13.5M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  13.5M|    }
 3810|  13.5M|    else if constexpr (sizeof(U) == 2) {
 3811|  13.5M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  13.5M|    }
 3813|  13.5M|    else {
 3814|       |        // utf-32
 3815|  13.5M|        static_assert(sizeof(U) == 4);
 3816|  13.5M|        SCN_UNUSED(ch);
 3817|  13.5M|        return 1;
 3818|  13.5M|    }
 3819|  13.5M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  13.5M|{
 3771|  13.5M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  13.5M|    SCN_GCC_COMPAT_PUSH
 3774|  13.5M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  13.5M|    constexpr char lengths[] =
 3776|  13.5M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  13.5M|        "\1\1\1\1\1\1\1\1"
 3778|  13.5M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  13.5M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  13.5M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  13.5M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  13.5M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  13.5M|    SCN_GCC_COMPAT_POP
 3785|  13.5M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  12.3M|{
 4013|  12.3M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  12.3M|        return decode_utf8_code_point_exhaustive(input);
 4015|  12.3M|    }
 4016|  12.3M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  12.3M|        return decode_utf16_code_point_exhaustive(input);
 4018|  12.3M|    }
 4019|  12.3M|    else {
 4020|  12.3M|        SCN_EXPECT(input.size() == 1);
 4021|  12.3M|        auto cp = static_cast<char32_t>(input.front());
 4022|  12.3M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  12.3M|            return invalid_code_point;
 4024|  12.3M|        }
 4025|  12.3M|        return cp;
 4026|  12.3M|    }
 4027|  12.3M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  12.3M|{
 3826|  12.3M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  12.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  12.3M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  12.3M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  12.3M|    };
 3831|       |
 3832|  12.3M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 11.1M, False: 1.23M]
  ------------------
 3833|  11.1M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 126, False: 11.1M]
  ------------------
 3834|    126|            SCN_UNLIKELY_ATTR
 3835|    126|            return invalid_code_point;
 3836|    126|        }
 3837|  11.1M|        return static_cast<char32_t>(input[0]);
 3838|  11.1M|    }
 3839|       |
 3840|  1.23M|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 1.17M, False: 59.1k]
  ------------------
 3841|  1.17M|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 78, False: 1.17M]
  ------------------
 3842|     78|            SCN_UNLIKELY_ATTR
 3843|     78|            return invalid_code_point;
 3844|     78|        }
 3845|  1.17M|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 21.4k, False: 1.15M]
  ------------------
 3846|  21.4k|            SCN_UNLIKELY_ATTR
 3847|  21.4k|            return invalid_code_point;
 3848|  21.4k|        }
 3849|       |
 3850|  1.15M|        char32_t cp{};
 3851|  1.15M|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  1.15M|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  1.15M|        return cp;
 3854|  1.17M|    }
 3855|       |
 3856|  59.1k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 42.9k, False: 16.2k]
  ------------------
 3857|  42.9k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 6, False: 42.9k]
  ------------------
 3858|      6|            SCN_UNLIKELY_ATTR
 3859|      6|            return invalid_code_point;
 3860|      6|        }
 3861|  42.9k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 13.3k, False: 29.5k]
  ------------------
 3862|  42.9k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.90k, False: 27.6k]
  ------------------
 3863|  15.2k|            SCN_UNLIKELY_ATTR
 3864|  15.2k|            return invalid_code_point;
 3865|  15.2k|        }
 3866|       |
 3867|  27.6k|        char32_t cp{};
 3868|  27.6k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  27.6k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  27.6k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  27.6k|        return cp;
 3872|  42.9k|    }
 3873|       |
 3874|  16.2k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 16.2k, False: 0]
  ------------------
 3875|  16.2k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 16.2k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  16.2k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 6.87k, False: 9.32k]
  ------------------
 3880|  6.87k|            SCN_UNLIKELY_ATTR
 3881|  6.87k|            return invalid_code_point;
 3882|  6.87k|        }
 3883|  9.32k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 2.17k, False: 7.15k]
  ------------------
 3884|  9.32k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 797, False: 6.35k]
  ------------------
 3885|  9.32k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 543, False: 5.81k]
  ------------------
 3886|  3.51k|            SCN_UNLIKELY_ATTR
 3887|  3.51k|            return invalid_code_point;
 3888|  3.51k|        }
 3889|       |
 3890|  5.81k|        char32_t cp{};
 3891|  5.81k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  5.81k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  5.81k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  5.81k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  5.81k|        return cp;
 3896|  9.32k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  1.27M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  1.27M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  1.27M|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  5.77M|{
 3699|  5.77M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  5.77M|                                          decltype(first), decltype(last)> &&
 3701|  5.77M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  5.77M|        return {first, last};
 3703|  5.77M|    }
 3704|  5.77M|    else {
 3705|  5.77M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  5.77M|                                       to_address(first), to_address(last)))};
 3707|  5.77M|    }
 3708|  5.77M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  17.4M|{
  326|  17.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  17.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  17.4M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  17.4M|{
  304|  17.4M|    return p;
  305|  17.4M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  4.12M|{
 3730|  4.12M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  4.12M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  4.12M|                      decltype(it)> &&
 3733|  4.12M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  4.12M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  4.12M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  4.12M|        return it;
 3736|  4.12M|    }
 3737|  4.12M|    else {
 3738|  4.12M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  4.12M|    }
 3740|  4.12M|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  11.5k|{
 8867|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  11.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  11.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5395|  23.0k|{
 5396|  23.0k|    detail::check_scan_arg_types<Args...>();
 5397|  23.0k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5134|  23.0k|{
 5135|  23.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  23.0k|                  "Scan argument types must be default constructible");
 5137|  23.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  23.0k|                  "Scan argument types must be Destructible");
 5139|  23.0k|    static_assert(
 5140|  23.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  23.0k|        "Scan argument types must not be references");
 5142|  23.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5348|  23.0k|    {
 5349|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  23.0k|    {
 5360|  23.0k|        return {detail::make_arg<
 5361|  23.0k|            kind, Context,
 5362|  23.0k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.0k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5169|  23.0k|{
 5170|  23.0k|    return make_value<Context>(value).ref_value;
 5171|  23.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5119|  23.0k|{
 5120|  23.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.0k|                                  needs_context_tag>) {
 5124|  23.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.0k|    }
 5126|  23.0k|    else {
 5127|  23.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.0k|            value, context_tag<Context>{}));
 5129|  23.0k|    }
 5130|  23.0k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4987|  23.0k|    {
 4988|  23.0k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4988:23): [Folded - Ignored]
  |  Branch (4988:23): [Folded - Ignored]
  ------------------
 4989|  23.0k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4989:23): [Folded - Ignored]
  ------------------
 4990|  23.0k|            return val;
 4991|  23.0k|        }
 4992|  23.0k|        else if constexpr (is_type_disabled<char_type>) {
 4993|  23.0k|            return unscannable_disabled{val};
 4994|  23.0k|        }
 4995|  23.0k|        else {
 4996|  23.0k|            SCN_UNUSED(val);
 4997|  23.0k|            return unscannable_char{};
 4998|  23.0k|        }
 4999|  23.0k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5088|  23.0k|{
 5089|  23.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  23.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  23.0k|    constexpr bool scannable_char =
 5093|  23.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  23.0k|    static_assert(scannable_char,
 5095|  23.0k|                  "Cannot scan an argument of an unsupported character "
 5096|  23.0k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  23.0k|    constexpr bool scannable_const =
 5099|  23.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  23.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  23.0k|    constexpr bool scannable_disabled =
 5103|  23.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  23.0k|    static_assert(scannable_disabled,
 5105|  23.0k|                  "Cannot scan an argument that has been disabled by "
 5106|  23.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  23.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  23.0k|    static_assert(
 5110|  23.0k|        scannable,
 5111|  23.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  23.0k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  23.0k|    return arg_value{arg};
 5115|  23.0k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4901|  23.0k|    {
 4902|  23.0k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   103k|{
 8654|   103k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   103k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|   103k|{
 8591|   103k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   103k|    auto result = vscan_impl(buffer, format, args);
 8594|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 101k, False: 1.89k]
  |  |  ------------------
  ------------------
 8595|   101k|        return unexpected(result.error());
 8596|   101k|    }
 8597|  1.89k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   103k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4719|   207k|{
 4720|   207k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   207k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   207k|                  "\n"
 4724|   207k|                  "Unsupported range type given as input to a scanning "
 4725|   207k|                  "function.\n"
 4726|   207k|                  "A range needs to have a character type (value type) "
 4727|   207k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   207k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   207k|                  "to be included.\n"
 4730|   207k|                  "See the scnlib documentation for more details.");
 4731|   207k|    static_assert(
 4732|   207k|        !std::is_same_v<T, custom_char_traits>,
 4733|   207k|        "\n"
 4734|   207k|        "Unsupported range type given as input to a scanning "
 4735|   207k|        "function.\n"
 4736|   207k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   207k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   207k|        "not supported.");
 4739|   207k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   207k|                  "\n"
 4741|   207k|                  "Unsupported range type given as input to a scanning "
 4742|   207k|                  "function.\n"
 4743|   207k|                  "file_marker_found cannot be used as an "
 4744|   207k|                  "source range type to scn::scan.\n"
 4745|   207k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   207k|                  "and do not provide an explicit source range, "
 4747|   207k|                  "or use scn::scan with a FILE* directly.");
 4748|   207k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   207k|                  "\n"
 4750|   207k|                  "Unsupported range type given as input to a scanning "
 4751|   207k|                  "function.\n"
 4752|   207k|                  "In order to be scannable, a range needs to satisfy "
 4753|   207k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   207k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   207k|                  "\n"
 4756|   207k|                  "Unsupported range type given as input to a scanning "
 4757|   207k|                  "function.\n"
 4758|   207k|                  "A range needs to model forward_range and have a valid "
 4759|   207k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   207k|                  "Examples of scannable ranges are std::string, "
 4761|   207k|                  "std::string_view, "
 4762|   207k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   207k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   207k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   207k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   207k|{
 4612|   207k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   207k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   207k|    }
 4616|   207k|    else {
 4617|   207k|        return invalid_char_type{};
 4618|   207k|    }
 4619|   207k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   626k|    {
 1598|   626k|        return has_value();
 1599|   626k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.25M|    {
  485|  1.25M|        return m_has_value;
  486|  1.25M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   621k|    {
 1604|   621k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   621k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   621k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   621k|        return this->get_unexpected().error();
 1606|   621k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   621k|    {
  468|   621k|        return m_unexpected;
  469|   621k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  3.77M|    {
  361|  3.77M|        return m_unexpected;
  362|  3.77M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|  2.12M|    {
  347|  2.12M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.12M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.12M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   203k|    {
 1476|   203k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   203k|    {
  447|   203k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|  2.19M|    {
  356|  2.19M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.19M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.19M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   207k|    {
 1177|   207k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|  3.78k|{
 5923|  3.78k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  3.78k|                      ranges::iterator_t<SourceRange>>) {
 5925|  3.78k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  3.78k|    }
 5927|  3.78k|    else {
 5928|  3.78k|        auto it = ranges::begin(source);
 5929|  3.78k|        while (n > 0) {
 5930|  3.78k|            --n;
 5931|  3.78k|            ++it;
 5932|  3.78k|        }
 5933|  3.78k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  3.78k|    }
 5935|  3.78k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.78k|    {
 2724|  3.78k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.78k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.78k|    {
 2705|  3.78k|        return decay_copy(t.begin());
 2706|  3.78k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  70.2k|{
 1949|  70.2k|    return SCN_FWD(t);
  ------------------
  |  |  930|  70.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  70.2k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5909|  3.78k|{
 5910|  3.78k|    return ranges::end(source);
 5911|  3.78k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.78k|    {
 2781|  3.78k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.78k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.78k|    {
 2763|  3.78k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.78k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  1.53M|    {
 3316|  1.53M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|  4.78k|    {
 1653|  4.78k|        return value();
 1654|  4.78k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|  4.78k|    {
 1627|  4.78k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.78k|        return this->get_value();
 1629|  4.78k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.78k|    {
  451|  4.78k|        return m_value;
  452|  4.78k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  3.78k|    {
 1430|  3.78k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  3.78k|    {
  437|  3.78k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7974|  23.0k|    {
 7975|  23.0k|        return m_str;
 7976|  23.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.0k|    {
 5426|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5378|  23.0k|    {
 5379|  23.0k|        return m_argptrs;
 5380|  23.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   207k|    {
 5478|   207k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  23.0k|{
 8820|  23.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.8k, False: 206]
  |  |  ------------------
  ------------------
 8821|  22.8k|        return unexpected(result.error());
 8822|  22.8k|    }
 8823|    206|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    206|    static_cast<    \
  |  |  929|    206|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    206|    static_cast<    \
  |  |  929|    206|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.0k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   207k|    {
 1598|   207k|        return has_value();
 1599|   207k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   414k|    {
  485|   414k|        return m_has_value;
  486|   414k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   203k|    {
 1604|   203k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   203k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   203k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   203k|        return this->get_unexpected().error();
 1606|   203k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   203k|    {
  468|   203k|        return m_unexpected;
  469|   203k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  22.8k|    {
 1476|  22.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  22.8k|    {
  447|  22.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.0k|    {
 1177|  23.0k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  3.78k|    {
 1653|  3.78k|        return value();
 1654|  3.78k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.78k|    {
 1627|  3.78k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.78k|        return this->get_value();
 1629|  3.78k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.78k|    {
  451|  3.78k|        return m_value;
  452|  3.78k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5829|    206|    {
 5830|    206|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|  3.78k|    {
 5681|  3.78k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5615|    206|    {
 5616|    206|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    206|    {
 1430|    206|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    206|    {
  437|    206|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5373|  23.0k|    {
 5374|  23.0k|        return m_args;
 5375|  23.0k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   207k|{
 7691|   207k|    return s;
 7692|   207k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   207k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  23.0k|    {
 7971|  23.0k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  11.5k|{
 8934|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  11.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  11.5k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   103k|{
 8672|   103k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   103k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|   103k|{
 8607|   103k|#if !SCN_DISABLE_LOCALE
 8608|   103k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   103k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   103k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   103k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   103k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 101k, False: 1.89k]
  |  |  ------------------
  ------------------
 8615|   101k|        return unexpected(result.error());
 8616|   101k|    }
 8617|  1.89k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   103k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  11.5k|{
 8867|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  11.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  11.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5395|  23.0k|{
 5396|  23.0k|    detail::check_scan_arg_types<Args...>();
 5397|  23.0k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5134|  69.1k|{
 5135|  69.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  69.1k|                  "Scan argument types must be default constructible");
 5137|  69.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  69.1k|                  "Scan argument types must be Destructible");
 5139|  69.1k|    static_assert(
 5140|  69.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  69.1k|        "Scan argument types must not be references");
 5142|  69.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5348|  23.0k|    {
 5349|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  23.0k|    {
 5360|  23.0k|        return {detail::make_arg<
 5361|  23.0k|            kind, Context,
 5362|  23.0k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.0k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  23.0k|{
 5170|  23.0k|    return make_value<Context>(value).ref_value;
 5171|  23.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5119|  23.0k|{
 5120|  23.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.0k|                                  needs_context_tag>) {
 5124|  23.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.0k|    }
 5126|  23.0k|    else {
 5127|  23.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.0k|            value, context_tag<Context>{}));
 5129|  23.0k|    }
 5130|  23.0k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4958|  23.0k|    {                                                                        \
 4959|  23.0k|        return val;                                                          \
 4960|  23.0k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5088|  69.1k|{
 5089|  69.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  69.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  69.1k|    constexpr bool scannable_char =
 5093|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  69.1k|    static_assert(scannable_char,
 5095|  69.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  69.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  69.1k|    constexpr bool scannable_const =
 5099|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  69.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  69.1k|    constexpr bool scannable_disabled =
 5103|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  69.1k|    static_assert(scannable_disabled,
 5105|  69.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  69.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  69.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  69.1k|    static_assert(
 5110|  69.1k|        scannable,
 5111|  69.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  69.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  69.1k|    return arg_value{arg};
 5115|  69.1k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4901|  69.1k|    {
 4902|  69.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7974|  23.0k|    {
 7975|  23.0k|        return m_str;
 7976|  23.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.0k|    {
 5426|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5378|  23.0k|    {
 5379|  23.0k|        return m_argptrs;
 5380|  23.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  23.0k|{
 8820|  23.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.0k, False: 0]
  |  |  ------------------
  ------------------
 8821|  23.0k|        return unexpected(result.error());
 8822|  23.0k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  23.0k|    {
 1476|  23.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  23.0k|    {
  447|  23.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.0k|    {
 1177|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5373|  23.0k|    {
 5374|  23.0k|        return m_args;
 5375|  23.0k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  23.0k|    {
 7971|  23.0k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  11.5k|{
 8934|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  11.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  11.5k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  11.5k|{
 8867|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  11.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  11.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5395|  23.0k|{
 5396|  23.0k|    detail::check_scan_arg_types<Args...>();
 5397|  23.0k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5134|  69.1k|{
 5135|  69.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  69.1k|                  "Scan argument types must be default constructible");
 5137|  69.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  69.1k|                  "Scan argument types must be Destructible");
 5139|  69.1k|    static_assert(
 5140|  69.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  69.1k|        "Scan argument types must not be references");
 5142|  69.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5348|  23.0k|    {
 5349|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  23.0k|    {
 5360|  23.0k|        return {detail::make_arg<
 5361|  23.0k|            kind, Context,
 5362|  23.0k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.0k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  23.0k|{
 5170|  23.0k|    return make_value<Context>(value).ref_value;
 5171|  23.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5119|  23.0k|{
 5120|  23.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.0k|                                  needs_context_tag>) {
 5124|  23.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.0k|    }
 5126|  23.0k|    else {
 5127|  23.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.0k|            value, context_tag<Context>{}));
 5129|  23.0k|    }
 5130|  23.0k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4958|  23.0k|    {                                                                        \
 4959|  23.0k|        return val;                                                          \
 4960|  23.0k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5088|  69.1k|{
 5089|  69.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  69.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  69.1k|    constexpr bool scannable_char =
 5093|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  69.1k|    static_assert(scannable_char,
 5095|  69.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  69.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  69.1k|    constexpr bool scannable_const =
 5099|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  69.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  69.1k|    constexpr bool scannable_disabled =
 5103|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  69.1k|    static_assert(scannable_disabled,
 5105|  69.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  69.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  69.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  69.1k|    static_assert(
 5110|  69.1k|        scannable,
 5111|  69.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  69.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  69.1k|    return arg_value{arg};
 5115|  69.1k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4901|  69.1k|    {
 4902|  69.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7974|  23.0k|    {
 7975|  23.0k|        return m_str;
 7976|  23.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.0k|    {
 5426|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5378|  23.0k|    {
 5379|  23.0k|        return m_argptrs;
 5380|  23.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  23.0k|{
 8820|  23.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.0k, False: 0]
  |  |  ------------------
  ------------------
 8821|  23.0k|        return unexpected(result.error());
 8822|  23.0k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  23.0k|    {
 1476|  23.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  23.0k|    {
  447|  23.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.0k|    {
 1177|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5373|  23.0k|    {
 5374|  23.0k|        return m_args;
 5375|  23.0k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  23.0k|    {
 7971|  23.0k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  11.5k|{
 8934|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  11.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  11.5k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  11.5k|{
 8867|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  11.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  11.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|  23.0k|{
 5396|  23.0k|    detail::check_scan_arg_types<Args...>();
 5397|  23.0k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  69.1k|{
 5135|  69.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  69.1k|                  "Scan argument types must be default constructible");
 5137|  69.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  69.1k|                  "Scan argument types must be Destructible");
 5139|  69.1k|    static_assert(
 5140|  69.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  69.1k|        "Scan argument types must not be references");
 5142|  69.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5348|  23.0k|    {
 5349|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  23.0k|    {
 5360|  23.0k|        return {detail::make_arg<
 5361|  23.0k|            kind, Context,
 5362|  23.0k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.0k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  23.0k|{
 5170|  23.0k|    return make_value<Context>(value).ref_value;
 5171|  23.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|  23.0k|{
 5120|  23.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.0k|                                  needs_context_tag>) {
 5124|  23.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.0k|    }
 5126|  23.0k|    else {
 5127|  23.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.0k|            value, context_tag<Context>{}));
 5129|  23.0k|    }
 5130|  23.0k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|  23.0k|    {                                                                        \
 4959|  23.0k|        return val;                                                          \
 4960|  23.0k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  69.1k|{
 5089|  69.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  69.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  69.1k|    constexpr bool scannable_char =
 5093|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  69.1k|    static_assert(scannable_char,
 5095|  69.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  69.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  69.1k|    constexpr bool scannable_const =
 5099|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  69.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  69.1k|    constexpr bool scannable_disabled =
 5103|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  69.1k|    static_assert(scannable_disabled,
 5105|  69.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  69.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  69.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  69.1k|    static_assert(
 5110|  69.1k|        scannable,
 5111|  69.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  69.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  69.1k|    return arg_value{arg};
 5115|  69.1k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4901|  69.1k|    {
 4902|  69.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7974|  23.0k|    {
 7975|  23.0k|        return m_str;
 7976|  23.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.0k|    {
 5426|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|  23.0k|    {
 5379|  23.0k|        return m_argptrs;
 5380|  23.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  23.0k|{
 8820|  23.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.0k, False: 0]
  |  |  ------------------
  ------------------
 8821|  23.0k|        return unexpected(result.error());
 8822|  23.0k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  23.0k|    {
 1476|  23.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  23.0k|    {
  447|  23.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.0k|    {
 1177|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|  23.0k|    {
 5374|  23.0k|        return m_args;
 5375|  23.0k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  23.0k|    {
 7971|  23.0k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  11.5k|{
 8934|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  11.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  11.5k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  11.5k|{
 8867|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  11.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  11.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5395|  23.0k|{
 5396|  23.0k|    detail::check_scan_arg_types<Args...>();
 5397|  23.0k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5134|  69.1k|{
 5135|  69.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  69.1k|                  "Scan argument types must be default constructible");
 5137|  69.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  69.1k|                  "Scan argument types must be Destructible");
 5139|  69.1k|    static_assert(
 5140|  69.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  69.1k|        "Scan argument types must not be references");
 5142|  69.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5348|  23.0k|    {
 5349|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  23.0k|    {
 5360|  23.0k|        return {detail::make_arg<
 5361|  23.0k|            kind, Context,
 5362|  23.0k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.0k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  23.0k|{
 5170|  23.0k|    return make_value<Context>(value).ref_value;
 5171|  23.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5119|  23.0k|{
 5120|  23.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.0k|                                  needs_context_tag>) {
 5124|  23.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.0k|    }
 5126|  23.0k|    else {
 5127|  23.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.0k|            value, context_tag<Context>{}));
 5129|  23.0k|    }
 5130|  23.0k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4958|  23.0k|    {                                                                        \
 4959|  23.0k|        return val;                                                          \
 4960|  23.0k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5088|  69.1k|{
 5089|  69.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  69.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  69.1k|    constexpr bool scannable_char =
 5093|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  69.1k|    static_assert(scannable_char,
 5095|  69.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  69.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  69.1k|    constexpr bool scannable_const =
 5099|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  69.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  69.1k|    constexpr bool scannable_disabled =
 5103|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  69.1k|    static_assert(scannable_disabled,
 5105|  69.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  69.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  69.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  69.1k|    static_assert(
 5110|  69.1k|        scannable,
 5111|  69.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  69.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  69.1k|    return arg_value{arg};
 5115|  69.1k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4901|  69.1k|    {
 4902|  69.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7974|  23.0k|    {
 7975|  23.0k|        return m_str;
 7976|  23.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.0k|    {
 5426|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5378|  23.0k|    {
 5379|  23.0k|        return m_argptrs;
 5380|  23.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  23.0k|{
 8820|  23.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.0k, False: 0]
  |  |  ------------------
  ------------------
 8821|  23.0k|        return unexpected(result.error());
 8822|  23.0k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  23.0k|    {
 1476|  23.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  23.0k|    {
  447|  23.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.0k|    {
 1177|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5373|  23.0k|    {
 5374|  23.0k|        return m_args;
 5375|  23.0k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  23.0k|    {
 7971|  23.0k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  11.5k|{
 8934|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  11.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  11.5k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8866|  11.5k|{
 8867|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  11.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  11.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5395|  23.0k|{
 5396|  23.0k|    detail::check_scan_arg_types<Args...>();
 5397|  23.0k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5134|  69.1k|{
 5135|  69.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  69.1k|                  "Scan argument types must be default constructible");
 5137|  69.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  69.1k|                  "Scan argument types must be Destructible");
 5139|  69.1k|    static_assert(
 5140|  69.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  69.1k|        "Scan argument types must not be references");
 5142|  69.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5348|  23.0k|    {
 5349|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  23.0k|    {
 5360|  23.0k|        return {detail::make_arg<
 5361|  23.0k|            kind, Context,
 5362|  23.0k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.0k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  23.0k|{
 5170|  23.0k|    return make_value<Context>(value).ref_value;
 5171|  23.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5119|  23.0k|{
 5120|  23.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.0k|                                  needs_context_tag>) {
 5124|  23.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.0k|    }
 5126|  23.0k|    else {
 5127|  23.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.0k|            value, context_tag<Context>{}));
 5129|  23.0k|    }
 5130|  23.0k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4958|  23.0k|    {                                                                        \
 4959|  23.0k|        return val;                                                          \
 4960|  23.0k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5088|  69.1k|{
 5089|  69.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  69.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  69.1k|    constexpr bool scannable_char =
 5093|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  69.1k|    static_assert(scannable_char,
 5095|  69.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  69.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  69.1k|    constexpr bool scannable_const =
 5099|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  69.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  69.1k|    constexpr bool scannable_disabled =
 5103|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  69.1k|    static_assert(scannable_disabled,
 5105|  69.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  69.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  69.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  69.1k|    static_assert(
 5110|  69.1k|        scannable,
 5111|  69.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  69.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  69.1k|    return arg_value{arg};
 5115|  69.1k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4901|  69.1k|    {
 4902|  69.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7974|  23.0k|    {
 7975|  23.0k|        return m_str;
 7976|  23.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.0k|    {
 5426|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5378|  23.0k|    {
 5379|  23.0k|        return m_argptrs;
 5380|  23.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  23.0k|{
 8820|  23.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.0k, False: 0]
  |  |  ------------------
  ------------------
 8821|  23.0k|        return unexpected(result.error());
 8822|  23.0k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  23.0k|    {
 1476|  23.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  23.0k|    {
  447|  23.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.0k|    {
 1177|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5373|  23.0k|    {
 5374|  23.0k|        return m_args;
 5375|  23.0k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  23.0k|    {
 7971|  23.0k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8933|  11.5k|{
 8934|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  11.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  11.5k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8866|  11.5k|{
 8867|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  11.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  11.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  23.0k|{
 5396|  23.0k|    detail::check_scan_arg_types<Args...>();
 5397|  23.0k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|  69.1k|{
 5135|  69.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  69.1k|                  "Scan argument types must be default constructible");
 5137|  69.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  69.1k|                  "Scan argument types must be Destructible");
 5139|  69.1k|    static_assert(
 5140|  69.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  69.1k|        "Scan argument types must not be references");
 5142|  69.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  23.0k|    {
 5349|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  23.0k|    {
 5360|  23.0k|        return {detail::make_arg<
 5361|  23.0k|            kind, Context,
 5362|  23.0k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.0k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  23.0k|{
 5170|  23.0k|    return make_value<Context>(value).ref_value;
 5171|  23.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  23.0k|{
 5120|  23.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.0k|                                  needs_context_tag>) {
 5124|  23.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.0k|    }
 5126|  23.0k|    else {
 5127|  23.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.0k|            value, context_tag<Context>{}));
 5129|  23.0k|    }
 5130|  23.0k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  23.0k|    {                                                                        \
 4959|  23.0k|        return val;                                                          \
 4960|  23.0k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|  69.1k|{
 5089|  69.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  69.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  69.1k|    constexpr bool scannable_char =
 5093|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  69.1k|    static_assert(scannable_char,
 5095|  69.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  69.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  69.1k|    constexpr bool scannable_const =
 5099|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  69.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  69.1k|    constexpr bool scannable_disabled =
 5103|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  69.1k|    static_assert(scannable_disabled,
 5105|  69.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  69.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  69.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  69.1k|    static_assert(
 5110|  69.1k|        scannable,
 5111|  69.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  69.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  69.1k|    return arg_value{arg};
 5115|  69.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|  69.1k|    {
 4902|  69.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  23.0k|    {
 7975|  23.0k|        return m_str;
 7976|  23.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.0k|    {
 5426|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  23.0k|    {
 5379|  23.0k|        return m_argptrs;
 5380|  23.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  23.0k|{
 8820|  23.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.8k, False: 1.19k]
  |  |  ------------------
  ------------------
 8821|  21.8k|        return unexpected(result.error());
 8822|  21.8k|    }
 8823|  1.19k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.19k|    static_cast<    \
  |  |  929|  1.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.19k|    static_cast<    \
  |  |  929|  1.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  21.8k|    {
 1476|  21.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  21.8k|    {
  626|  21.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  21.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  21.8k|    {
  689|  21.8k|        scn::detail::construct_at(unexpected_ptr(),
  690|  21.8k|                                  std::forward<Args>(args)...);
  691|  21.8k|        m_has_value = false;
  692|  21.8k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|   135k|{
  392|   135k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   135k|        T(std::forward<Args>(args)...);
  394|   135k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  43.7k|    {
  718|  43.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  43.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  43.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.0k|    {
 1177|  23.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  1.19k|    {
 5830|  1.19k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.49k|    {
 5616|  1.49k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.19k|    {
 1430|  1.19k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  1.19k|    {
  616|  1.19k|        construct(std::forward<Args>(args)...);
  617|  1.19k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.19k|    {
  682|  1.19k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.19k|        m_has_value = true;
  684|  1.19k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.19k|{
  392|  1.19k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.19k|        T(std::forward<Args>(args)...);
  394|  1.19k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|  1.19k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.38k|    {
  706|  2.38k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.38k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.38k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|  2.38k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  23.0k|    {
 5374|  23.0k|        return m_args;
 5375|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  23.0k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  23.0k|    {
 7971|  23.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  23.0k|    {
  631|  23.0k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.19k, False: 21.8k]
  ------------------
  632|  1.19k|            destroy_value();
  633|  1.19k|        }
  634|  21.8k|        else {
  635|  21.8k|            destroy_unexpected();
  636|  21.8k|        }
  637|  23.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  23.0k|    {
  675|  23.0k|        return m_has_value;
  676|  23.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.19k|    {
  696|  1.19k|        scn::detail::destroy_at(value_ptr());
  697|  1.19k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|  1.19k|{
  398|  1.19k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  1.19k|        for (auto& elem : *p) {
  400|  1.19k|            scn::detail::destroy_at(&elem);
  401|  1.19k|        }
  402|  1.19k|    }
  403|  1.19k|    else {
  404|  1.19k|        p->~T();
  405|  1.19k|    }
  406|  1.19k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  21.8k|    {
  700|  21.8k|        scn::detail::destroy_at(unexpected_ptr());
  701|  21.8k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|   135k|{
  398|   135k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   135k|        for (auto& elem : *p) {
  400|   135k|            scn::detail::destroy_at(&elem);
  401|   135k|        }
  402|   135k|    }
  403|   135k|    else {
  404|   135k|        p->~T();
  405|   135k|    }
  406|   135k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8933|  11.5k|{
 8934|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  11.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  11.5k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8866|  11.5k|{
 8867|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  11.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  11.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  23.0k|{
 5396|  23.0k|    detail::check_scan_arg_types<Args...>();
 5397|  23.0k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  69.1k|{
 5135|  69.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  69.1k|                  "Scan argument types must be default constructible");
 5137|  69.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  69.1k|                  "Scan argument types must be Destructible");
 5139|  69.1k|    static_assert(
 5140|  69.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  69.1k|        "Scan argument types must not be references");
 5142|  69.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  23.0k|    {
 5349|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  23.0k|    {
 5360|  23.0k|        return {detail::make_arg<
 5361|  23.0k|            kind, Context,
 5362|  23.0k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.0k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  23.0k|{
 5170|  23.0k|    return make_value<Context>(value).ref_value;
 5171|  23.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  23.0k|{
 5120|  23.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.0k|                                  needs_context_tag>) {
 5124|  23.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.0k|    }
 5126|  23.0k|    else {
 5127|  23.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.0k|            value, context_tag<Context>{}));
 5129|  23.0k|    }
 5130|  23.0k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  23.0k|    {                                                                        \
 4959|  23.0k|        return val;                                                          \
 4960|  23.0k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  69.1k|{
 5089|  69.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  69.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  69.1k|    constexpr bool scannable_char =
 5093|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  69.1k|    static_assert(scannable_char,
 5095|  69.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  69.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  69.1k|    constexpr bool scannable_const =
 5099|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  69.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  69.1k|    constexpr bool scannable_disabled =
 5103|  69.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  69.1k|    static_assert(scannable_disabled,
 5105|  69.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  69.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  69.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  69.1k|    static_assert(
 5110|  69.1k|        scannable,
 5111|  69.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  69.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  69.1k|    return arg_value{arg};
 5115|  69.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  69.1k|    {
 4902|  69.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  23.0k|    {
 7975|  23.0k|        return m_str;
 7976|  23.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.0k|    {
 5426|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  23.0k|    {
 5379|  23.0k|        return m_argptrs;
 5380|  23.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  23.0k|{
 8820|  23.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.8k, False: 1.19k]
  |  |  ------------------
  ------------------
 8821|  21.8k|        return unexpected(result.error());
 8822|  21.8k|    }
 8823|  1.19k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.19k|    static_cast<    \
  |  |  929|  1.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.19k|    static_cast<    \
  |  |  929|  1.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  21.8k|    {
 1476|  21.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  21.8k|    {
  626|  21.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  21.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  21.8k|    {
  689|  21.8k|        scn::detail::construct_at(unexpected_ptr(),
  690|  21.8k|                                  std::forward<Args>(args)...);
  691|  21.8k|        m_has_value = false;
  692|  21.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  43.7k|    {
  718|  43.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  43.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  43.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  43.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.0k|    {
 1177|  23.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  1.19k|    {
 5830|  1.19k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  1.49k|    {
 5616|  1.49k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.19k|    {
 1430|  1.19k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  1.19k|    {
  616|  1.19k|        construct(std::forward<Args>(args)...);
  617|  1.19k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.19k|    {
  682|  1.19k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.19k|        m_has_value = true;
  684|  1.19k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.19k|{
  392|  1.19k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.19k|        T(std::forward<Args>(args)...);
  394|  1.19k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|  1.19k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.38k|    {
  706|  2.38k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.38k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.38k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  2.38k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  23.0k|    {
 5374|  23.0k|        return m_args;
 5375|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  23.0k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  23.0k|    {
 7971|  23.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  23.0k|    {
  631|  23.0k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.19k, False: 21.8k]
  ------------------
  632|  1.19k|            destroy_value();
  633|  1.19k|        }
  634|  21.8k|        else {
  635|  21.8k|            destroy_unexpected();
  636|  21.8k|        }
  637|  23.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  23.0k|    {
  675|  23.0k|        return m_has_value;
  676|  23.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.19k|    {
  696|  1.19k|        scn::detail::destroy_at(value_ptr());
  697|  1.19k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  1.19k|{
  398|  1.19k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  1.19k|        for (auto& elem : *p) {
  400|  1.19k|            scn::detail::destroy_at(&elem);
  401|  1.19k|        }
  402|  1.19k|    }
  403|  1.19k|    else {
  404|  1.19k|        p->~T();
  405|  1.19k|    }
  406|  1.19k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  21.8k|    {
  700|  21.8k|        scn::detail::destroy_at(unexpected_ptr());
  701|  21.8k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8933|  11.5k|{
 8934|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  11.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  11.5k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8866|  11.5k|{
 8867|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  11.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  11.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|  23.0k|{
 5396|  23.0k|    detail::check_scan_arg_types<Args...>();
 5397|  23.0k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  23.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|  23.0k|{
 5135|  23.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  23.0k|                  "Scan argument types must be default constructible");
 5137|  23.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  23.0k|                  "Scan argument types must be Destructible");
 5139|  23.0k|    static_assert(
 5140|  23.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  23.0k|        "Scan argument types must not be references");
 5142|  23.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|  23.0k|    {
 5349|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  23.0k|    {
 5360|  23.0k|        return {detail::make_arg<
 5361|  23.0k|            kind, Context,
 5362|  23.0k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  23.0k|                                 typename Context::char_type>::value>(args)...};
 5364|  23.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|  23.0k|{
 5170|  23.0k|    return make_value<Context>(value).ref_value;
 5171|  23.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|  23.0k|{
 5120|  23.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  23.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  23.0k|                                  needs_context_tag>) {
 5124|  23.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  23.0k|    }
 5126|  23.0k|    else {
 5127|  23.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  23.0k|            value, context_tag<Context>{}));
 5129|  23.0k|    }
 5130|  23.0k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|  23.0k|    {                                                                        \
 4959|  23.0k|        return val;                                                          \
 4960|  23.0k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|  23.0k|{
 5089|  23.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  23.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  23.0k|    constexpr bool scannable_char =
 5093|  23.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  23.0k|    static_assert(scannable_char,
 5095|  23.0k|                  "Cannot scan an argument of an unsupported character "
 5096|  23.0k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  23.0k|    constexpr bool scannable_const =
 5099|  23.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  23.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  23.0k|    constexpr bool scannable_disabled =
 5103|  23.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  23.0k|    static_assert(scannable_disabled,
 5105|  23.0k|                  "Cannot scan an argument that has been disabled by "
 5106|  23.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  23.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  23.0k|    static_assert(
 5110|  23.0k|        scannable,
 5111|  23.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  23.0k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  23.0k|    return arg_value{arg};
 5115|  23.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|  23.0k|    {
 4902|  23.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7974|  23.0k|    {
 7975|  23.0k|        return m_str;
 7976|  23.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  23.0k|    {
 5426|  23.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|  23.0k|    {
 5379|  23.0k|        return m_argptrs;
 5380|  23.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  23.0k|{
 8820|  23.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  23.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.8k, False: 1.19k]
  |  |  ------------------
  ------------------
 8821|  21.8k|        return unexpected(result.error());
 8822|  21.8k|    }
 8823|  1.19k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.19k|    static_cast<    \
  |  |  929|  1.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  1.19k|    static_cast<    \
  |  |  929|  1.19k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  23.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  21.8k|    {
 1476|  21.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  21.8k|    {
  447|  21.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.0k|    {
 1177|  23.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|  1.19k|    {
 5830|  1.19k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|  1.19k|    {
 5616|  1.19k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|  1.19k|    {
 1430|  1.19k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|  1.19k|    {
  437|  1.19k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|  23.0k|    {
 5374|  23.0k|        return m_args;
 5375|  23.0k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|  23.0k|    {
 7971|  23.0k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8933|  11.5k|{
 8934|  11.5k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  11.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  11.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  11.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  11.5k|    static_cast<    \
  |  |  929|  11.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  11.5k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5395|  46.1k|{
 5396|  46.1k|    detail::check_scan_arg_types<Args...>();
 5397|  46.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  46.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5134|  46.1k|{
 5135|  46.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  46.1k|                  "Scan argument types must be default constructible");
 5137|  46.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  46.1k|                  "Scan argument types must be Destructible");
 5139|  46.1k|    static_assert(
 5140|  46.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  46.1k|        "Scan argument types must not be references");
 5142|  46.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5348|  46.1k|    {
 5349|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  46.1k|    {
 5360|  46.1k|        return {detail::make_arg<
 5361|  46.1k|            kind, Context,
 5362|  46.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  46.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  46.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5169|  46.1k|{
 5170|  46.1k|    return make_value<Context>(value).ref_value;
 5171|  46.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5119|  46.1k|{
 5120|  46.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  46.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  46.1k|                                  needs_context_tag>) {
 5124|  46.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  46.1k|    }
 5126|  46.1k|    else {
 5127|  46.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  46.1k|            value, context_tag<Context>{}));
 5129|  46.1k|    }
 5130|  46.1k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4958|  46.1k|    {                                                                        \
 4959|  46.1k|        return val;                                                          \
 4960|  46.1k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5088|  46.1k|{
 5089|  46.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  46.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  46.1k|    constexpr bool scannable_char =
 5093|  46.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  46.1k|    static_assert(scannable_char,
 5095|  46.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  46.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  46.1k|    constexpr bool scannable_const =
 5099|  46.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  46.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  46.1k|    constexpr bool scannable_disabled =
 5103|  46.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  46.1k|    static_assert(scannable_disabled,
 5105|  46.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  46.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  46.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  46.1k|    static_assert(
 5110|  46.1k|        scannable,
 5111|  46.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  46.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  46.1k|    return arg_value{arg};
 5115|  46.1k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4901|  46.1k|    {
 4902|  46.1k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8590|   207k|{
 8591|   207k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   207k|    auto result = vscan_impl(buffer, format, args);
 8594|   207k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 206k, False: 497]
  |  |  ------------------
  ------------------
 8595|   206k|        return unexpected(result.error());
 8596|   206k|    }
 8597|    497|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    497|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   207k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4719|   414k|{
 4720|   414k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   414k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   414k|                  "\n"
 4724|   414k|                  "Unsupported range type given as input to a scanning "
 4725|   414k|                  "function.\n"
 4726|   414k|                  "A range needs to have a character type (value type) "
 4727|   414k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   414k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   414k|                  "to be included.\n"
 4730|   414k|                  "See the scnlib documentation for more details.");
 4731|   414k|    static_assert(
 4732|   414k|        !std::is_same_v<T, custom_char_traits>,
 4733|   414k|        "\n"
 4734|   414k|        "Unsupported range type given as input to a scanning "
 4735|   414k|        "function.\n"
 4736|   414k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   414k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   414k|        "not supported.");
 4739|   414k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   414k|                  "\n"
 4741|   414k|                  "Unsupported range type given as input to a scanning "
 4742|   414k|                  "function.\n"
 4743|   414k|                  "file_marker_found cannot be used as an "
 4744|   414k|                  "source range type to scn::scan.\n"
 4745|   414k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   414k|                  "and do not provide an explicit source range, "
 4747|   414k|                  "or use scn::scan with a FILE* directly.");
 4748|   414k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   414k|                  "\n"
 4750|   414k|                  "Unsupported range type given as input to a scanning "
 4751|   414k|                  "function.\n"
 4752|   414k|                  "In order to be scannable, a range needs to satisfy "
 4753|   414k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   414k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   414k|                  "\n"
 4756|   414k|                  "Unsupported range type given as input to a scanning "
 4757|   414k|                  "function.\n"
 4758|   414k|                  "A range needs to model forward_range and have a valid "
 4759|   414k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   414k|                  "Examples of scannable ranges are std::string, "
 4761|   414k|                  "std::string_view, "
 4762|   414k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   414k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   414k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   414k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4611|   414k|{
 4612|   414k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4612:19): [Folded - Ignored]
  ------------------
 4613|   414k|        return r;
 4614|       |        // return make_string_scan_buffer(r);
 4615|   414k|    }
 4616|   414k|    else {
 4617|   414k|        return invalid_char_type{};
 4618|   414k|    }
 4619|   414k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|   413k|    {
 1476|   413k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|   413k|    {
  447|   413k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   414k|    {
 1177|   414k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5922|    994|{
 5923|    994|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|    994|                      ranges::iterator_t<SourceRange>>) {
 5925|    994|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|    994|    }
 5927|    994|    else {
 5928|    994|        auto it = ranges::begin(source);
 5929|    994|        while (n > 0) {
 5930|    994|            --n;
 5931|    994|            ++it;
 5932|    994|        }
 5933|    994|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|    994|    }
 5935|    994|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    994|    {
 2724|    994|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    994|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    994|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    994|    {
 2705|    994|        return decay_copy(t.begin());
 2706|    994|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  38.9k|{
 1949|  38.9k|    return SCN_FWD(t);
  ------------------
  |  |  930|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  38.9k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5909|    994|{
 5910|    994|    return ranges::end(source);
 5911|    994|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    994|    {
 2781|    994|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    994|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    994|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    994|    {
 2763|    994|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    994|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    994|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|   724k|    {
 3316|   724k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|    994|    {
 1430|    994|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|    994|    {
  437|    994|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7974|  46.1k|    {
 7975|  46.1k|        return m_str;
 7976|  46.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  46.1k|    {
 5426|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5378|  46.1k|    {
 5379|  46.1k|        return m_argptrs;
 5380|  46.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|   414k|    {
 5478|   414k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  46.1k|{
 8820|  46.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 45.9k, False: 106]
  |  |  ------------------
  ------------------
 8821|  45.9k|        return unexpected(result.error());
 8822|  45.9k|    }
 8823|    106|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    106|    static_cast<    \
  |  |  929|    106|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    106|    static_cast<    \
  |  |  929|    106|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  46.1k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   414k|    {
 1598|   414k|        return has_value();
 1599|   414k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   829k|    {
  485|   829k|        return m_has_value;
  486|   829k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   413k|    {
 1604|   413k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   413k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   413k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   413k|        return this->get_unexpected().error();
 1606|   413k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   413k|    {
  468|   413k|        return m_unexpected;
  469|   413k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  45.9k|    {
 1476|  45.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  45.9k|    {
  447|  45.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  46.1k|    {
 1177|  46.1k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|    994|    {
 1653|    994|        return value();
 1654|    994|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|    994|    {
 1627|    994|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    994|        return this->get_value();
 1629|    994|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    994|    {
  451|    994|        return m_value;
  452|    994|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5829|    106|    {
 5830|    106|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|    994|    {
 5681|    994|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5615|    106|    {
 5616|    106|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|    106|    {
 1430|    106|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  436|    106|    {
  437|    106|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5373|  46.1k|    {
 5374|  46.1k|        return m_args;
 5375|  46.1k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|   414k|{
 7696|   414k|    return s;
 7697|   414k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|   414k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  46.1k|    {
 7971|  46.1k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8606|   207k|{
 8607|   207k|#if !SCN_DISABLE_LOCALE
 8608|   207k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   207k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   207k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   207k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   207k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 206k, False: 497]
  |  |  ------------------
  ------------------
 8615|   206k|        return unexpected(result.error());
 8616|   206k|    }
 8617|    497|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    497|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   207k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5395|  46.1k|{
 5396|  46.1k|    detail::check_scan_arg_types<Args...>();
 5397|  46.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  46.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5348|  46.1k|    {
 5349|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  46.1k|    {
 5360|  46.1k|        return {detail::make_arg<
 5361|  46.1k|            kind, Context,
 5362|  46.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  46.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  46.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5169|  46.1k|{
 5170|  46.1k|    return make_value<Context>(value).ref_value;
 5171|  46.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5119|  46.1k|{
 5120|  46.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  46.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  46.1k|                                  needs_context_tag>) {
 5124|  46.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  46.1k|    }
 5126|  46.1k|    else {
 5127|  46.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  46.1k|            value, context_tag<Context>{}));
 5129|  46.1k|    }
 5130|  46.1k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4958|  46.1k|    {                                                                        \
 4959|  46.1k|        return val;                                                          \
 4960|  46.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7974|  46.1k|    {
 7975|  46.1k|        return m_str;
 7976|  46.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  46.1k|    {
 5426|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5378|  46.1k|    {
 5379|  46.1k|        return m_argptrs;
 5380|  46.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  46.1k|{
 8820|  46.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  46.1k|        return unexpected(result.error());
 8822|  46.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  46.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  46.1k|    {
 1476|  46.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  46.1k|    {
  447|  46.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  46.1k|    {
 1177|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5373|  46.1k|    {
 5374|  46.1k|        return m_args;
 5375|  46.1k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  46.1k|    {
 7971|  46.1k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5395|  46.1k|{
 5396|  46.1k|    detail::check_scan_arg_types<Args...>();
 5397|  46.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  46.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5348|  46.1k|    {
 5349|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  46.1k|    {
 5360|  46.1k|        return {detail::make_arg<
 5361|  46.1k|            kind, Context,
 5362|  46.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  46.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  46.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5169|  46.1k|{
 5170|  46.1k|    return make_value<Context>(value).ref_value;
 5171|  46.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5119|  46.1k|{
 5120|  46.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  46.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  46.1k|                                  needs_context_tag>) {
 5124|  46.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  46.1k|    }
 5126|  46.1k|    else {
 5127|  46.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  46.1k|            value, context_tag<Context>{}));
 5129|  46.1k|    }
 5130|  46.1k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4958|  46.1k|    {                                                                        \
 4959|  46.1k|        return val;                                                          \
 4960|  46.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7974|  46.1k|    {
 7975|  46.1k|        return m_str;
 7976|  46.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  46.1k|    {
 5426|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5378|  46.1k|    {
 5379|  46.1k|        return m_argptrs;
 5380|  46.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  46.1k|{
 8820|  46.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  46.1k|        return unexpected(result.error());
 8822|  46.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  46.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  46.1k|    {
 1476|  46.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  46.1k|    {
  447|  46.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  46.1k|    {
 1177|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5373|  46.1k|    {
 5374|  46.1k|        return m_args;
 5375|  46.1k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  46.1k|    {
 7971|  46.1k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|  46.1k|{
 5396|  46.1k|    detail::check_scan_arg_types<Args...>();
 5397|  46.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  46.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5348|  46.1k|    {
 5349|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  46.1k|    {
 5360|  46.1k|        return {detail::make_arg<
 5361|  46.1k|            kind, Context,
 5362|  46.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  46.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  46.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|  46.1k|{
 5170|  46.1k|    return make_value<Context>(value).ref_value;
 5171|  46.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|  46.1k|{
 5120|  46.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  46.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  46.1k|                                  needs_context_tag>) {
 5124|  46.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  46.1k|    }
 5126|  46.1k|    else {
 5127|  46.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  46.1k|            value, context_tag<Context>{}));
 5129|  46.1k|    }
 5130|  46.1k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|  46.1k|    {                                                                        \
 4959|  46.1k|        return val;                                                          \
 4960|  46.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7974|  46.1k|    {
 7975|  46.1k|        return m_str;
 7976|  46.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  46.1k|    {
 5426|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|  46.1k|    {
 5379|  46.1k|        return m_argptrs;
 5380|  46.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  46.1k|{
 8820|  46.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  46.1k|        return unexpected(result.error());
 8822|  46.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  46.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  46.1k|    {
 1476|  46.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  46.1k|    {
  447|  46.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  46.1k|    {
 1177|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|  46.1k|    {
 5374|  46.1k|        return m_args;
 5375|  46.1k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  46.1k|    {
 7971|  46.1k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5395|  46.1k|{
 5396|  46.1k|    detail::check_scan_arg_types<Args...>();
 5397|  46.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  46.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5348|  46.1k|    {
 5349|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|  46.1k|    {
 5360|  46.1k|        return {detail::make_arg<
 5361|  46.1k|            kind, Context,
 5362|  46.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  46.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  46.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5169|  46.1k|{
 5170|  46.1k|    return make_value<Context>(value).ref_value;
 5171|  46.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5119|  46.1k|{
 5120|  46.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  46.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  46.1k|                                  needs_context_tag>) {
 5124|  46.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  46.1k|    }
 5126|  46.1k|    else {
 5127|  46.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  46.1k|            value, context_tag<Context>{}));
 5129|  46.1k|    }
 5130|  46.1k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4958|  46.1k|    {                                                                        \
 4959|  46.1k|        return val;                                                          \
 4960|  46.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7974|  46.1k|    {
 7975|  46.1k|        return m_str;
 7976|  46.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  46.1k|    {
 5426|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5378|  46.1k|    {
 5379|  46.1k|        return m_argptrs;
 5380|  46.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|  46.1k|{
 8820|  46.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  46.1k|        return unexpected(result.error());
 8822|  46.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  46.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|  46.1k|    {
 1476|  46.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|  46.1k|    {
  447|  46.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  46.1k|    {
 1177|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5373|  46.1k|    {
 5374|  46.1k|        return m_args;
 5375|  46.1k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  46.1k|    {
 7971|  46.1k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5395|  46.1k|{
 5396|  46.1k|    detail::check_scan_arg_types<Args...>();
 5397|  46.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  46.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5348|  46.1k|    {
 5349|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5359|  46.1k|    {
 5360|  46.1k|        return {detail::make_arg<
 5361|  46.1k|            kind, Context,
 5362|  46.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  46.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  46.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5169|  46.1k|{
 5170|  46.1k|    return make_value<Context>(value).ref_value;
 5171|  46.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5119|  46.1k|{
 5120|  46.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  46.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  46.1k|                                  needs_context_tag>) {
 5124|  46.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  46.1k|    }
 5126|  46.1k|    else {
 5127|  46.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  46.1k|            value, context_tag<Context>{}));
 5129|  46.1k|    }
 5130|  46.1k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4958|  46.1k|    {                                                                        \
 4959|  46.1k|        return val;                                                          \
 4960|  46.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7974|  46.1k|    {
 7975|  46.1k|        return m_str;
 7976|  46.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  46.1k|    {
 5426|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5378|  46.1k|    {
 5379|  46.1k|        return m_argptrs;
 5380|  46.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8819|  46.1k|{
 8820|  46.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.1k, False: 0]
  |  |  ------------------
  ------------------
 8821|  46.1k|        return unexpected(result.error());
 8822|  46.1k|    }
 8823|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  46.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  46.1k|    {
 1476|  46.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  446|  46.1k|    {
  447|  46.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  46.1k|    {
 1177|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5373|  46.1k|    {
 5374|  46.1k|        return m_args;
 5375|  46.1k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  46.1k|    {
 7971|  46.1k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|  46.1k|{
 5396|  46.1k|    detail::check_scan_arg_types<Args...>();
 5397|  46.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  46.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|  46.1k|    {
 5349|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  46.1k|    {
 5360|  46.1k|        return {detail::make_arg<
 5361|  46.1k|            kind, Context,
 5362|  46.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  46.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  46.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|  46.1k|{
 5170|  46.1k|    return make_value<Context>(value).ref_value;
 5171|  46.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|  46.1k|{
 5120|  46.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  46.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  46.1k|                                  needs_context_tag>) {
 5124|  46.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  46.1k|    }
 5126|  46.1k|    else {
 5127|  46.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  46.1k|            value, context_tag<Context>{}));
 5129|  46.1k|    }
 5130|  46.1k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|  46.1k|    {                                                                        \
 4959|  46.1k|        return val;                                                          \
 4960|  46.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7974|  46.1k|    {
 7975|  46.1k|        return m_str;
 7976|  46.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  46.1k|    {
 5426|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|  46.1k|    {
 5379|  46.1k|        return m_argptrs;
 5380|  46.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  46.1k|{
 8820|  46.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 45.8k, False: 296]
  |  |  ------------------
  ------------------
 8821|  45.8k|        return unexpected(result.error());
 8822|  45.8k|    }
 8823|    296|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    296|    static_cast<    \
  |  |  929|    296|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    296|    static_cast<    \
  |  |  929|    296|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  46.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  45.8k|    {
 1476|  45.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  45.8k|    {
  626|  45.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  45.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  45.8k|    {
  689|  45.8k|        scn::detail::construct_at(unexpected_ptr(),
  690|  45.8k|                                  std::forward<Args>(args)...);
  691|  45.8k|        m_has_value = false;
  692|  45.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  91.6k|    {
  718|  91.6k|        return reinterpret_cast<unexpected<E>*>(
  719|  91.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  91.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  91.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  46.1k|    {
 1177|  46.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    296|    {
 5830|    296|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    296|    {
 1430|    296|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    296|    {
  616|    296|        construct(std::forward<Args>(args)...);
  617|    296|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    296|    {
  682|    296|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    296|        m_has_value = true;
  684|    296|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    296|{
  392|    296|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    296|        T(std::forward<Args>(args)...);
  394|    296|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|    296|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    592|    {
  706|    592|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    592|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    592|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|    592|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|  46.1k|    {
 5374|  46.1k|        return m_args;
 5375|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|  46.1k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  46.1k|    {
 7971|  46.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  46.1k|    {
  631|  46.1k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 296, False: 45.8k]
  ------------------
  632|    296|            destroy_value();
  633|    296|        }
  634|  45.8k|        else {
  635|  45.8k|            destroy_unexpected();
  636|  45.8k|        }
  637|  46.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  46.1k|    {
  675|  46.1k|        return m_has_value;
  676|  46.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    296|    {
  696|    296|        scn::detail::destroy_at(value_ptr());
  697|    296|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|    296|{
  398|    296|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    296|        for (auto& elem : *p) {
  400|    296|            scn::detail::destroy_at(&elem);
  401|    296|        }
  402|    296|    }
  403|    296|    else {
  404|    296|        p->~T();
  405|    296|    }
  406|    296|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  45.8k|    {
  700|  45.8k|        scn::detail::destroy_at(unexpected_ptr());
  701|  45.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  46.1k|{
 5396|  46.1k|    detail::check_scan_arg_types<Args...>();
 5397|  46.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  46.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  46.1k|    {
 5349|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  46.1k|    {
 5360|  46.1k|        return {detail::make_arg<
 5361|  46.1k|            kind, Context,
 5362|  46.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  46.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  46.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  46.1k|{
 5170|  46.1k|    return make_value<Context>(value).ref_value;
 5171|  46.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  46.1k|{
 5120|  46.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  46.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  46.1k|                                  needs_context_tag>) {
 5124|  46.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  46.1k|    }
 5126|  46.1k|    else {
 5127|  46.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  46.1k|            value, context_tag<Context>{}));
 5129|  46.1k|    }
 5130|  46.1k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  46.1k|    {                                                                        \
 4959|  46.1k|        return val;                                                          \
 4960|  46.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7974|  46.1k|    {
 7975|  46.1k|        return m_str;
 7976|  46.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  46.1k|    {
 5426|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  46.1k|    {
 5379|  46.1k|        return m_argptrs;
 5380|  46.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  46.1k|{
 8820|  46.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 45.8k, False: 296]
  |  |  ------------------
  ------------------
 8821|  45.8k|        return unexpected(result.error());
 8822|  45.8k|    }
 8823|    296|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    296|    static_cast<    \
  |  |  929|    296|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    296|    static_cast<    \
  |  |  929|    296|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  46.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  45.8k|    {
 1476|  45.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  45.8k|    {
  626|  45.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  45.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  45.8k|    {
  689|  45.8k|        scn::detail::construct_at(unexpected_ptr(),
  690|  45.8k|                                  std::forward<Args>(args)...);
  691|  45.8k|        m_has_value = false;
  692|  45.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  91.6k|    {
  718|  91.6k|        return reinterpret_cast<unexpected<E>*>(
  719|  91.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  91.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  91.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  46.1k|    {
 1177|  46.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|    296|    {
 5830|    296|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|    296|    {
 1430|    296|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|    296|    {
  616|    296|        construct(std::forward<Args>(args)...);
  617|    296|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|    296|    {
  682|    296|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    296|        m_has_value = true;
  684|    296|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|    296|{
  392|    296|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    296|        T(std::forward<Args>(args)...);
  394|    296|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|    296|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|    592|    {
  706|    592|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    592|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|    592|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|    592|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  46.1k|    {
 5374|  46.1k|        return m_args;
 5375|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  46.1k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  46.1k|    {
 7971|  46.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  46.1k|    {
  631|  46.1k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 296, False: 45.8k]
  ------------------
  632|    296|            destroy_value();
  633|    296|        }
  634|  45.8k|        else {
  635|  45.8k|            destroy_unexpected();
  636|  45.8k|        }
  637|  46.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  46.1k|    {
  675|  46.1k|        return m_has_value;
  676|  46.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    296|    {
  696|    296|        scn::detail::destroy_at(value_ptr());
  697|    296|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|    296|{
  398|    296|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|    296|        for (auto& elem : *p) {
  400|    296|            scn::detail::destroy_at(&elem);
  401|    296|        }
  402|    296|    }
  403|    296|    else {
  404|    296|        p->~T();
  405|    296|    }
  406|    296|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  45.8k|    {
  700|  45.8k|        scn::detail::destroy_at(unexpected_ptr());
  701|  45.8k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  46.1k|{
 5396|  46.1k|    detail::check_scan_arg_types<Args...>();
 5397|  46.1k|    return detail::scan_arg_store<Context, Args...>{};
 5398|  46.1k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  46.1k|{
 5135|  46.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  46.1k|                  "Scan argument types must be default constructible");
 5137|  46.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  46.1k|                  "Scan argument types must be Destructible");
 5139|  46.1k|    static_assert(
 5140|  46.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  46.1k|        "Scan argument types must not be references");
 5142|  46.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  46.1k|    {
 5349|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  46.1k|    {
 5360|  46.1k|        return {detail::make_arg<
 5361|  46.1k|            kind, Context,
 5362|  46.1k|            mapped_type_constant<remove_cvref_t<A>,
 5363|  46.1k|                                 typename Context::char_type>::value>(args)...};
 5364|  46.1k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  46.1k|{
 5170|  46.1k|    return make_value<Context>(value).ref_value;
 5171|  46.1k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  46.1k|{
 5120|  46.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  46.1k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  46.1k|                                  needs_context_tag>) {
 5124|  46.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  46.1k|    }
 5126|  46.1k|    else {
 5127|  46.1k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  46.1k|            value, context_tag<Context>{}));
 5129|  46.1k|    }
 5130|  46.1k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  46.1k|    {                                                                        \
 4959|  46.1k|        return val;                                                          \
 4960|  46.1k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  46.1k|{
 5089|  46.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  46.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  46.1k|    constexpr bool scannable_char =
 5093|  46.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  46.1k|    static_assert(scannable_char,
 5095|  46.1k|                  "Cannot scan an argument of an unsupported character "
 5096|  46.1k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  46.1k|    constexpr bool scannable_const =
 5099|  46.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  46.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  46.1k|    constexpr bool scannable_disabled =
 5103|  46.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  46.1k|    static_assert(scannable_disabled,
 5105|  46.1k|                  "Cannot scan an argument that has been disabled by "
 5106|  46.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  46.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  46.1k|    static_assert(
 5110|  46.1k|        scannable,
 5111|  46.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  46.1k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  46.1k|    return arg_value{arg};
 5115|  46.1k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  46.1k|    {
 4902|  46.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7974|  46.1k|    {
 7975|  46.1k|        return m_str;
 7976|  46.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  46.1k|    {
 5426|  46.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  46.1k|    {
 5379|  46.1k|        return m_argptrs;
 5380|  46.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  46.1k|{
 8820|  46.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 45.8k, False: 296]
  |  |  ------------------
  ------------------
 8821|  45.8k|        return unexpected(result.error());
 8822|  45.8k|    }
 8823|    296|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    296|    static_cast<    \
  |  |  929|    296|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    296|    static_cast<    \
  |  |  929|    296|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  46.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  45.8k|    {
 1476|  45.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  45.8k|    {
  447|  45.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  46.1k|    {
 1177|  46.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|    296|    {
 5830|    296|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|    296|    {
 5616|    296|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|    296|    {
 1430|    296|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|    296|    {
  437|    296|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  46.1k|    {
 5374|  46.1k|        return m_args;
 5375|  46.1k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  46.1k|    {
 7971|  46.1k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|  1.18M|    {
 3568|  1.18M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  1.18M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  1.18M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  7.39M|    {
 3574|  7.39M|        return m_code == good;
 3575|  7.39M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   181k|    {
 3585|   181k|        return m_code;
 3586|   181k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6180|  7.61k|    {
 6181|  7.61k|        return m_size;
 6182|  7.61k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6221|  5.34k|    {
 6222|  5.34k|        SCN_GCC_COMPAT_PUSH
 6223|  5.34k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6224|  5.34k|        switch (type) {
 6225|  2.45k|            case presentation_type::none:
  ------------------
  |  Branch (6225:13): [True: 2.45k, False: 2.88k]
  ------------------
 6226|  2.45k|                return 10;
 6227|     54|            case presentation_type::int_generic:
  ------------------
  |  Branch (6227:13): [True: 54, False: 5.28k]
  ------------------
 6228|     54|                return 0;
 6229|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6229:13): [True: 0, False: 5.34k]
  ------------------
 6230|      0|                return arbitrary_base;
 6231|       |
 6232|     38|            case presentation_type::int_binary:
  ------------------
  |  Branch (6232:13): [True: 38, False: 5.30k]
  ------------------
 6233|     38|                return 2;
 6234|     98|            case presentation_type::int_octal:
  ------------------
  |  Branch (6234:13): [True: 98, False: 5.24k]
  ------------------
 6235|     98|                return 8;
 6236|     36|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6236:13): [True: 36, False: 5.30k]
  ------------------
 6237|    100|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6237:13): [True: 64, False: 5.27k]
  ------------------
 6238|    100|                return 10;
 6239|  2.59k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6239:13): [True: 2.59k, False: 2.74k]
  ------------------
 6240|  2.59k|                return 16;
 6241|       |
 6242|      0|            default:
  ------------------
  |  Branch (6242:13): [True: 0, False: 5.34k]
  ------------------
 6243|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6244|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6245|  5.34k|        }
 6246|  5.34k|        SCN_GCC_COMPAT_POP
 6247|  5.34k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|   192k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6262|  20.7k|    {
 6263|  20.7k|        m_specs.align = align;
 6264|  20.7k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|    616|    {
 6272|    616|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    616|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6272:23): [Folded - Ignored]
  ------------------
 6273|    616|            m_specs.localized = true;
 6274|    616|        }
 6275|      0|        else {
 6276|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|      0|        }
 6278|    616|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  64.0k|    {
 6282|  64.0k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 64.0k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  64.0k|        m_specs.width = width;
 6289|  64.0k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6291|  20.1k|    {
 6292|  20.1k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6292:13): [True: 82, False: 20.1k]
  ------------------
 6293|       |            // clang-format off
 6294|     82|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|     82|        }
 6297|       |
 6298|  20.1k|        m_specs.precision = prec;
 6299|  20.1k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|   267k|    {
 6303|   267k|        m_specs.type = type;
 6304|   267k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6307|  4.36M|    {
 6308|  4.36M|        const auto cp_value = static_cast<unsigned>(cp);
 6309|  4.36M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  4.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.79M, False: 569k]
  |  |  ------------------
  ------------------
 6310|  3.79M|            m_specs.charset_literals[cp_value / 8] |=
 6311|  3.79M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6312|  3.79M|        }
 6313|   569k|        else {
 6314|   569k|            m_specs.charset_has_nonascii = true;
 6315|   569k|        }
 6316|  4.36M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  26.4k|    {
 6320|  26.4k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  26.4k|        const auto end_value = static_cast<unsigned>(end);
 6322|  26.4k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  26.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  26.4k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  26.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 17.5k, False: 8.85k]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  17.5k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  17.5k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|  1.08M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 1.06M, False: 17.5k]
  ------------------
 6329|  1.06M|                m_specs.charset_literals[v / 8] |=
 6330|  1.06M|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|  1.06M|            }
 6332|  17.5k|        }
 6333|  8.85k|        else {
 6334|  8.85k|            m_specs.charset_has_nonascii = true;
 6335|  8.85k|        }
 6336|  26.4k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6339|  4.53k|    {
 6340|  4.53k|        m_specs.charset_is_inverted = true;
 6341|  4.53k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6358|   144k|    {
 6359|   144k|        m_specs.regexp_flags = flags;
 6360|   144k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  13.5k|    {
 6365|  13.5k|        SCN_UNLIKELY_ATTR
 6366|  13.5k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  13.5k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  4.60M|    {
 6376|  4.60M|        return static_cast<bool>(m_error);
 6377|  4.60M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   181k|{
 3609|   181k|    return a.code() == b;
 3610|   181k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   181k|{
 3613|   181k|    return !(a == b);
 3614|   181k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3907|   394k|{
 3908|   394k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3909|       |
 3910|   394k|    const auto is_trailing_code_unit = [](char ch) {
 3911|   394k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|   394k|    };
 3913|       |
 3914|   394k|    if (input.size() == 1) {
  ------------------
  |  Branch (3914:9): [True: 349k, False: 45.3k]
  ------------------
 3915|   349k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   349k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   349k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|   349k|        return static_cast<char32_t>(input[0]);
 3917|   349k|    }
 3918|       |
 3919|  45.3k|    if (input.size() == 2) {
  ------------------
  |  Branch (3919:9): [True: 43.7k, False: 1.55k]
  ------------------
 3920|  43.7k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  43.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3921|  43.7k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  43.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3922|       |
 3923|  43.7k|        char32_t cp{};
 3924|  43.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3925|  43.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3926|  43.7k|        return cp;
 3927|  43.7k|    }
 3928|       |
 3929|  1.55k|    if (input.size() == 3) {
  ------------------
  |  Branch (3929:9): [True: 1.30k, False: 256]
  ------------------
 3930|  1.30k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3931|  1.30k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3932|  1.30k|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|  1.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3933|       |
 3934|  1.30k|        char32_t cp{};
 3935|  1.30k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3936|  1.30k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3937|  1.30k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3938|  1.30k|        return cp;
 3939|  1.30k|    }
 3940|       |
 3941|    256|    if (input.size() == 4) {
  ------------------
  |  Branch (3941:9): [True: 256, False: 0]
  ------------------
 3942|    256|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    256|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    256|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3943|    256|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    256|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    256|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3944|    256|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    256|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    256|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3945|    256|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    256|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    256|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3946|    256|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    256|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    256|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3947|       |
 3948|    256|        char32_t cp{};
 3949|    256|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3950|    256|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3951|    256|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3952|    256|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3953|    256|        return cp;
 3954|    256|    }
 3955|       |
 3956|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3957|       |    // gcc 7 thinks we'll get here, even when we won't
 3958|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3959|      0|#endif
 3960|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3961|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6110|   209k|{
 6111|   209k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6112|   209k|                                    static_cast<unsigned>(b));
 6113|   209k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6115|  24.5k|{
 6116|  24.5k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6117|  24.5k|                                    static_cast<unsigned>(b));
 6118|  24.5k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6130|  24.5k|{
 6131|  24.5k|    return a = a | b;
 6132|  24.5k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  1.51k|{
 7063|  1.51k|    switch (type) {
 7064|    126|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 126, False: 1.39k]
  ------------------
 7065|    126|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 1.51k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 1.51k]
  ------------------
 7069|    154|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 154, False: 1.36k]
  ------------------
 7070|    154|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 1.51k]
  ------------------
 7071|    154|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 1.51k]
  ------------------
 7072|    154|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 1.51k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 1.51k]
  ------------------
 7076|    154|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 154, False: 1.36k]
  ------------------
 7077|    154|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 1.51k]
  ------------------
 7078|    154|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 1.51k]
  ------------------
 7079|    154|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|    154|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 154, False: 1.36k]
  ------------------
 7082|    154|            return arg_type_category::pointer;
 7083|    154|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 154, False: 1.36k]
  ------------------
 7084|    154|            return arg_type_category::boolean;
 7085|     80|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 80, False: 1.43k]
  ------------------
 7086|    154|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 74, False: 1.44k]
  ------------------
 7087|    154|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 1.51k]
  ------------------
 7088|    154|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 1.51k]
  ------------------
 7091|    154|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 154, False: 1.36k]
  ------------------
 7092|    154|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 1.51k]
  ------------------
 7093|    154|            return arg_type_category::floating;
 7094|       |
 7095|     80|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 80, False: 1.43k]
  ------------------
 7096|    236|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 156, False: 1.36k]
  ------------------
 7097|    312|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 76, False: 1.44k]
  ------------------
 7098|    468|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 156, False: 1.36k]
  ------------------
 7099|    468|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 1.51k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 1.51k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  1.51k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  1.51k|            SCN_CLANG_POP
 7110|  1.51k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  1.51k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  1.65k|{
 3654|  1.65k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.65k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.65k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7148|  41.0k|{
 7149|  41.0k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  41.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.3k, False: 2.77k]
  |  |  ------------------
  ------------------
 7150|  38.3k|        return handler.on_error("Invalid type specifier for integer type");
 7151|  38.3k|    }
 7152|  2.77k|    if (specs.localized) {
  ------------------
  |  Branch (7152:9): [True: 168, False: 2.60k]
  ------------------
 7153|    168|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|    168|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 156]
  |  |  ------------------
  ------------------
 7154|       |            // clang-format off
 7155|     12|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7156|       |            // clang-format on
 7157|     12|            return;
 7158|     12|        }
 7159|    156|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 156]
  |  |  ------------------
  ------------------
 7160|       |            // clang-format off
 7161|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7162|       |            // clang-format on
 7163|      0|        }
 7164|    156|    }
 7165|  2.77k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|     52|{
 1949|     52|    return SCN_FWD(t);
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|     52|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  3.91k|{
 3654|  3.91k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  3.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  3.91k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  20.5k|{
 7193|  20.5k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 19.2k, False: 1.24k]
  ------------------
 7194|  20.5k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 146, False: 19.1k]
  ------------------
 7195|  19.2k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 18.9k, False: 154]
  ------------------
 7196|  19.1k|        SCN_UNLIKELY_ATTR
 7197|  19.1k|        return handler.on_error("Invalid type specifier for float type");
 7198|  19.1k|    }
 7199|  20.5k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  484|  92.5k|    {
  485|  92.5k|        return m_has_value;
  486|  92.5k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1597|  46.2k|    {
 1598|  46.2k|        return has_value();
 1599|  46.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  450|  46.2k|    {
  451|  46.2k|        return m_value;
  452|  46.2k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1626|  46.2k|    {
 1627|  46.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  46.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  46.2k|        return this->get_value();
 1629|  46.2k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1662|  46.2k|    {
 1663|  46.2k|        return std::move(value());
 1664|  46.2k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3653|  24.8k|{
 3654|  24.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  24.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  24.8k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3653|  15.6k|{
 3654|  15.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  15.6k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3653|    480|{
 3654|    480|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    480|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    480|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3653|  1.89k|{
 3654|  1.89k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.89k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.89k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  1.95k|{
 3654|  1.95k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.95k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  61.1k|{
 7205|  61.1k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 3.60k, False: 57.5k]
  ------------------
 7206|  61.1k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 786, False: 56.7k]
  ------------------
 7207|  61.1k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 7.74k, False: 49.0k]
  ------------------
 7208|  61.1k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 43.5k, False: 5.53k]
  ------------------
 7209|  61.1k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 4.65k, False: 876]
  ------------------
 7210|  60.3k|        return;
 7211|  60.3k|    }
 7212|    876|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 186, False: 690]
  ------------------
 7213|    186|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 174]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|     12|        }
 7218|    174|        return;
 7219|    186|    }
 7220|    690|    SCN_UNLIKELY_ATTR
 7221|    690|    handler.on_error("Invalid type specifier for string");
 7222|    690|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3653|  5.46k|{
 3654|  5.46k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.46k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.46k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3653|     58|{
 3654|     58|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     58|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|     58|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7238|  20.5k|{
 7239|  20.5k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7239:9): [True: 19.2k, False: 1.24k]
  ------------------
 7240|  20.5k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7240:9): [True: 19.0k, False: 282]
  ------------------
 7241|  20.5k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7241:9): [True: 18.9k, False: 22]
  ------------------
 7242|  20.5k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7242:9): [True: 18.9k, False: 28]
  ------------------
 7243|  20.5k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7243:9): [True: 18.9k, False: 20]
  ------------------
 7244|  20.5k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7244:9): [True: 18.9k, False: 22]
  ------------------
 7245|  20.5k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7245:9): [True: 18.8k, False: 40]
  ------------------
 7246|  20.5k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7246:9): [True: 18.8k, False: 14]
  ------------------
 7247|  18.8k|        SCN_UNLIKELY_ATTR
 7248|  18.8k|        return handler.on_error("Invalid type specifier for boolean");
 7249|  18.8k|    }
 7250|  20.5k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7170|  20.3k|{
 7171|  20.3k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7171:9): [True: 19.0k, False: 1.30k]
  ------------------
 7172|  20.3k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7172:9): [True: 0, False: 1.30k]
  ------------------
 7173|  19.0k|        SCN_UNLIKELY_ATTR
 7174|  19.0k|        return handler.on_error("Invalid type specifier for character type");
 7175|  19.0k|    }
 7176|  20.3k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7227|  20.3k|{
 7228|  20.3k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7228:9): [True: 19.1k, False: 1.20k]
  ------------------
 7229|  20.3k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7229:9): [True: 19.1k, False: 12]
  ------------------
 7230|  19.1k|        SCN_UNLIKELY_ATTR
 7231|  19.1k|        return handler.on_error("Invalid type specifier for pointer");
 7232|  19.1k|    }
 7233|  20.3k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA79_KcEEEDaDpOT_:
 3653|    142|{
 3654|    142|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    142|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|    142|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   174k|{
 3715|   174k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   174k|                                          const CharT*, const CharT*>) {
 3717|   174k|        return {first, last};
 3718|   174k|    }
 3719|   174k|    else {
 3720|   174k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   174k|    }
 3722|   174k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   311k|{
 3715|   311k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   311k|                                          const CharT*, const CharT*>) {
 3717|   311k|        return {first, last};
 3718|   311k|    }
 3719|   311k|    else {
 3720|   311k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   311k|    }
 3722|   311k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  3.69M|    {
 3330|  3.69M|        return m_iterator;
 3331|  3.69M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  4.13M|    {
 3334|  4.13M|        return m_sentinel;
 3335|  4.13M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  1.08M|    {
 3330|  1.08M|        return m_iterator;
 3331|  1.08M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|   855k|    {
 3334|   855k|        return m_sentinel;
 3335|   855k|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|   321k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    112|{
 1211|    112|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    112|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  2.47k|    {
  361|  2.47k|        return m_unexpected;
  362|  2.47k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3653|  5.97k|{
 3654|  5.97k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.97k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|  64.0k|    {
  347|  64.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  64.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  64.0k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   191k|    {
 1476|   191k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   192k|    {
  447|   192k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   233k|    {
 1177|   233k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  38.1k|    {
 1430|  38.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  38.1k|    {
  437|  38.1k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   234k|    {
 1598|   234k|        return has_value();
 1599|   234k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   466k|    {
  485|   466k|        return m_has_value;
  486|   466k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   191k|    {
 1604|   191k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   191k|        return this->get_unexpected().error();
 1606|   191k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   191k|    {
  468|   191k|        return m_unexpected;
  469|   191k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  26.6k|    {
 1663|  26.6k|        return std::move(value());
 1664|  26.6k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  40.7k|    {
 1627|  40.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  40.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  40.7k|        return this->get_value();
 1629|  40.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  40.7k|    {
  451|  40.7k|        return m_value;
  452|  40.7k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|   134k|    {
 1476|   134k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|   135k|    {
  447|   135k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   164k|    {
 1177|   164k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|  27.8k|    {
 1430|  27.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  27.8k|    {
  437|  27.8k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   165k|    {
 1598|   165k|        return has_value();
 1599|   165k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   327k|    {
  485|   327k|        return m_has_value;
  486|   327k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   134k|    {
 1604|   134k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   134k|        return this->get_unexpected().error();
 1606|   134k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   134k|    {
  468|   134k|        return m_unexpected;
  469|   134k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  22.5k|    {
 1663|  22.5k|        return std::move(value());
 1664|  22.5k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|  27.8k|    {
 1627|  27.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  27.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  27.8k|        return this->get_value();
 1629|  27.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  27.8k|    {
  451|  27.8k|        return m_value;
  452|  27.8k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  9.56k|    {
 1837|  9.56k|        return detail::transform_error_impl(std::move(*this),
 1838|  9.56k|                                            std::forward<F>(f));
 1839|  9.56k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  9.56k|{
 1323|  9.56k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  9.56k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  9.56k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  9.56k|            return result(*std::forward<Exp>(exp));
 1327|  9.56k|        }
 1328|       |
 1329|  9.56k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  9.56k|        return result(unexpect, monostate{});
 1331|  9.56k|    }
 1332|  9.56k|    else {
 1333|  9.56k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  9.56k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  9.56k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.56k, False: 0]
  |  |  ------------------
  ------------------
 1335|  9.56k|                   ? result(*std::forward<Exp>(exp))
 1336|  9.56k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  9.56k|    }
 1340|  9.56k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   142k|    {
  485|   142k|        return m_has_value;
  486|   142k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  11.5k|    {
 1663|  11.5k|        return std::move(value());
 1664|  11.5k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  68.0k|    {
 1627|  68.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  68.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  68.0k|        return this->get_value();
 1629|  68.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  68.0k|    {
  451|  68.0k|        return m_value;
  452|  68.0k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|    102|    {
 1614|    102|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    102|        return std::move(this->get_unexpected().error());
 1616|    102|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    102|    {
  468|    102|        return m_unexpected;
  469|    102|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.04k|    {
 1486|  1.04k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|   920k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6186|  6.01k|    {
 6187|  6.01k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  6.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  6.01k|        CharT r{};
 6189|  6.01k|        std::memcpy(&r, m_data, m_size);
 6190|  6.01k|        return r;
 6191|  6.01k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  346|  1.51k|    {
  347|  1.51k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.51k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.51k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  1.62k|    {
  356|  1.62k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.62k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.62k|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6195|    586|    {
 6196|    586|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6197|    586|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2961|     52|    {
 2962|     52|        return fn::impl(std::forward<T>(t));
 2963|     52|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2952|     52|    {
 2953|     52|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|     52|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|     52|    {
 2930|     52|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|     52|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2895|     52|    {
 2896|     52|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     52|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|     52|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|    112|    {
  347|    112|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    112|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|    112|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  346|      8|    {
  347|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  22.8k|    {
  361|  22.8k|        return m_unexpected;
  362|  22.8k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  4.17k|    {
  356|  4.17k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  4.17k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  346|  34.7k|    {
  347|  34.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  34.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  34.7k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  34.7k|    {
  361|  34.7k|        return m_unexpected;
  362|  34.7k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  355|  34.7k|    {
  356|  34.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  34.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  34.7k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|    736|{
 1211|    736|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|    736|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  346|  3.43k|    {
  347|  3.43k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.43k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.43k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|  1.87k|{
 1211|  1.87k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  1.87k|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  16.6k|{
  326|  16.6k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  16.6k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|   111k|    {
 3346|   111k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|   111k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    772|    {
 1476|    772|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    772|    {
  447|    772|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.7k|    {
 1177|  74.7k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  74.0k|    {
 1430|  74.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  74.0k|    {
  437|  74.0k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  63.0k|    {
 1598|  63.0k|        return has_value();
 1599|  63.0k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1652|  56.4k|    {
 1653|  56.4k|        return value();
 1654|  56.4k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  7.48k|    {
 1430|  7.48k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  7.48k|    {
  437|  7.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.85k|    {
 1177|  7.85k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    372|    {
 1476|    372|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    372|    {
  447|    372|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1597|  3.98k|    {
 1598|  3.98k|        return has_value();
 1599|  3.98k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  13.1k|    {
  485|  13.1k|        return m_has_value;
  486|  13.1k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1652|  1.44k|    {
 1653|  1.44k|        return value();
 1654|  1.44k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  4.97k|    {
 1627|  4.97k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.97k|        return this->get_value();
 1629|  4.97k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  4.97k|    {
  451|  4.97k|        return m_value;
  452|  4.97k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1475|    112|    {
 1476|    112|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  446|    112|    {
  447|    112|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.72k|    {
 1177|  7.72k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  7.60k|    {
 1430|  7.60k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  7.60k|    {
  437|  7.60k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.22k|    {
 1837|  1.22k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.22k|                                            std::forward<F>(f));
 1839|  1.22k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.22k|{
 1323|  1.22k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.22k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.22k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.22k|            return result(*std::forward<Exp>(exp));
 1327|  1.22k|        }
 1328|       |
 1329|  1.22k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.22k|        return result(unexpect, monostate{});
 1331|  1.22k|    }
 1332|  1.22k|    else {
 1333|  1.22k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.22k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.22k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.22k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.22k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.22k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.22k|    }
 1340|  1.22k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  3.53k|    {
 1663|  3.53k|        return std::move(value());
 1664|  3.53k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|  3.36k|    {
 1430|  3.36k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  3.36k|    {
  437|  3.36k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.0k|    {
 1177|  16.0k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1613|    342|    {
 1614|    342|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    342|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    342|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    342|        return std::move(this->get_unexpected().error());
 1616|    342|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    342|    {
  468|    342|        return m_unexpected;
  469|    342|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.08k|    {
 1486|  2.08k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  11.0k|    {
  447|  11.0k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.82k|    {
 2724|  2.82k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.82k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.82k|    {
 2705|  2.82k|        return decay_copy(t.begin());
 2706|  2.82k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1948|  6.05k|{
 1949|  6.05k|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.05k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3329|  2.82k|    {
 3330|  2.82k|        return m_iterator;
 3331|  2.82k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.82k|    {
 2781|  2.82k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.82k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.82k|    {
 2763|  2.82k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.82k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3333|  2.82k|    {
 3334|  2.82k|        return m_sentinel;
 3335|  2.82k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|  2.82k|    {
 3316|  2.82k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  7.72k|    {
 1598|  7.72k|        return has_value();
 1599|  7.72k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  15.4k|    {
  485|  15.4k|        return m_has_value;
  486|  15.4k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5errorEv:
 1603|    112|    {
 1604|    112|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    112|        return this->get_unexpected().error();
 1606|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    112|    {
  468|    112|        return m_unexpected;
  469|    112|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  7.60k|    {
 1663|  7.60k|        return std::move(value());
 1664|  7.60k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  7.60k|    {
 1627|  7.60k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  7.60k|        return this->get_value();
 1629|  7.60k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  7.60k|    {
  451|  7.60k|        return m_value;
  452|  7.60k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  41.8k|    {
 1177|  41.8k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  41.8k|    {
 1430|  41.8k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  41.8k|    {
  437|  41.8k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  41.8k|    {
 1598|  41.8k|        return has_value();
 1599|  41.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  83.7k|    {
  485|  83.7k|        return m_has_value;
  486|  83.7k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  41.8k|    {
 1663|  41.8k|        return std::move(value());
 1664|  41.8k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  41.8k|    {
 1627|  41.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  41.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  41.8k|        return this->get_value();
 1629|  41.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  41.8k|    {
  451|  41.8k|        return m_value;
  452|  41.8k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  8.96k|    {
 1476|  8.96k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    760|    {
 1476|    760|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.10k|    {
  447|  1.10k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.98k|    {
 1177|  9.98k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  6.56k|    {
 1476|  6.56k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  6.56k|    {
  447|  6.56k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1597|  9.15k|    {
 1598|  9.15k|        return has_value();
 1599|  9.15k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  18.0k|    {
  485|  18.0k|        return m_has_value;
  486|  18.0k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1603|  3.27k|    {
 1604|  3.27k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.27k|        return this->get_unexpected().error();
 1606|  3.27k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  4.52k|    {
  468|  4.52k|        return m_unexpected;
  469|  4.52k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|  1.68k|    {
 1430|  1.68k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|  1.68k|    {
  437|  1.68k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.68k|    {
 1177|  1.68k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  2.31k|    {
 1627|  2.31k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.31k|        return this->get_value();
 1629|  2.31k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  2.31k|    {
  451|  2.31k|        return m_value;
  452|  2.31k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|  1.26k|    {
 1598|  1.26k|        return has_value();
 1599|  1.26k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  3.36k|    {
  485|  3.36k|        return m_has_value;
  486|  3.36k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.26k|    {
 1177|  1.26k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|  1.68k|    {
 1663|  1.68k|        return std::move(value());
 1664|  1.68k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|  1.68k|    {
 1627|  1.68k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.68k|        return this->get_value();
 1629|  1.68k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|  1.68k|    {
  451|  1.68k|        return m_value;
  452|  1.68k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|   307k|    {
 3334|   307k|        return m_sentinel;
 3335|   307k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  2.65k|    {
 1837|  2.65k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.65k|                                            std::forward<F>(f));
 1839|  2.65k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  2.65k|{
 1323|  2.65k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.65k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.65k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.65k|            return result(*std::forward<Exp>(exp));
 1327|  2.65k|        }
 1328|       |
 1329|  2.65k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.65k|        return result(unexpect, monostate{});
 1331|  2.65k|    }
 1332|  2.65k|    else {
 1333|  2.65k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.65k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.65k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.31k, False: 342]
  |  |  ------------------
  ------------------
 1335|  2.65k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.65k|                   : result(unexpect,
 1337|    342|                            trivial_invoke(std::forward<F>(f),
 1338|    342|                                           std::forward<Exp>(exp).error()));
 1339|  2.65k|    }
 1340|  2.65k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  2.31k|    {
 1430|  2.31k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.31k|    {
  437|  2.31k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    342|    {
 1486|    342|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  2.31k|    {
 1663|  2.31k|        return std::move(value());
 1664|  2.31k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|   608k|    {
 3330|   608k|        return m_iterator;
 3331|   608k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|  1.26k|    {
 1430|  1.26k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|  1.26k|    {
  437|  1.26k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|  1.26k|    {
 1837|  1.26k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.26k|                                            std::forward<F>(f));
 1839|  1.26k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|  1.26k|{
 1323|  1.26k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.26k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.26k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.26k|            return result(*std::forward<Exp>(exp));
 1327|  1.26k|        }
 1328|       |
 1329|  1.26k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.26k|        return result(unexpect, monostate{});
 1331|  1.26k|    }
 1332|  1.26k|    else {
 1333|  1.26k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.26k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.26k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.26k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.26k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.26k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.26k|    }
 1340|  1.26k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.52k|    {
  485|  2.52k|        return m_has_value;
  486|  2.52k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|  1.26k|    {
 1663|  1.26k|        return std::move(value());
 1664|  1.26k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|  1.26k|    {
 1627|  1.26k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.26k|        return this->get_value();
 1629|  1.26k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.26k|    {
  451|  1.26k|        return m_value;
  452|  1.26k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|  1.26k|    {
 1430|  1.26k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|  1.26k|    {
  437|  1.26k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.26k|    {
 1177|  1.26k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1597|  1.26k|    {
 1598|  1.26k|        return has_value();
 1599|  1.26k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.52k|    {
  485|  2.52k|        return m_has_value;
  486|  2.52k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|  1.26k|    {
 1663|  1.26k|        return std::move(value());
 1664|  1.26k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|  1.26k|    {
 1627|  1.26k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.26k|        return this->get_value();
 1629|  1.26k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.26k|    {
  451|  1.26k|        return m_value;
  452|  1.26k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.24k|    {
 1837|  1.24k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.24k|                                            std::forward<F>(f));
 1839|  1.24k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|  1.24k|{
 1323|  1.24k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.24k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.24k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.24k|            return result(*std::forward<Exp>(exp));
 1327|  1.24k|        }
 1328|       |
 1329|  1.24k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.24k|        return result(unexpect, monostate{});
 1331|  1.24k|    }
 1332|  1.24k|    else {
 1333|  1.24k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.24k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.24k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.24k]
  |  |  ------------------
  ------------------
 1335|  1.24k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.24k|                   : result(unexpect,
 1337|  1.24k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.24k|                                           std::forward<Exp>(exp).error()));
 1339|  1.24k|    }
 1340|  1.24k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1613|  1.24k|    {
 1614|  1.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  1.24k|        return std::move(this->get_unexpected().error());
 1616|  1.24k|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  2.08k|    {
 3648|  2.08k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|   217k|    {
 3316|   217k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1475|     16|    {
 1476|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  625|     16|    {
  626|     16|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|     16|    {
  689|     16|        scn::detail::construct_at(unexpected_ptr(),
  690|     16|                                  std::forward<Args>(args)...);
  691|     16|        m_has_value = false;
  692|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|     48|    {
  718|     48|        return reinterpret_cast<unexpected<E>*>(
  719|     48|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     48|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|     48|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     16|    {
 1177|     16|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1597|     16|    {
 1598|     16|        return has_value();
 1599|     16|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|     48|    {
  675|     48|        return m_has_value;
  676|     48|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1603|     16|    {
 1604|     16|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     16|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     16|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     16|        return this->get_unexpected().error();
 1606|     16|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     16|    {
  658|     16|        return *unexpected_ptr();
  659|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  630|     16|    {
  631|     16|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 16]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     16|        else {
  635|     16|            destroy_unexpected();
  636|     16|        }
  637|     16|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     16|    {
  700|     16|        scn::detail::destroy_at(unexpected_ptr());
  701|     16|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1597|  16.4k|    {
 1598|  16.4k|        return has_value();
 1599|  16.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  32.0k|    {
  485|  32.0k|        return m_has_value;
  486|  32.0k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1603|  10.6k|    {
 1604|  10.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  10.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  10.6k|        return this->get_unexpected().error();
 1606|  10.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  10.6k|    {
  468|  10.6k|        return m_unexpected;
  469|  10.6k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|  3.36k|    {
 1663|  3.36k|        return std::move(value());
 1664|  3.36k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|  4.97k|    {
 1627|  4.97k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.97k|        return this->get_value();
 1629|  4.97k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.97k|    {
  451|  4.97k|        return m_value;
  452|  4.97k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.13k|    {
 1476|  1.13k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.23k|    {
  447|  1.23k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  15.4k|    {
 1177|  15.4k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  12.2k|    {
 1476|  12.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  12.2k|    {
  447|  12.2k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  16.5k|    {
 1598|  16.5k|        return has_value();
 1599|  16.5k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  25.7k|    {
  485|  25.7k|        return m_has_value;
  486|  25.7k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  6.14k|    {
 1604|  6.14k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.14k|        return this->get_unexpected().error();
 1606|  6.14k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  6.14k|    {
  468|  6.14k|        return m_unexpected;
  469|  6.14k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  3.97k|    {
 1430|  3.97k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  3.97k|    {
  437|  3.97k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.97k|    {
 1177|  3.97k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  2.03k|    {
 1627|  2.03k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.03k|        return this->get_value();
 1629|  2.03k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.03k|    {
  451|  2.03k|        return m_value;
  452|  2.03k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  2.95k|    {
 1598|  2.95k|        return has_value();
 1599|  2.95k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  7.95k|    {
  485|  7.95k|        return m_has_value;
  486|  7.95k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.95k|    {
 1177|  2.95k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  3.97k|    {
 1663|  3.97k|        return std::move(value());
 1664|  3.97k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  3.97k|    {
 1627|  3.97k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.97k|        return this->get_value();
 1629|  3.97k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  3.97k|    {
  451|  3.97k|        return m_value;
  452|  3.97k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  64.9k|    {
 3221|  64.9k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 2.35k, False: 62.6k]
  ------------------
 3222|  64.9k|                   ? nullptr
 3223|  64.9k|                   : std::addressof(*ranges::begin(derived()));
 3224|  64.9k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  64.9k|    {
 3005|  64.9k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  64.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  64.9k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  64.9k|    {
 2978|  64.9k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  64.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  64.9k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  64.9k|    {
 3339|  64.9k|        return m_iterator == m_sentinel;
 3340|  64.9k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|   127k|    {
 3180|   127k|        return static_cast<D&>(*this);
 3181|   127k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  62.6k|    {
 2724|  62.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  62.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  62.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  62.6k|    {
 2705|  62.6k|        return decay_copy(t.begin());
 2706|  62.6k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  2.03k|    {
 1430|  2.03k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  2.03k|    {
  437|  2.03k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  2.95k|    {
 1430|  2.95k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.95k|    {
  437|  2.95k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.95k|    {
 1837|  2.95k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.95k|                                            std::forward<F>(f));
 1839|  2.95k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  2.95k|{
 1323|  2.95k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.95k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.95k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.95k|            return result(*std::forward<Exp>(exp));
 1327|  2.95k|        }
 1328|       |
 1329|  2.95k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.95k|        return result(unexpect, monostate{});
 1331|  2.95k|    }
 1332|  2.95k|    else {
 1333|  2.95k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.95k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.95k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.95k, False: 0]
  |  |  ------------------
  ------------------
 1335|  2.95k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.95k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  2.95k|    }
 1340|  2.95k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|  5.91k|    {
  485|  5.91k|        return m_has_value;
  486|  5.91k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.95k|    {
 1663|  2.95k|        return std::move(value());
 1664|  2.95k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.95k|    {
 1627|  2.95k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.95k|        return this->get_value();
 1629|  2.95k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|  2.95k|    {
  451|  2.95k|        return m_value;
  452|  2.95k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  2.95k|    {
 1430|  2.95k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  2.95k|    {
  437|  2.95k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.95k|    {
 1177|  2.95k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|  2.95k|    {
 1598|  2.95k|        return has_value();
 1599|  2.95k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.91k|    {
  485|  5.91k|        return m_has_value;
  486|  5.91k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  2.95k|    {
 1663|  2.95k|        return std::move(value());
 1664|  2.95k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  2.95k|    {
 1627|  2.95k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.95k|        return this->get_value();
 1629|  2.95k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.95k|    {
  451|  2.95k|        return m_value;
  452|  2.95k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1475|     44|    {
 1476|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  625|     44|    {
  626|     44|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|     44|    {
  689|     44|        scn::detail::construct_at(unexpected_ptr(),
  690|     44|                                  std::forward<Args>(args)...);
  691|     44|        m_has_value = false;
  692|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    132|    {
  718|    132|        return reinterpret_cast<unexpected<E>*>(
  719|    132|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    132|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    132|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     44|    {
 1177|     44|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|     44|    {
 1598|     44|        return has_value();
 1599|     44|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|    132|    {
  675|    132|        return m_has_value;
  676|    132|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|     44|    {
 1604|     44|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     44|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     44|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     44|        return this->get_unexpected().error();
 1606|     44|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     44|    {
  658|     44|        return *unexpected_ptr();
  659|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|     44|    {
  631|     44|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 44]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     44|        else {
  635|     44|            destroy_unexpected();
  636|     44|        }
  637|     44|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     44|    {
  700|     44|        scn::detail::destroy_at(unexpected_ptr());
  701|     44|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  38.8k|    {
 2855|  38.8k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  38.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  38.8k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  38.8k|    {
 2836|  38.8k|        return t.data();
 2837|  38.8k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   621k|    {
 1476|   621k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   621k|    {
  447|   621k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   626k|    {
 1177|   626k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  4.78k|    {
 1430|  4.78k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  4.78k|    {
  437|  4.78k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.37k|{
 1211|  3.37k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.37k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    418|    {
 1837|    418|        return detail::transform_error_impl(std::move(*this),
 1838|    418|                                            std::forward<F>(f));
 1839|    418|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    418|{
 1323|    418|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    418|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    418|        if (SCN_LIKELY(exp.has_value())) {
 1326|    418|            return result(*std::forward<Exp>(exp));
 1327|    418|        }
 1328|       |
 1329|    418|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    418|        return result(unexpect, monostate{});
 1331|    418|    }
 1332|    418|    else {
 1333|    418|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    418|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    418|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 418, False: 0]
  |  |  ------------------
  ------------------
 1335|    418|                   ? result(*std::forward<Exp>(exp))
 1336|    418|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    418|    }
 1340|    418|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    418|    {
 1430|    418|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    418|    {
  437|    418|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    418|    {
 1177|    418|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    418|    {
 1598|    418|        return has_value();
 1599|    418|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    836|    {
  485|    836|        return m_has_value;
  486|    836|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    418|    {
 1663|    418|        return std::move(value());
 1664|    418|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    418|    {
 1627|    418|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    418|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    418|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    418|        return this->get_value();
 1629|    418|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    418|    {
  451|    418|        return m_value;
  452|    418|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1822|    836|    {
 1823|    836|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    836|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    836|{
 1323|    836|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    836|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    836|        if (SCN_LIKELY(exp.has_value())) {
 1326|    836|            return result(*std::forward<Exp>(exp));
 1327|    836|        }
 1328|       |
 1329|    836|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    836|        return result(unexpect, monostate{});
 1331|    836|    }
 1332|    836|    else {
 1333|    836|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    836|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    836|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 836]
  |  |  ------------------
  ------------------
 1335|    836|                   ? result(*std::forward<Exp>(exp))
 1336|    836|                   : result(unexpect,
 1337|    836|                            trivial_invoke(std::forward<F>(f),
 1338|    836|                                           std::forward<Exp>(exp).error()));
 1339|    836|    }
 1340|    836|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1652|  1.60k|    {
 1653|  1.60k|        return value();
 1654|  1.60k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|      6|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    412|    {
 2724|    412|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    412|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    412|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    412|    {
 2705|    412|        return decay_copy(t.begin());
 2706|    412|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    396|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.02k|    {
 1837|  1.02k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.02k|                                            std::forward<F>(f));
 1839|  1.02k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.02k|{
 1323|  1.02k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.02k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.02k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.02k|            return result(*std::forward<Exp>(exp));
 1327|  1.02k|        }
 1328|       |
 1329|  1.02k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.02k|        return result(unexpect, monostate{});
 1331|  1.02k|    }
 1332|  1.02k|    else {
 1333|  1.02k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.02k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.02k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.02k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.02k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.02k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.02k|    }
 1340|  1.02k|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.02k|    {
 1430|  1.02k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.02k|    {
  437|  1.02k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.02k|    {
 1177|  1.02k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.02k|    {
 1598|  1.02k|        return has_value();
 1599|  1.02k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.04k|    {
  485|  2.04k|        return m_has_value;
  486|  2.04k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.02k|    {
 1663|  1.02k|        return std::move(value());
 1664|  1.02k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.02k|    {
 1627|  1.02k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.02k|        return this->get_value();
 1629|  1.02k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.02k|    {
  451|  1.02k|        return m_value;
  452|  1.02k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.04k|    {
 1823|  1.04k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.04k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.04k|{
 1323|  1.04k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.04k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.04k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.04k|            return result(*std::forward<Exp>(exp));
 1327|  1.04k|        }
 1328|       |
 1329|  1.04k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.04k|        return result(unexpect, monostate{});
 1331|  1.04k|    }
 1332|  1.04k|    else {
 1333|  1.04k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.04k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.04k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.04k]
  |  |  ------------------
  ------------------
 1335|  1.04k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.04k|                   : result(unexpect,
 1337|  1.04k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.04k|                                           std::forward<Exp>(exp).error()));
 1339|  1.04k|    }
 1340|  1.04k|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.04k|    {
 3648|  1.04k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  14.1k|    {
 1653|  14.1k|        return value();
 1654|  14.1k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|  5.55k|{
 6697|  5.55k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  5.55k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  5.55k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  5.55k|    auto start = begin;
 6701|  5.55k|    ++begin;
 6702|       |
 6703|  5.55k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.55k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  5.55k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 498, False: 5.05k]
  ------------------
 6710|    498|        handler.on_charset_inverted();
 6711|    498|        ++begin;
 6712|    498|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    498|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 498]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    498|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 6, False: 492]
  ------------------
 6719|      6|            handler.on_charset_single(char32_t{']'});
 6720|      6|            ++begin;
 6721|      6|        }
 6722|    498|    }
 6723|  5.05k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 5.05k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  1.45M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 1.45M, False: 0]
  ------------------
 6728|  1.45M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.45M]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  1.45M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 5.55k, False: 1.44M]
  ------------------
 6733|  5.55k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  5.55k|        }
 6735|       |
 6736|  1.44M|        parse_presentation_set_literal(begin, end, handler);
 6737|  1.44M|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  5.55k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  1.44M|{
 6661|  1.44M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  1.44M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  1.44M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.44M]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  1.44M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 1.44M, False: 0]
  |  Branch (6668:25): [True: 8.29k, False: 1.43M]
  |  Branch (6668:49): [True: 8.29k, False: 0]
  ------------------
 6669|  1.44M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 8.15k, False: 144]
  ------------------
 6670|  8.15k|        ++begin;
 6671|       |
 6672|  8.15k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  8.15k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.15k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  8.15k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.15k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  8.15k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  8.15k|        return;
 6686|  8.15k|    }
 6687|       |
 6688|  1.43M|    handler.on_charset_single(cp_first);
 6689|  1.43M|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  1.45M|{
 6637|  1.45M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  1.45M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  1.45M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  2.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.45M]
  |  |  |  Branch (859:45): [True: 0, False: 1.45M]
  |  |  |  Branch (859:45): [True: 0, False: 1.45M]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  1.45M|    const auto cp =
 6646|  1.45M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  1.45M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.45M]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  1.45M|    begin += len;
 6653|  1.45M|    return cp;
 6654|  1.45M|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  46.2k|    {
 1177|  46.2k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1429|  46.2k|    {
 1430|  46.2k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  436|  46.2k|    {
  437|  46.2k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  33.9k|    {
 6252|  33.9k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  33.9k|                charset_string_size};
 6254|  33.9k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1429|  1.60k|    {
 1430|  1.60k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.60k|    {
  437|  1.60k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  3.65k|    {
 1430|  3.65k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  3.65k|    {
  437|  3.65k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4032|   394k|{
 4033|   394k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4033:19): [Folded - Ignored]
  ------------------
 4034|   394k|        return decode_utf8_code_point_exhaustive_valid(input);
 4035|   394k|    }
 4036|   394k|    else if constexpr (sizeof(CharT) == 2) {
 4037|   394k|        return decode_utf16_code_point_exhaustive_valid(input);
 4038|   394k|    }
 4039|   394k|    else {
 4040|   394k|        SCN_EXPECT(input.size() == 1);
 4041|   394k|        return static_cast<char32_t>(input.front());
 4042|   394k|    }
 4043|   394k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3910|  47.1k|    const auto is_trailing_code_unit = [](char ch) {
 3911|  47.1k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3912|  47.1k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6186|  1.01k|    {
 6187|  1.01k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6188|  1.01k|        CharT r{};
 6189|  1.01k|        std::memcpy(&r, m_data, m_size);
 6190|  1.01k|        return r;
 6191|  1.01k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   567k|{
 3807|   567k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|   567k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|   567k|    }
 3810|   567k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|   567k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|   567k|    }
 3813|   567k|    else {
 3814|       |        // utf-32
 3815|   567k|        static_assert(sizeof(U) == 4);
 3816|   567k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   567k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   567k|        return 1;
 3818|   567k|    }
 3819|   567k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   512k|{
 4013|   512k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|   512k|        return decode_utf8_code_point_exhaustive(input);
 4015|   512k|    }
 4016|   512k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|   512k|        return decode_utf16_code_point_exhaustive(input);
 4018|   512k|    }
 4019|   512k|    else {
 4020|   512k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   512k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   512k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   512k|        auto cp = static_cast<char32_t>(input.front());
 4022|   512k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 232k, False: 280k]
  |  |  ------------------
  ------------------
 4023|   232k|            return invalid_code_point;
 4024|   232k|        }
 4025|   280k|        return cp;
 4026|   512k|    }
 4027|   512k|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  68.3k|{
 3699|  68.3k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  68.3k|                                          decltype(first), decltype(last)> &&
 3701|  68.3k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  68.3k|        return {first, last};
 3703|  68.3k|    }
 3704|  68.3k|    else {
 3705|  68.3k|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  68.3k|                                       to_address(first), to_address(last)))};
 3707|  68.3k|    }
 3708|  68.3k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   285k|{
  326|   285k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   285k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   285k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   288k|{
  304|   288k|    return p;
  305|   288k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  6.59k|{
 3730|  6.59k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  6.59k|                      typename std::basic_string_view<CharT>::iterator,
 3732|  6.59k|                      decltype(it)> &&
 3733|  6.59k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  6.59k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  6.59k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  6.59k|        return it;
 3736|  6.59k|    }
 3737|  6.59k|    else {
 3738|  6.59k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  6.59k|    }
 3740|  6.59k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.25k|{
  326|  2.25k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.25k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  34.3k|    {
 3346|  34.3k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  34.3k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|    136|    {
 1476|    136|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|    136|    {
  447|    136|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  23.2k|    {
 1177|  23.2k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  23.1k|    {
 1430|  23.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  23.1k|    {
  437|  23.1k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|  6.26k|    {
 1598|  6.26k|        return has_value();
 1599|  6.26k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  40.2k|    {
  485|  40.2k|        return m_has_value;
  486|  40.2k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  16.8k|    {
 1627|  16.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  16.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  16.8k|        return this->get_value();
 1629|  16.8k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  16.8k|    {
  451|  16.8k|        return m_value;
  452|  16.8k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1429|  2.93k|    {
 1430|  2.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  2.93k|    {
  437|  2.93k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.09k|    {
 1177|  3.09k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    156|    {
 1476|    156|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    156|    {
  447|    156|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEcvbEv:
 1597|  1.37k|    {
 1598|  1.37k|        return has_value();
 1599|  1.37k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9has_valueEv:
  484|  4.81k|    {
  485|  4.81k|        return m_has_value;
  486|  4.81k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.56k|    {
 1627|  1.56k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.56k|        return this->get_value();
 1629|  1.56k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.56k|    {
  451|  1.56k|        return m_value;
  452|  1.56k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.16k|    {
 1177|  2.16k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEC2ISA_vEEOT_:
 1429|  2.16k|    {
 1430|  2.16k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EEC2IJSB_EvEENS3_10in_place_tEDpOT_:
  436|  2.16k|    {
  437|  2.16k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|    334|    {
 1837|    334|        return detail::transform_error_impl(std::move(*this),
 1838|    334|                                            std::forward<F>(f));
 1839|    334|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|    334|{
 1323|    334|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    334|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    334|        if (SCN_LIKELY(exp.has_value())) {
 1326|    334|            return result(*std::forward<Exp>(exp));
 1327|    334|        }
 1328|       |
 1329|    334|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    334|        return result(unexpect, monostate{});
 1331|    334|    }
 1332|    334|    else {
 1333|    334|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    334|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    334|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 334, False: 0]
  |  |  ------------------
  ------------------
 1335|    334|                   ? result(*std::forward<Exp>(exp))
 1336|    334|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    334|    }
 1340|    334|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.56k|    {
 1663|  1.56k|        return std::move(value());
 1664|  1.56k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1429|    842|    {
 1430|    842|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|    842|    {
  437|    842|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.44k|    {
 1177|  4.44k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE5errorEv:
 1613|    156|    {
 1614|    156|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    156|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    156|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    156|        return std::move(this->get_unexpected().error());
 1616|    156|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    156|    {
  468|    156|        return m_unexpected;
  469|    156|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.08k|    {
 1486|  1.08k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  3.60k|    {
  447|  3.60k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    498|    {
 2724|    498|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    498|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    498|    {
 2705|    498|        return decay_copy(t.begin());
 2706|    498|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEEu7__decayIT_EOSA_:
 1948|  1.21k|{
 1949|  1.21k|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.21k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E5beginEv:
 3329|    498|    {
 3330|    498|        return m_iterator;
 3331|    498|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|    498|    {
 2781|    498|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|    498|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|    498|    {
 2763|    498|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|    498|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_E3endEv:
 3333|    498|    {
 3334|    498|        return m_sentinel;
 3335|    498|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EESA_EC2ISA_LPv0EEET_SA_:
 3315|    498|    {
 3316|    498|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEcvbEv:
 1597|  2.16k|    {
 1598|  2.16k|        return has_value();
 1599|  2.16k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.32k|    {
  485|  4.32k|        return m_has_value;
  486|  4.32k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1662|  2.16k|    {
 1663|  2.16k|        return std::move(value());
 1664|  2.16k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EElEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1626|  2.16k|    {
 1627|  2.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.16k|        return this->get_value();
 1629|  2.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.16k|    {
  451|  2.16k|        return m_value;
  452|  2.16k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  27.8k|    {
 1177|  27.8k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  27.8k|    {
 1430|  27.8k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  27.8k|    {
  437|  27.8k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  10.6k|    {
 1837|  10.6k|        return detail::transform_error_impl(std::move(*this),
 1838|  10.6k|                                            std::forward<F>(f));
 1839|  10.6k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  10.6k|{
 1323|  10.6k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  10.6k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  10.6k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  10.6k|            return result(*std::forward<Exp>(exp));
 1327|  10.6k|        }
 1328|       |
 1329|  10.6k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  10.6k|        return result(unexpect, monostate{});
 1331|  10.6k|    }
 1332|  10.6k|    else {
 1333|  10.6k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  10.6k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  10.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 10.6k, False: 0]
  |  |  ------------------
  ------------------
 1335|  10.6k|                   ? result(*std::forward<Exp>(exp))
 1336|  10.6k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  10.6k|    }
 1340|  10.6k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  16.8k|    {
 1663|  16.8k|        return std::move(value());
 1664|  16.8k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|    136|    {
 1614|    136|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    136|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    136|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    136|        return std::move(this->get_unexpected().error());
 1616|    136|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|    136|    {
  468|    136|        return m_unexpected;
  469|    136|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  1.04k|    {
 1486|  1.04k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  27.8k|    {
 1598|  27.8k|        return has_value();
 1599|  27.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  55.7k|    {
  485|  55.7k|        return m_has_value;
  486|  55.7k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  27.8k|    {
 1663|  27.8k|        return std::move(value());
 1664|  27.8k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  27.8k|    {
 1627|  27.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  27.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  27.8k|        return this->get_value();
 1629|  27.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  27.8k|    {
  451|  27.8k|        return m_value;
  452|  27.8k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|  2.52k|    {
 1476|  2.52k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1475|    382|    {
 1476|    382|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|    538|    {
  447|    538|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.25k|    {
 1177|  5.25k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  3.49k|    {
 1476|  3.49k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  3.49k|    {
  447|  3.49k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEcvbEv:
 1597|  4.85k|    {
 1598|  4.85k|        return has_value();
 1599|  4.85k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9has_valueEv:
  484|  9.51k|    {
  485|  9.51k|        return m_has_value;
  486|  9.51k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1603|  1.72k|    {
 1604|  1.72k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.72k|        return this->get_unexpected().error();
 1606|  1.72k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  467|  2.35k|    {
  468|  2.35k|        return m_unexpected;
  469|  2.35k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1429|    890|    {
 1430|    890|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    890|    {
  437|    890|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    890|    {
 1177|    890|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1626|  1.22k|    {
 1627|  1.22k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.22k|        return this->get_value();
 1629|  1.22k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EE9get_valueEv:
  450|  1.22k|    {
  451|  1.22k|        return m_value;
  452|  1.22k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1597|    664|    {
 1598|    664|        return has_value();
 1599|    664|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  484|  1.78k|    {
  485|  1.78k|        return m_has_value;
  486|  1.78k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    664|    {
 1177|    664|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1662|    890|    {
 1663|    890|        return std::move(value());
 1664|    890|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1626|    890|    {
 1627|    890|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    890|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    890|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    890|        return this->get_value();
 1629|    890|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  450|    890|    {
  451|    890|        return m_value;
  452|    890|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3333|  81.9k|    {
 3334|  81.9k|        return m_sentinel;
 3335|  81.9k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1836|  1.38k|    {
 1837|  1.38k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.38k|                                            std::forward<F>(f));
 1839|  1.38k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1322|  1.38k|{
 1323|  1.38k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.38k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.38k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.38k|            return result(*std::forward<Exp>(exp));
 1327|  1.38k|        }
 1328|       |
 1329|  1.38k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.38k|        return result(unexpect, monostate{});
 1331|  1.38k|    }
 1332|  1.38k|    else {
 1333|  1.38k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.38k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.38k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.22k, False: 156]
  |  |  ------------------
  ------------------
 1335|  1.38k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.38k|                   : result(unexpect,
 1337|    156|                            trivial_invoke(std::forward<F>(f),
 1338|    156|                                           std::forward<Exp>(exp).error()));
 1339|  1.38k|    }
 1340|  1.38k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1429|  1.22k|    {
 1430|  1.22k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  436|  1.22k|    {
  437|  1.22k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1485|    156|    {
 1486|    156|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1662|  1.22k|    {
 1663|  1.22k|        return std::move(value());
 1664|  1.22k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3329|  83.8k|    {
 3330|  83.8k|        return m_iterator;
 3331|  83.8k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1429|    664|    {
 1430|    664|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    664|    {
  437|    664|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    664|    {
 1837|    664|        return detail::transform_error_impl(std::move(*this),
 1838|    664|                                            std::forward<F>(f));
 1839|    664|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1322|    664|{
 1323|    664|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    664|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    664|        if (SCN_LIKELY(exp.has_value())) {
 1326|    664|            return result(*std::forward<Exp>(exp));
 1327|    664|        }
 1328|       |
 1329|    664|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    664|        return result(unexpect, monostate{});
 1331|    664|    }
 1332|    664|    else {
 1333|    664|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    664|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    664|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 664, False: 0]
  |  |  ------------------
  ------------------
 1335|    664|                   ? result(*std::forward<Exp>(exp))
 1336|    664|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    664|    }
 1340|    664|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  1.32k|    {
  485|  1.32k|        return m_has_value;
  486|  1.32k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1662|    664|    {
 1663|    664|        return std::move(value());
 1664|    664|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1626|    664|    {
 1627|    664|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    664|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    664|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    664|        return this->get_value();
 1629|    664|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  450|    664|    {
  451|    664|        return m_value;
  452|    664|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1429|    664|    {
 1430|    664|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  436|    664|    {
  437|    664|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    664|    {
 1177|    664|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEcvbEv:
 1597|    664|    {
 1598|    664|        return has_value();
 1599|    664|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.32k|    {
  485|  1.32k|        return m_has_value;
  486|  1.32k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1662|    664|    {
 1663|    664|        return std::move(value());
 1664|    664|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1626|    664|    {
 1627|    664|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    664|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    664|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    664|        return this->get_value();
 1629|    664|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    664|    {
  451|    664|        return m_value;
  452|    664|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1836|    628|    {
 1837|    628|        return detail::transform_error_impl(std::move(*this),
 1838|    628|                                            std::forward<F>(f));
 1839|    628|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1322|    628|{
 1323|    628|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    628|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    628|        if (SCN_LIKELY(exp.has_value())) {
 1326|    628|            return result(*std::forward<Exp>(exp));
 1327|    628|        }
 1328|       |
 1329|    628|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    628|        return result(unexpect, monostate{});
 1331|    628|    }
 1332|    628|    else {
 1333|    628|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    628|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    628|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 628]
  |  |  ------------------
  ------------------
 1335|    628|                   ? result(*std::forward<Exp>(exp))
 1336|    628|                   : result(unexpect,
 1337|    628|                            trivial_invoke(std::forward<F>(f),
 1338|    628|                                           std::forward<Exp>(exp).error()));
 1339|    628|    }
 1340|    628|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE5errorEv:
 1613|    628|    {
 1614|    628|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    628|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    628|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    628|        return std::move(this->get_unexpected().error());
 1616|    628|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3647|  1.08k|    {
 3648|  1.08k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3315|  28.4k|    {
 3316|  28.4k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEC2ISK_LPv0ELSN_0EEEONS0_10unexpectedIT_EE:
 1475|     36|    {
 1476|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EEC2IJSL_EvEENS0_10unexpect_tEDpOT_:
  625|     36|    {
  626|     36|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESL_EEEvDpOT_:
  688|     36|    {
  689|     36|        scn::detail::construct_at(unexpected_ptr(),
  690|     36|                                  std::forward<Args>(args)...);
  691|     36|        m_has_value = false;
  692|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    108|    {
  718|    108|        return reinterpret_cast<unexpected<E>*>(
  719|    108|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    108|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    108|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     36|    {
 1177|     36|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     36|    {
 1598|     36|        return has_value();
 1599|     36|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    108|    {
  675|    108|        return m_has_value;
  676|    108|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENSA_IcNSB_IcEENSD_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     36|    {
 1604|     36|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     36|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     36|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     36|        return this->get_unexpected().error();
 1606|     36|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     36|    {
  658|     36|        return *unexpected_ptr();
  659|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     36|    {
  631|     36|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 36]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     36|        else {
  635|     36|            destroy_unexpected();
  636|     36|        }
  637|     36|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENSB_IcNSC_IcEENSE_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     36|    {
  700|     36|        scn::detail::destroy_at(unexpected_ptr());
  701|     36|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEcvbEv:
 1597|  4.67k|    {
 1598|  4.67k|        return has_value();
 1599|  4.67k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  8.89k|    {
  485|  8.89k|        return m_has_value;
  486|  8.89k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5errorEv:
 1603|  3.38k|    {
 1604|  3.38k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.38k|        return this->get_unexpected().error();
 1606|  3.38k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  3.38k|    {
  468|  3.38k|        return m_unexpected;
  469|  3.38k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1662|    842|    {
 1663|    842|        return std::move(value());
 1664|    842|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1626|    842|    {
 1627|    842|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    842|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    842|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    842|        return this->get_value();
 1629|    842|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EENS0_10scan_errorELb1EE9get_valueEv:
  450|    842|    {
  451|    842|        return m_value;
  452|    842|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  1.16k|    {
 1476|  1.16k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  1.30k|    {
  447|  1.30k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.9k|    {
 1177|  19.9k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  12.4k|    {
 1476|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  446|  12.4k|    {
  447|  12.4k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  21.0k|    {
 1598|  21.0k|        return has_value();
 1599|  21.0k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  34.5k|    {
  485|  34.5k|        return m_has_value;
  486|  34.5k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  6.35k|    {
 1604|  6.35k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  6.35k|        return this->get_unexpected().error();
 1606|  6.35k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  6.35k|    {
  468|  6.35k|        return m_unexpected;
  469|  6.35k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1429|  4.14k|    {
 1430|  4.14k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  4.14k|    {
  437|  4.14k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.14k|    {
 1177|  4.14k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1626|  6.18k|    {
 1627|  6.18k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.18k|        return this->get_value();
 1629|  6.18k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  6.18k|    {
  451|  6.18k|        return m_value;
  452|  6.18k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  3.11k|    {
 1598|  3.11k|        return has_value();
 1599|  3.11k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  8.29k|    {
  485|  8.29k|        return m_has_value;
  486|  8.29k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.11k|    {
 1177|  3.11k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1662|  4.14k|    {
 1663|  4.14k|        return std::move(value());
 1664|  4.14k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1626|  4.14k|    {
 1627|  4.14k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.14k|        return this->get_value();
 1629|  4.14k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  4.14k|    {
  451|  4.14k|        return m_value;
  452|  4.14k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  6.32k|    {
 1837|  6.32k|        return detail::transform_error_impl(std::move(*this),
 1838|  6.32k|                                            std::forward<F>(f));
 1839|  6.32k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  6.32k|{
 1323|  6.32k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  6.32k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  6.32k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  6.32k|            return result(*std::forward<Exp>(exp));
 1327|  6.32k|        }
 1328|       |
 1329|  6.32k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  6.32k|        return result(unexpect, monostate{});
 1331|  6.32k|    }
 1332|  6.32k|    else {
 1333|  6.32k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  6.32k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.32k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.18k, False: 136]
  |  |  ------------------
  ------------------
 1335|  6.32k|                   ? result(*std::forward<Exp>(exp))
 1336|  6.32k|                   : result(unexpect,
 1337|    136|                            trivial_invoke(std::forward<F>(f),
 1338|    136|                                           std::forward<Exp>(exp).error()));
 1339|  6.32k|    }
 1340|  6.32k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1429|  6.18k|    {
 1430|  6.18k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  6.18k|    {
  437|  6.18k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    136|    {
 1486|    136|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  6.18k|    {
 1663|  6.18k|        return std::move(value());
 1664|  6.18k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1429|  3.11k|    {
 1430|  3.11k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.11k|    {
  437|  3.11k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.11k|    {
 1837|  3.11k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.11k|                                            std::forward<F>(f));
 1839|  3.11k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1322|  3.11k|{
 1323|  3.11k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.11k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.11k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.11k|            return result(*std::forward<Exp>(exp));
 1327|  3.11k|        }
 1328|       |
 1329|  3.11k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.11k|        return result(unexpect, monostate{});
 1331|  3.11k|    }
 1332|  3.11k|    else {
 1333|  3.11k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.11k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.11k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.11k, False: 0]
  |  |  ------------------
  ------------------
 1335|  3.11k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.11k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  3.11k|    }
 1340|  3.11k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|  6.23k|    {
  485|  6.23k|        return m_has_value;
  486|  6.23k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.11k|    {
 1663|  3.11k|        return std::move(value());
 1664|  3.11k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.11k|    {
 1627|  3.11k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.11k|        return this->get_value();
 1629|  3.11k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.11k|    {
  451|  3.11k|        return m_value;
  452|  3.11k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  3.11k|    {
 1430|  3.11k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  436|  3.11k|    {
  437|  3.11k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.11k|    {
 1177|  3.11k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|  3.11k|    {
 1598|  3.11k|        return has_value();
 1599|  3.11k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.23k|    {
  485|  6.23k|        return m_has_value;
  486|  6.23k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  3.11k|    {
 1663|  3.11k|        return std::move(value());
 1664|  3.11k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  3.11k|    {
 1627|  3.11k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.11k|        return this->get_value();
 1629|  3.11k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.11k|    {
  451|  3.11k|        return m_value;
  452|  3.11k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|     60|    {
 1476|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  625|     60|    {
  626|     60|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|     60|    {
  689|     60|        scn::detail::construct_at(unexpected_ptr(),
  690|     60|                                  std::forward<Args>(args)...);
  691|     60|        m_has_value = false;
  692|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|    180|    {
  718|    180|        return reinterpret_cast<unexpected<E>*>(
  719|    180|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|    180|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|    180|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|     60|    {
 1177|     60|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|     60|    {
 1598|     60|        return has_value();
 1599|     60|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|    180|    {
  675|    180|        return m_has_value;
  676|    180|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|     60|    {
 1604|     60|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     60|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     60|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     60|        return this->get_unexpected().error();
 1606|     60|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|     60|    {
  658|     60|        return *unexpected_ptr();
  659|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|     60|    {
  631|     60|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 0, False: 60]
  ------------------
  632|      0|            destroy_value();
  633|      0|        }
  634|     60|        else {
  635|     60|            destroy_unexpected();
  636|     60|        }
  637|     60|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|     60|    {
  700|     60|        scn::detail::destroy_at(unexpected_ptr());
  701|     60|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  16.1k|    {
 2855|  16.1k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  16.1k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  16.1k|    {
 2836|  16.1k|        return t.data();
 2837|  16.1k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  42.0k|    {
 3221|  42.0k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 5.15k, False: 36.9k]
  ------------------
 3222|  42.0k|                   ? nullptr
 3223|  42.0k|                   : std::addressof(*ranges::begin(derived()));
 3224|  42.0k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  42.0k|    {
 3005|  42.0k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  42.0k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  42.0k|    {
 2978|  42.0k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  42.0k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  42.0k|    {
 3339|  42.0k|        return m_iterator == m_sentinel;
 3340|  42.0k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  78.9k|    {
 3180|  78.9k|        return static_cast<D&>(*this);
 3181|  78.9k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  36.9k|    {
 2724|  36.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  36.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  36.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  36.9k|    {
 2705|  36.9k|        return decay_copy(t.begin());
 2706|  36.9k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1836|    226|    {
 1837|    226|        return detail::transform_error_impl(std::move(*this),
 1838|    226|                                            std::forward<F>(f));
 1839|    226|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1322|    226|{
 1323|    226|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    226|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    226|        if (SCN_LIKELY(exp.has_value())) {
 1326|    226|            return result(*std::forward<Exp>(exp));
 1327|    226|        }
 1328|       |
 1329|    226|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    226|        return result(unexpect, monostate{});
 1331|    226|    }
 1332|    226|    else {
 1333|    226|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    226|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    226|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 226, False: 0]
  |  |  ------------------
  ------------------
 1335|    226|                   ? result(*std::forward<Exp>(exp))
 1336|    226|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|    226|    }
 1340|    226|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1429|    226|    {
 1430|    226|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  436|    226|    {
  437|    226|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|    226|    {
 1177|    226|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|    226|    {
 1598|    226|        return has_value();
 1599|    226|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|    452|    {
  485|    452|        return m_has_value;
  486|    452|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1662|    226|    {
 1663|    226|        return std::move(value());
 1664|    226|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1626|    226|    {
 1627|    226|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    226|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    226|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    226|        return this->get_value();
 1629|    226|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    226|    {
  451|    226|        return m_value;
  452|    226|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1822|    452|    {
 1823|    452|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|    452|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1322|    452|{
 1323|    452|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|    452|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|    452|        if (SCN_LIKELY(exp.has_value())) {
 1326|    452|            return result(*std::forward<Exp>(exp));
 1327|    452|        }
 1328|       |
 1329|    452|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|    452|        return result(unexpect, monostate{});
 1331|    452|    }
 1332|    452|    else {
 1333|    452|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|    452|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    452|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 452]
  |  |  ------------------
  ------------------
 1335|    452|                   ? result(*std::forward<Exp>(exp))
 1336|    452|                   : result(unexpect,
 1337|    452|                            trivial_invoke(std::forward<F>(f),
 1338|    452|                                           std::forward<Exp>(exp).error()));
 1339|    452|    }
 1340|    452|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|     12|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|    214|    {
 2724|    214|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    214|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|    214|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|    214|    {
 2705|    214|        return decay_copy(t.begin());
 2706|    214|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3667|    196|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.03k|    {
 1837|  1.03k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.03k|                                            std::forward<F>(f));
 1839|  1.03k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1322|  1.03k|{
 1323|  1.03k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.03k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.03k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.03k|            return result(*std::forward<Exp>(exp));
 1327|  1.03k|        }
 1328|       |
 1329|  1.03k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.03k|        return result(unexpect, monostate{});
 1331|  1.03k|    }
 1332|  1.03k|    else {
 1333|  1.03k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.03k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.03k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.03k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.03k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.03k|    }
 1340|  1.03k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  1.03k|    {
 1430|  1.03k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  436|  1.03k|    {
  437|  1.03k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.03k|    {
 1177|  1.03k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.03k|    {
 1598|  1.03k|        return has_value();
 1599|  1.03k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.06k|    {
  485|  2.06k|        return m_has_value;
  486|  2.06k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  1.03k|    {
 1663|  1.03k|        return std::move(value());
 1664|  1.03k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  1.03k|    {
 1627|  1.03k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.03k|        return this->get_value();
 1629|  1.03k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.03k|    {
  451|  1.03k|        return m_value;
  452|  1.03k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|  1.04k|    {
 1823|  1.04k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.04k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1322|  1.04k|{
 1323|  1.04k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.04k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.04k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.04k|            return result(*std::forward<Exp>(exp));
 1327|  1.04k|        }
 1328|       |
 1329|  1.04k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.04k|        return result(unexpect, monostate{});
 1331|  1.04k|    }
 1332|  1.04k|    else {
 1333|  1.04k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.04k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.04k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.04k]
  |  |  ------------------
  ------------------
 1335|  1.04k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.04k|                   : result(unexpect,
 1337|  1.04k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.04k|                                           std::forward<Exp>(exp).error()));
 1339|  1.04k|    }
 1340|  1.04k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3647|  1.04k|    {
 3648|  1.04k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  5.27k|    {
 1653|  5.27k|        return value();
 1654|  5.27k|    }
_ZN3scn2v36detail22parse_presentation_setIwRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6696|    750|{
 6697|    750|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|    750|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    750|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|    750|    auto start = begin;
 6701|    750|    ++begin;
 6702|       |
 6703|    750|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    750|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 750]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|    750|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 186, False: 564]
  ------------------
 6710|    186|        handler.on_charset_inverted();
 6711|    186|        ++begin;
 6712|    186|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 186]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|    186|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 186]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|    186|    }
 6723|    564|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 564]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  12.2k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 12.2k, False: 0]
  ------------------
 6728|  12.2k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.2k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  12.2k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 750, False: 11.4k]
  ------------------
 6733|    750|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|    750|        }
 6735|       |
 6736|  11.4k|        parse_presentation_set_literal(begin, end, handler);
 6737|  11.4k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|    750|}
_ZN3scn2v36detail30parse_presentation_set_literalIwRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6660|  11.4k|{
 6661|  11.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  11.4k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  11.4k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.4k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  11.4k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 11.4k, False: 0]
  |  Branch (6668:25): [True: 156, False: 11.3k]
  |  Branch (6668:49): [True: 156, False: 0]
  ------------------
 6669|  11.4k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 96, False: 60]
  ------------------
 6670|     96|        ++begin;
 6671|       |
 6672|     96|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|     96|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|     96|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|     96|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 96]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|     96|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|     96|        return;
 6686|     96|    }
 6687|       |
 6688|  11.4k|    handler.on_charset_single(cp_first);
 6689|  11.4k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6636|  11.5k|{
 6637|  11.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  11.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  11.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.5k]
  |  |  |  Branch (859:45): [True: 0, False: 11.5k]
  |  |  |  Branch (859:45): [True: 0, False: 11.5k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  11.5k|    const auto cp =
 6646|  11.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  11.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  11.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.5k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  11.5k|    begin += len;
 6653|  11.5k|    return cp;
 6654|  11.5k|}
_ZNK3scn2v36detail12format_specs14charset_stringIwEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6251|  20.5k|    {
 6252|  20.5k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6253|  20.5k|                charset_string_size};
 6254|  20.5k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|    954|    {
 1430|    954|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|    954|    {
  437|    954|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|  2.01k|{
 3654|  2.01k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.01k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  8.62k|    {
 2855|  8.62k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  8.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  8.62k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  8.62k|    {
 2836|  8.62k|        return t.data();
 2837|  8.62k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   207k|    {
 5466|   207k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 207k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   207k|        return static_cast<std::size_t>(m_desc &
 5471|   207k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   207k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   332k|    {
 5491|   332k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   332k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   125k|    {
 5434|   125k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   125k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 125k]
  |  |  ------------------
  ------------------
 5442|     68|            return {};
 5443|     68|        }
 5444|       |
 5445|   125k|        const auto t = type(id);
 5446|   125k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.53k, False: 123k]
  |  |  ------------------
  ------------------
 5447|  1.53k|            return {};
 5448|  1.53k|        }
 5449|       |
 5450|   123k|        basic_scan_arg<Context> arg;
 5451|   123k|        arg.m_type = t;
 5452|   123k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 123k, False: 0]
  ------------------
 5453|   123k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   123k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   123k|        return arg;
 5459|   125k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   125k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|   205k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   125k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   125k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   125k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   125k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   125k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   123k|    {
 5495|   123k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   123k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   245k|    {
 5247|   245k|        return m_type != detail::arg_type::none_type;
 5248|   245k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  6.46k|{
 8417|  6.46k|#define SCN_VISIT(Type)                                         \
 8418|  6.46k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  6.46k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  6.46k|    }                                                           \
 8421|  6.46k|    else {                                                      \
 8422|  6.46k|        return vis(monostate_val);                              \
 8423|  6.46k|    }
 8424|       |
 8425|  6.46k|    monostate monostate_val{};
 8426|       |
 8427|  6.46k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 6.46k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 6.46k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    718|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 718, False: 5.74k]
  ------------------
 8433|    718|            SCN_VISIT(int);
  ------------------
  |  | 8418|    718|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    718|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    718|    }                                                           \
  |  | 8421|    718|    else {                                                      \
  |  | 8422|    718|        return vis(monostate_val);                              \
  |  | 8423|    718|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 6.46k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 6.46k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 6.46k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 6.46k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    718|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 718, False: 5.74k]
  ------------------
 8443|    718|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    718|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    718|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    718|    }                                                           \
  |  | 8421|    718|    else {                                                      \
  |  | 8422|    718|        return vis(monostate_val);                              \
  |  | 8423|    718|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 6.46k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 6.46k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    718|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 718, False: 5.74k]
  ------------------
 8449|    718|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    718|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    718|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    718|    }                                                           \
  |  | 8421|    718|    else {                                                      \
  |  | 8422|    718|        return vis(monostate_val);                              \
  |  | 8423|    718|    }
  ------------------
 8450|    718|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 718, False: 5.74k]
  ------------------
 8451|    718|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    718|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    718|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    718|    }                                                           \
  |  | 8421|    718|    else {                                                      \
  |  | 8422|    718|        return vis(monostate_val);                              \
  |  | 8423|    718|    }
  ------------------
 8452|    718|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 718, False: 5.74k]
  ------------------
 8453|    718|            SCN_VISIT(char);
  ------------------
  |  | 8418|    718|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    718|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    718|    }                                                           \
  |  | 8421|    718|    else {                                                      \
  |  | 8422|    718|        return vis(monostate_val);                              \
  |  | 8423|    718|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 6.46k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 6.46k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 6.46k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    718|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 718, False: 5.74k]
  ------------------
 8461|    718|            SCN_VISIT(double);
  ------------------
  |  | 8418|    718|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    718|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    718|    }                                                           \
  |  | 8421|    718|    else {                                                      \
  |  | 8422|    718|        return vis(monostate_val);                              \
  |  | 8423|    718|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 6.46k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|    718|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 718, False: 5.74k]
  ------------------
 8465|    718|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|    718|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    718|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    718|    }                                                           \
  |  | 8421|    718|    else {                                                      \
  |  | 8422|    718|        return vis(monostate_val);                              \
  |  | 8423|    718|    }
  ------------------
 8466|    718|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 718, False: 5.74k]
  ------------------
 8467|    718|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    718|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    718|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    718|    }                                                           \
  |  | 8421|    718|    else {                                                      \
  |  | 8422|    718|        return vis(monostate_val);                              \
  |  | 8423|    718|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 6.46k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|    718|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 718, False: 5.74k]
  ------------------
 8471|    718|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    718|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    718|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    718|    }                                                           \
  |  | 8421|    718|    else {                                                      \
  |  | 8422|    718|        return vis(monostate_val);                              \
  |  | 8423|    718|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 6.46k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 6.46k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 6.46k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 6.46k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 6.46k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  6.46k|            SCN_CLANG_POP
 8495|  6.46k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.13k|    {
 1837|  2.13k|        return detail::transform_error_impl(std::move(*this),
 1838|  2.13k|                                            std::forward<F>(f));
 1839|  2.13k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  2.13k|{
 1323|  2.13k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  2.13k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  2.13k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  2.13k|            return result(*std::forward<Exp>(exp));
 1327|  2.13k|        }
 1328|       |
 1329|  2.13k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  2.13k|        return result(unexpect, monostate{});
 1331|  2.13k|    }
 1332|  2.13k|    else {
 1333|  2.13k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.13k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.13k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.03k, False: 102]
  |  |  ------------------
  ------------------
 1335|  2.13k|                   ? result(*std::forward<Exp>(exp))
 1336|  2.13k|                   : result(unexpect,
 1337|    102|                            trivial_invoke(std::forward<F>(f),
 1338|    102|                                           std::forward<Exp>(exp).error()));
 1339|  2.13k|    }
 1340|  2.13k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1485|    102|    {
 1486|    102|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1662|  2.03k|    {
 1663|  2.03k|        return std::move(value());
 1664|  2.03k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   207k|    {
 5545|   207k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   207k|    {
 8056|   207k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   207k|{
 7044|   207k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   207k|    handler.check_args_exhausted();
 7046|   207k|    return handler.get_error();
 7047|   207k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   207k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   207k|    auto begin = format.data();
 7013|   207k|    auto it = begin;
 7014|   207k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   506k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 496k, False: 9.67k]
  ------------------
 7017|   496k|        const auto ch = *it++;
 7018|   496k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 212k, False: 284k]
  ------------------
 7019|   212k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   212k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   212k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 195k, False: 16.5k]
  ------------------
 7023|   195k|                return;
 7024|   195k|            }
 7025|   212k|        }
 7026|   284k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 3.47k, False: 281k]
  ------------------
 7027|  3.47k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  6.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.15k, False: 1.31k]
  |  |  |  Branch (859:45): [True: 484, False: 2.98k]
  |  |  |  Branch (859:45): [True: 1.67k, False: 1.31k]
  |  |  ------------------
  ------------------
 7028|  2.15k|                handler.on_error("Unmatched '}' in format string");
 7029|  2.15k|                return;
 7030|  2.15k|            }
 7031|       |
 7032|  1.31k|            handler.on_literal_text(begin, it);
 7033|  1.31k|            begin = ++it;
 7034|  1.31k|        }
 7035|   496k|    }
 7036|       |
 7037|  9.67k|    handler.on_literal_text(begin, end);
 7038|  9.67k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   212k|{
 6942|   212k|    struct id_adapter {
 6943|   212k|        constexpr void operator()()
 6944|   212k|        {
 6945|   212k|            arg_id = handler.on_arg_id();
 6946|   212k|        }
 6947|   212k|        constexpr void operator()(std::size_t id)
 6948|   212k|        {
 6949|   212k|            arg_id = handler.on_arg_id(id);
 6950|   212k|        }
 6951|       |
 6952|   212k|        constexpr void on_error(const char* msg)
 6953|   212k|        {
 6954|   212k|            SCN_UNLIKELY_ATTR
 6955|   212k|            handler.on_error(msg);
 6956|   212k|        }
 6957|       |
 6958|   212k|        Handler& handler;
 6959|   212k|        std::size_t arg_id;
 6960|   212k|    };
 6961|       |
 6962|   212k|    ++begin;
 6963|   212k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 212k]
  |  |  ------------------
  ------------------
 6964|    110|        handler.on_error("Unexpected end of replacement field");
 6965|    110|        return begin;
 6966|    110|    }
 6967|       |
 6968|   212k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 6.46k, False: 205k]
  ------------------
 6969|  6.46k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  6.46k|    }
 6971|   205k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 6.43k, False: 199k]
  ------------------
 6972|  6.43k|        handler.on_literal_text(begin, begin + 1);
 6973|  6.43k|    }
 6974|   199k|    else {
 6975|   199k|        auto adapter = id_adapter{handler, 0};
 6976|   199k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   199k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 199k]
  |  |  ------------------
  ------------------
 6979|    110|            handler.on_error("Missing '}' in format string");
 6980|    110|            return begin;
 6981|    110|        }
 6982|       |
 6983|   199k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 140, False: 198k]
  ------------------
 6984|    140|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    140|        }
 6986|   198k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 118k, False: 80.3k]
  ------------------
 6987|   118k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92, False: 118k]
  |  |  ------------------
  ------------------
 6988|     92|                handler.on_error("Unexpected end of replacement field");
 6989|     92|                return begin;
 6990|     92|            }
 6991|   118k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   118k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.10k, False: 114k]
  |  |  |  Branch (859:45): [True: 0, False: 118k]
  |  |  |  Branch (859:45): [True: 4.10k, False: 114k]
  |  |  ------------------
  ------------------
 6993|  4.10k|                handler.on_error("Unknown format specifier");
 6994|  4.10k|                return begin;
 6995|  4.10k|            }
 6996|   118k|        }
 6997|  80.3k|        else {
 6998|  80.3k|            SCN_UNLIKELY_ATTR
 6999|  80.3k|            handler.on_error("Missing '}' in format string");
 7000|  80.3k|            return begin;
 7001|  80.3k|        }
 7002|   199k|    }
 7003|   127k|    return begin + 1;
 7004|   212k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   125k|    {
 8039|   125k|        return m_args.get(id);
 8040|   125k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8043|  6.60k|    {
 8044|  6.60k|        return m_args;
 8045|  6.60k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|   120k|    {
 8049|   120k|        return m_locale;
 8050|   120k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|   117k|    {
 5566|   117k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 117k]
  |  |  ------------------
  ------------------
 5567|     42|            on_error(
 5568|     42|                "Cannot switch from manual to automatic argument indexing");
 5569|     42|            return 0;
 5570|     42|        }
 5571|       |
 5572|   117k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   117k|        do_check_arg_id(id);
 5574|   117k|        return id;
 5575|   117k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5589|    122|    {
 5590|    122|        return detail::handle_error(
 5591|    122|            scan_error{scan_error::invalid_format_string, msg});
 5592|    122|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   125k|{
 6054|   125k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   125k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   125k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   199k|{
 6443|   199k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   199k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 199k, False: 0]
  |  Branch (6444:26): [True: 88.5k, False: 110k]
  ------------------
 6445|  88.5k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  88.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|  88.5k|    }
 6447|       |
 6448|   110k|    handler();
 6449|   110k|    return begin;
 6450|   199k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|  88.5k|{
 6413|  88.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  88.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|  88.5k|    CharT c = *begin;
 6416|  88.5k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 79.9k, False: 8.56k]
  |  Branch (6416:27): [True: 320, False: 8.24k]
  ------------------
 6417|  80.2k|        handler.on_error("Invalid argument ID");
 6418|  80.2k|        return begin;
 6419|  80.2k|    }
 6420|       |
 6421|  8.24k|    int idx = 0;
 6422|  8.24k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 348, False: 7.89k]
  ------------------
 6423|    348|        idx = parse_simple_int(begin, end);
 6424|    348|    }
 6425|  7.89k|    else {
 6426|  7.89k|        ++begin;
 6427|  7.89k|    }
 6428|       |
 6429|  8.24k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 110, False: 8.13k]
  |  Branch (6429:26): [True: 7.99k, False: 140]
  |  Branch (6429:50): [True: 96, False: 7.89k]
  ------------------
 6430|    206|        handler.on_error("Invalid argument ID");
 6431|    206|        return begin;
 6432|    206|    }
 6433|  8.03k|    handler(idx);
 6434|       |
 6435|  8.03k|    return begin;
 6436|  8.24k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|  80.4k|        {
 6954|  80.4k|            SCN_UNLIKELY_ATTR
 6955|  80.4k|            handler.on_error(msg);
 6956|  80.4k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  23.6k|{
 6392|  23.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  23.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  23.6k|    unsigned long long value = 0;
 6396|  87.3k|    do {
 6397|  87.3k|        value *= 10;
 6398|  87.3k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  87.3k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 116, False: 87.2k]
  ------------------
 6400|  87.3k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|    116|            return -1;
 6402|    116|        }
 6403|  87.2k|        ++begin;
 6404|  87.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 86.9k, False: 312]
  |  Branch (6404:30): [True: 77.1k, False: 9.78k]
  |  Branch (6404:47): [True: 63.7k, False: 13.4k]
  ------------------
 6405|  23.5k|    return static_cast<int>(value);
 6406|  23.6k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|  8.03k|        {
 6949|  8.03k|            arg_id = handler.on_arg_id(id);
 6950|  8.03k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5578|  8.03k|    {
 5579|  8.03k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 7.95k]
  |  |  ------------------
  ------------------
 5580|     80|            on_error(
 5581|     80|                "Cannot switch from manual to automatic argument indexing");
 5582|     80|            return;
 5583|     80|        }
 5584|  7.95k|        m_next_arg_id = -1;
 5585|  7.95k|        do_check_arg_id(id);
 5586|  7.95k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   110k|        {
 6945|   110k|            arg_id = handler.on_arg_id();
 6946|   110k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   236k|    {
 5252|   236k|        return m_type;
 5253|   236k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|   113k|    {
 5561|   113k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   113k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   232k|    {
 5550|   232k|        return m_format.data();
 5551|   232k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   118k|    {
 7122|   118k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   118k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   118k|{
 6858|   118k|    auto do_presentation = [&]() -> const CharT* {
 6859|   118k|        if (*begin == CharT{'['}) {
 6860|   118k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   118k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   118k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   118k|                return begin;
 6866|   118k|            }
 6867|   118k|            handler.on_character_set_string(set);
 6868|   118k|            return begin;
 6869|   118k|        }
 6870|   118k|        if (*begin == CharT{'/'}) {
 6871|   118k|            return parse_presentation_regex(begin, end, handler);
 6872|   118k|        }
 6873|   118k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   118k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   118k|            handler.on_error("Invalid type specifier in format string");
 6876|   118k|            return begin;
 6877|   118k|        }
 6878|   118k|        handler.on_type(type);
 6879|   118k|        return begin;
 6880|   118k|    };
 6881|       |
 6882|   118k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 117k, False: 1.10k]
  |  Branch (6882:28): [True: 2.39k, False: 114k]
  ------------------
 6883|   118k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 896, False: 1.49k]
  |  Branch (6883:36): [True: 844, False: 52]
  ------------------
 6884|    844|        return do_presentation();
 6885|    844|    }
 6886|       |
 6887|   117k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 117k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   117k|    begin = parse_align(begin, end, handler);
 6893|   117k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 124, False: 117k]
  |  |  ------------------
  ------------------
 6894|    124|        handler.on_error("Unexpected end of format string");
 6895|    124|        return begin;
 6896|    124|    }
 6897|       |
 6898|   117k|    begin = parse_width(begin, end, handler);
 6899|   117k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 117k]
  |  |  ------------------
  ------------------
 6900|    120|        handler.on_error("Unexpected end of format string");
 6901|    120|        return begin;
 6902|    120|    }
 6903|       |
 6904|   117k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 16.5k, False: 100k]
  ------------------
 6905|  16.5k|        ++begin;
 6906|  16.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 16.4k]
  |  |  ------------------
  ------------------
 6907|     40|            handler.on_error("Unexpected end of format string");
 6908|     40|            return begin;
 6909|     40|        }
 6910|  16.4k|        begin = parse_precision(begin, end, handler);
 6911|  16.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 114, False: 16.3k]
  |  |  ------------------
  ------------------
 6912|    114|            handler.on_error("Unexpected end of format string");
 6913|    114|            return begin;
 6914|    114|        }
 6915|  16.4k|    }
 6916|       |
 6917|   117k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 770, False: 116k]
  ------------------
 6918|    770|        handler.on_localized();
 6919|    770|        ++begin;
 6920|    770|    }
 6921|   117k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 117k]
  |  |  ------------------
  ------------------
 6922|     52|        handler.on_error("Unexpected end of format string");
 6923|     52|        return begin;
 6924|     52|    }
 6925|       |
 6926|   117k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 117k, False: 0]
  |  Branch (6926:25): [True: 111k, False: 5.90k]
  ------------------
 6927|   111k|        do_presentation();
 6928|   111k|    }
 6929|   117k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.35k, False: 114k]
  |  |  ------------------
  ------------------
 6930|  2.35k|        handler.on_error("Unexpected end of format string");
 6931|  2.35k|        return begin;
 6932|  2.35k|    }
 6933|       |
 6934|   114k|    return begin;
 6935|   117k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.39k|{
 6507|  2.39k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 842, False: 1.55k]
  |  Branch (6507:33): [True: 790, False: 52]
  ------------------
 6508|  2.39k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 268, False: 1.33k]
  |  Branch (6508:33): [True: 106, False: 162]
  ------------------
 6509|  2.39k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   112k|    auto do_presentation = [&]() -> const CharT* {
 6859|   112k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 20.7k, False: 91.4k]
  ------------------
 6860|  20.7k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  20.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 818, False: 19.9k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    818|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    818|                return begin;
 6866|    818|            }
 6867|  19.9k|            handler.on_character_set_string(set);
 6868|  19.9k|            return begin;
 6869|  20.7k|        }
 6870|  91.4k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 86.0k, False: 5.36k]
  ------------------
 6871|  86.0k|            return parse_presentation_regex(begin, end, handler);
 6872|  86.0k|        }
 6873|  5.36k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  5.36k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  5.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.04k, False: 4.31k]
  |  |  ------------------
  ------------------
 6875|  1.04k|            handler.on_error("Invalid type specifier in format string");
 6876|  1.04k|            return begin;
 6877|  1.04k|        }
 6878|  4.31k|        handler.on_type(type);
 6879|  4.31k|        return begin;
 6880|  5.36k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  20.7k|{
 6697|  20.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  20.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  20.7k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  20.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  20.7k|    auto start = begin;
 6701|  20.7k|    ++begin;
 6702|       |
 6703|  20.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 20.6k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     42|        return {};
 6708|     42|    }
 6709|  20.6k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 3.27k, False: 17.4k]
  ------------------
 6710|  3.27k|        handler.on_charset_inverted();
 6711|  3.27k|        ++begin;
 6712|  3.27k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 3.23k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     34|            return {};
 6717|     34|        }
 6718|  3.23k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 52, False: 3.18k]
  ------------------
 6719|     52|            handler.on_charset_single(char32_t{']'});
 6720|     52|            ++begin;
 6721|     52|        }
 6722|  3.23k|    }
 6723|  17.4k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 17.3k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  4.36M|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 4.36M, False: 484]
  ------------------
 6728|  4.36M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  4.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 224, False: 4.36M]
  |  |  ------------------
  ------------------
 6729|    224|            break;
 6730|    224|        }
 6731|       |
 6732|  4.36M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 19.9k, False: 4.34M]
  ------------------
 6733|  19.9k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  19.9k|        }
 6735|       |
 6736|  4.34M|        parse_presentation_set_literal(begin, end, handler);
 6737|  4.34M|    }
 6738|       |
 6739|    708|    SCN_UNLIKELY_ATTR
 6740|    708|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    708|    return {};
 6742|  20.6k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  4.34M|{
 6661|  4.34M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  4.34M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  4.34M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  4.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 4.34M]
  |  |  ------------------
  ------------------
 6665|    112|        return;
 6666|    112|    }
 6667|       |
 6668|  4.34M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 4.34M, False: 188]
  |  Branch (6668:25): [True: 26.4k, False: 4.32M]
  |  Branch (6668:49): [True: 26.3k, False: 34]
  ------------------
 6669|  4.34M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 25.9k, False: 466]
  ------------------
 6670|  25.9k|        ++begin;
 6671|       |
 6672|  25.9k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  25.9k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  25.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 25.8k]
  |  |  ------------------
  ------------------
 6674|     70|            return;
 6675|     70|        }
 6676|       |
 6677|  25.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 25.8k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     34|            return;
 6682|     34|        }
 6683|       |
 6684|  25.8k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  25.8k|        return;
 6686|  25.8k|    }
 6687|       |
 6688|  4.32M|    handler.on_charset_single(cp_first);
 6689|  4.32M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  4.37M|{
 6637|  4.37M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  4.37M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  4.37M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  8.74M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 4.37M]
  |  |  |  Branch (859:45): [True: 70, False: 4.37M]
  |  |  |  Branch (859:45): [True: 26, False: 4.37M]
  |  |  ------------------
  ------------------
 6641|     96|        handler.on_error("Invalid encoding in format string");
 6642|     96|        return invalid_code_point;
 6643|     96|    }
 6644|       |
 6645|  4.37M|    const auto cp =
 6646|  4.37M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  4.37M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  4.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 4.37M]
  |  |  ------------------
  ------------------
 6648|     86|        handler.on_error("Invalid encoding in format string");
 6649|     86|        return invalid_code_point;
 6650|     86|    }
 6651|       |
 6652|  4.37M|    begin += len;
 6653|  4.37M|    return cp;
 6654|  4.37M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  19.9k|    {
 6346|  19.9k|        m_specs.charset_string_data = fmt.data();
 6347|  19.9k|        m_specs.charset_string_size = fmt.size();
 6348|  19.9k|        on_type(presentation_type::string_set);
 6349|  19.9k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  86.0k|{
 6749|  86.0k|#if !SCN_DISABLE_REGEX
 6750|  86.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  86.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  86.0k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  86.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  86.0k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|   172k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  86.0k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  86.0k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  86.0k|        return begin;
 6757|  86.0k|    }
 6758|       |
 6759|  86.0k|    auto start = begin;
 6760|  86.0k|    ++begin;
 6761|       |
 6762|  86.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 86.0k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  86.0k|    handler.on_type(presentation_type::regex);
 6768|  29.3M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 29.3M, False: 542]
  ------------------
 6769|  29.3M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 169k, False: 29.1M]
  ------------------
 6770|   169k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 85.4k, False: 84.5k]
  ------------------
 6771|  85.4k|                break;
 6772|  85.4k|            }
 6773|  84.5k|            else {
 6774|  84.5k|                handler.on_type(presentation_type::regex_escaped);
 6775|  84.5k|            }
 6776|   169k|        }
 6777|  29.3M|    }
 6778|  86.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 542, False: 85.4k]
  |  |  ------------------
  ------------------
 6779|    542|        handler.on_error("Unexpected end of regex in format string");
 6780|    542|        return begin;
 6781|    542|    }
 6782|       |
 6783|  85.4k|    auto regex_end = begin;
 6784|  85.4k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  85.4k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  85.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 85.4k]
  |  |  ------------------
  ------------------
 6786|     34|        handler.on_error("Invalid (empty) regex in format string");
 6787|     34|        return begin;
 6788|     34|    }
 6789|  85.4k|    handler.on_regex_pattern(regex_pattern);
 6790|  85.4k|    ++begin;
 6791|       |
 6792|  85.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  85.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 85.4k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  85.4k|    regex_flags flags{regex_flags::none};
 6798|  85.4k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  85.4k|        {{'m', regex_flags::multiline},
 6800|  85.4k|         {'s', regex_flags::singleline},
 6801|  85.4k|         {'i', regex_flags::nocase},
 6802|  85.4k|         {'n', regex_flags::nocapture}}};
 6803|   104k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 104k, False: 58]
  ------------------
 6804|   104k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 85.0k, False: 19.0k]
  ------------------
 6805|  85.0k|            break;
 6806|  85.0k|        }
 6807|  19.0k|        bool found_flag = false;
 6808|  50.7k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 50.7k, False: 244]
  ------------------
 6809|  50.7k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 31.8k, False: 18.8k]
  ------------------
 6810|  31.8k|                continue;
 6811|  31.8k|            }
 6812|  18.8k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 34, False: 18.8k]
  ------------------
 6813|     34|                handler.on_error("Flag set multiple times in regex");
 6814|     34|                return begin;
 6815|     34|            }
 6816|  18.8k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  18.8k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 48, False: 18.7k]
  ------------------
 6818|       |                // clang-format off
 6819|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     48|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  18.8k|#endif
 6830|  18.8k|            flags |= flag.second;
 6831|  18.8k|            found_flag = true;
 6832|  18.8k|            break;
 6833|  18.8k|        }
 6834|  19.0k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 244, False: 18.8k]
  ------------------
 6835|    244|            handler.on_error("Invalid flag in regex");
 6836|    244|            return begin;
 6837|    244|        }
 6838|  19.0k|    }
 6839|  85.1k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  85.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 85.0k]
  |  |  ------------------
  ------------------
 6842|     58|        handler.on_error("Unexpected end of regex in format string");
 6843|     58|        return begin;
 6844|     58|    }
 6845|       |
 6846|  85.0k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  85.1k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  85.4k|    {
 6354|  85.4k|        m_specs.charset_string_data = pattern.data();
 6355|  85.4k|        m_specs.charset_string_size = pattern.size();
 6356|  85.4k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  5.36k|{
 6455|  5.36k|    switch (type) {
 6456|    124|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 124, False: 5.23k]
  ------------------
 6457|    176|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 52, False: 5.30k]
  ------------------
 6458|    176|            return presentation_type::int_binary;
 6459|    110|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 110, False: 5.25k]
  ------------------
 6460|    110|            return presentation_type::int_decimal;
 6461|    160|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 160, False: 5.20k]
  ------------------
 6462|    160|            return presentation_type::int_generic;
 6463|     70|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 70, False: 5.29k]
  ------------------
 6464|     70|            return presentation_type::int_unsigned_decimal;
 6465|    286|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 286, False: 5.07k]
  ------------------
 6466|    286|            return presentation_type::int_octal;
 6467|     96|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 96, False: 5.26k]
  ------------------
 6468|    130|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 34, False: 5.32k]
  ------------------
 6469|    130|            return presentation_type::int_hex;
 6470|     34|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 34, False: 5.32k]
  ------------------
 6471|     68|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 34, False: 5.32k]
  ------------------
 6472|     68|            return presentation_type::int_arbitrary_base;
 6473|    106|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 106, False: 5.25k]
  ------------------
 6474|    482|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 376, False: 4.98k]
  ------------------
 6475|    482|            return presentation_type::float_hex;
 6476|     88|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 88, False: 5.27k]
  ------------------
 6477|    158|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 70, False: 5.29k]
  ------------------
 6478|    158|            return presentation_type::float_scientific;
 6479|    232|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 232, False: 5.12k]
  ------------------
 6480|    338|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 106, False: 5.25k]
  ------------------
 6481|    338|            return presentation_type::float_fixed;
 6482|    132|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 132, False: 5.22k]
  ------------------
 6483|    190|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 58, False: 5.30k]
  ------------------
 6484|    190|            return presentation_type::float_general;
 6485|  1.65k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.65k, False: 3.70k]
  ------------------
 6486|  1.65k|            return presentation_type::string;
 6487|    376|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 376, False: 4.98k]
  ------------------
 6488|    376|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 5.32k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     78|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 78, False: 5.28k]
  ------------------
 6492|     78|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 5.36k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 5.36k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  1.04k|        default:
  ------------------
  |  Branch (6499:9): [True: 1.04k, False: 4.31k]
  ------------------
 6500|  1.04k|            return presentation_type::none;
 6501|  5.36k|    }
 6502|  5.36k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   117k|{
 6532|   117k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   117k|    auto check_align = [](wchar_t ch) {
 6535|   117k|        switch (ch) {
 6536|   117k|            case L'<':
 6537|   117k|                return align_type::left;
 6538|   117k|            case L'>':
 6539|   117k|                return align_type::right;
 6540|   117k|            case L'^':
 6541|   117k|                return align_type::center;
 6542|   117k|            default:
 6543|   117k|                return align_type::none;
 6544|   117k|        }
 6545|   117k|    };
 6546|       |
 6547|   117k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   117k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   235k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 117k]
  |  |  |  Branch (859:45): [True: 38, False: 117k]
  |  |  |  Branch (859:45): [True: 4, False: 117k]
  |  |  ------------------
  ------------------
 6549|   117k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|     42|        handler.on_error("Invalid encoding in fill character");
 6551|     42|        return begin;
 6552|     42|    }
 6553|       |
 6554|   117k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   117k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   117k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   117k|    const auto begin_before_fill = begin;
 6559|   117k|    begin += potential_fill_len;
 6560|       |
 6561|   117k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.06k, False: 116k]
  ------------------
 6562|  1.06k|        return begin_before_fill;
 6563|  1.06k|    }
 6564|       |
 6565|   116k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   116k|    const auto begin_after_fill = begin;
 6567|   116k|    ++begin;
 6568|       |
 6569|   116k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 115k, False: 898]
  ------------------
 6570|   115k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62, False: 115k]
  |  |  ------------------
  ------------------
 6571|     62|            handler.on_error("Invalid fill character '{' in format string");
 6572|     62|            return begin;
 6573|     62|        }
 6574|   115k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 14.3k, False: 101k]
  ------------------
 6575|  14.3k|            return begin_before_fill;
 6576|  14.3k|        }
 6577|   115k|    }
 6578|       |
 6579|   102k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 89.8k, False: 12.2k]
  ------------------
 6580|  89.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 5.79k, False: 84.0k]
  ------------------
 6581|  5.79k|            handler.on_align(potential_align_on_fill);
 6582|  5.79k|            return begin_after_fill;
 6583|  5.79k|        }
 6584|  84.0k|        return begin_before_fill;
 6585|  89.8k|    }
 6586|       |
 6587|  12.2k|    handler.on_fill(potential_fill);
 6588|  12.2k|    handler.on_align(potential_align_after_fill);
 6589|  12.2k|    return begin;
 6590|   102k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   117k|{
 6514|   117k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   117k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|   117k|        return 1;
 6517|   117k|    }
 6518|   117k|    else {
 6519|   117k|        const auto lengths =
 6520|   117k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   117k|            "\3\4";
 6522|   117k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   117k|        return len;
 6524|   117k|    }
 6525|   117k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   234k|    auto check_align = [](wchar_t ch) {
 6535|   234k|        switch (ch) {
 6536|  1.84k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.84k, False: 232k]
  ------------------
 6537|  1.84k|                return align_type::left;
 6538|  2.50k|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 2.50k, False: 231k]
  ------------------
 6539|  2.50k|                return align_type::right;
 6540|  15.1k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 15.1k, False: 219k]
  ------------------
 6541|  15.1k|                return align_type::center;
 6542|   214k|            default:
  ------------------
  |  Branch (6542:13): [True: 214k, False: 19.4k]
  ------------------
 6543|   214k|                return align_type::none;
 6544|   234k|        }
 6545|   234k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  12.2k|    {
 6268|  12.2k|        m_specs.fill = fill;
 6269|  12.2k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  12.2k|    {
 6149|  12.2k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  12.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  12.2k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  12.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  12.2k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  26.1k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6152:32): [True: 13.8k, False: 12.2k]
  ------------------
 6153|  13.8k|                SCN_GCC_PUSH
 6154|  13.8k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  13.8k|                m_data[i] = s[i];
 6156|  13.8k|                SCN_GCC_POP
 6157|  13.8k|            }
 6158|  12.2k|            m_size = static_cast<unsigned char>(s.size());
 6159|  12.2k|        }
 6160|  12.2k|        else if constexpr (sizeof(CharT) == 2) {
 6161|  12.2k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  12.2k|            m_data[1] =
 6163|  12.2k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  12.2k|            if (s.size() == 1) {
 6165|  12.2k|                return;
 6166|  12.2k|            }
 6167|  12.2k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  12.2k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  12.2k|        }
 6170|  12.2k|        else {
 6171|  12.2k|            const auto front = static_cast<unsigned>(s.front());
 6172|  12.2k|            m_data[0] = static_cast<char>(front);
 6173|  12.2k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  12.2k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  12.2k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  12.2k|        }
 6177|  12.2k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   117k|{
 6597|   117k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   117k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   117k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   117k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 23.9k, False: 93.5k]
  |  Branch (6599:33): [True: 6.92k, False: 17.0k]
  ------------------
 6600|  6.92k|        int width = parse_simple_int(begin, end);
 6601|  6.92k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  6.92k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.89k, False: 34]
  |  |  ------------------
  ------------------
 6602|  6.89k|            handler.on_width(width);
 6603|  6.89k|        }
 6604|     34|        else {
 6605|     34|            handler.on_error("Invalid field width");
 6606|     34|            return begin;
 6607|     34|        }
 6608|  6.92k|    }
 6609|   117k|    return begin;
 6610|   117k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6616|  16.4k|{
 6617|  16.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  16.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 16.4k, False: 38]
  |  Branch (6619:33): [True: 16.3k, False: 46]
  ------------------
 6620|  16.3k|        int prec = parse_simple_int(begin, end);
 6621|  16.3k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  16.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.3k, False: 48]
  |  |  ------------------
  ------------------
 6622|  16.3k|            handler.on_precision(prec);
 6623|  16.3k|        }
 6624|     48|        else {
 6625|     48|            handler.on_error("Invalid field precision");
 6626|     48|            return begin;
 6627|     48|        }
 6628|  16.3k|    }
 6629|  16.4k|    return begin;
 6630|  16.4k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|    770|    {
 7127|    770|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    770|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 690, False: 80]
  ------------------
 7129|    770|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 610, False: 80]
  ------------------
 7130|    770|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 530, False: 80]
  ------------------
 7131|    770|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 450, False: 80]
  ------------------
 7132|    450|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    450|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    450|        }
 7137|       |
 7138|    320|        Handler::on_localized();
 7139|    320|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   113k|{
 8417|   113k|#define SCN_VISIT(Type)                                         \
 8418|   113k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   113k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   113k|    }                                                           \
 8421|   113k|    else {                                                      \
 8422|   113k|        return vis(monostate_val);                              \
 8423|   113k|    }
 8424|       |
 8425|   113k|    monostate monostate_val{};
 8426|       |
 8427|   113k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 113k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 113k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  12.6k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 12.6k, False: 101k]
  ------------------
 8433|  12.6k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 113k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 113k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 113k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 113k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  12.6k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 12.6k, False: 101k]
  ------------------
 8443|  12.6k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 113k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 113k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  12.6k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 12.6k, False: 101k]
  ------------------
 8449|  12.6k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8450|  12.6k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 12.6k, False: 101k]
  ------------------
 8451|  12.6k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8452|  12.6k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 12.6k, False: 101k]
  ------------------
 8453|  12.6k|            SCN_VISIT(char);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 113k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 113k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 113k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  12.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 12.6k, False: 101k]
  ------------------
 8461|  12.6k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 113k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  12.6k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 12.6k, False: 101k]
  ------------------
 8465|  12.6k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8466|  12.6k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 12.6k, False: 101k]
  ------------------
 8467|  12.6k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 113k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  12.6k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 12.6k, False: 101k]
  ------------------
 8471|  12.6k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  12.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  12.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  12.6k|    }                                                           \
  |  | 8421|  12.6k|    else {                                                      \
  |  | 8422|  12.6k|        return vis(monostate_val);                              \
  |  | 8423|  12.6k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 113k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 113k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 113k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 113k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 113k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   113k|            SCN_CLANG_POP
 8495|   113k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  15.7k|    {
 3330|  15.7k|        return m_iterator;
 3331|  15.7k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  3.07k|    {
 1430|  3.07k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  3.07k|    {
  437|  3.07k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.26k|    {
 1177|  3.26k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  8.37k|    {
 3334|  8.37k|        return m_sentinel;
 3335|  8.37k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|    190|    {
 1476|    190|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    190|    {
  447|    190|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  7.43k|    {
 3316|  7.43k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEcvbEv:
 1597|    238|    {
 1598|    238|        return has_value();
 1599|    238|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  6.45k|    {
  485|  6.45k|        return m_has_value;
  486|  6.45k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEERT_v:
 1652|    160|    {
 1653|    160|        return value();
 1654|    160|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  3.07k|    {
 1627|  3.07k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.07k|        return this->get_value();
 1629|  3.07k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  3.07k|    {
  451|  3.07k|        return m_value;
  452|  3.07k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  3.02k|    {
 1837|  3.02k|        return detail::transform_error_impl(std::move(*this),
 1838|  3.02k|                                            std::forward<F>(f));
 1839|  3.02k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKcS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  3.02k|{
 1323|  3.02k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  3.02k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  3.02k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  3.02k|            return result(*std::forward<Exp>(exp));
 1327|  3.02k|        }
 1328|       |
 1329|  3.02k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  3.02k|        return result(unexpect, monostate{});
 1331|  3.02k|    }
 1332|  3.02k|    else {
 1333|  3.02k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.02k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.02k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.91k, False: 112]
  |  |  ------------------
  ------------------
 1335|  3.02k|                   ? result(*std::forward<Exp>(exp))
 1336|  3.02k|                   : result(unexpect,
 1337|    112|                            trivial_invoke(std::forward<F>(f),
 1338|    112|                                           std::forward<Exp>(exp).error()));
 1339|  3.02k|    }
 1340|  3.02k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  2.91k|    {
 1663|  2.91k|        return std::move(value());
 1664|  2.91k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  2.91k|    {
 1430|  2.91k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  2.91k|    {
  437|  2.91k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.02k|    {
 1177|  3.02k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5errorEv:
 1613|    112|    {
 1614|    112|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|    112|        return std::move(this->get_unexpected().error());
 1616|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE14get_unexpectedEv:
  467|    112|    {
  468|    112|        return m_unexpected;
  469|    112|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
 1485|    112|    {
 1486|    112|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  446|    112|    {
  447|    112|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  3.02k|    {
 1598|  3.02k|        return has_value();
 1599|  3.02k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.05k|    {
  485|  6.05k|        return m_has_value;
  486|  6.05k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5errorEv:
 1603|    112|    {
 1604|    112|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    112|        return this->get_unexpected().error();
 1606|    112|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    112|    {
  468|    112|        return m_unexpected;
  469|    112|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  2.91k|    {
 1663|  2.91k|        return std::move(value());
 1664|  2.91k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  2.91k|    {
 1627|  2.91k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.91k|        return this->get_value();
 1629|  2.91k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKcS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.91k|    {
  451|  2.91k|        return m_value;
  452|  2.91k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|   414k|    {
 5466|   414k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 414k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   414k|        return static_cast<std::size_t>(m_desc &
 5471|   414k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   414k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|   495k|    {
 5491|   495k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   495k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  80.1k|    {
 5434|  80.1k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.1k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  80.1k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 84, False: 80.0k]
  |  |  ------------------
  ------------------
 5442|     84|            return {};
 5443|     84|        }
 5444|       |
 5445|  80.0k|        const auto t = type(id);
 5446|  80.0k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  80.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 78.5k]
  |  |  ------------------
  ------------------
 5447|  1.48k|            return {};
 5448|  1.48k|        }
 5449|       |
 5450|  78.5k|        basic_scan_arg<Context> arg;
 5451|  78.5k|        arg.m_type = t;
 5452|  78.5k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 78.5k, False: 0]
  ------------------
 5453|  78.5k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  78.5k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  78.5k|        return arg;
 5459|  80.0k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  80.1k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  80.0k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  80.0k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  80.0k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  80.0k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  80.0k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  78.5k|    {
 5495|  78.5k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  78.5k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|   155k|    {
 5247|   155k|        return m_type != detail::arg_type::none_type;
 5248|   155k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  5.50k|{
 8417|  5.50k|#define SCN_VISIT(Type)                                         \
 8418|  5.50k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  5.50k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  5.50k|    }                                                           \
 8421|  5.50k|    else {                                                      \
 8422|  5.50k|        return vis(monostate_val);                              \
 8423|  5.50k|    }
 8424|       |
 8425|  5.50k|    monostate monostate_val{};
 8426|       |
 8427|  5.50k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 5.50k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 5.50k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|    612|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 612, False: 4.89k]
  ------------------
 8433|    612|            SCN_VISIT(int);
  ------------------
  |  | 8418|    612|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    612|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    612|    }                                                           \
  |  | 8421|    612|    else {                                                      \
  |  | 8422|    612|        return vis(monostate_val);                              \
  |  | 8423|    612|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 5.50k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 5.50k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.50k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 5.50k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|    612|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 612, False: 4.89k]
  ------------------
 8443|    612|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|    612|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    612|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    612|    }                                                           \
  |  | 8421|    612|    else {                                                      \
  |  | 8422|    612|        return vis(monostate_val);                              \
  |  | 8423|    612|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 5.50k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 5.50k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|    612|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 612, False: 4.89k]
  ------------------
 8449|    612|            SCN_VISIT(void*);
  ------------------
  |  | 8418|    612|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    612|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    612|    }                                                           \
  |  | 8421|    612|    else {                                                      \
  |  | 8422|    612|        return vis(monostate_val);                              \
  |  | 8423|    612|    }
  ------------------
 8450|    612|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 612, False: 4.89k]
  ------------------
 8451|    612|            SCN_VISIT(bool);
  ------------------
  |  | 8418|    612|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    612|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    612|    }                                                           \
  |  | 8421|    612|    else {                                                      \
  |  | 8422|    612|        return vis(monostate_val);                              \
  |  | 8423|    612|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 5.50k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|    612|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 612, False: 4.89k]
  ------------------
 8455|    612|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|    612|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    612|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    612|    }                                                           \
  |  | 8421|    612|    else {                                                      \
  |  | 8422|    612|        return vis(monostate_val);                              \
  |  | 8423|    612|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 5.50k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 5.50k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|    612|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 612, False: 4.89k]
  ------------------
 8461|    612|            SCN_VISIT(double);
  ------------------
  |  | 8418|    612|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    612|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    612|    }                                                           \
  |  | 8421|    612|    else {                                                      \
  |  | 8422|    612|        return vis(monostate_val);                              \
  |  | 8423|    612|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 5.50k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 5.50k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|    612|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 612, False: 4.89k]
  ------------------
 8467|    612|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|    612|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    612|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    612|    }                                                           \
  |  | 8421|    612|    else {                                                      \
  |  | 8422|    612|        return vis(monostate_val);                              \
  |  | 8423|    612|    }
  ------------------
 8468|    612|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 612, False: 4.89k]
  ------------------
 8469|    612|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|    612|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    612|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    612|    }                                                           \
  |  | 8421|    612|    else {                                                      \
  |  | 8422|    612|        return vis(monostate_val);                              \
  |  | 8423|    612|    }
  ------------------
 8470|    612|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 612, False: 4.89k]
  ------------------
 8471|    612|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|    612|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|    612|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|    612|    }                                                           \
  |  | 8421|    612|    else {                                                      \
  |  | 8422|    612|        return vis(monostate_val);                              \
  |  | 8423|    612|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 5.50k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 5.50k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 5.50k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 5.50k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 5.50k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  5.50k|            SCN_CLANG_POP
 8495|  5.50k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|   414k|    {
 5545|   414k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|   414k|    {
 8056|   414k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   414k|{
 7044|   414k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   414k|    handler.check_args_exhausted();
 7046|   414k|    return handler.get_error();
 7047|   414k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   414k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   414k|    auto begin = format.data();
 7013|   414k|    auto it = begin;
 7014|   414k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   859M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 859M, False: 128k]
  ------------------
 7017|   859M|        const auto ch = *it++;
 7018|   859M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 81.0k, False: 859M]
  ------------------
 7019|  81.0k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  81.0k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  81.0k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 76.6k, False: 4.37k]
  ------------------
 7023|  76.6k|                return;
 7024|  76.6k|            }
 7025|  81.0k|        }
 7026|   859M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 239k, False: 858M]
  ------------------
 7027|   239k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|   477k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 210k, False: 29.4k]
  |  |  |  Branch (859:45): [True: 1.16k, False: 238k]
  |  |  |  Branch (859:45): [True: 208k, False: 29.4k]
  |  |  ------------------
  ------------------
 7028|   210k|                handler.on_error("Unmatched '}' in format string");
 7029|   210k|                return;
 7030|   210k|            }
 7031|       |
 7032|  29.4k|            handler.on_literal_text(begin, it);
 7033|  29.4k|            begin = ++it;
 7034|  29.4k|        }
 7035|   859M|    }
 7036|       |
 7037|   128k|    handler.on_literal_text(begin, end);
 7038|   128k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|  81.0k|{
 6942|  81.0k|    struct id_adapter {
 6943|  81.0k|        constexpr void operator()()
 6944|  81.0k|        {
 6945|  81.0k|            arg_id = handler.on_arg_id();
 6946|  81.0k|        }
 6947|  81.0k|        constexpr void operator()(std::size_t id)
 6948|  81.0k|        {
 6949|  81.0k|            arg_id = handler.on_arg_id(id);
 6950|  81.0k|        }
 6951|       |
 6952|  81.0k|        constexpr void on_error(const char* msg)
 6953|  81.0k|        {
 6954|  81.0k|            SCN_UNLIKELY_ATTR
 6955|  81.0k|            handler.on_error(msg);
 6956|  81.0k|        }
 6957|       |
 6958|  81.0k|        Handler& handler;
 6959|  81.0k|        std::size_t arg_id;
 6960|  81.0k|    };
 6961|       |
 6962|  81.0k|    ++begin;
 6963|  81.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  81.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88, False: 80.9k]
  |  |  ------------------
  ------------------
 6964|     88|        handler.on_error("Unexpected end of replacement field");
 6965|     88|        return begin;
 6966|     88|    }
 6967|       |
 6968|  80.9k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 5.44k, False: 75.4k]
  ------------------
 6969|  5.44k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|  5.44k|    }
 6971|  75.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 112, False: 75.3k]
  ------------------
 6972|    112|        handler.on_literal_text(begin, begin + 1);
 6973|    112|    }
 6974|  75.3k|    else {
 6975|  75.3k|        auto adapter = id_adapter{handler, 0};
 6976|  75.3k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  75.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  75.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 75.2k]
  |  |  ------------------
  ------------------
 6979|    102|            handler.on_error("Missing '}' in format string");
 6980|    102|            return begin;
 6981|    102|        }
 6982|       |
 6983|  75.2k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 204, False: 75.0k]
  ------------------
 6984|    204|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|    204|        }
 6986|  75.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 74.5k, False: 524]
  ------------------
 6987|  74.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  74.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 74.4k]
  |  |  ------------------
  ------------------
 6988|     64|                handler.on_error("Unexpected end of replacement field");
 6989|     64|                return begin;
 6990|     64|            }
 6991|  74.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  74.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.30k, False: 71.1k]
  |  |  |  Branch (859:45): [True: 0, False: 74.4k]
  |  |  |  Branch (859:45): [True: 3.30k, False: 71.1k]
  |  |  ------------------
  ------------------
 6993|  3.30k|                handler.on_error("Unknown format specifier");
 6994|  3.30k|                return begin;
 6995|  3.30k|            }
 6996|  74.4k|        }
 6997|    524|        else {
 6998|    524|            SCN_UNLIKELY_ATTR
 6999|    524|            handler.on_error("Missing '}' in format string");
 7000|    524|            return begin;
 7001|    524|        }
 7002|  75.2k|    }
 7003|  76.9k|    return begin + 1;
 7004|  80.9k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  80.1k|    {
 8039|  80.1k|        return m_args.get(id);
 8040|  80.1k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8043|  5.64k|    {
 8044|  5.64k|        return m_args;
 8045|  5.64k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  76.2k|    {
 8049|  76.2k|        return m_locale;
 8050|  76.2k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  79.8k|    {
 5566|  79.8k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  79.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48, False: 79.7k]
  |  |  ------------------
  ------------------
 5567|     48|            on_error(
 5568|     48|                "Cannot switch from manual to automatic argument indexing");
 5569|     48|            return 0;
 5570|     48|        }
 5571|       |
 5572|  79.7k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  79.7k|        do_check_arg_id(id);
 5574|  79.7k|        return id;
 5575|  79.8k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5589|    168|    {
 5590|    168|        return detail::handle_error(
 5591|    168|            scan_error{scan_error::invalid_format_string, msg});
 5592|    168|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  80.0k|{
 6054|  80.0k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  80.0k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  80.0k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  75.3k|{
 6443|  75.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  75.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  75.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 75.3k, False: 0]
  |  Branch (6444:26): [True: 980, False: 74.3k]
  ------------------
 6445|    980|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|    980|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|    980|    }
 6447|       |
 6448|  74.3k|    handler();
 6449|  74.3k|    return begin;
 6450|  75.3k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6412|    980|{
 6413|    980|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    980|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    980|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6414|       |
 6415|    980|    CharT c = *begin;
 6416|    980|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6416:9): [True: 144, False: 836]
  |  Branch (6416:27): [True: 252, False: 584]
  ------------------
 6417|    396|        handler.on_error("Invalid argument ID");
 6418|    396|        return begin;
 6419|    396|    }
 6420|       |
 6421|    584|    int idx = 0;
 6422|    584|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6422:9): [True: 248, False: 336]
  ------------------
 6423|    248|        idx = parse_simple_int(begin, end);
 6424|    248|    }
 6425|    336|    else {
 6426|    336|        ++begin;
 6427|    336|    }
 6428|       |
 6429|    584|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6429:9): [True: 102, False: 482]
  |  Branch (6429:26): [True: 278, False: 204]
  |  Branch (6429:50): [True: 128, False: 150]
  ------------------
 6430|    230|        handler.on_error("Invalid argument ID");
 6431|    230|        return begin;
 6432|    230|    }
 6433|    354|    handler(idx);
 6434|       |
 6435|    354|    return begin;
 6436|    584|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6953|    626|        {
 6954|    626|            SCN_UNLIKELY_ATTR
 6955|    626|            handler.on_error(msg);
 6956|    626|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  61.2k|{
 6392|  61.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  61.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  61.2k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  61.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  61.2k|    unsigned long long value = 0;
 6396|  63.2k|    do {
 6397|  63.2k|        value *= 10;
 6398|  63.2k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  63.2k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 63.2k]
  ------------------
 6400|  63.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  63.2k|        ++begin;
 6404|  63.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 62.9k, False: 324]
  |  Branch (6404:30): [True: 8.14k, False: 54.8k]
  |  Branch (6404:47): [True: 2.01k, False: 6.13k]
  ------------------
 6405|  61.2k|    return static_cast<int>(value);
 6406|  61.2k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6948|    354|        {
 6949|    354|            arg_id = handler.on_arg_id(id);
 6950|    354|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5578|    354|    {
 5579|    354|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    354|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 234]
  |  |  ------------------
  ------------------
 5580|    120|            on_error(
 5581|    120|                "Cannot switch from manual to automatic argument indexing");
 5582|    120|            return;
 5583|    120|        }
 5584|    234|        m_next_arg_id = -1;
 5585|    234|        do_check_arg_id(id);
 5586|    234|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  74.3k|        {
 6945|  74.3k|            arg_id = handler.on_arg_id();
 6946|  74.3k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|   148k|    {
 5252|   148k|        return m_type;
 5253|   148k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  70.6k|    {
 5561|  70.6k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  70.6k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|   145k|    {
 5550|   145k|        return m_format.data();
 5551|   145k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  74.4k|    {
 7122|  74.4k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  74.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  74.4k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  74.4k|{
 6858|  74.4k|    auto do_presentation = [&]() -> const CharT* {
 6859|  74.4k|        if (*begin == CharT{'['}) {
 6860|  74.4k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  74.4k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  74.4k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  74.4k|                return begin;
 6866|  74.4k|            }
 6867|  74.4k|            handler.on_character_set_string(set);
 6868|  74.4k|            return begin;
 6869|  74.4k|        }
 6870|  74.4k|        if (*begin == CharT{'/'}) {
 6871|  74.4k|            return parse_presentation_regex(begin, end, handler);
 6872|  74.4k|        }
 6873|  74.4k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  74.4k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  74.4k|            handler.on_error("Invalid type specifier in format string");
 6876|  74.4k|            return begin;
 6877|  74.4k|        }
 6878|  74.4k|        handler.on_type(type);
 6879|  74.4k|        return begin;
 6880|  74.4k|    };
 6881|       |
 6882|  74.4k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 73.4k, False: 1.01k]
  |  Branch (6882:28): [True: 3.32k, False: 70.1k]
  ------------------
 6883|  74.4k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 354, False: 2.97k]
  |  Branch (6883:36): [True: 248, False: 106]
  ------------------
 6884|    248|        return do_presentation();
 6885|    248|    }
 6886|       |
 6887|  74.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  74.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.2k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  74.2k|    begin = parse_align(begin, end, handler);
 6893|  74.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  74.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 132, False: 74.0k]
  |  |  ------------------
  ------------------
 6894|    132|        handler.on_error("Unexpected end of format string");
 6895|    132|        return begin;
 6896|    132|    }
 6897|       |
 6898|  74.0k|    begin = parse_width(begin, end, handler);
 6899|  74.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  74.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 73.9k]
  |  |  ------------------
  ------------------
 6900|    106|        handler.on_error("Unexpected end of format string");
 6901|    106|        return begin;
 6902|    106|    }
 6903|       |
 6904|  73.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 3.97k, False: 70.0k]
  ------------------
 6905|  3.97k|        ++begin;
 6906|  3.97k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 3.94k]
  |  |  ------------------
  ------------------
 6907|     36|            handler.on_error("Unexpected end of format string");
 6908|     36|            return begin;
 6909|     36|        }
 6910|  3.94k|        begin = parse_precision(begin, end, handler);
 6911|  3.94k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.94k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 142, False: 3.79k]
  |  |  ------------------
  ------------------
 6912|    142|            handler.on_error("Unexpected end of format string");
 6913|    142|            return begin;
 6914|    142|        }
 6915|  3.94k|    }
 6916|       |
 6917|  73.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 748, False: 73.0k]
  ------------------
 6918|    748|        handler.on_localized();
 6919|    748|        ++begin;
 6920|    748|    }
 6921|  73.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  73.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66, False: 73.7k]
  |  |  ------------------
  ------------------
 6922|     66|        handler.on_error("Unexpected end of format string");
 6923|     66|        return begin;
 6924|     66|    }
 6925|       |
 6926|  73.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 73.7k, False: 0]
  |  Branch (6926:25): [True: 68.0k, False: 5.66k]
  ------------------
 6927|  68.0k|        do_presentation();
 6928|  68.0k|    }
 6929|  73.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  73.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06k, False: 71.6k]
  |  |  ------------------
  ------------------
 6930|  2.06k|        handler.on_error("Unexpected end of format string");
 6931|  2.06k|        return begin;
 6932|  2.06k|    }
 6933|       |
 6934|  71.6k|    return begin;
 6935|  73.7k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  3.32k|{
 6507|  3.32k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 228, False: 3.09k]
  |  Branch (6507:33): [True: 194, False: 34]
  ------------------
 6508|  3.32k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 230, False: 2.90k]
  |  Branch (6508:33): [True: 160, False: 70]
  ------------------
 6509|  3.32k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  68.3k|    auto do_presentation = [&]() -> const CharT* {
 6859|  68.3k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 4.25k, False: 64.0k]
  ------------------
 6860|  4.25k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  4.25k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 740, False: 3.51k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|    740|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|    740|                return begin;
 6866|    740|            }
 6867|  3.51k|            handler.on_character_set_string(set);
 6868|  3.51k|            return begin;
 6869|  4.25k|        }
 6870|  64.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 60.2k, False: 3.81k]
  ------------------
 6871|  60.2k|            return parse_presentation_regex(begin, end, handler);
 6872|  60.2k|        }
 6873|  3.81k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  3.81k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  3.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 704, False: 3.11k]
  |  |  ------------------
  ------------------
 6875|    704|            handler.on_error("Invalid type specifier in format string");
 6876|    704|            return begin;
 6877|    704|        }
 6878|  3.11k|        handler.on_type(type);
 6879|  3.11k|        return begin;
 6880|  3.81k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  4.25k|{
 6697|  4.25k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  4.25k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  4.25k|    auto start = begin;
 6701|  4.25k|    ++begin;
 6702|       |
 6703|  4.25k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 4.21k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|     40|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|     40|        return {};
 6708|     40|    }
 6709|  4.21k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 1.26k, False: 2.95k]
  ------------------
 6710|  1.26k|        handler.on_charset_inverted();
 6711|  1.26k|        ++begin;
 6712|  1.26k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 1.21k]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|     42|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|     42|            return {};
 6717|     42|        }
 6718|  1.21k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 28, False: 1.19k]
  ------------------
 6719|     28|            handler.on_charset_single(char32_t{']'});
 6720|     28|            ++begin;
 6721|     28|        }
 6722|  1.21k|    }
 6723|  2.95k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 34, False: 2.92k]
  ------------------
 6724|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|     34|    }
 6726|       |
 6727|  48.8k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 48.4k, False: 444]
  ------------------
 6728|  48.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 48.2k]
  |  |  ------------------
  ------------------
 6729|    180|            break;
 6730|    180|        }
 6731|       |
 6732|  48.2k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 3.51k, False: 44.7k]
  ------------------
 6733|  3.51k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  3.51k|        }
 6735|       |
 6736|  44.7k|        parse_presentation_set_literal(begin, end, handler);
 6737|  44.7k|    }
 6738|       |
 6739|    624|    SCN_UNLIKELY_ATTR
 6740|    624|    handler.on_error("Invalid [character set] specifier in format string");
 6741|    624|    return {};
 6742|  4.14k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  44.7k|{
 6661|  44.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  44.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  44.7k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  44.7k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 44.5k]
  |  |  ------------------
  ------------------
 6665|    138|        return;
 6666|    138|    }
 6667|       |
 6668|  44.5k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 44.4k, False: 102]
  |  Branch (6668:25): [True: 1.00k, False: 43.4k]
  |  Branch (6668:49): [True: 952, False: 48]
  ------------------
 6669|  44.5k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 708, False: 244]
  ------------------
 6670|    708|        ++begin;
 6671|       |
 6672|    708|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|    708|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 674]
  |  |  ------------------
  ------------------
 6674|     34|            return;
 6675|     34|        }
 6676|       |
 6677|    674|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    674|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 628]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|     46|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|     46|            return;
 6682|     46|        }
 6683|       |
 6684|    628|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|    628|        return;
 6686|    674|    }
 6687|       |
 6688|  43.8k|    handler.on_charset_single(cp_first);
 6689|  43.8k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  45.4k|{
 6637|  45.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  45.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  45.4k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  45.4k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.4k]
  |  |  |  Branch (859:45): [True: 0, False: 45.4k]
  |  |  |  Branch (859:45): [True: 0, False: 45.4k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  45.4k|    const auto cp =
 6646|  45.4k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  45.4k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 172, False: 45.2k]
  |  |  ------------------
  ------------------
 6648|    172|        handler.on_error("Invalid encoding in format string");
 6649|    172|        return invalid_code_point;
 6650|    172|    }
 6651|       |
 6652|  45.2k|    begin += len;
 6653|  45.2k|    return cp;
 6654|  45.4k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  3.51k|    {
 6346|  3.51k|        m_specs.charset_string_data = fmt.data();
 6347|  3.51k|        m_specs.charset_string_size = fmt.size();
 6348|  3.51k|        on_type(presentation_type::string_set);
 6349|  3.51k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6748|  60.2k|{
 6749|  60.2k|#if !SCN_DISABLE_REGEX
 6750|  60.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  60.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6751|  60.2k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  60.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6752|       |
 6753|  60.2k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|   120k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6753:19): [Folded - Ignored]
  |  Branch (6753:19): [Folded - Ignored]
  ------------------
 6754|  60.2k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6754:19): [Folded - Ignored]
  ------------------
 6755|  60.2k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6756|  60.2k|        return begin;
 6757|  60.2k|    }
 6758|       |
 6759|  60.2k|    auto start = begin;
 6760|  60.2k|    ++begin;
 6761|       |
 6762|  60.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  60.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 60.2k]
  |  |  ------------------
  ------------------
 6763|     34|        handler.on_error("Unexpected end of regex in format string");
 6764|     34|        return begin;
 6765|     34|    }
 6766|       |
 6767|  60.2k|    handler.on_type(presentation_type::regex);
 6768|  6.32M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6768:12): [True: 6.32M, False: 306]
  ------------------
 6769|  6.32M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6769:13): [True: 65.9k, False: 6.25M]
  ------------------
 6770|  65.9k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6770:17): [True: 59.9k, False: 6.03k]
  ------------------
 6771|  59.9k|                break;
 6772|  59.9k|            }
 6773|  6.03k|            else {
 6774|  6.03k|                handler.on_type(presentation_type::regex_escaped);
 6775|  6.03k|            }
 6776|  65.9k|        }
 6777|  6.32M|    }
 6778|  60.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  60.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 306, False: 59.9k]
  |  |  ------------------
  ------------------
 6779|    306|        handler.on_error("Unexpected end of regex in format string");
 6780|    306|        return begin;
 6781|    306|    }
 6782|       |
 6783|  59.9k|    auto regex_end = begin;
 6784|  59.9k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6785|  59.9k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 59.8k]
  |  |  ------------------
  ------------------
 6786|     52|        handler.on_error("Invalid (empty) regex in format string");
 6787|     52|        return begin;
 6788|     52|    }
 6789|  59.8k|    handler.on_regex_pattern(regex_pattern);
 6790|  59.8k|    ++begin;
 6791|       |
 6792|  59.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  59.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 59.8k]
  |  |  ------------------
  ------------------
 6793|     34|        handler.on_error("Unexpected end of regex in format string");
 6794|     34|        return begin;
 6795|     34|    }
 6796|       |
 6797|  59.8k|    regex_flags flags{regex_flags::none};
 6798|  59.8k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6799|  59.8k|        {{'m', regex_flags::multiline},
 6800|  59.8k|         {'s', regex_flags::singleline},
 6801|  59.8k|         {'i', regex_flags::nocase},
 6802|  59.8k|         {'n', regex_flags::nocapture}}};
 6803|  65.5k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6803:12): [True: 65.4k, False: 80]
  ------------------
 6804|  65.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6804:13): [True: 59.5k, False: 5.89k]
  ------------------
 6805|  59.5k|            break;
 6806|  59.5k|        }
 6807|  5.89k|        bool found_flag = false;
 6808|  17.4k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6808:24): [True: 17.4k, False: 144]
  ------------------
 6809|  17.4k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6809:17): [True: 11.6k, False: 5.75k]
  ------------------
 6810|  11.6k|                continue;
 6811|  11.6k|            }
 6812|  5.75k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6812:17): [True: 28, False: 5.72k]
  ------------------
 6813|     28|                handler.on_error("Flag set multiple times in regex");
 6814|     28|                return begin;
 6815|     28|            }
 6816|  5.72k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6817|  5.72k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6817:17): [True: 68, False: 5.65k]
  ------------------
 6818|       |                // clang-format off
 6819|     68|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6820|       |                // clang-format on
 6821|     68|            }
 6822|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6823|       |            if (*begin == CharT{'m'}) {
 6824|       |                // clang-format off
 6825|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6826|       |                // clang-format on
 6827|       |            }
 6828|       |#endif
 6829|  5.72k|#endif
 6830|  5.72k|            flags |= flag.second;
 6831|  5.72k|            found_flag = true;
 6832|  5.72k|            break;
 6833|  5.75k|        }
 6834|  5.87k|        if (!found_flag) {
  ------------------
  |  Branch (6834:13): [True: 144, False: 5.72k]
  ------------------
 6835|    144|            handler.on_error("Invalid flag in regex");
 6836|    144|            return begin;
 6837|    144|        }
 6838|  5.87k|    }
 6839|  59.6k|    handler.on_regex_flags(flags);
 6840|       |
 6841|  59.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  59.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 80, False: 59.5k]
  |  |  ------------------
  ------------------
 6842|     80|        handler.on_error("Unexpected end of regex in format string");
 6843|     80|        return begin;
 6844|     80|    }
 6845|       |
 6846|  59.5k|    return begin;
 6847|       |#else
 6848|       |    handler.on_error("Regular expression support is disabled");
 6849|       |    return {};
 6850|       |#endif
 6851|  59.6k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6353|  59.8k|    {
 6354|  59.8k|        m_specs.charset_string_data = pattern.data();
 6355|  59.8k|        m_specs.charset_string_size = pattern.size();
 6356|  59.8k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  3.81k|{
 6455|  3.81k|    switch (type) {
 6456|     88|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 88, False: 3.72k]
  ------------------
 6457|    122|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 34, False: 3.78k]
  ------------------
 6458|    122|            return presentation_type::int_binary;
 6459|     88|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 88, False: 3.72k]
  ------------------
 6460|     88|            return presentation_type::int_decimal;
 6461|    112|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 112, False: 3.70k]
  ------------------
 6462|    112|            return presentation_type::int_generic;
 6463|    190|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 190, False: 3.62k]
  ------------------
 6464|    190|            return presentation_type::int_unsigned_decimal;
 6465|    142|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 142, False: 3.67k]
  ------------------
 6466|    142|            return presentation_type::int_octal;
 6467|    184|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 184, False: 3.63k]
  ------------------
 6468|    236|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 52, False: 3.76k]
  ------------------
 6469|    236|            return presentation_type::int_hex;
 6470|     60|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 60, False: 3.75k]
  ------------------
 6471|    106|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 46, False: 3.77k]
  ------------------
 6472|    106|            return presentation_type::int_arbitrary_base;
 6473|    178|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 178, False: 3.63k]
  ------------------
 6474|    330|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 152, False: 3.66k]
  ------------------
 6475|    330|            return presentation_type::float_hex;
 6476|    160|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 160, False: 3.65k]
  ------------------
 6477|    194|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 34, False: 3.78k]
  ------------------
 6478|    194|            return presentation_type::float_scientific;
 6479|     94|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 94, False: 3.72k]
  ------------------
 6480|    200|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 106, False: 3.71k]
  ------------------
 6481|    200|            return presentation_type::float_fixed;
 6482|     34|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 34, False: 3.78k]
  ------------------
 6483|     68|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 34, False: 3.78k]
  ------------------
 6484|     68|            return presentation_type::float_general;
 6485|    934|        case 's':
  ------------------
  |  Branch (6485:9): [True: 934, False: 2.88k]
  ------------------
 6486|    934|            return presentation_type::string;
 6487|    268|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 268, False: 3.54k]
  ------------------
 6488|    268|            return presentation_type::character;
 6489|     34|        case '?':
  ------------------
  |  Branch (6489:9): [True: 34, False: 3.78k]
  ------------------
 6490|     34|            return presentation_type::escaped_character;
 6491|     88|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 88, False: 3.72k]
  ------------------
 6492|     88|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 3.81k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 3.81k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|    704|        default:
  ------------------
  |  Branch (6499:9): [True: 704, False: 3.11k]
  ------------------
 6500|    704|            return presentation_type::none;
 6501|  3.81k|    }
 6502|  3.81k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  74.2k|{
 6532|  74.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  74.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  74.2k|    auto check_align = [](wchar_t ch) {
 6535|  74.2k|        switch (ch) {
 6536|  74.2k|            case L'<':
 6537|  74.2k|                return align_type::left;
 6538|  74.2k|            case L'>':
 6539|  74.2k|                return align_type::right;
 6540|  74.2k|            case L'^':
 6541|  74.2k|                return align_type::center;
 6542|  74.2k|            default:
 6543|  74.2k|                return align_type::none;
 6544|  74.2k|        }
 6545|  74.2k|    };
 6546|       |
 6547|  74.2k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  74.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.2k]
  |  |  |  Branch (859:45): [True: 0, False: 74.2k]
  |  |  |  Branch (859:45): [True: 0, False: 74.2k]
  |  |  ------------------
  ------------------
 6549|  74.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  74.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  74.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  74.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  74.2k|    const auto begin_before_fill = begin;
 6559|  74.2k|    begin += potential_fill_len;
 6560|       |
 6561|  74.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 1.01k, False: 73.2k]
  ------------------
 6562|  1.01k|        return begin_before_fill;
 6563|  1.01k|    }
 6564|       |
 6565|  73.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  73.2k|    const auto begin_after_fill = begin;
 6567|  73.2k|    ++begin;
 6568|       |
 6569|  73.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 73.2k, False: 0]
  ------------------
 6570|  73.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  73.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50, False: 73.1k]
  |  |  ------------------
  ------------------
 6571|     50|            handler.on_error("Invalid fill character '{' in format string");
 6572|     50|            return begin;
 6573|     50|        }
 6574|  73.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 4.09k, False: 69.0k]
  ------------------
 6575|  4.09k|            return begin_before_fill;
 6576|  4.09k|        }
 6577|  73.1k|    }
 6578|       |
 6579|  69.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 67.8k, False: 1.27k]
  ------------------
 6580|  67.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 1.39k, False: 66.4k]
  ------------------
 6581|  1.39k|            handler.on_align(potential_align_on_fill);
 6582|  1.39k|            return begin_after_fill;
 6583|  1.39k|        }
 6584|  66.4k|        return begin_before_fill;
 6585|  67.8k|    }
 6586|       |
 6587|  1.27k|    handler.on_fill(potential_fill);
 6588|  1.27k|    handler.on_align(potential_align_after_fill);
 6589|  1.27k|    return begin;
 6590|  69.0k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  74.2k|{
 6514|  74.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  74.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  74.2k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  74.2k|        return 1;
 6517|  74.2k|    }
 6518|  74.2k|    else {
 6519|  74.2k|        const auto lengths =
 6520|  74.2k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  74.2k|            "\3\4";
 6522|  74.2k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  74.2k|        return len;
 6524|  74.2k|    }
 6525|  74.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   147k|    auto check_align = [](wchar_t ch) {
 6535|   147k|        switch (ch) {
 6536|  1.25k|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 1.25k, False: 146k]
  ------------------
 6537|  1.25k|                return align_type::left;
 6538|    334|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 334, False: 147k]
  ------------------
 6539|    334|                return align_type::right;
 6540|  2.34k|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 2.34k, False: 145k]
  ------------------
 6541|  2.34k|                return align_type::center;
 6542|   143k|            default:
  ------------------
  |  Branch (6542:13): [True: 143k, False: 3.93k]
  ------------------
 6543|   143k|                return align_type::none;
 6544|   147k|        }
 6545|   147k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6267|  1.27k|    {
 6268|  1.27k|        m_specs.fill = fill;
 6269|  1.27k|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6148|  1.27k|    {
 6149|  1.27k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  1.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6150|  1.27k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  1.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6151|  1.27k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6151:23): [Folded - Ignored]
  ------------------
 6152|  1.27k|            for (size_t i = 0; i < s.size(); ++i) {
 6153|  1.27k|                SCN_GCC_PUSH
 6154|  1.27k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6155|  1.27k|                m_data[i] = s[i];
 6156|  1.27k|                SCN_GCC_POP
 6157|  1.27k|            }
 6158|  1.27k|            m_size = static_cast<unsigned char>(s.size());
 6159|  1.27k|        }
 6160|  1.27k|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6160:28): [Folded - Ignored]
  ------------------
 6161|  1.27k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6162|  1.27k|            m_data[1] =
 6163|  1.27k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6164|  1.27k|            if (s.size() == 1) {
 6165|  1.27k|                return;
 6166|  1.27k|            }
 6167|  1.27k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6168|  1.27k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6169|  1.27k|        }
 6170|  1.27k|        else {
 6171|  1.27k|            const auto front = static_cast<unsigned>(s.front());
 6172|  1.27k|            m_data[0] = static_cast<char>(front);
 6173|  1.27k|            m_data[1] = static_cast<char>(front >> 8);
 6174|  1.27k|            m_data[2] = static_cast<char>(front >> 16);
 6175|  1.27k|            m_data[3] = static_cast<char>(front >> 24);
 6176|  1.27k|        }
 6177|  1.27k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  74.0k|{
 6597|  74.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  74.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  74.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 64.1k, False: 9.93k]
  |  Branch (6599:33): [True: 57.1k, False: 6.97k]
  ------------------
 6600|  57.1k|        int width = parse_simple_int(begin, end);
 6601|  57.1k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  57.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 57.1k, False: 0]
  |  |  ------------------
  ------------------
 6602|  57.1k|            handler.on_width(width);
 6603|  57.1k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  57.1k|    }
 6609|  74.0k|    return begin;
 6610|  74.0k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6616|  3.94k|{
 6617|  3.94k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.94k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.94k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6618|       |
 6619|  3.94k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6619:9): [True: 3.90k, False: 34]
  |  Branch (6619:33): [True: 3.83k, False: 70]
  ------------------
 6620|  3.83k|        int prec = parse_simple_int(begin, end);
 6621|  3.83k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  3.83k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.83k, False: 0]
  |  |  ------------------
  ------------------
 6622|  3.83k|            handler.on_precision(prec);
 6623|  3.83k|        }
 6624|      0|        else {
 6625|      0|            handler.on_error("Invalid field precision");
 6626|      0|            return begin;
 6627|      0|        }
 6628|  3.83k|    }
 6629|  3.94k|    return begin;
 6630|  3.94k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|    748|    {
 7127|    748|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|    748|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 674, False: 74]
  ------------------
 7129|    748|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 600, False: 74]
  ------------------
 7130|    748|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 526, False: 74]
  ------------------
 7131|    748|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 452, False: 74]
  ------------------
 7132|    452|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|    452|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|    452|        }
 7137|       |
 7138|    296|        Handler::on_localized();
 7139|    296|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  70.2k|{
 8417|  70.2k|#define SCN_VISIT(Type)                                         \
 8418|  70.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  70.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  70.2k|    }                                                           \
 8421|  70.2k|    else {                                                      \
 8422|  70.2k|        return vis(monostate_val);                              \
 8423|  70.2k|    }
 8424|       |
 8425|  70.2k|    monostate monostate_val{};
 8426|       |
 8427|  70.2k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 70.2k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 70.2k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|  7.84k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 7.84k, False: 62.4k]
  ------------------
 8433|  7.84k|            SCN_VISIT(int);
  ------------------
  |  | 8418|  7.84k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.84k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.84k|    }                                                           \
  |  | 8421|  7.84k|    else {                                                      \
  |  | 8422|  7.84k|        return vis(monostate_val);                              \
  |  | 8423|  7.84k|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 70.2k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 70.2k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 70.2k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 70.2k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|  7.84k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 7.84k, False: 62.4k]
  ------------------
 8443|  7.84k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|  7.84k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.84k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.84k|    }                                                           \
  |  | 8421|  7.84k|    else {                                                      \
  |  | 8422|  7.84k|        return vis(monostate_val);                              \
  |  | 8423|  7.84k|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 70.2k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 70.2k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|  7.77k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 7.77k, False: 62.4k]
  ------------------
 8449|  7.77k|            SCN_VISIT(void*);
  ------------------
  |  | 8418|  7.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.77k|    }                                                           \
  |  | 8421|  7.77k|    else {                                                      \
  |  | 8422|  7.77k|        return vis(monostate_val);                              \
  |  | 8423|  7.77k|    }
  ------------------
 8450|  7.84k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 7.84k, False: 62.4k]
  ------------------
 8451|  7.84k|            SCN_VISIT(bool);
  ------------------
  |  | 8418|  7.84k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.84k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.84k|    }                                                           \
  |  | 8421|  7.84k|    else {                                                      \
  |  | 8422|  7.84k|        return vis(monostate_val);                              \
  |  | 8423|  7.84k|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 70.2k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|  7.77k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 7.77k, False: 62.4k]
  ------------------
 8455|  7.77k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|  7.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.77k|    }                                                           \
  |  | 8421|  7.77k|    else {                                                      \
  |  | 8422|  7.77k|        return vis(monostate_val);                              \
  |  | 8423|  7.77k|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 70.2k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 70.2k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|  7.84k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 7.84k, False: 62.4k]
  ------------------
 8461|  7.84k|            SCN_VISIT(double);
  ------------------
  |  | 8418|  7.84k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.84k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.84k|    }                                                           \
  |  | 8421|  7.84k|    else {                                                      \
  |  | 8422|  7.84k|        return vis(monostate_val);                              \
  |  | 8423|  7.84k|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 70.2k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 70.2k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  7.77k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 7.77k, False: 62.4k]
  ------------------
 8467|  7.77k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  7.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.77k|    }                                                           \
  |  | 8421|  7.77k|    else {                                                      \
  |  | 8422|  7.77k|        return vis(monostate_val);                              \
  |  | 8423|  7.77k|    }
  ------------------
 8468|  7.77k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 7.77k, False: 62.4k]
  ------------------
 8469|  7.77k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  7.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.77k|    }                                                           \
  |  | 8421|  7.77k|    else {                                                      \
  |  | 8422|  7.77k|        return vis(monostate_val);                              \
  |  | 8423|  7.77k|    }
  ------------------
 8470|  7.77k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 7.77k, False: 62.4k]
  ------------------
 8471|  7.77k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  7.77k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  7.77k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  7.77k|    }                                                           \
  |  | 8421|  7.77k|    else {                                                      \
  |  | 8422|  7.77k|        return vis(monostate_val);                              \
  |  | 8423|  7.77k|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 70.2k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 70.2k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 70.2k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 70.2k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 70.2k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  70.2k|            SCN_CLANG_POP
 8495|  70.2k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE5beginEv:
 3329|  5.58k|    {
 3330|  5.58k|        return m_iterator;
 3331|  5.58k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEC2ISH_vEEOT_:
 1429|  1.39k|    {
 1430|  1.39k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.39k|    {
  437|  1.39k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.39k|    {
 1177|  1.39k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEE3endEv:
 3333|  2.79k|    {
 3334|  2.79k|        return m_sentinel;
 3335|  2.79k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS7_IPKwS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEENSB_ISD_E8sentinelILb1EEEEC2ISG_LPv0EEET_SJ_:
 3315|  2.79k|    {
 3316|  2.79k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9has_valueEv:
  484|  2.79k|    {
  485|  2.79k|        return m_has_value;
  486|  2.79k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.39k|    {
 1627|  1.39k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.39k|        return this->get_value();
 1629|  1.39k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS3_9eof_errorELb1EE9get_valueEv:
  450|  1.39k|    {
  451|  1.39k|        return m_value;
  452|  1.39k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESI_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSO_:
 1836|  1.39k|    {
 1837|  1.39k|        return detail::transform_error_impl(std::move(*this),
 1838|  1.39k|                                            std::forward<F>(f));
 1839|  1.39k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS6_IPKwS8_EENS4_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEE8sentinelILb1EEEEENS4_9eof_errorEEERFNS0_10scan_errorESK_ELPv0ESM_EEDaOT_OT0_:
 1322|  1.39k|{
 1323|  1.39k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  1.39k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  1.39k|        if (SCN_LIKELY(exp.has_value())) {
 1326|  1.39k|            return result(*std::forward<Exp>(exp));
 1327|  1.39k|        }
 1328|       |
 1329|  1.39k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  1.39k|        return result(unexpect, monostate{});
 1331|  1.39k|    }
 1332|  1.39k|    else {
 1333|  1.39k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.39k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.39k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.39k, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.39k|                   ? result(*std::forward<Exp>(exp))
 1336|  1.39k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.39k|    }
 1340|  1.39k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS2_9eof_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.39k|    {
 1663|  1.39k|        return std::move(value());
 1664|  1.39k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  1.39k|    {
 1430|  1.39k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2IJSI_EvEENSt3__110in_place_tEDpOT_:
  436|  1.39k|    {
  437|  1.39k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.39k|    {
 1177|  1.39k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEcvbEv:
 1597|  1.39k|    {
 1598|  1.39k|        return has_value();
 1599|  1.39k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.79k|    {
  485|  2.79k|        return m_has_value;
  486|  2.79k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1662|  1.39k|    {
 1663|  1.39k|        return std::move(value());
 1664|  1.39k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS2_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  1.39k|    {
 1627|  1.39k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.39k|        return this->get_value();
 1629|  1.39k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS5_IPKwS7_EENS3_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEE8sentinelILb1EEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.39k|    {
  451|  1.39k|        return m_value;
  452|  1.39k|    }

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  23.0k|{
   89|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.0k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   207k|{
   44|   207k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   207k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  23.0k|{
  127|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.0k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   207k|{
   60|   207k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   207k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  23.0k|{
   89|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.0k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  23.0k|{
  127|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.0k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  23.0k|{
   89|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.0k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  23.0k|{
  127|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.0k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  23.0k|{
   89|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.0k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  23.0k|{
  127|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.0k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  23.0k|{
   89|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.0k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  23.0k|{
  127|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.0k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  23.0k|{
   89|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.0k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  23.0k|{
  127|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.0k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  23.0k|{
   89|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.0k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  23.0k|{
  127|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.0k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  23.0k|{
   89|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.0k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  23.0k|{
  127|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.0k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  23.0k|{
   89|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  23.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  23.0k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  23.0k|{
  127|  23.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  23.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  23.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  23.0k|    static_cast<    \
  |  |  929|  23.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  23.0k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   311k|{
  653|   311k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   311k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    288|{
  659|    288|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    288|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 144, False: 144]
  ------------------
  661|    288|                    : std::locale{};
  662|    288|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    994|{
 1221|    994|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    994|                                  m_nan_payload_buffer, value);
 1223|    994|    value = this->setsign(value);
 1224|    994|    return n;
 1225|    994|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  1.02k|{
 1221|  1.02k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  1.02k|                                  m_nan_payload_buffer, value);
 1223|  1.02k|    value = this->setsign(value);
 1224|  1.02k|    return n;
 1225|  1.02k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     20|{
 1461|     20|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     20|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     20|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     20|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     20|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 20, False: 0]
  ------------------
 1467|     20|        SCN_UNLIKELY_ATTR
 1468|     20|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     20|                                     "Invalid integer value");
 1470|     20|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    970|{
 1461|    970|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    970|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    970|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    970|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    970|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    970|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    970|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    970|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    970|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    970|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    970|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    970|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    970|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 970, False: 0]
  ------------------
 1467|    970|        SCN_UNLIKELY_ATTR
 1468|    970|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    970|                                     "Invalid integer value");
 1470|    970|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.03k|{
 1461|  1.03k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.03k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.03k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.03k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.03k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.03k, False: 0]
  ------------------
 1467|  1.03k|        SCN_UNLIKELY_ATTR
 1468|  1.03k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.03k|                                     "Invalid integer value");
 1470|  1.03k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    970|{
 1461|    970|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    970|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    970|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    970|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    970|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    970|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    970|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    970|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    970|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    970|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    970|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    970|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    970|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 970, False: 0]
  ------------------
 1467|    970|        SCN_UNLIKELY_ATTR
 1468|    970|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    970|                                     "Invalid integer value");
 1470|    970|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.01k|{
 1461|  1.01k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.01k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.01k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.01k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.01k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.01k, False: 0]
  ------------------
 1467|  1.01k|        SCN_UNLIKELY_ATTR
 1468|  1.01k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.01k|                                     "Invalid integer value");
 1470|  1.01k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    954|{
 1461|    954|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    954|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    954|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    954|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    954|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    954|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    954|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    954|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    954|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    954|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    954|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    954|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    954|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 954, False: 0]
  ------------------
 1467|    954|        SCN_UNLIKELY_ATTR
 1468|    954|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    954|                                     "Invalid integer value");
 1470|    954|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.00k|{
 1461|  1.00k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.00k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.00k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.00k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.00k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.00k, False: 0]
  ------------------
 1467|  1.00k|        SCN_UNLIKELY_ATTR
 1468|  1.00k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.00k|                                     "Invalid integer value");
 1470|  1.00k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   103k|{
 2184|   103k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   103k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   207k|{
 2208|   207k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   207k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  4.22k|{
  194|  4.22k|    return find_classic_impl(
  195|  4.22k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  4.22k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  4.22k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  29.0k|{
  202|  29.0k|    return find_classic_impl(
  203|  29.0k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  29.0k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  29.0k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    290|{
  673|    290|    return e;
  674|    290|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   103k|{
 2141|   103k|    return vscan_internal(source, format, args);
 2142|   103k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   207k|{
 2161|   207k|    return vscan_internal(source, format, args);
 2162|   207k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  4.22k|{
  118|  4.22k|    auto it = source.begin();
  119|       |
  120|  24.1k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 20.7k, False: 3.41k]
  ------------------
  121|  20.7k|        auto sv =
  122|  20.7k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  20.7k|                .substr(0, 8);
  124|       |
  125|  20.7k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 5.83k, False: 14.8k]
  ------------------
  126|  5.83k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  5.83k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  5.83k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 486, False: 5.35k]
  ------------------
  129|    486|                break;
  130|    486|            }
  131|  5.35k|            continue;
  132|  5.83k|        }
  133|       |
  134|  63.0k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 48.4k, False: 14.5k]
  ------------------
  135|  48.4k|            auto tmp =
  136|  48.4k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  48.4k|            auto res = get_next_code_point(tmp);
  138|  48.4k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 324, False: 48.1k]
  ------------------
  139|    324|                return it;
  140|    324|            }
  141|  48.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  48.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  48.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  48.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  48.1k|        }
  145|  14.8k|    }
  146|       |
  147|  3.90k|    return detail::make_string_view_iterator(source, it);
  148|  4.22k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  57.5k|{
  105|  57.5k|    static_assert(sizeof(*source.data()) == 1);
  106|  57.5k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  57.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  57.5k|    uint64_t word{};
  108|  57.5k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  57.5k|    return has_byte_greater(word, 127) != 0;
  111|  57.5k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  39.6k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  48.4k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  29.0k|{
  118|  29.0k|    auto it = source.begin();
  119|       |
  120|  45.7k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 36.8k, False: 8.95k]
  ------------------
  121|  36.8k|        auto sv =
  122|  36.8k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  36.8k|                .substr(0, 8);
  124|       |
  125|  36.8k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 17.7k, False: 19.0k]
  ------------------
  126|  17.7k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  17.7k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  17.7k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 11.9k, False: 5.83k]
  ------------------
  129|  11.9k|                break;
  130|  11.9k|            }
  131|  5.83k|            continue;
  132|  17.7k|        }
  133|       |
  134|  57.4k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 46.4k, False: 10.9k]
  ------------------
  135|  46.4k|            auto tmp =
  136|  46.4k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  46.4k|            auto res = get_next_code_point(tmp);
  138|  46.4k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 8.10k, False: 38.3k]
  ------------------
  139|  8.10k|                return it;
  140|  8.10k|            }
  141|  38.3k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  38.3k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  38.3k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  38.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  38.3k|        }
  145|  19.0k|    }
  146|       |
  147|  20.8k|    return detail::make_string_view_iterator(source, it);
  148|  29.0k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  52.2k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  46.4k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    994|{
 1138|    994|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 994]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    994|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 994]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    994|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 994]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    994|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 994]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    994|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    994|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 38, False: 956]
  ------------------
 1185|     38|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     38|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 0]
  |  |  ------------------
  ------------------
 1186|     38|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     38|                                         "Invalid floating-point digit");
 1188|     38|        }
 1189|     38|    }
 1190|    956|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    956|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 956, False: 0]
  |  |  ------------------
  ------------------
 1191|    956|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    956|                                     "Invalid floating-point digit");
 1193|    956|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  1.02k|{
 1138|  1.02k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 1.02k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|  1.02k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 1.02k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|  1.02k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 1.02k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|  1.02k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 1.02k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  1.02k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  1.02k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 14, False: 1.00k]
  ------------------
 1185|     14|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 1186|     14|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     14|                                         "Invalid floating-point digit");
 1188|     14|        }
 1189|     14|    }
 1190|  1.00k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.00k, False: 0]
  |  |  ------------------
  ------------------
 1191|  1.00k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  1.00k|                                     "Invalid floating-point digit");
 1193|  1.00k|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   207k|{
 1625|   207k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 207k, False: 414]
  ------------------
 1626|   207k|        return false;
 1627|   207k|    }
 1628|    414|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 288]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   207k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   207k|    {
 1903|   207k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   622k|    {
 1722|   622k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   622k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 622k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   622k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   207k|    {
 1853|   207k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   207k|{
 2038|   207k|    const auto beg = handler.get_ctx().begin();
 2039|   207k|    detail::parse_format_string<false>(format, handler);
 2040|   207k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 203k, False: 3.78k]
  |  |  ------------------
  ------------------
 2041|   203k|        return unexpected(handler.error);
 2042|   203k|    }
 2043|  3.78k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   207k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   958k|    {
 2022|   958k|        return ctx.get();
 2023|   958k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   958k|    {
 1857|   958k|        return contiguous_ctx;
 1858|   958k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   229k|    {
 1907|   303k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 81.4k, False: 222k]
  ------------------
 1908|  81.4k|            auto it = get_ctx().begin();
 1909|  81.4k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.17k, False: 80.2k]
  ------------------
 1910|  1.17k|                SCN_UNLIKELY_ATTR
 1911|  1.17k|                return on_error("Unexpected end of source");
 1912|  1.17k|            }
 1913|       |
 1914|  80.2k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|  80.2k|                    detail::make_string_view_from_pointers(begin, end));
 1916|  80.2k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 3.96k, False: 76.3k]
  ------------------
 1917|  3.96k|                SCN_UNLIKELY_ATTR
 1918|  3.96k|                return on_error("Invalid encoding in format string");
 1919|  3.96k|            }
 1920|  76.3k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 8.62k, False: 67.6k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  8.62k|                get_ctx().advance_to(
 1923|  8.62k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  8.62k|                auto begin_it = impl::read_while_classic_space(
 1926|  8.62k|                    detail::make_string_view_from_pointers(
 1927|  8.62k|                        detail::to_address(after_space_it),
 1928|  8.62k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  8.62k|                begin = detail::to_address(begin_it) - 1;
 1931|  8.62k|                continue;
 1932|  8.62k|            }
 1933|       |
 1934|  67.6k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 2.48k, False: 65.1k]
  ------------------
 1935|  2.48k|                SCN_UNLIKELY_ATTR
 1936|  2.48k|                return on_error("Unexpected literal character in source");
 1937|  2.48k|            }
 1938|  65.1k|            get_ctx().advance_to(ranges::next(it));
 1939|  65.1k|        }
 1940|   229k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1971|  6.60k|    {
 1972|  6.60k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  6.60k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  6.60k|        on_visit_scan_arg(
 1976|  6.60k|            impl::default_arg_reader<context_type>{
 1977|  6.60k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  6.60k|            arg);
 1979|  6.60k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   125k|{
 1681|   125k|    auto arg = ctx.arg(id);
 1682|   125k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.60k, False: 123k]
  |  |  ------------------
  ------------------
 1683|  1.60k|        handler.on_error("Failed to find argument with ID");
 1684|  1.60k|    }
 1685|   125k|    return arg;
 1686|   125k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   205k|    {
 1797|   205k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.17k, False: 202k]
  |  |  ------------------
  ------------------
 1798|  3.17k|            on_error("Invalid out-of-range argument ID");
 1799|  3.17k|            return;
 1800|  3.17k|        }
 1801|       |
 1802|   202k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 142, False: 201k]
  |  |  ------------------
  ------------------
 1803|    142|            return on_error("Argument with this ID has already been scanned");
 1804|    142|        }
 1805|       |
 1806|   201k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   201k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 201k, False: 0]
  |  |  ------------------
  ------------------
 1807|   201k|            visited_args_lower64 |= (1ull << id);
 1808|   201k|            return;
 1809|   201k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   202k|    {
 1782|   202k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 202k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   202k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   202k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 202k, False: 0]
  |  |  ------------------
  ------------------
 1788|   202k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   202k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   202k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  6.60k|    {
 1956|  6.60k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 160, False: 6.44k]
  |  Branch (1956:23): [True: 0, False: 6.44k]
  ------------------
 1957|    160|            SCN_UNLIKELY_ATTR
 1958|    160|            return;
 1959|    160|        }
 1960|       |
 1961|  6.44k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  6.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  6.44k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  6.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.57k, False: 1.86k]
  |  |  ------------------
  ------------------
 1963|  4.57k|            on_error(r.error());
 1964|  4.57k|        }
 1965|  1.86k|        else {
 1966|  1.86k|            get_ctx().advance_to(*r);
 1967|  1.86k|        }
 1968|  6.44k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   181k|    {
 1766|   181k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 181k, False: 0]
  |  |  ------------------
  ------------------
 1767|   181k|            error = err;
 1768|   181k|        }
 1769|   181k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   117k|    {
 1944|   117k|        return parse_ctx.next_arg_id();
 1945|   117k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1947|  8.03k|    {
 1948|  8.03k|        parse_ctx.check_arg_id(id);
 1949|  8.03k|        return id;
 1950|  8.03k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   118k|    {
 1985|   118k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   118k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   118k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 118k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   118k|        auto specs = detail::format_specs{};
 1998|   118k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   118k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   118k|            arg.type()};
 2001|       |
 2002|   118k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   118k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.80k, False: 115k]
  |  Branch (2003:29): [True: 1.28k, False: 114k]
  ------------------
 2004|  4.08k|            SCN_UNLIKELY_ATTR
 2005|  4.08k|            on_error("Missing '}' in format string");
 2006|  4.08k|            return parse_ctx.begin();
 2007|  4.08k|        }
 2008|   114k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 410, False: 113k]
  |  |  ------------------
  ------------------
 2009|    410|            return parse_ctx.begin();
 2010|    410|        }
 2011|   113k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   113k|        on_visit_scan_arg(
 2014|   113k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   113k|                                           get_ctx().locale()},
 2016|   113k|            arg);
 2017|   113k|        return parse_ctx.begin();
 2018|   114k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   118k|    {
 1701|   118k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   113k|    {
 1956|   113k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 116, False: 113k]
  |  Branch (1956:23): [True: 0, False: 113k]
  ------------------
 1957|    116|            SCN_UNLIKELY_ATTR
 1958|    116|            return;
 1959|    116|        }
 1960|       |
 1961|   113k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   113k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105k, False: 8.59k]
  |  |  ------------------
  ------------------
 1963|   105k|            on_error(r.error());
 1964|   105k|        }
 1965|  8.59k|        else {
 1966|  8.59k|            get_ctx().advance_to(*r);
 1967|  8.59k|        }
 1968|   113k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   980k|    {
 1761|   980k|        SCN_UNLIKELY_ATTR
 1762|   980k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   980k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   622k|    {
 1729|   622k|        {
 1730|   622k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 622k]
  ------------------
 1731|   622k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 622k]
  ------------------
 1732|   622k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   622k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   622k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 420k, False: 201k]
  ------------------
 1736|   420k|                return on_error("Argument list not exhausted");
 1737|   420k|            }
 1738|   622k|        }
 1739|       |
 1740|   201k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 201k, False: 0]
  ------------------
 1741|   201k|            return;
 1742|   201k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   622k|    {
 1777|   622k|        return error;
 1778|   622k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  1.11M|    {
 1773|  1.11M|        return static_cast<bool>(error);
 1774|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   207k|{
 2053|   207k|    const auto argcount = args.size();
 2054|   207k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 207k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   207k|    auto handler = format_handler<true, CharT>{
 2060|   207k|        ranges::subrange<const CharT*>{source.data(),
 2061|   207k|                                       source.data() + source.size()},
 2062|   207k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   207k|    static_cast<    \
  |  |  929|   207k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   207k|    static_cast<    \
  |  |  929|   207k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   207k|    return vscan_parse_format_string(format, handler);
 2064|   207k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   414k|{
 2053|   414k|    const auto argcount = args.size();
 2054|   414k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 18, False: 414k]
  |  Branch (2054:60): [True: 18, False: 0]
  ------------------
 2055|     18|        auto arg = args.get(0);
 2056|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|     18|    }
 2058|       |
 2059|   414k|    auto handler = format_handler<true, CharT>{
 2060|   414k|        ranges::subrange<const CharT*>{source.data(),
 2061|   414k|                                       source.data() + source.size()},
 2062|   414k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   414k|    static_cast<    \
  |  |  929|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   414k|    static_cast<    \
  |  |  929|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   414k|    return vscan_parse_format_string(format, handler);
 2064|   414k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   414k|{
 1625|   414k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 402k, False: 12.0k]
  ------------------
 1626|   402k|        return false;
 1627|   402k|    }
 1628|  12.0k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 11.9k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   414k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     10|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   414k|    {
 1903|   414k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   414k|    {
 1853|   414k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   414k|{
 2038|   414k|    const auto beg = handler.get_ctx().begin();
 2039|   414k|    detail::parse_format_string<false>(format, handler);
 2040|   414k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   414k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 413k, False: 986]
  |  |  ------------------
  ------------------
 2041|   413k|        return unexpected(handler.error);
 2042|   413k|    }
 2043|    986|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   414k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  1.27M|    {
 2022|  1.27M|        return ctx.get();
 2023|  1.27M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  1.27M|    {
 1857|  1.27M|        return contiguous_ctx;
 1858|  1.27M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   238k|    {
 1907|   307k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 225k, False: 82.0k]
  ------------------
 1908|   225k|            auto it = get_ctx().begin();
 1909|   225k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 498, False: 224k]
  ------------------
 1910|    498|                SCN_UNLIKELY_ATTR
 1911|    498|                return on_error("Unexpected end of source");
 1912|    498|            }
 1913|       |
 1914|   224k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   224k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   224k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 155k, False: 69.7k]
  ------------------
 1917|   155k|                SCN_UNLIKELY_ATTR
 1918|   155k|                return on_error("Invalid encoding in format string");
 1919|   155k|            }
 1920|  69.7k|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 26.9k, False: 42.7k]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|  26.9k|                get_ctx().advance_to(
 1923|  26.9k|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|  26.9k|                auto begin_it = impl::read_while_classic_space(
 1926|  26.9k|                    detail::make_string_view_from_pointers(
 1927|  26.9k|                        detail::to_address(after_space_it),
 1928|  26.9k|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|  26.9k|                begin = detail::to_address(begin_it) - 1;
 1931|  26.9k|                continue;
 1932|  26.9k|            }
 1933|       |
 1934|  42.7k|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 1.02k, False: 41.7k]
  ------------------
 1935|  1.02k|                SCN_UNLIKELY_ATTR
 1936|  1.02k|                return on_error("Unexpected literal character in source");
 1937|  1.02k|            }
 1938|  41.7k|            get_ctx().advance_to(ranges::next(it));
 1939|  41.7k|        }
 1940|   238k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1971|  5.64k|    {
 1972|  5.64k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1973|  5.64k|        set_arg_as_visited(arg_id);
 1974|       |
 1975|  5.64k|        on_visit_scan_arg(
 1976|  5.64k|            impl::default_arg_reader<context_type>{
 1977|  5.64k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1978|  5.64k|            arg);
 1979|  5.64k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  80.1k|{
 1681|  80.1k|    auto arg = ctx.arg(id);
 1682|  80.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.57k, False: 78.5k]
  |  |  ------------------
  ------------------
 1683|  1.57k|        handler.on_error("Failed to find argument with ID");
 1684|  1.57k|    }
 1685|  80.1k|    return arg;
 1686|  80.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  5.64k|    {
 1956|  5.64k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 158, False: 5.49k]
  |  Branch (1956:23): [True: 0, False: 5.49k]
  ------------------
 1957|    158|            SCN_UNLIKELY_ATTR
 1958|    158|            return;
 1959|    158|        }
 1960|       |
 1961|  5.49k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  5.49k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.91k, False: 1.57k]
  |  |  ------------------
  ------------------
 1963|  3.91k|            on_error(r.error());
 1964|  3.91k|        }
 1965|  1.57k|        else {
 1966|  1.57k|            get_ctx().advance_to(*r);
 1967|  1.57k|        }
 1968|  5.49k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  79.8k|    {
 1944|  79.8k|        return parse_ctx.next_arg_id();
 1945|  79.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1947|    354|    {
 1948|    354|        parse_ctx.check_arg_id(id);
 1949|    354|        return id;
 1950|    354|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  74.4k|    {
 1985|  74.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  74.4k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  74.4k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 74.4k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  74.4k|        auto specs = detail::format_specs{};
 1998|  74.4k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  74.4k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  74.4k|            arg.type()};
 2001|       |
 2002|  74.4k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  74.4k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 2.55k, False: 71.9k]
  |  Branch (2003:29): [True: 864, False: 71.0k]
  ------------------
 2004|  3.41k|            SCN_UNLIKELY_ATTR
 2005|  3.41k|            on_error("Missing '}' in format string");
 2006|  3.41k|            return parse_ctx.begin();
 2007|  3.41k|        }
 2008|  71.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 422, False: 70.6k]
  |  |  ------------------
  ------------------
 2009|    422|            return parse_ctx.begin();
 2010|    422|        }
 2011|  70.6k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  70.6k|        on_visit_scan_arg(
 2014|  70.6k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  70.6k|                                           get_ctx().locale()},
 2016|  70.6k|            arg);
 2017|  70.6k|        return parse_ctx.begin();
 2018|  71.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  74.4k|    {
 1701|  74.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  70.6k|    {
 1956|  70.6k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 388, False: 70.2k]
  |  Branch (1956:23): [True: 0, False: 70.2k]
  ------------------
 1957|    388|            SCN_UNLIKELY_ATTR
 1958|    388|            return;
 1959|    388|        }
 1960|       |
 1961|  70.2k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  70.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  70.2k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  70.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.5k, False: 2.74k]
  |  |  ------------------
  ------------------
 1963|  67.5k|            on_error(r.error());
 1964|  67.5k|        }
 1965|  2.74k|        else {
 1966|  2.74k|            get_ctx().advance_to(*r);
 1967|  2.74k|        }
 1968|  70.2k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  11.5k|{
 1363|  11.5k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  11.5k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  11.5k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  11.5k|            std::u32string tmp;
 1368|  11.5k|            transcode_to_string_impl_to32(src, tmp);
 1369|  11.5k|            return transcode_to_string_impl_32to16<false>(
 1370|  11.5k|                std::u32string_view{tmp}, dest);
 1371|  11.5k|        }
 1372|  11.5k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  11.5k|            return transcode_to_string_impl_to32(src, dest);
 1374|  11.5k|        }
 1375|  11.5k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  11.5k|{
 1256|  11.5k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  11.5k|    auto it = src.begin();
 1259|  3.49M|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 3.48M, False: 11.5k]
  ------------------
 1260|  3.48M|        auto res = get_next_code_point(
 1261|  3.48M|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|  3.48M|                                                                 src.end()));
 1263|  3.48M|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  3.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.1k, False: 3.39M]
  |  |  ------------------
  ------------------
 1264|  98.1k|            dest.push_back(DestCharT{0xfffd});
 1265|  98.1k|        }
 1266|  3.39M|        else {
 1267|  3.39M|            dest.push_back(res.value);
 1268|  3.39M|        }
 1269|  3.48M|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|  3.48M|    }
 1271|  11.5k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  3.76M|{
 1169|  3.76M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  3.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  3.76M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  3.76M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.8k, False: 3.69M]
  |  |  ------------------
  ------------------
 1173|  73.8k|        return {get_start_for_next_code_point(input),
 1174|  73.8k|                detail::invalid_code_point};
 1175|  73.8k|    }
 1176|  3.69M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  3.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.32k, False: 3.69M]
  |  |  ------------------
  ------------------
 1177|  1.32k|        return {input.end(), detail::invalid_code_point};
 1178|  1.32k|    }
 1179|       |
 1180|  3.69M|    return {input.begin() + len,
 1181|  3.69M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  3.69M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  73.8k|{
 1155|  73.8k|    auto it = input.begin();
 1156|   406k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 404k, False: 1.72k]
  ------------------
 1157|   404k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 72.1k, False: 332k]
  ------------------
 1158|  72.1k|            break;
 1159|  72.1k|        }
 1160|   404k|    }
 1161|  73.8k|    return it;
 1162|  73.8k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  56.7k|    {
  809|  56.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  56.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  56.7k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  21.1k|    {
  823|  21.1k|        return a.m_code == b.m_code;
  824|  21.1k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|   115k|    {
 2931|   115k|        SCN_UNLIKELY_ATTR
 2932|   115k|        m_msg = msg;
 2933|   115k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|   184k|    {
 2936|   184k|        return m_msg == nullptr;
 2937|   184k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  1.36k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4989|  1.45M|    {
 4990|  1.45M|        on_charset_range(cp, cp + 1);
 4991|  1.45M|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4994|  1.45M|    {
 4995|  1.45M|        if (end <= 127) {
  ------------------
  |  Branch (4995:13): [True: 906k, False: 551k]
  ------------------
 4996|   906k|            return;
 4997|   906k|        }
 4998|       |
 4999|   114M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (4999:25): [True: 114M, False: 546k]
  ------------------
 5000|       |            // TODO: check for overlap
 5001|   114M|            if (elem.first == end) {
  ------------------
  |  Branch (5001:17): [True: 216, False: 114M]
  ------------------
 5002|    216|                elem.first = begin;
 5003|    216|                return;
 5004|    216|            }
 5005|       |
 5006|   114M|            if (elem.second == begin) {
  ------------------
  |  Branch (5006:17): [True: 5.23k, False: 114M]
  ------------------
 5007|  5.23k|                elem.second = end;
 5008|  5.23k|                return;
 5009|  5.23k|            }
 5010|   114M|        }
 5011|       |
 5012|   546k|        extra_ranges.push_back(std::make_pair(begin, end));
 5013|   546k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5016|    684|    {
 5017|       |        // no-op
 5018|    684|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5031|  1.47M|    {
 5032|  1.47M|        return static_cast<bool>(err);
 5033|  1.47M|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5349|  1.63k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  91.9k|{
  458|  91.9k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  91.9k|        static_cast<unsigned char>(ch))];
  460|  91.9k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  1.12M|{
  469|  1.12M|    return static_cast<unsigned char>(ch) <= 127;
  470|  1.12M|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  2.34k|{
  474|  2.34k|#if WCHAR_MIN < 0
  475|  2.34k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 2.32k, False: 24]
  |  Branch (475:23): [True: 2.32k, False: 0]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  2.34k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|  1.22M|{
  483|  1.22M|    return cp <= 127;
  484|  1.22M|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  57.5k|{
  539|  57.5k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  57.5k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  56.6k|{
  784|  56.6k|    return e != eof_error::good;
  785|  56.6k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    112|{
  798|    112|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    112|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    112|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    112|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    112|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    744|{
  845|    744|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    744|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    744|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    744|    return parse_error::eof;
  847|    744|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  5.25k|{
  854|  5.25k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 5.25k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  5.25k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 86, False: 5.16k]
  ------------------
  859|     86|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     86|    }
  861|       |
  862|  5.16k|    return scan_error{code, msg};
  863|  5.25k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  5.25k|{
  868|  5.25k|    return [code, msg](parse_error err) {
  869|  5.25k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.25k|    };
  871|  5.25k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   577k|{
 1200|       |    // Pattern_White_Space property
 1201|   577k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 453k, False: 123k]
  |  Branch (1201:27): [True: 58.2k, False: 395k]
  ------------------
 1202|   577k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 6.94k, False: 511k]
  ------------------
 1203|   577k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 13.7k, False: 498k]
  ------------------
 1204|   577k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 2.07k, False: 496k]
  ------------------
 1205|   577k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 11.4k, False: 484k]
  ------------------
 1206|   577k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.74k, False: 482k]
  ------------------
 1207|   577k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 150, False: 482k]
  ------------------
 1208|   577k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  4.07k|{
 2220|  4.07k|    unsigned char running_diff{0};
 2221|  14.2k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 10.1k, False: 4.07k]
  ------------------
 2222|  10.1k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  10.1k|    }
 2224|  4.07k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 4.07k]
  |  Branch (2224:33): [True: 0, False: 4.07k]
  ------------------
 2225|  4.07k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   360k|{
 2303|   360k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 33.5k, False: 327k]
  ------------------
 2304|   360k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 486, False: 33.0k]
  ------------------
 2305|  33.5k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 32.9k]
  ------------------
 2306|  33.5k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 72, False: 32.8k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  33.5k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 26.6k, False: 6.20k]
  |  Branch (2308:27): [True: 4.50k, False: 22.1k]
  |  Branch (2308:43): [True: 4.36k, False: 144]
  ------------------
 2309|  33.5k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 22.1k, False: 6.34k]
  |  Branch (2309:27): [True: 274, False: 21.9k]
  ------------------
 2310|  33.5k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 21.8k, False: 6.42k]
  |  Branch (2310:27): [True: 144, False: 21.6k]
  ------------------
 2311|  33.5k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 21.6k, False: 6.42k]
  |  Branch (2311:27): [True: 90, False: 21.5k]
  ------------------
 2312|  33.5k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 21.5k, False: 6.42k]
  |  Branch (2312:27): [True: 344, False: 21.2k]
  ------------------
 2313|  33.5k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 21.2k, False: 6.42k]
  |  Branch (2313:27): [True: 108, False: 21.1k]
  ------------------
 2314|  33.5k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 21.1k, False: 6.42k]
  |  Branch (2314:27): [True: 78, False: 21.0k]
  ------------------
 2315|  33.5k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 20.5k, False: 6.98k]
  |  Branch (2315:28): [True: 84, False: 20.4k]
  ------------------
 2316|  33.5k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 20.4k, False: 6.98k]
  |  Branch (2316:28): [True: 708, False: 19.7k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  33.5k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 19.9k, False: 6.76k]
  |  Branch (2318:28): [True: 126, False: 19.7k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  33.5k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 19.7k, False: 6.76k]
  |  Branch (2320:28): [True: 90, False: 19.7k]
  ------------------
 2321|  7.03k|        return 2;
 2322|  7.03k|    }
 2323|   353k|    return 1;
 2324|   360k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   250k|{
 2328|   250k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   250k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    184|{
 2343|    184|    return calculate_text_width_for_fmt_v10(cp);
 2344|    184|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  18.6k|{
 3123|  18.6k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  18.6k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  8.81k|{
 3127|  8.81k|#if WCHAR_MIN < 0
 3128|  8.81k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 8.81k, False: 0]
  |  Branch (3128:20): [True: 8.81k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  8.81k|        return char_to_int(static_cast<char>(ch));
 3133|  8.81k|    }
 3134|      0|    return 255;
 3135|  8.81k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4270|  46.2k|{
 4271|  46.2k|    std::regex_constants::syntax_option_type result{};
 4272|  46.2k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4272:9): [True: 1.15k, False: 45.0k]
  ------------------
 4273|  1.15k|#if SCN_HAS_STD_REGEX_MULTILINE
 4274|  1.15k|        result |= std::regex_constants::multiline;
 4275|       |#else
 4276|       |        return unexpected_scan_error(
 4277|       |            scan_error::invalid_format_string,
 4278|       |            "/m flag for regex isn't supported by regex backend");
 4279|       |#endif
 4280|  1.15k|    }
 4281|  46.2k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4281:9): [True: 0, False: 46.2k]
  ------------------
 4282|  46.2k|        detail::regex_flags::none) {
 4283|      0|        return unexpected_scan_error(
 4284|      0|            scan_error::invalid_format_string,
 4285|      0|            "/s flag for regex isn't supported by regex backend");
 4286|      0|    }
 4287|  46.2k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4287:9): [True: 6.87k, False: 39.3k]
  ------------------
 4288|  6.87k|        result |= std::regex_constants::icase;
 4289|  6.87k|    }
 4290|  46.2k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4290:9): [True: 24, False: 46.2k]
  ------------------
 4291|     24|        result |= std::regex_constants::nosubs;
 4292|     24|    }
 4293|  46.2k|    return result;
 4294|  46.2k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4637|  4.25k|{
 4638|  4.25k|    std::string result{pattern};
 4639|  32.0k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4639:24): [True: 27.7k, False: 4.25k]
  ------------------
 4640|  27.7k|        result.replace(n, 2, "/");
 4641|  27.7k|        ++n;
 4642|  27.7k|    }
 4643|  4.25k|    return result;
 4644|  4.25k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEE:
 4646|    402|{
 4647|    402|    std::wstring result{pattern};
 4648|  1.93k|    for (size_t n = 0; (n = result.find(L"\\/", n)) != std::wstring::npos;) {
  ------------------
  |  Branch (4648:24): [True: 1.53k, False: 402]
  ------------------
 4649|  1.53k|        result.replace(n, 2, L"/");
 4650|  1.53k|        ++n;
 4651|  1.53k|    }
 4652|    402|    return result;
 4653|    402|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  13.1k|{
 6008|  13.1k|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 3.04k, False: 10.1k]
  ------------------
 6009|  3.04k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 1.71k, False: 1.32k]
  ------------------
 6010|  1.71k|            return {scan_error::invalid_scanned_value,
 6011|  1.71k|                    "Scanned value too narrow, width did not exceed what "
 6012|  1.71k|                    "was specified in the format string"};
 6013|  1.71k|        }
 6014|  3.04k|    }
 6015|  11.4k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 2.64k, False: 8.78k]
  ------------------
 6016|  2.64k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 102, False: 2.54k]
  ------------------
 6017|    102|            return {scan_error::invalid_scanned_value,
 6018|    102|                    "Scanned value too wide, width exceeded the specified "
 6019|    102|                    "precision"};
 6020|    102|        }
 6021|  2.64k|    }
 6022|  11.3k|    return {};
 6023|  11.4k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  89.7k|    {
  304|  89.7k|        ranges::advance(x, n);
  305|  89.7k|        return x;
  306|  89.7k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  89.7k|    {
  268|  89.7k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  89.7k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   214k|    {
  151|   214k|        i += n;
  152|   214k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   124k|    {
  108|   124k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   124k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   124k|    {
   87|   124k|        return s - i;
   88|   124k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  8.33k|    {
  304|  8.33k|        ranges::advance(x, n);
  305|  8.33k|        return x;
  306|  8.33k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  8.33k|    {
  268|  8.33k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  8.33k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  8.33k|    {
  151|  8.33k|        i += n;
  152|  8.33k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  5.33k|    {
  108|  5.33k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  5.33k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  5.33k|    {
   87|  5.33k|        return s - i;
   88|  5.33k|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5623|  12.6k|    {
 5624|  12.6k|        reader_error_handler eh{};
 5625|  12.6k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  12.6k|            detail::check_code_point_type_specs(specs, eh);
 5627|  12.6k|        }
 5628|  12.6k|        else {
 5629|  12.6k|            detail::check_char_type_specs(specs, eh);
 5630|  12.6k|        }
 5631|  12.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 686]
  |  |  ------------------
  ------------------
 5632|  11.9k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  11.9k|        }
 5634|    686|        return {};
 5635|  12.6k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  46.3k|    {
  763|  46.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  46.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  46.3k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  7.95k|    {
  754|  7.95k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  13.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.0k|              cvref<T> obj = *get<T>(fn);
  745|  13.0k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  13.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.0k|              }
  748|  13.0k|              else {
  749|  13.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.0k|              }
  751|  13.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  13.0k|    {
  684|  13.0k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  13.0k|            return static_cast<T*>(s.m_cp);
  686|  13.0k|        }
  687|  13.0k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  13.0k|            return static_cast<T*>(s.m_p);
  689|  13.0k|        }
  690|  13.0k|        else {
  691|  13.0k|            return reinterpret_cast<T*>(s.m_fp);
  692|  13.0k|        }
  693|  13.0k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  7.95k|        {
  662|  7.95k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  2.68M|    {
  763|  2.68M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.68M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  74.0k|    {
  754|  74.0k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|  1.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.28M|              cvref<T> obj = *get<T>(fn);
  745|  1.28M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.28M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.28M|              }
  748|  1.28M|              else {
  749|  1.28M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.28M|              }
  751|  1.28M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.28M|    {
  684|  1.28M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.28M|            return static_cast<T*>(s.m_cp);
  686|  1.28M|        }
  687|  1.28M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.28M|            return static_cast<T*>(s.m_p);
  689|  1.28M|        }
  690|  1.28M|        else {
  691|  1.28M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.28M|        }
  693|  1.28M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  74.0k|        {
  662|  74.0k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5618|  2.03k|    {
 5619|  2.03k|        return false;
 5620|  2.03k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  5.25k|    return [code, msg](parse_error err) {
  869|  5.25k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  5.25k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|    106|    {
 1780|    106|        auto stdloc = loc.get<std::locale>();
 1781|    106|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    106|        grouping = numpunct.grouping();
 1783|    106|        thousands_sep =
 1784|    106|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 106]
  ------------------
 1785|    106|        decimal_point = numpunct.decimal_point();
 1786|    106|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|    124|{
 1717|    124|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 124, False: 0]
  ------------------
 1718|    124|        return std::use_facet<Facet>(stdloc);
 1719|    124|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    124|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  59.9k|{
 2349|  59.9k|    size_t count{0};
 2350|  59.9k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  59.9k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  59.9k|    });
 2353|  59.9k|    return count;
 2354|  59.9k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  59.9k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  59.9k|    auto it = input.begin();
 1448|   164k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 104k, False: 59.9k]
  ------------------
 1449|   104k|        auto res = get_next_code_point(
 1450|   104k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|   104k|        cb(res.value);
 1452|   104k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|   104k|    }
 1454|  59.9k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|   110k|    {
  763|   110k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   110k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  59.9k|    {
  754|  59.9k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|   104k|    {
  684|   104k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   104k|            return static_cast<T*>(s.m_cp);
  686|   104k|        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   104k|            return static_cast<T*>(s.m_p);
  689|   104k|        }
  690|   104k|        else {
  691|   104k|            return reinterpret_cast<T*>(s.m_fp);
  692|   104k|        }
  693|   104k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|   104k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|   104k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|   104k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  59.9k|        {
  662|  59.9k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  5.39k|    {
 1582|  5.39k|        return m_view;
 1583|  5.39k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  5.69k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|  3.11k|    {
 2421|  3.11k|        return m_multibyte_left;
 2422|  3.11k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   634k|    {
 2426|   634k|        return *m_current;
 2427|   634k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   511k|    {
 2435|   511k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   511k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   511k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   511k|        _increment_current();
 2437|   511k|        return *this;
 2438|   511k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   511k|    {
 2668|   511k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 248k, False: 262k]
  ------------------
 2669|   248k|            auto cplen = _get_cp_length_at_current();
 2670|   248k|            m_multibyte_left = cplen - 1;
 2671|   248k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   248k|        }
 2673|   262k|        else {
 2674|   262k|            --m_multibyte_left;
 2675|   262k|        }
 2676|       |
 2677|   511k|        ++m_current;
 2678|   511k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   248k|    {
 2639|   248k|        return static_cast<difference_type>(
 2640|   248k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   248k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   248k|    {
 2645|   248k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.64k, False: 247k]
  |  |  ------------------
  ------------------
 2646|  1.64k|            return 0;
 2647|  1.64k|        }
 2648|       |
 2649|   247k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 190k, False: 56.8k]
  ------------------
 2650|   190k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|   190k|            auto cp = static_cast<char32_t>(*m_current);
 2652|   190k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|   190k|        }
 2654|       |
 2655|  56.8k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  56.8k|                                           cplen);
 2657|  56.8k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 664, False: 56.2k]
  |  |  ------------------
  ------------------
 2658|    664|            return 0;
 2659|    664|        }
 2660|       |
 2661|  56.2k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  56.2k|        return static_cast<difference_type>(
 2663|  56.2k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  56.8k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  59.1k|{
 1857|  59.1k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  59.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  59.1k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  59.1k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  59.1k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 772, False: 58.4k]
  ------------------
 1862|    772|            return unexpected(eof_error::eof);
 1863|    772|        }
 1864|       |
 1865|  58.4k|        return ranges::next(range.begin(), count);
 1866|  59.1k|    }
 1867|  59.1k|    else {
 1868|  59.1k|        auto it = range.begin();
 1869|  59.1k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  59.1k|            return ranges::next(it, count);
 1871|  59.1k|        }
 1872|       |
 1873|  59.1k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  59.1k|            if (it == range.end()) {
 1875|  59.1k|                return unexpected(eof_error::eof);
 1876|  59.1k|            }
 1877|  59.1k|        }
 1878|       |
 1879|  59.1k|        return it;
 1880|  59.1k|    }
 1881|  59.1k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   277k|    {
 2531|   277k|        return !(a == b);
 2532|   277k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   283k|    {
 2523|   283k|        return a.m_current == b.m_current;
 2524|   283k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2429|  10.5k|    {
 2430|  10.5k|        return *m_current;
 2431|  10.5k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  2.00k|    {
  268|  2.00k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.00k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  2.00k|    {
  161|  2.00k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  2.00k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 2.00k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  2.00k|        else {
  169|  2.00k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 2.00k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  2.00k|        }
  173|  2.00k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|   198k|    {
 1890|   198k|        return !codepoint.empty();
 1891|   198k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  2.82k|{
 1683|  2.82k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  2.82k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  2.82k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  2.82k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  2.82k|    }
 1688|  2.82k|    else {
 1689|  2.82k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  2.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  2.82k|    }
 1691|  2.82k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  2.82k|    {
 1537|  2.82k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.82k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  2.82k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  2.82k|    {
 1621|  2.82k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  2.82k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  2.82k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  2.82k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  2.82k|            m_storage.reset();
 1627|  2.82k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  2.82k|        }
 1629|  2.82k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  2.82k|                                          std::basic_string<CharT>>) {
 1631|  2.82k|            m_storage.emplace(SCN_FWD(range));
 1632|  2.82k|            m_view = string_view_type{*m_storage};
 1633|  2.82k|        }
 1634|  2.82k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  2.82k|                                          typename detail::basic_scan_buffer<
 1636|  2.82k|                                              value_t>::forward_iterator> &&
 1637|  2.82k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  2.82k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  2.82k|            auto end_seg = range.end().contiguous_segment();
 1640|  2.82k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  2.82k|                             detail::to_address(end_seg.end()))) {
 1642|  2.82k|                auto& str = m_storage.emplace();
 1643|  2.82k|                str.reserve(range.end().position() - range.begin().position());
 1644|  2.82k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  2.82k|                m_view = string_view_type{str};
 1646|  2.82k|                return;
 1647|  2.82k|            }
 1648|       |
 1649|  2.82k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  2.82k|                                                            end_seg.data());
 1651|  2.82k|            m_storage.reset();
 1652|  2.82k|        }
 1653|  2.82k|        else {
 1654|  2.82k|            auto& str = m_storage.emplace();
 1655|  2.82k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  2.82k|                str.reserve(range.size());
 1657|  2.82k|            }
 1658|  2.82k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  2.82k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  2.82k|                          std::back_inserter(str));
 1661|  2.82k|            }
 1662|  2.82k|            else {
 1663|  2.82k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  2.82k|                     ++it) {
 1665|  2.82k|                    str.push_back(*it);
 1666|  2.82k|                }
 1667|  2.82k|            }
 1668|  2.82k|            m_view = string_view_type{str};
 1669|  2.82k|        }
 1670|  2.82k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  34.3k|    {
 2382|  34.3k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   535k|    {
 2413|   535k|        return m_current;
 2414|   535k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  16.3k|    {
 2832|  16.3k|        return take_width_view{r, n};
 2833|  16.3k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  16.3k|    {
 2801|  16.3k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  16.3k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5662|    428|    {
 5663|    428|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 396, False: 32]
  ------------------
 5664|    428|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 32]
  ------------------
 5665|    396|            return read_default(range, value, loc);
 5666|    396|        }
 5667|       |
 5668|     32|        reader_impl_for_int<CharT> reader{};
 5669|     32|        signed char tmp_value{};
 5670|     32|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     32|        value = static_cast<signed char>(value);
 5672|     32|        return ret;
 5673|    428|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5644|    396|    {
 5645|    396|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    396|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    396|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    396|            return code_unit_reader<char>{}.read(range, value);
 5648|    396|        }
 5649|    396|        else {
 5650|    396|            SCN_UNUSED(range);
 5651|    396|            SCN_EXPECT(false);
 5652|    396|            SCN_UNREACHABLE;
 5653|    396|        }
 5654|    396|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5563|    396|    {
 5564|    396|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    396|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    396|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    396|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 396]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    396|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    396|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    396|        ch = *range.begin();
 5566|    396|        return it;
 5567|    396|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  2.92k|{
 1846|  2.92k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.92k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  2.92k|    return ranges::next(range.begin());
 1851|  2.92k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  2.92k|{
  950|  2.92k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.92k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  2.92k|    return eof_error::good;
  954|  2.92k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  2.92k|{
  944|  2.92k|    return is_range_eof(r.begin(), r.end());
  945|  2.92k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|   201k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   201k|    {
  937|   201k|        return begin == end;
  938|   201k|    }
  939|   201k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   524k|        {
 2770|   524k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 3.11k, False: 520k]
  |  Branch (2770:39): [True: 990, False: 2.12k]
  ------------------
 2771|   524k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 1.84k, False: 521k]
  ------------------
 2772|   524k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   405k|    {
 2816|   405k|        return sentinel<true>{m_base.get().end()};
 2817|   405k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   473k|    {
 2717|   473k|        return view;
 2718|   473k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   405k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.95k|    {
  296|  2.95k|        ++x;
  297|  2.95k|        return x;
  298|  2.95k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  34.3k|    {
 2810|  34.3k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  34.3k|                                      m_count};
 2812|  34.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|     32|    {
 3539|     32|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 32]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     32|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     32|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     32|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 32]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     32|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 32]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     32|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     32|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32, False: 0]
  |  |  ------------------
  ------------------
 3565|     32|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     32|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     32|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     32|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     32|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|     32|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|  1.26k|{
 3326|  1.26k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  1.26k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.26k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.26k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.26k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.26k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.26k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  1.26k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  1.26k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  1.26k|        parse_integer_base_prefix(
 3331|  1.26k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  1.26k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 1.26k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  1.26k|    else {
 3343|  1.26k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 1.26k]
  |  Branch (3343:13): [True: 1.26k, False: 0]
  ------------------
 3344|  1.26k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 1.26k, False: 0]
  ------------------
 3345|  1.26k|            digits_begin_it = base_prefix_begin_it;
 3346|  1.26k|        }
 3347|  1.26k|    }
 3348|       |
 3349|  1.26k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 1.26k, False: 0]
  ------------------
 3350|  1.26k|        sign = sign_type::plus_sign;
 3351|  1.26k|    }
 3352|  1.26k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  1.26k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  1.26k|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.68k|{
 3141|  1.68k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.68k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.68k, False: 0]
  ------------------
 3143|  1.68k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.68k, False: 0]
  ------------------
 3144|  1.68k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.68k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.68k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.68k|{
 2272|  1.68k|    auto it = read_code_unit(range);
 2273|  1.68k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.68k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  3.36k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 3.36k, False: 1.68k]
  ------------------
 2278|  3.36k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 3.36k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  3.36k|    }
 2282|       |
 2283|  1.68k|    return unexpected(parse_error::error);
 2284|  1.68k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|  1.26k|{
 3293|  1.26k|    switch (base) {
 3294|     14|        case 2:
  ------------------
  |  Branch (3294:9): [True: 14, False: 1.24k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     14|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     14|                    false};
 3298|       |
 3299|     14|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 14, False: 1.24k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     14|            bool zero_parsed = false;
 3302|     14|            auto it = apply_opt(
 3303|     14|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     14|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    408|        case 16:
  ------------------
  |  Branch (3307:9): [True: 408, False: 854]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    408|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    408|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 1.24k]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    806|        default:
  ------------------
  |  Branch (3316:9): [True: 806, False: 456]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    806|            return {range.begin(), base, false};
 3319|  1.26k|    }
 3320|  1.26k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    436|{
 2291|    436|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 436, False: 0]
  ------------------
 2292|    436|        return range.begin();
 2293|    436|    }
 2294|      0|    return *result;
 2295|    436|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     34|{
 3244|     34|    return read_matching_string_classic_nocase(range, "0b");
 3245|     34|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.73k|{
 2231|  1.73k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.73k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.73k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.73k|        if (range.size() < str.size()) {
 2236|  1.73k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.73k|        }
 2238|  1.73k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.73k|            return unexpected(parse_error::error);
 2240|  1.73k|        }
 2241|  1.73k|        return ranges::next(range.begin(), str.size());
 2242|  1.73k|    }
 2243|  1.73k|    else {
 2244|  1.73k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.73k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.73k|                return ch;
 2247|  1.73k|            }
 2248|  1.73k|            return static_cast<char_type>(ch +
 2249|  1.73k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.73k|        };
 2251|       |
 2252|  1.73k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 198, False: 1.53k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    198|    }                                                  \
  |  |  |  | 3671|  1.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.53k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.53k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.53k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.53k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.53k, False: 0]
  |  |  ------------------
  ------------------
 2257|  1.53k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.53k|                    return ascii_tolower(a) ==
 2259|  1.53k|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.53k|                }))) {
 2261|  1.53k|            return unexpected(parse_error::error);
 2262|  1.53k|        }
 2263|       |
 2264|      0|        return it;
 2265|  1.53k|    }
 2266|  1.73k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  3.15k|{
 1857|  3.15k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  3.15k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  3.15k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  3.15k|        if (sz < count) {
 1862|  3.15k|            return unexpected(eof_error::eof);
 1863|  3.15k|        }
 1864|       |
 1865|  3.15k|        return ranges::next(range.begin(), count);
 1866|  3.15k|    }
 1867|  3.15k|    else {
 1868|  3.15k|        auto it = range.begin();
 1869|  3.15k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 3.15k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  11.0k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 8.11k, False: 2.92k]
  ------------------
 1874|  8.11k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 228, False: 7.88k]
  ------------------
 1875|    228|                return unexpected(eof_error::eof);
 1876|    228|            }
 1877|  8.11k|        }
 1878|       |
 1879|  2.92k|        return it;
 1880|  3.15k|    }
 1881|  3.15k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  3.15k|{
 1095|  3.15k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  3.15k|        return r.size();
 1097|  3.15k|    }
 1098|  3.15k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  3.15k|                           ranges::const_iterator_t<Range>,
 1100|  3.15k|                           typename detail::basic_scan_buffer<
 1101|  3.15k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  3.15k|        if constexpr (ranges::common_range<Range>) {
 1103|  3.15k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  3.15k|        }
 1105|  3.15k|        else {
 1106|  3.15k|            if (r.begin().stores_parent()) {
 1107|  3.15k|                return static_cast<size_t>(
 1108|  3.15k|                    r.begin().parent()->chars_available() -
 1109|  3.15k|                    r.begin().position());
 1110|  3.15k|            }
 1111|  3.15k|            return r.begin().contiguous_segment().size();
 1112|  3.15k|        }
 1113|  3.15k|    }
 1114|  3.15k|    else {
 1115|  3.15k|        return 0;
 1116|  3.15k|    }
 1117|  3.15k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  1.53k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.53k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 46, False: 1.49k]
  |  Branch (2245:29): [True: 1.49k, False: 0]
  ------------------
 2246|  1.53k|                return ch;
 2247|  1.53k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.53k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     34|{
 2146|     34|    auto it = read_code_unit(range);
 2147|     34|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     34|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
 2152|     34|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     34|        return unexpected(parse_error::error);
 2154|     34|    }
 2155|       |
 2156|      0|    return *it;
 2157|     34|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     34|{
 1846|     34|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     34|    return ranges::next(range.begin());
 1851|     34|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     34|{
  950|     34|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     34|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     34|    return eof_error::good;
  954|     34|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|   198k|{
  944|   198k|    return is_range_eof(r.begin(), r.end());
  945|   198k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    428|{
 3251|    428|    return read_matching_string_classic_nocase(range, "0x");
 3252|    428|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|  1.24k|{
 3360|  1.24k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  1.24k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  1.24k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|  1.24k|            return unexpected_scan_error(
 3365|  1.24k|                scan_error::invalid_scanned_value,
 3366|  1.24k|                "Failed to parse integer: No digits found");
 3367|  1.24k|        }
 3368|  1.24k|        return range.end();
 3369|  1.24k|    }
 3370|  1.24k|    else {
 3371|  1.24k|        return read_while1_code_unit(range,
 3372|  1.24k|                                     [&](char_type ch) noexcept {
 3373|  1.24k|                                         return char_to_int(ch) < base;
 3374|  1.24k|                                     })
 3375|  1.24k|            .transform_error(map_parse_error_to_scan_error(
 3376|  1.24k|                scan_error::invalid_scanned_value,
 3377|  1.24k|                "Failed to parse integer: No digits found"));
 3378|  1.24k|    }
 3379|  1.24k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.66k|{
 1996|  1.66k|    auto it = read_while_code_unit(range, pred);
 1997|  1.66k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.66k, False: 0]
  ------------------
 1998|  1.66k|        return unexpected(parse_error::error);
 1999|  1.66k|    }
 2000|      0|    return it;
 2001|  1.66k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.66k|{
 1976|  1.66k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.66k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.66k|{
 1957|  1.66k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.66k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.66k|    }
 1960|  1.66k|    else {
 1961|  1.66k|        auto first = range.begin();
 1962|  1.66k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.66k, False: 0]
  ------------------
 1963|  1.66k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.66k, False: 0]
  ------------------
 1964|  1.66k|                return first;
 1965|  1.66k|            }
 1966|  1.66k|        }
 1967|      0|        return first;
 1968|  1.66k|    }
 1969|  1.66k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   294k|        {
 2781|   294k|            return !(y == x);
 2782|   294k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|  1.24k|    {
  754|  1.24k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  1.24k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.24k|              cvref<T> obj = *get<T>(fn);
  745|  1.24k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.24k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.24k|              }
  748|  1.24k|              else {
  749|  1.24k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.24k|              }
  751|  1.24k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|  1.24k|    {
  684|  1.24k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.24k|            return static_cast<T*>(s.m_cp);
  686|  1.24k|        }
  687|  1.24k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.24k|            return static_cast<T*>(s.m_p);
  689|  1.24k|        }
  690|  1.24k|        else {
  691|  1.24k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.24k|        }
  693|  1.24k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3372|  1.24k|                                     [&](char_type ch) noexcept {
 3373|  1.24k|                                         return char_to_int(ch) < base;
 3374|  1.24k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|  1.24k|        {
  662|  1.24k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     16|{
 3390|     16|    std::basic_string<CharT> output;
 3391|     16|    std::string thsep_indices;
 3392|     16|    auto it = range.begin();
 3393|     16|    bool digit_matched = false;
 3394|     16|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 16, False: 0]
  ------------------
 3395|     16|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 16]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     16|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 16, False: 0]
  ------------------
 3400|     16|            break;
 3401|     16|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     16|    }
 3407|     16|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3408|     16|        return unexpected_scan_error(
 3409|     16|            scan_error::invalid_scanned_value,
 3410|     16|            "Failed to parse integer: No digits found");
 3411|     16|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     16|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   527k|    {
 2417|   527k|        return m_count;
 2418|   527k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5662|    252|    {
 5663|    252|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5663:13): [True: 232, False: 20]
  ------------------
 5664|    252|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5664:13): [True: 0, False: 20]
  ------------------
 5665|    232|            return read_default(range, value, loc);
 5666|    232|        }
 5667|       |
 5668|     20|        reader_impl_for_int<CharT> reader{};
 5669|     20|        signed char tmp_value{};
 5670|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5671|     20|        value = static_cast<signed char>(value);
 5672|     20|        return ret;
 5673|    252|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5644|    950|    {
 5645|    950|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    950|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5646|    950|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5646:23): [Folded - Ignored]
  ------------------
 5647|    950|            return code_unit_reader<char>{}.read(range, value);
 5648|    950|        }
 5649|    950|        else {
 5650|    950|            SCN_UNUSED(range);
 5651|    950|            SCN_EXPECT(false);
 5652|    950|            SCN_UNREACHABLE;
 5653|    950|        }
 5654|    950|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5563|    950|    {
 5564|    950|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    950|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    950|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    950|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    950|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 950]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    950|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    950|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    950|        ch = *range.begin();
 5566|    950|        return it;
 5567|    950|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.97k|{
 1846|  6.97k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.97k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.97k|    return ranges::next(range.begin());
 1851|  6.97k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  23.9k|{
  950|  23.9k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.9k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  23.9k|    return eof_error::good;
  954|  23.9k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  1.07M|{
  944|  1.07M|    return is_range_eof(r.begin(), r.end());
  945|  1.07M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  1.15M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.15M|    {
  937|  1.15M|        return begin == end;
  938|  1.15M|    }
  939|  1.15M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  72.1k|    {
  296|  72.1k|        ++x;
  297|  72.1k|        return x;
  298|  72.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|     20|    {
 3539|     20|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|     20|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|     20|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 20]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|     20|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 20]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|     20|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3565|     20|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|     20|                    parse_integer_digits_without_thsep(
 3567|     20|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|     20|                        prefix_result.parsed_base));
 3569|       |
 3570|     20|            auto buf = make_contiguous_buffer(
 3571|     20|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|     20|            SCN_TRY(result_it,
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|     20|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.95k|{
 3326|  2.95k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  2.95k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.95k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.95k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.95k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.95k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.95k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.95k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.95k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.95k|        parse_integer_base_prefix(
 3331|  2.95k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.95k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.95k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  2.95k|    else {
 3343|  2.95k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 2.95k]
  ------------------
 3344|  2.95k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 2.95k, False: 0]
  ------------------
 3345|  2.95k|            digits_begin_it = base_prefix_begin_it;
 3346|  2.95k|        }
 3347|  2.95k|    }
 3348|       |
 3349|  2.95k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 2.95k, False: 0]
  ------------------
 3350|  2.95k|        sign = sign_type::plus_sign;
 3351|  2.95k|    }
 3352|  2.95k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  2.95k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  2.95k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.97k|{
 3141|  3.97k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.97k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.97k, False: 0]
  ------------------
 3143|  3.97k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.97k, False: 0]
  ------------------
 3144|  3.97k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.97k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.97k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.97k|{
 2272|  3.97k|    auto it = read_code_unit(range);
 2273|  3.97k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.97k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.95k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.95k, False: 3.97k]
  ------------------
 2278|  7.95k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.95k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.95k|    }
 2282|       |
 2283|  3.97k|    return unexpected(parse_error::error);
 2284|  3.97k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.95k|{
 3293|  2.95k|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 2.95k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     50|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 50, False: 2.90k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     50|            bool zero_parsed = false;
 3302|     50|            auto it = apply_opt(
 3303|     50|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     50|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    960|        case 16:
  ------------------
  |  Branch (3307:9): [True: 960, False: 1.99k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    960|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    960|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 2.94k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.93k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.93k, False: 1.02k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.93k|            return {range.begin(), base, false};
 3319|  2.95k|    }
 3320|  2.95k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  1.01k|{
 2291|  1.01k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 1.01k, False: 0]
  ------------------
 2292|  1.01k|        return range.begin();
 2293|  1.01k|    }
 2294|      0|    return *result;
 2295|  1.01k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  4.08k|{
 2231|  4.08k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  4.08k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  4.08k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  4.08k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 4.07k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  4.07k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 4.07k, False: 0]
  ------------------
 2239|  4.07k|            return unexpected(parse_error::error);
 2240|  4.07k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  4.07k|    }
 2243|  4.08k|    else {
 2244|  4.08k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.08k|            if (ch < 'A' || ch > 'Z') {
 2246|  4.08k|                return ch;
 2247|  4.08k|            }
 2248|  4.08k|            return static_cast<char_type>(ch +
 2249|  4.08k|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.08k|        };
 2251|       |
 2252|  4.08k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  4.08k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  4.08k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  4.08k|        if (SCN_UNLIKELY(!std::equal(
 2257|  4.08k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  4.08k|                    return ascii_tolower(a) ==
 2259|  4.08k|                           static_cast<detail::char_t<Range>>(b);
 2260|  4.08k|                }))) {
 2261|  4.08k|            return unexpected(parse_error::error);
 2262|  4.08k|        }
 2263|       |
 2264|  4.08k|        return it;
 2265|  4.08k|    }
 2266|  4.08k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     62|{
 3258|     62|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 62]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     62|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 62]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     62|    return unexpected(parse_error::error);
 3268|     62|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  2.05k|{
 2146|  2.05k|    auto it = read_code_unit(range);
 2147|  2.05k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.05k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  2.05k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.05k, False: 0]
  |  |  ------------------
  ------------------
 2152|  2.05k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.05k|        return unexpected(parse_error::error);
 2154|  2.05k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  2.05k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    972|{
 3251|    972|    return read_matching_string_classic_nocase(range, "0x");
 3252|    972|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  2.91k|{
 3360|  2.91k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  2.91k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  2.91k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.91k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  2.91k|        return range.end();
 3369|  2.91k|    }
 3370|  2.91k|    else {
 3371|  2.91k|        return read_while1_code_unit(range,
 3372|  2.91k|                                     [&](char_type ch) noexcept {
 3373|  2.91k|                                         return char_to_int(ch) < base;
 3374|  2.91k|                                     })
 3375|  2.91k|            .transform_error(map_parse_error_to_scan_error(
 3376|  2.91k|                scan_error::invalid_scanned_value,
 3377|  2.91k|                "Failed to parse integer: No digits found"));
 3378|  2.91k|    }
 3379|  2.91k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     44|{
 3390|     44|    std::basic_string<CharT> output;
 3391|     44|    std::string thsep_indices;
 3392|     44|    auto it = range.begin();
 3393|     44|    bool digit_matched = false;
 3394|     44|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 44, False: 0]
  ------------------
 3395|     44|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 44]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     44|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 44, False: 0]
  ------------------
 3400|     44|            break;
 3401|     44|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     44|    }
 3407|     44|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 44, False: 0]
  |  |  ------------------
  ------------------
 3408|     44|        return unexpected_scan_error(
 3409|     44|            scan_error::invalid_scanned_value,
 3410|     44|            "Failed to parse integer: No digits found");
 3411|     44|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     44|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  18.2k|{
 1683|  18.2k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  18.2k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  18.2k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  18.2k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  18.2k|    }
 1688|  18.2k|    else {
 1689|  18.2k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  18.2k|    }
 1691|  18.2k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  18.2k|    {
 1490|  18.2k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  79.9k|    {
 1503|  79.9k|        return sv;
 1504|  79.9k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|  5.10k|{
 5951|  5.10k|    using char_type = detail::char_t<Range>;
 5952|  5.10k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  5.10k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 4.86k, False: 240]
  ------------------
 5955|  4.86k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|  4.86k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|  4.86k|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 4.71k, False: 146]
  ------------------
 5959|  4.71k|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|  4.71k|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 142, False: 4.57k]
  ------------------
 5962|    142|                auto prefix_width =
 5963|    142|                    static_cast<std::ptrdiff_t>(
 5964|    142|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|    142|                    ranges::distance(range.begin(), it);
 5966|    142|                return result_type{it, prefix_width};
 5967|    142|            }
 5968|  4.57k|            return result_type{it, 0};
 5969|  4.71k|        }
 5970|       |
 5971|    146|        auto max_width_view = take_width(range, max_width);
 5972|    146|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    146|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 146, False: 0]
  ------------------
 5975|    146|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    146|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    146|    }
 5979|       |
 5980|    240|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    240|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 132, False: 108]
  ------------------
 5982|    132|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|    132|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 52, False: 80]
  ------------------
 5985|     52|            auto prefix_width =
 5986|     52|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|     52|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|     52|            return result_type{it, prefix_width};
 5989|     52|        }
 5990|     80|        return result_type{it, 0};
 5991|    132|    }
 5992|       |
 5993|    108|    auto max_width_view = take_width(range, max_width);
 5994|    108|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    108|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 108, False: 0]
  ------------------
 5997|    108|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    108|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    108|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  4.92k|{
 1976|  4.92k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.92k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  5.17k|{
 1957|  5.17k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  5.17k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  5.17k|    }
 1960|  5.17k|    else {
 1961|  5.17k|        auto first = range.begin();
 1962|  5.17k|        for (; first != range.end(); ++first) {
 1963|  5.17k|            if (pred(*first)) {
 1964|  5.17k|                return first;
 1965|  5.17k|            }
 1966|  5.17k|        }
 1967|  5.17k|        return first;
 1968|  5.17k|    }
 1969|  5.17k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  4.86k|    {
  754|  4.86k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  5.28k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.28k|              cvref<T> obj = *get<T>(fn);
  745|  5.28k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  5.28k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.28k|              }
  748|  5.28k|              else {
  749|  5.28k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.28k|              }
  751|  5.28k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  5.28k|    {
  684|  5.28k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  5.28k|            return static_cast<T*>(s.m_cp);
  686|  5.28k|        }
  687|  5.28k|        else if constexpr (std::is_object_v<T>) {
  688|  5.28k|            return static_cast<T*>(s.m_p);
  689|  5.28k|        }
  690|  5.28k|        else {
  691|  5.28k|            return reinterpret_cast<T*>(s.m_fp);
  692|  5.28k|        }
  693|  5.28k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  5.28k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  4.86k|        {
  667|  4.86k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    416|{
 1976|    416|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    416|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    926|{
 1957|    926|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    926|        return std::find_if(range.begin(), range.end(), pred);
 1959|    926|    }
 1960|    926|    else {
 1961|    926|        auto first = range.begin();
 1962|  20.4k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 19.9k, False: 514]
  ------------------
 1963|  19.9k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 412, False: 19.5k]
  ------------------
 1964|    412|                return first;
 1965|    412|            }
 1966|  19.9k|        }
 1967|    514|        return first;
 1968|    926|    }
 1969|    926|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    132|{
 2037|    132|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    132|    auto it = range.begin();
 2040|    168|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 168, False: 0]
  ------------------
 2041|    168|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    168|                                           needle.size());
 2043|    168|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 162]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    162|        static_assert(
 2047|    162|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    162|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 126, False: 36]
  ------------------
 2049|    126|            return it;
 2050|    126|        }
 2051|     36|        it = *r;
 2052|     36|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    108|{
 2037|    108|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    108|    auto it = range.begin();
 2040|    156|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 126, False: 30]
  ------------------
 2041|    126|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    126|                                           needle.size());
 2043|    126|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 30, False: 96]
  ------------------
 2044|     30|            return it;
 2045|     30|        }
 2046|     96|        static_assert(
 2047|     96|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|     96|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 48, False: 48]
  ------------------
 2049|     48|            return it;
 2050|     48|        }
 2051|     48|        it = *r;
 2052|     48|    }
 2053|     30|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|     30|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|     30|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|     30|    return it;
 2055|     30|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    826|{
 2951|    826|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 826]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    826|    return read_while_classic_space(range);
 2962|    826|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    826|{
 2117|    826|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    826|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    826|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    826|        auto buf = make_contiguous_buffer(range);
 2121|    826|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    826|        return ranges::next(range.begin(),
 2123|    826|                            ranges::distance(buf.view().begin(), it));
 2124|    826|    }
 2125|    826|    else {
 2126|    826|        auto it = range.begin();
 2127|       |
 2128|    826|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    826|            auto seg = get_contiguous_beginning(range);
 2130|    826|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    826|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 826]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|    826|            ranges::advance(it, seg.size());
 2135|    826|        }
 2136|       |
 2137|    826|        return read_while_code_point(
 2138|    826|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    826|    }
 2140|    826|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  2.00k|{
 1039|  2.00k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  2.00k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  2.00k|        return r;
 1042|  2.00k|    }
 1043|  2.00k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  2.00k|                           ranges::const_iterator_t<Range>,
 1045|  2.00k|                           typename detail::basic_scan_buffer<
 1046|  2.00k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  2.00k|        if constexpr (ranges::common_range<Range>) {
 1048|  2.00k|            auto seg = r.begin().contiguous_segment();
 1049|  2.00k|            auto dist =
 1050|  2.00k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  2.00k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  2.00k|        }
 1053|  2.00k|        else {
 1054|  2.00k|            return r.begin().contiguous_segment();
 1055|  2.00k|        }
 1056|  2.00k|    }
 1057|  2.00k|    else {
 1058|  2.00k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  2.00k|    }
 1060|  2.00k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  1.64k|{
 2082|  1.64k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.64k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  1.82k|{
 2061|  1.82k|    auto it = range.begin();
 2062|   175k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 175k, False: 542]
  ------------------
 2063|   175k|        const auto val =
 2064|   175k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   175k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   175k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 168k, False: 7.07k]
  |  |  ------------------
  ------------------
 2066|   168k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   168k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   168k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.28k, False: 166k]
  ------------------
 2069|  1.28k|                return it;
 2070|  1.28k|            }
 2071|   168k|        }
 2072|   174k|        it = val.iterator;
 2073|   174k|    }
 2074|       |
 2075|    542|    return it;
 2076|  1.82k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|   198k|{
 1899|   198k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   198k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   198k|    auto it = range.begin();
 1903|   198k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   198k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.2k, False: 186k]
  |  |  ------------------
  ------------------
 1906|  12.2k|        ++it;
 1907|  12.2k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  12.2k|        return {it, {}};
 1909|  12.2k|    }
 1910|       |
 1911|   186k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 171k, False: 15.5k]
  ------------------
 1912|   171k|        ++it;
 1913|   171k|        return {it, string_type(1, *range.begin())};
 1914|   171k|    }
 1915|       |
 1916|  15.5k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  15.5k|    return {it, string_type{range.begin(), it}};
 1918|   186k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  12.2k|{
 1155|  12.2k|    auto it = input.begin();
 1156|  22.7k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 22.4k, False: 234]
  ------------------
 1157|  22.4k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 11.9k, False: 10.4k]
  ------------------
 1158|  11.9k|            break;
 1159|  11.9k|        }
 1160|  22.4k|    }
 1161|  12.2k|    return it;
 1162|  12.2k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  15.5k|    {
  283|  15.5k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  15.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  15.5k|    {
  227|  15.5k|        constexpr iter_difference_t<I> zero{0};
  228|  15.5k|        iter_difference_t<I> counter{0};
  229|       |
  230|  15.5k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 15.5k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  15.5k|        else {
  237|  49.1k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 33.7k, False: 15.4k]
  |  Branch (237:34): [True: 33.5k, False: 180]
  ------------------
  238|  33.5k|                ++i;
  239|  33.5k|                ++counter;
  240|  33.5k|            }
  241|  15.5k|        }
  242|       |
  243|  15.5k|        return counter;
  244|  15.5k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    826|    {
  754|    826|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  4.52k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.52k|              cvref<T> obj = *get<T>(fn);
  745|  4.52k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.52k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.52k|              }
  748|  4.52k|              else {
  749|  4.52k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.52k|              }
  751|  4.52k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  4.52k|    {
  684|  4.52k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.52k|            return static_cast<T*>(s.m_cp);
  686|  4.52k|        }
  687|  4.52k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.52k|            return static_cast<T*>(s.m_p);
  689|  4.52k|        }
  690|  4.52k|        else {
  691|  4.52k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.52k|        }
  693|  4.52k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  4.52k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    826|        {
  662|    826|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.89k|{
 2951|  7.89k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.58k, False: 306]
  ------------------
 2952|  7.58k|        auto it = read_while_classic_space(range);
 2953|  7.58k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.58k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.58k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.58k|        return it;
 2959|  7.58k|    }
 2960|       |
 2961|    306|    return read_while_classic_space(range);
 2962|  7.89k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  16.5k|{
 2117|  16.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  16.5k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  16.5k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  16.5k|        auto buf = make_contiguous_buffer(range);
 2121|  16.5k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  16.5k|        return ranges::next(range.begin(),
 2123|  16.5k|                            ranges::distance(buf.view().begin(), it));
 2124|  16.5k|    }
 2125|  16.5k|    else {
 2126|  16.5k|        auto it = range.begin();
 2127|       |
 2128|  16.5k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  16.5k|            auto seg = get_contiguous_beginning(range);
 2130|  16.5k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  16.5k|                seg_it != seg.end()) {
 2132|  16.5k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  16.5k|            }
 2134|  16.5k|            ranges::advance(it, seg.size());
 2135|  16.5k|        }
 2136|       |
 2137|  16.5k|        return read_while_code_point(
 2138|  16.5k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  16.5k|    }
 2140|  16.5k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  19.5k|{
 1683|  19.5k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  19.5k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  19.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  19.5k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  19.5k|    }
 1688|  19.5k|    else {
 1689|  19.5k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  19.5k|    }
 1691|  19.5k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  19.5k|    {
 1490|  19.5k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  25.3k|    {
 3040|  25.3k|        reader_error_handler eh{};
 3041|  25.3k|        get_derived().check_specs_impl(specs, eh);
 3042|  25.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  25.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.9k, False: 1.43k]
  |  |  ------------------
  ------------------
 3043|  23.9k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  23.9k|        }
 3045|  1.43k|        return {};
 3046|  25.3k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  25.3k|    {
 3051|  25.3k|        return static_cast<Derived&>(*this);
 3052|  25.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  25.3k|    {
 3485|  25.3k|        detail::check_int_type_specs(specs, eh);
 3486|  25.3k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.86k|    {
 3035|  2.86k|        return true;
 3036|  2.86k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    420|    {
 3539|    420|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    420|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    420|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    420|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 420]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    420|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 420]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    420|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    420|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 412, False: 8]
  |  |  ------------------
  ------------------
 3565|    412|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    412|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    412|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    412|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 412, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    412|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    412|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    412|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    412|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    412|    }                                                  \
  |  |  |  | 3671|    412|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    274|    {
 3539|    274|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    274|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    274|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 274]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    274|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 274]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    274|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    274|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 252, False: 22]
  |  |  ------------------
  ------------------
 3565|    252|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    252|                    parse_integer_digits_without_thsep(
 3567|    252|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    252|                        prefix_result.parsed_base));
 3569|       |
 3570|    252|            auto buf = make_contiguous_buffer(
 3571|    252|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    252|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    252|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    252|        }
 3580|       |
 3581|     22|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     22|            localized_number_formatting_options<CharT>{loc};
 3586|     22|#endif
 3587|       |
 3588|     22|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    420|    {
 3539|    420|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    420|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    420|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    420|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 420]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    420|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 420]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    420|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    420|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 412, False: 8]
  |  |  ------------------
  ------------------
 3565|    412|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    412|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    412|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    412|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 412, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    412|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    412|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    412|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    412|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    412|    }                                                  \
  |  |  |  | 3671|    412|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      8|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      8|            localized_number_formatting_options<CharT>{loc};
 3586|      8|#endif
 3587|       |
 3588|      8|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      8|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      8|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      8|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|      8|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    274|    {
 3539|    274|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    274|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    274|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 274]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    274|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 274]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    274|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    274|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 252, False: 22]
  |  |  ------------------
  ------------------
 3565|    252|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    252|                    parse_integer_digits_without_thsep(
 3567|    252|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    252|                        prefix_result.parsed_base));
 3569|       |
 3570|    252|            auto buf = make_contiguous_buffer(
 3571|    252|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    252|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    252|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    252|        }
 3580|       |
 3581|     22|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     22|            localized_number_formatting_options<CharT>{loc};
 3586|     22|#endif
 3587|       |
 3588|     22|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     22|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     22|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     22|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     22|    }                                                  \
  |  |  |  | 3671|     22|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    390|    {
 3539|    390|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    390|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    390|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    390|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 390]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    390|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    390|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    390|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    390|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 390]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    390|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 390]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    390|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    390|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 390, False: 0]
  |  |  ------------------
  ------------------
 3565|    390|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    390|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    390|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    390|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 390, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    390|    }                                                  \
  |  |  |  | 3671|    390|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    954|    {
 3539|    954|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    954|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    954|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    954|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    954|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 954]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    954|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    954|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    954|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    954|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 954]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    954|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 954]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    954|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    954|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 954, False: 0]
  |  |  ------------------
  ------------------
 3565|    954|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    954|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    954|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    954|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    954|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 954]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    954|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    954|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    954|                    parse_integer_digits_without_thsep(
 3567|    954|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    954|                        prefix_result.parsed_base));
 3569|       |
 3570|    954|            auto buf = make_contiguous_buffer(
 3571|    954|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    954|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    954|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    954|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    954|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    954|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 954, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    954|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    954|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    954|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    954|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    954|    }                                                  \
  |  |  |  | 3671|    954|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    954|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  12.6k|    {
 3040|  12.6k|        reader_error_handler eh{};
 3041|  12.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  12.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 744]
  |  |  ------------------
  ------------------
 3043|  11.9k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  11.9k|        }
 3045|    744|        return {};
 3046|  12.6k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  12.6k|    {
 3051|  12.6k|        return static_cast<Derived&>(*this);
 3052|  12.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  12.6k|    {
 4145|  12.6k|        detail::check_float_type_specs(specs, eh);
 4146|  12.6k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.46k|    {
 3035|  1.46k|        return true;
 3036|  1.46k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|    720|    {
 4217|    720|        unsigned options{};
 4218|    720|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 46, False: 674]
  ------------------
 4219|     46|            options |= float_reader_base::allow_thsep;
 4220|     46|        }
 4221|       |
 4222|    720|        SCN_GCC_COMPAT_PUSH
 4223|    720|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    720|        switch (specs.type) {
 4226|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 30, False: 690]
  ------------------
 4227|     30|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 6, False: 714]
  ------------------
 4230|      6|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     44|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 44, False: 676]
  ------------------
 4233|     44|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      6|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 6, False: 714]
  ------------------
 4236|      6|                return options | float_reader_base::allow_scientific |
 4237|      6|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    634|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 634, False: 86]
  ------------------
 4240|    634|                return options | float_reader_base::allow_scientific |
 4241|    634|                       float_reader_base::allow_fixed |
 4242|    634|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 720]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    720|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    720|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    720|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|    720|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.43k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.87k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|    994|    {
 4057|    994|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 994, False: 0]
  ------------------
 4058|    994|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 994, False: 0]
  ------------------
 4059|    994|            return;
 4060|    994|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  1.16k|    {
 1587|  1.16k|        return m_storage.has_value();
 1588|  1.16k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    582|    {
 1592|    582|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    582|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    582|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    582|        return *m_storage;
 1594|    582|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    418|    {
  763|    418|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    418|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    418|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|      8|    {
 3679|      8|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|      8|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      8|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 8]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|      8|        return read_source_impl(range);
 3685|      8|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    418|    {
 3705|    418|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    418|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    418|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    418|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    418|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 418]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    418|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    418|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    418|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    418|        auto it = sign_result.first;
 3708|    418|        m_sign = sign_result.second;
 3709|       |
 3710|    418|        auto digits_begin = it;
 3711|    418|        auto r = ranges::subrange{it, range.end()};
 3712|    418|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    418|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    418|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    418|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    418|                SCN_TRY_ASSIGN(
 3717|    418|                    it,
 3718|    418|                    do_read_source_impl(
 3719|    418|                        r,
 3720|    418|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    418|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    418|            }
 3723|    418|            else {
 3724|    418|                auto cb = [&](const auto& rr)
 3725|    418|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    418|                    auto res = read_all(rr);
 3727|    418|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    418|                        return unexpected_scan_error(
 3729|    418|                            scan_error::invalid_scanned_value,
 3730|    418|                            "Invalid float value");
 3731|    418|                    }
 3732|    418|                    return res;
 3733|    418|                };
 3734|    418|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    418|            }
 3736|    418|        }
 3737|    418|        else {
 3738|    418|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    418|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    418|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    418|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 418, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    418|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    418|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    418|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    418|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    418|    }                                                  \
  |  | 3671|    418|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    418|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    418|    {
 4000|    418|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    418|        const bool allowed_nonhex =
 4002|    418|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    418|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    418|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 418, False: 0]
  |  Branch (4005:45): [True: 0, False: 418]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    418|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 418]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    418|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 418, False: 0]
  |  Branch (4014:45): [True: 0, False: 418]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    418|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 418]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    418|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 402, False: 16]
  |  Branch (4021:28): [True: 6, False: 396]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|      6|            auto it = range.begin();
 4025|       |
 4026|      6|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 6]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|      6|            else {
 4031|      6|                m_kind = float_kind::hex_without_prefix;
 4032|      6|            }
 4033|       |
 4034|      6|            return read_hex(ranges::subrange{it, range.end()});
 4035|      6|        }
 4036|    412|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 16, False: 396]
  |  Branch (4036:29): [True: 16, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     16|            m_kind = float_kind::generic;
 4040|     16|            return read_regular_float(range);
 4041|     16|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    396|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    396|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 396]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    396|        m_kind = float_kind::generic;
 4052|    396|        return read_regular(range);
 4053|    396|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    418|    {
 3811|    418|        auto it = range.begin();
 3812|    418|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 418, False: 0]
  ------------------
 3813|    418|            return unexpected(r.error());
 3814|    418|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    418|    {
 3834|    418|        auto it = range.begin();
 3835|    418|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 418, False: 0]
  ------------------
 3836|    418|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    418|                scan_error::invalid_scanned_value,
 3838|    418|                "Invalid floating-point NaN value"));
 3839|    418|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    402|    {
 3804|    402|        return read_matching_string_classic_nocase(range, "0x");
 3805|    402|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|      6|    {
 3904|      6|        auto it = range.begin();
 3905|       |
 3906|      6|        std::ptrdiff_t digits_count = 0;
 3907|      6|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3909|      6|            return r.transform_error(map_parse_error_to_scan_error(
 3910|      6|                scan_error::invalid_scanned_value,
 3911|      6|                "Invalid hexadecimal floating-point value"));
 3912|      6|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|      6|    {
 3789|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|      6|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|      6|        return read_while1_code_unit(
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|      6|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3798|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    412|    {
 3944|    412|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    412|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 400, False: 12]
  |  Branch (3945:50): [True: 0, False: 400]
  ------------------
 3946|       |
 3947|    412|        auto it = ranges::begin(range);
 3948|    412|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    412|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    412|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 412, False: 0]
  |  |  ------------------
  ------------------
 3952|    412|            return r.transform_error(
 3953|    412|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    412|                                              "Invalid floating-point value"));
 3955|    412|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    412|    {
 3774|    412|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 412]
  |  |  |  Branch (859:45): [True: 0, False: 412]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    412|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    412|        return read_while1_code_unit(
 3783|    412|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    412|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    412|    {
  754|    412|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    412|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    412|              cvref<T> obj = *get<T>(fn);
  745|    412|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    412|                  obj(static_cast<decltype(args)>(args)...);
  747|    412|              }
  748|    412|              else {
  749|    412|                  return obj(static_cast<decltype(args)>(args)...);
  750|    412|              }
  751|    412|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    412|    {
  684|    412|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    412|            return static_cast<T*>(s.m_cp);
  686|    412|        }
  687|    412|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    412|            return static_cast<T*>(s.m_p);
  689|    412|        }
  690|    412|        else {
  691|    412|            return reinterpret_cast<T*>(s.m_fp);
  692|    412|        }
  693|    412|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3783|    412|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    412|        {
  662|    412|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    410|    {
 3665|    410|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 410]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    410|        return read_source_impl(range);
 3671|    410|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.02k|    {
  763|  1.02k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.02k|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     38|    {
 3679|     38|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     38|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     38|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     38|        return read_source_impl(range);
 3685|     38|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.02k|    {
 3705|  1.02k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.02k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.02k|        auto it = sign_result.first;
 3708|  1.02k|        m_sign = sign_result.second;
 3709|       |
 3710|  1.02k|        auto digits_begin = it;
 3711|  1.02k|        auto r = ranges::subrange{it, range.end()};
 3712|  1.02k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.02k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.02k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.02k]
  |  |  |  Branch (859:45): [True: 0, False: 1.02k]
  |  |  |  Branch (859:45): [True: 0, False: 1.02k]
  |  |  ------------------
  ------------------
 3715|  1.02k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.02k|            else {
 3724|  1.02k|                auto cb = [&](const auto& rr)
 3725|  1.02k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.02k|                    auto res = read_all(rr);
 3727|  1.02k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.02k|                        return unexpected_scan_error(
 3729|  1.02k|                            scan_error::invalid_scanned_value,
 3730|  1.02k|                            "Invalid float value");
 3731|  1.02k|                    }
 3732|  1.02k|                    return res;
 3733|  1.02k|                };
 3734|  1.02k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 26, False: 994]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     26|    }                                                  \
  |  | 3671|  1.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|    994|            }
 3736|  1.02k|        }
 3737|    994|        else {
 3738|    994|            SCN_TRY_ASSIGN(
 3739|    994|                it,
 3740|    994|                do_read_source_impl(
 3741|    994|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|    994|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|    994|        }
 3744|       |
 3745|    994|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|    994|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 994, False: 0]
  |  Branch (3747:48): [True: 994, False: 0]
  ------------------
 3748|    994|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 994, False: 0]
  ------------------
 3749|    994|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 994, False: 0]
  ------------------
 3750|    994|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|    994|        }
 3752|       |
 3753|    994|        handle_separators();
 3754|       |
 3755|    994|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 994]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|    994|        return it;
 3768|    994|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.02k|    {
 3811|  1.02k|        auto it = range.begin();
 3812|  1.02k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.02k, False: 0]
  ------------------
 3813|  1.02k|            return unexpected(r.error());
 3814|  1.02k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.02k|    {
 3834|  1.02k|        auto it = range.begin();
 3835|  1.02k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.02k, False: 0]
  ------------------
 3836|  1.02k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.02k|                scan_error::invalid_scanned_value,
 3838|  1.02k|                "Invalid floating-point NaN value"));
 3839|  1.02k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|    994|    {
 3804|    994|        return read_matching_string_classic_nocase(range, "0x");
 3805|    994|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     26|{
 1996|     26|    auto it = read_while_code_unit(range, pred);
 1997|     26|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 26, False: 0]
  ------------------
 1998|     26|        return unexpected(parse_error::error);
 1999|     26|    }
 2000|      0|    return it;
 2001|     26|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     26|    {
 3944|     26|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     26|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 8, False: 18]
  |  Branch (3945:50): [True: 6, False: 2]
  ------------------
 3946|       |
 3947|     26|        auto it = ranges::begin(range);
 3948|     26|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     26|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     26|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3952|     26|            return r.transform_error(
 3953|     26|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     26|                                              "Invalid floating-point value"));
 3955|     26|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     26|    {
 3774|     26|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 26]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     26|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     26|        return read_while1_code_unit(
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     26|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     26|    {
  754|     26|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     26|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     26|              cvref<T> obj = *get<T>(fn);
  745|     26|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     26|                  obj(static_cast<decltype(args)>(args)...);
  747|     26|              }
  748|     26|              else {
  749|     26|                  return obj(static_cast<decltype(args)>(args)...);
  750|     26|              }
  751|     26|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     26|    {
  684|     26|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     26|            return static_cast<T*>(s.m_cp);
  686|     26|        }
  687|     26|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     26|            return static_cast<T*>(s.m_p);
  689|     26|        }
  690|     26|        else {
  691|     26|            return reinterpret_cast<T*>(s.m_fp);
  692|     26|        }
  693|     26|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|     26|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     26|        {
  662|     26|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.02k|    {
 4000|  1.02k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.02k|        const bool allowed_nonhex =
 4002|  1.02k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.02k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.02k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.02k, False: 0]
  |  Branch (4005:45): [True: 0, False: 1.02k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.02k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 1.02k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|  1.02k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.02k, False: 0]
  |  Branch (4014:45): [True: 0, False: 1.02k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|  1.02k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 1.02k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|  1.02k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 994, False: 26]
  |  Branch (4021:28): [True: 38, False: 956]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     38|            auto it = range.begin();
 4025|       |
 4026|     38|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 38]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     38|            else {
 4031|     38|                m_kind = float_kind::hex_without_prefix;
 4032|     38|            }
 4033|       |
 4034|     38|            return read_hex(ranges::subrange{it, range.end()});
 4035|     38|        }
 4036|    982|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 26, False: 956]
  |  Branch (4036:29): [True: 26, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     26|            m_kind = float_kind::generic;
 4040|     26|            return read_regular_float(range);
 4041|     26|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    956|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    956|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 956]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    956|        m_kind = float_kind::generic;
 4052|    956|        return read_regular(range);
 4053|    956|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|    994|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    994|                    auto res = read_all(rr);
 3727|    994|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    994|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 994]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|    994|                    return res;
 3733|    994|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    994|{
 1839|    994|    return ranges::next(range.begin(), range.end());
 1840|    994|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    994|    {
  313|    994|        ranges::advance(x, bound);
  314|    994|        return x;
  315|    994|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    994|    {
  275|    994|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    994|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.04k|    {
  190|  1.04k|        i = std::move(bound);
  191|  1.04k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|    994|    {
 1577|    994|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    994|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    994|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    994|    {
 1621|    994|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    994|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    994|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    994|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    994|            m_storage.reset();
 1627|    994|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    994|        }
 1629|    994|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    994|                                          std::basic_string<CharT>>) {
 1631|    994|            m_storage.emplace(SCN_FWD(range));
 1632|    994|            m_view = string_view_type{*m_storage};
 1633|    994|        }
 1634|    994|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    994|                                          typename detail::basic_scan_buffer<
 1636|    994|                                              value_t>::forward_iterator> &&
 1637|    994|                           ranges::common_range<Range>) {
 1638|    994|            auto beg_seg = range.begin().contiguous_segment();
 1639|    994|            auto end_seg = range.end().contiguous_segment();
 1640|    994|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    994|                             detail::to_address(end_seg.end()))) {
 1642|    994|                auto& str = m_storage.emplace();
 1643|    994|                str.reserve(range.end().position() - range.begin().position());
 1644|    994|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    994|                m_view = string_view_type{str};
 1646|    994|                return;
 1647|    994|            }
 1648|       |
 1649|    994|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    994|                                                            end_seg.data());
 1651|    994|            m_storage.reset();
 1652|    994|        }
 1653|    994|        else {
 1654|    994|            auto& str = m_storage.emplace();
 1655|    994|            if constexpr (ranges::sized_range<Range>) {
 1656|    994|                str.reserve(range.size());
 1657|    994|            }
 1658|    994|            if constexpr (ranges::common_range<Range>) {
 1659|    994|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    994|                          std::back_inserter(str));
 1661|    994|            }
 1662|    994|            else {
 1663|    994|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    994|                     ++it) {
 1665|    994|                    str.push_back(*it);
 1666|    994|                }
 1667|    994|            }
 1668|    994|            m_view = string_view_type{str};
 1669|    994|        }
 1670|    994|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|    982|    {
 3665|    982|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 982]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    982|        return read_source_impl(range);
 3671|    982|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|    994|    {
 3691|    994|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|    994|        const std::ptrdiff_t sign_len =
 3694|    994|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 994]
  ------------------
 3695|       |
 3696|    994|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|    994|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    994|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    994|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    994|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 994, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    994|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    994|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    994|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    994|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    994|    }                                                  \
  |  |  |  | 3671|    994|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|    994|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    418|    {
 4170|    418|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    418|#if !SCN_DISABLE_LOCALE
 4173|    418|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 8, False: 410]
  ------------------
 4174|      8|            return read_impl<Range>(
 4175|      8|                range, rd,
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|      8|                },
 4179|      8|                value, loc);
 4180|      8|        }
 4181|    410|#endif
 4182|       |
 4183|    410|        return read_impl<Range>(
 4184|    410|            range, rd,
 4185|    410|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    410|                return r.read_source(SCN_FWD(args)...);
 4187|    410|            },
 4188|    410|            value);
 4189|    418|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    418|    {
 4206|    418|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    418|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    418|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 418, False: 0]
  |  |  ------------------
  ------------------
 4208|    418|            return unexpected(r.error());
 4209|    418|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      8|    {
  754|      8|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      8|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      8|              cvref<T> obj = *get<T>(fn);
  745|      8|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      8|                  obj(static_cast<decltype(args)>(args)...);
  747|      8|              }
  748|      8|              else {
  749|      8|                  return obj(static_cast<decltype(args)>(args)...);
  750|      8|              }
  751|      8|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      8|    {
  684|      8|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      8|            return static_cast<T*>(s.m_cp);
  686|      8|        }
  687|      8|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      8|            return static_cast<T*>(s.m_p);
  689|      8|        }
  690|      8|        else {
  691|      8|            return reinterpret_cast<T*>(s.m_fp);
  692|      8|        }
  693|      8|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|      8|                [](float_reader<CharT>& r, auto&&... args) {
 4177|      8|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|      8|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      8|        {
  662|      8|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    410|    {
  754|    410|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    410|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    410|              cvref<T> obj = *get<T>(fn);
  745|    410|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    410|                  obj(static_cast<decltype(args)>(args)...);
  747|    410|              }
  748|    410|              else {
  749|    410|                  return obj(static_cast<decltype(args)>(args)...);
  750|    410|              }
  751|    410|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    410|    {
  684|    410|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    410|            return static_cast<T*>(s.m_cp);
  686|    410|        }
  687|    410|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    410|            return static_cast<T*>(s.m_p);
  689|    410|        }
  690|    410|        else {
  691|    410|            return reinterpret_cast<T*>(s.m_fp);
  692|    410|        }
  693|    410|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    410|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    410|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    410|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    410|        {
  662|    410|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    302|    {
 4170|    302|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    302|#if !SCN_DISABLE_LOCALE
 4173|    302|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 38, False: 264]
  ------------------
 4174|     38|            return read_impl<Range>(
 4175|     38|                range, rd,
 4176|     38|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     38|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     38|                },
 4179|     38|                value, loc);
 4180|     38|        }
 4181|    264|#endif
 4182|       |
 4183|    264|        return read_impl<Range>(
 4184|    264|            range, rd,
 4185|    264|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    264|                return r.read_source(SCN_FWD(args)...);
 4187|    264|            },
 4188|    264|            value);
 4189|    302|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  1.02k|    {
 4206|  1.02k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.02k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 994]
  |  |  ------------------
  ------------------
 4208|     26|            return unexpected(r.error());
 4209|     26|        }
 4210|       |
 4211|    994|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|    994|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    994|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    994|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    994|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 994, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    994|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    994|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    994|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    994|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    994|    }                                                  \
  |  |  |  | 3671|    994|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|    994|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     38|    {
  754|     38|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     38|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     38|              cvref<T> obj = *get<T>(fn);
  745|     38|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     38|                  obj(static_cast<decltype(args)>(args)...);
  747|     38|              }
  748|     38|              else {
  749|     38|                  return obj(static_cast<decltype(args)>(args)...);
  750|     38|              }
  751|     38|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     38|    {
  684|     38|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     38|            return static_cast<T*>(s.m_cp);
  686|     38|        }
  687|     38|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     38|            return static_cast<T*>(s.m_p);
  689|     38|        }
  690|     38|        else {
  691|     38|            return reinterpret_cast<T*>(s.m_fp);
  692|     38|        }
  693|     38|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     38|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     38|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     38|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     38|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     38|        {
  662|     38|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    264|    {
  754|    264|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    264|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    264|              cvref<T> obj = *get<T>(fn);
  745|    264|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    264|                  obj(static_cast<decltype(args)>(args)...);
  747|    264|              }
  748|    264|              else {
  749|    264|                  return obj(static_cast<decltype(args)>(args)...);
  750|    264|              }
  751|    264|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    264|    {
  684|    264|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    264|            return static_cast<T*>(s.m_cp);
  686|    264|        }
  687|    264|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    264|            return static_cast<T*>(s.m_p);
  689|    264|        }
  690|    264|        else {
  691|    264|            return reinterpret_cast<T*>(s.m_fp);
  692|    264|        }
  693|    264|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    264|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    264|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    264|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    264|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    264|        {
  662|    264|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|  13.3k|{
 5809|  13.3k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  13.3k|        return reader_impl_for_bool<CharT>{};
 5811|  13.3k|    }
 5812|  13.3k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  13.3k|        return reader_impl_for_char<CharT>{};
 5814|  13.3k|    }
 5815|  13.3k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  13.3k|        return reader_impl_for_wchar<CharT>{};
 5817|  13.3k|    }
 5818|  13.3k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  13.3k|        return reader_impl_for_code_point<CharT>{};
 5820|  13.3k|    }
 5821|  13.3k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  13.3k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  13.3k|        return reader_impl_for_string<CharT>{};
 5824|  13.3k|    }
 5825|  13.3k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  13.3k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  13.3k|        return reader_impl_for_string<CharT>{};
 5828|  13.3k|    }
 5829|  13.3k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  13.3k|                       std::is_same_v<T, wregex_matches>) {
 5831|  13.3k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  13.3k|    }
 5833|  13.3k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  13.3k|        return reader_impl_for_voidptr<CharT>{};
 5835|  13.3k|    }
 5836|  13.3k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  13.3k|        return reader_impl_for_float<CharT>{};
 5838|  13.3k|    }
 5839|  13.3k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  13.3k|                       !std::is_same_v<T, wchar_t> &&
 5841|  13.3k|                       !std::is_same_v<T, char32_t> &&
 5842|  13.3k|                       !std::is_same_v<T, bool>) {
 5843|  13.3k|        return reader_impl_for_int<CharT>{};
 5844|  13.3k|    }
 5845|  13.3k|    else {
 5846|  13.3k|        return reader_impl_for_monostate<CharT>{};
 5847|  13.3k|    }
 5848|  13.3k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|  40.0k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  37.8k|    {
 3040|  37.8k|        reader_error_handler eh{};
 3041|  37.8k|        get_derived().check_specs_impl(specs, eh);
 3042|  37.8k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 37.4k]
  |  |  ------------------
  ------------------
 3043|    384|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    384|        }
 3045|  37.4k|        return {};
 3046|  37.8k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  37.8k|    {
 3051|  37.8k|        return static_cast<Derived&>(*this);
 3052|  37.8k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  37.8k|    {
 5210|  37.8k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  37.8k|        SCN_GCC_PUSH
 5213|  37.8k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  37.8k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  37.8k|        SCN_CLANG_PUSH
 5217|  37.8k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  37.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  37.8k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 378, False: 37.4k]
  ------------------
 5221|  1.89k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.89k, False: 35.9k]
  ------------------
 5222|  1.89k|                m_type = reader_type::word;
 5223|  1.89k|                break;
 5224|       |
 5225|    528|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 528, False: 37.3k]
  ------------------
 5226|    528|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 84, False: 444]
  ------------------
 5227|    528|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 222, False: 222]
  ------------------
 5228|    306|                    m_type = reader_type::custom_word;
 5229|    306|                }
 5230|    222|                else {
 5231|    222|                    m_type = reader_type::word;
 5232|    222|                }
 5233|    528|                break;
 5234|      0|            }
 5235|       |
 5236|    114|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 114, False: 37.7k]
  ------------------
 5237|    114|                m_type = reader_type::character;
 5238|    114|                break;
 5239|       |
 5240|  6.60k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 6.60k, False: 31.2k]
  ------------------
 5241|  6.60k|                m_type = reader_type::character_set;
 5242|  6.60k|                break;
 5243|       |
 5244|  24.0k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 24.0k, False: 13.7k]
  ------------------
 5245|  24.0k|                m_type = reader_type::regex;
 5246|  24.0k|                break;
 5247|       |
 5248|  4.25k|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 4.25k, False: 33.6k]
  ------------------
 5249|  4.25k|                m_type = reader_type::regex_escaped;
 5250|  4.25k|                break;
 5251|  37.8k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  37.8k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|  46.7k|    {
 5259|  46.7k|        return m_type == reader_type::word;
 5260|  46.7k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  16.2k|{
 1132|  16.2k|    auto it = src.begin();
 1133|  1.65M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 1.64M, False: 12.9k]
  ------------------
 1134|  1.64M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  1.64M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 2.01k, False: 1.64M]
  ------------------
 1136|  2.01k|            return false;
 1137|  2.01k|        }
 1138|  1.64M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 270, False: 1.63M]
  ------------------
 1139|    270|            return false;
 1140|    270|        }
 1141|  1.63M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  1.63M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  1.63M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.00k, False: 1.63M]
  ------------------
 1144|  1.00k|            return false;
 1145|  1.00k|        }
 1146|  1.63M|        it += len;
 1147|  1.63M|    }
 1148|  12.9k|    return true;
 1149|  16.2k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    582|{
 2993|    582|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    582|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 582, False: 0]
  ------------------
 2995|    582|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    582|    static_cast<    \
  |  |  929|    582|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    582|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    582|    }
 3001|    582|    else {
 3002|    582|        return transcode_impl(source.view(), dest);
 3003|    582|    }
 3004|       |
 3005|    582|    return {};
 3006|    582|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  6.57k|        {
 5103|  6.57k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 1.01k, False: 5.55k]
  ------------------
 5104|  1.01k|                return {};
 5105|  1.01k|            }
 5106|       |
 5107|  5.55k|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|  5.55k|            auto it = detail::to_address(charset_string.begin());
 5109|  5.55k|            auto set = detail::parse_presentation_set(
 5110|  5.55k|                it, detail::to_address(charset_string.end()), nonascii);
 5111|  5.55k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  5.55k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.55k]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|  5.55k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  5.55k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|  5.55k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  5.55k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.55k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|  5.55k|            std::sort(nonascii.extra_ranges.begin(),
 5118|  5.55k|                      nonascii.extra_ranges.end());
 5119|  5.55k|            return {};
 5120|  5.55k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  1.20M|        {
 5138|  1.20M|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 136k, False: 1.07M]
  ------------------
 5139|   136k|                return helper.is_char_set_in_extra_literals(cp);
 5140|   136k|            }
 5141|       |
 5142|  1.07M|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  1.20M|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|   136k|        {
 5086|       |            // TODO: binary search?
 5087|   136k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 136k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|   136k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|   136k|            return std::find_if(
 5093|   136k|                       nonascii.extra_ranges.begin(),
 5094|   136k|                       nonascii.extra_ranges.end(),
 5095|   136k|                       [cp_val](const auto& pair) noexcept {
 5096|   136k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|   136k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|   136k|                       }) != nonascii.extra_ranges.end();
 5099|   136k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  38.3M|                       [cp_val](const auto& pair) noexcept {
 5096|  38.3M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 38.3M, False: 11.9k]
  ------------------
 5097|  38.3M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 134k, False: 38.2M]
  ------------------
 5098|  38.3M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|  1.08M|        {
 5076|  1.08M|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  1.08M|            const auto val =
 5078|  1.08M|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  1.08M|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  1.08M|                    (val % 8)) &
 5081|  1.08M|                   1u;
 5082|  1.08M|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  21.3k|        {
 5129|  21.3k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 7.02k, False: 14.3k]
  ------------------
 5130|  7.02k|                return false;
 5131|  7.02k|            }
 5132|       |
 5133|  14.3k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  21.3k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  6.57k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  1.65k|    {
 5277|  1.65k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.65k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.65k|        return read_impl(range, specs, value);
 5279|  1.65k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  1.65k|    {
 5295|  1.65k|        SCN_CLANG_PUSH
 5296|  1.65k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.65k|        switch (m_type) {
 5299|    394|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 394, False: 1.26k]
  ------------------
 5300|    394|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 56, False: 1.59k]
  ------------------
 5303|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     56|                                                                   value);
 5305|       |
 5306|     36|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 36, False: 1.61k]
  ------------------
 5307|     36|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    558|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 558, False: 1.09k]
  ------------------
 5310|    558|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    558|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.65k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    608|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 608, False: 1.04k]
  ------------------
 5320|    608|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    608|                    range,
 5322|    608|                    get_unescaped_regex_pattern(
 5323|    608|                        specs.charset_string<SourceCharT>()),
 5324|    608|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.65k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.65k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.65k|        }
 5331|       |
 5332|  1.65k|        SCN_CLANG_POP
 5333|  1.65k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    394|    {
 4820|    394|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    394|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    486|{
 4752|    486|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    486|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    486|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 198, False: 288]
  ------------------
 4756|    198|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    198|                                     "Invalid encoding in scanned string");
 4758|    198|    }
 4759|    288|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    288|    static_cast<    \
  |  |  929|    288|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    288|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    288|    return SCN_MOVE(result);
  ------------------
  |  |  928|    288|    static_cast<    \
  |  |  929|    288|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    288|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|  1.18k|{
 2088|  1.18k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  1.18k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  1.18k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  1.18k|        auto buf = make_contiguous_buffer(range);
 2092|  1.18k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.18k|        return ranges::next(range.begin(),
 2094|  1.18k|                            ranges::distance(buf.view().begin(), it));
 2095|  1.18k|    }
 2096|  1.18k|    else {
 2097|  1.18k|        auto it = range.begin();
 2098|       |
 2099|  1.18k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  1.18k|            auto seg = get_contiguous_beginning(range);
 2101|  1.18k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  1.18k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 1.18k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|  1.18k|            ranges::advance(it, seg.size());
 2106|  1.18k|        }
 2107|       |
 2108|  1.18k|        return read_until_code_point(
 2109|  1.18k|            ranges::subrange{it, range.end()},
 2110|  1.18k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  1.18k|    }
 2112|  1.18k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|  1.18k|{
 2061|  1.18k|    auto it = range.begin();
 2062|  24.3k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 23.5k, False: 798]
  ------------------
 2063|  23.5k|        const auto val =
 2064|  23.5k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  23.5k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  23.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18.3k, False: 5.16k]
  |  |  ------------------
  ------------------
 2066|  18.3k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  18.3k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  18.3k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 384, False: 17.9k]
  ------------------
 2069|    384|                return it;
 2070|    384|            }
 2071|  18.3k|        }
 2072|  23.1k|        it = val.iterator;
 2073|  23.1k|    }
 2074|       |
 2075|    798|    return it;
 2076|  1.18k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  1.18k|    {
  754|  1.18k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  18.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.3k|              cvref<T> obj = *get<T>(fn);
  745|  18.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  18.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  18.3k|              }
  748|  18.3k|              else {
  749|  18.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.3k|              }
  751|  18.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  18.3k|    {
  684|  18.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  18.3k|            return static_cast<T*>(s.m_cp);
  686|  18.3k|        }
  687|  18.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  18.3k|            return static_cast<T*>(s.m_p);
  689|  18.3k|        }
  690|  18.3k|        else {
  691|  18.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  18.3k|        }
  693|  18.3k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  18.3k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  1.18k|        {
  662|  1.18k|        }
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     56|    {
 4841|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 22]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     22|        return read_string_impl(
 4851|     22|            range,
 4852|     22|            read_until_code_units(
 4853|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     22|            value);
 4855|     56|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21read_until_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2006|     66|{
 2007|     66|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     66|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     66|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     66|                           needle.end());
 2012|     66|    }
 2013|     66|    else {
 2014|     66|        auto first = range.begin();
 2015|    282|        while (true) {
  ------------------
  |  Branch (2015:16): [Folded - Ignored]
  ------------------
 2016|    282|            auto it = first;
 2017|    408|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|    408|                if (needle_it == needle.end()) {
  ------------------
  |  Branch (2018:21): [True: 36, False: 372]
  ------------------
 2019|     36|                    return first;
 2020|     36|                }
 2021|    372|                if (it == range.end()) {
  ------------------
  |  Branch (2021:21): [True: 30, False: 342]
  ------------------
 2022|     30|                    return it;
 2023|     30|                }
 2024|    342|                if (*it != *needle_it) {
  ------------------
  |  Branch (2024:21): [True: 216, False: 126]
  ------------------
 2025|    216|                    break;
 2026|    216|                }
 2027|    342|            }
 2028|    216|            ++first;
 2029|    216|        }
 2030|     66|    }
 2031|     66|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     36|    {
 4947|     36|        return read_impl(
 4948|     36|            range,
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
 4952|     36|            detail::priority_tag<1>{});
 4953|     36|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     36|    {
 4974|     36|        return read_cb(range);
 4975|     36|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    108|{
 1839|    108|    return ranges::next(range.begin(), range.end());
 1840|    108|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    108|    {
  313|    108|        ranges::advance(x, bound);
  314|    108|        return x;
  315|    108|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    108|    {
  275|    108|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    108|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    108|    {
  203|  2.48k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 2.37k, False: 108]
  ------------------
  204|  2.37k|            ++i;
  205|  2.37k|        }
  206|    108|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    558|    {
 5048|    558|        auto it = read_source_impl(range, {specs});
 5049|    558|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    558|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 536]
  |  |  ------------------
  ------------------
 5050|     22|            return unexpected(it.error());
 5051|     22|        }
 5052|       |
 5053|    536|        return read_string_impl(range, *it, value);
 5054|    558|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5152|  1.67k|    {
 5153|  1.67k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  1.67k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  1.67k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.67k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  1.67k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  1.67k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 996, False: 678]
  ------------------
 5163|    996|            const auto cb = [&](char32_t cp) {
 5164|    996|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    996|            };
 5166|       |
 5167|    996|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 174, False: 822]
  ------------------
 5168|    174|                auto it = read_until_code_point(range, cb);
 5169|    174|                return check_nonempty(it, range);
 5170|    174|            }
 5171|    822|            auto it = read_while_code_point(range, cb);
 5172|    822|            return check_nonempty(it, range);
 5173|    996|        }
 5174|       |
 5175|    678|        const auto cb = [&](SourceCharT ch) {
 5176|    678|            return cb_wrapper.on_ascii_only(ch);
 5177|    678|        };
 5178|       |
 5179|    678|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 408, False: 270]
  ------------------
 5180|    408|            auto it = read_until_code_unit(range, cb);
 5181|    408|            return check_nonempty(it, range);
 5182|    408|        }
 5183|    270|        auto it = read_while_code_unit(range, cb);
 5184|    270|        return check_nonempty(it, range);
 5185|    678|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    996|    {
  754|    996|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   163k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   163k|              cvref<T> obj = *get<T>(fn);
  745|   163k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   163k|                  obj(static_cast<decltype(args)>(args)...);
  747|   163k|              }
  748|   163k|              else {
  749|   163k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   163k|              }
  751|   163k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   163k|    {
  684|   163k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   163k|            return static_cast<T*>(s.m_cp);
  686|   163k|        }
  687|   163k|        else if constexpr (std::is_object_v<T>) {
  688|   163k|            return static_cast<T*>(s.m_p);
  689|   163k|        }
  690|   163k|        else {
  691|   163k|            return reinterpret_cast<T*>(s.m_fp);
  692|   163k|        }
  693|   163k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|   163k|            const auto cb = [&](char32_t cp) {
 5164|   163k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|   163k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    996|        {
  667|    996|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5190|  1.67k|    {
 5191|  1.67k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 66, False: 1.60k]
  ------------------
 5192|     66|            return unexpected_scan_error(
 5193|     66|                scan_error::invalid_scanned_value,
 5194|     66|                "No characters matched in [character set]");
 5195|     66|        }
 5196|       |
 5197|  1.60k|        return it;
 5198|  1.67k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    678|    {
  754|    678|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  17.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.2k|              cvref<T> obj = *get<T>(fn);
  745|  17.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.2k|              }
  748|  17.2k|              else {
  749|  17.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.2k|              }
  751|  17.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  17.2k|    {
  684|  17.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.2k|            return static_cast<T*>(s.m_cp);
  686|  17.2k|        }
  687|  17.2k|        else if constexpr (std::is_object_v<T>) {
  688|  17.2k|            return static_cast<T*>(s.m_p);
  689|  17.2k|        }
  690|  17.2k|        else {
  691|  17.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.2k|        }
  693|  17.2k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5175|  17.2k|        const auto cb = [&](SourceCharT ch) {
 5176|  17.2k|            return cb_wrapper.on_ascii_only(ch);
 5177|  17.2k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    678|        {
  667|    678|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    536|{
 4752|    536|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    536|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    536|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 242, False: 294]
  ------------------
 4756|    242|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    242|                                     "Invalid encoding in scanned string");
 4758|    242|    }
 4759|    294|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    294|    static_cast<    \
  |  |  929|    294|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    294|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    294|    return SCN_MOVE(result);
  ------------------
  |  |  928|    294|    static_cast<    \
  |  |  929|    294|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    294|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    610|    {
 4891|    610|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    610|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    610|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    610|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    610|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 610, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    610|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    610|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    610|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    610|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    610|    }                                                  \
  |  |  |  | 3671|    610|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    610|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  1.83k|    {
 4913|  1.83k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  3.66k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  1.83k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  1.83k|            return unexpected_scan_error(
 4916|  1.83k|                scan_error::invalid_scanned_value,
 4917|  1.83k|                "Regex backend doesn't support wide strings as input");
 4918|  1.83k|        }
 4919|  1.83k|        else {
 4920|  1.83k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 1.83k, False: 0]
  ------------------
 4921|  1.83k|                return unexpected_scan_error(
 4922|  1.83k|                    scan_error::invalid_scanned_value,
 4923|  1.83k|                    "Cannot use regex with a non-contiguous source "
 4924|  1.83k|                    "range");
 4925|  1.83k|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|  1.83k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|  1.83k|{
  959|  1.83k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  1.83k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  1.83k|        return true;
  962|  1.83k|    }
  963|  1.83k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|  1.83k|                           ranges::const_iterator_t<Range>,
  965|  1.83k|                           typename detail::basic_scan_buffer<
  966|  1.83k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  1.83k|        auto beg = r.begin();
  968|  1.83k|        if (!beg.stores_parent()) {
  969|  1.83k|            return true;
  970|  1.83k|        }
  971|  1.83k|        return beg.parent()->is_contiguous();
  972|  1.83k|    }
  973|  1.83k|    else {
  974|  1.83k|        return false;
  975|  1.83k|    }
  976|  1.83k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  10.8k|    {
 5277|  10.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  10.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  10.8k|        return read_impl(range, specs, value);
 5279|  10.8k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  10.8k|    {
 5295|  10.8k|        SCN_CLANG_PUSH
 5296|  10.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  10.8k|        switch (m_type) {
 5299|    296|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 296, False: 10.5k]
  ------------------
 5300|    296|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 10.7k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 10.8k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.63k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.63k, False: 9.18k]
  ------------------
 5310|  1.63k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.63k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  8.02k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 8.02k, False: 2.78k]
  ------------------
 5315|  8.02k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  8.02k|                    range, specs.charset_string<SourceCharT>(),
 5317|  8.02k|                    specs.regexp_flags, value);
 5318|       |
 5319|    810|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 810, False: 10.0k]
  ------------------
 5320|    810|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    810|                    range,
 5322|    810|                    get_unescaped_regex_pattern(
 5323|    810|                        specs.charset_string<SourceCharT>()),
 5324|    810|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 10.8k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  10.8k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  10.8k|        }
 5331|       |
 5332|  10.8k|        SCN_CLANG_POP
 5333|  10.8k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.01k|    {
 4820|  1.01k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.01k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.06k|{
 4752|  1.06k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.06k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.06k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 406, False: 654]
  ------------------
 4756|    406|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    406|                                     "Invalid encoding in scanned string");
 4758|    406|    }
 4759|    654|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    654|    static_cast<    \
  |  |  929|    654|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    654|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    654|    return SCN_MOVE(result);
  ------------------
  |  |  928|    654|    static_cast<    \
  |  |  929|    654|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    654|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  2.65k|{
 3012|  2.65k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  2.65k|        dest.assign(source.view());
 3014|  2.65k|    }
 3015|  2.65k|    else {
 3016|  2.65k|        return transcode_impl(source.view(), dest);
 3017|  2.65k|    }
 3018|       |
 3019|  2.65k|    return {};
 3020|  2.65k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  3.04k|{
 2088|  3.04k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  3.04k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  3.04k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  3.04k|        auto buf = make_contiguous_buffer(range);
 2092|  3.04k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  3.04k|        return ranges::next(range.begin(),
 2094|  3.04k|                            ranges::distance(buf.view().begin(), it));
 2095|  3.04k|    }
 2096|  3.04k|    else {
 2097|  3.04k|        auto it = range.begin();
 2098|       |
 2099|  3.04k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  3.04k|            auto seg = get_contiguous_beginning(range);
 2101|  3.04k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  3.04k|                seg_it != seg.end()) {
 2103|  3.04k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  3.04k|            }
 2105|  3.04k|            ranges::advance(it, seg.size());
 2106|  3.04k|        }
 2107|       |
 2108|  3.04k|        return read_until_code_point(
 2109|  3.04k|            ranges::subrange{it, range.end()},
 2110|  3.04k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  3.04k|    }
 2112|  3.04k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     42|{
 2007|     42|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     42|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     42|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     42|                           needle.end());
 2012|     42|    }
 2013|     42|    else {
 2014|     42|        auto first = range.begin();
 2015|     42|        while (true) {
 2016|     42|            auto it = first;
 2017|     42|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     42|                if (needle_it == needle.end()) {
 2019|     42|                    return first;
 2020|     42|                }
 2021|     42|                if (it == range.end()) {
 2022|     42|                    return it;
 2023|     42|                }
 2024|     42|                if (*it != *needle_it) {
 2025|     42|                    break;
 2026|     42|                }
 2027|     42|            }
 2028|     42|            ++first;
 2029|     42|        }
 2030|     42|    }
 2031|     42|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  1.63k|    {
 5048|  1.63k|        auto it = read_source_impl(range, {specs});
 5049|  1.63k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 414, False: 1.21k]
  |  |  ------------------
  ------------------
 5050|    414|            return unexpected(it.error());
 5051|    414|        }
 5052|       |
 5053|  1.21k|        return read_string_impl(range, *it, value);
 5054|  1.63k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  4.89k|    {
 5153|  4.89k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  4.89k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  4.89k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.89k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.89k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  4.89k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  4.89k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 4.56k, False: 336]
  ------------------
 5163|  4.56k|            const auto cb = [&](char32_t cp) {
 5164|  4.56k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  4.56k|            };
 5166|       |
 5167|  4.56k|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 324, False: 4.23k]
  ------------------
 5168|    324|                auto it = read_until_code_point(range, cb);
 5169|    324|                return check_nonempty(it, range);
 5170|    324|            }
 5171|  4.23k|            auto it = read_while_code_point(range, cb);
 5172|  4.23k|            return check_nonempty(it, range);
 5173|  4.56k|        }
 5174|       |
 5175|    336|        const auto cb = [&](SourceCharT ch) {
 5176|    336|            return cb_wrapper.on_ascii_only(ch);
 5177|    336|        };
 5178|       |
 5179|    336|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 150, False: 186]
  ------------------
 5180|    150|            auto it = read_until_code_unit(range, cb);
 5181|    150|            return check_nonempty(it, range);
 5182|    150|        }
 5183|    186|        auto it = read_while_code_unit(range, cb);
 5184|    186|        return check_nonempty(it, range);
 5185|    336|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  4.56k|{
 2061|  4.56k|    auto it = range.begin();
 2062|  1.04M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.04M, False: 330]
  ------------------
 2063|  1.04M|        const auto val =
 2064|  1.04M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.04M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.04M, False: 3.54k]
  |  |  ------------------
  ------------------
 2066|  1.04M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.04M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.04M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 4.23k, False: 1.04M]
  ------------------
 2069|  4.23k|                return it;
 2070|  4.23k|            }
 2071|  1.04M|        }
 2072|  1.04M|        it = val.iterator;
 2073|  1.04M|    }
 2074|       |
 2075|    330|    return it;
 2076|  4.56k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.04M|{
 1899|  1.04M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.04M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.04M|    auto it = range.begin();
 1903|  1.04M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.04M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.54k, False: 1.04M]
  |  |  ------------------
  ------------------
 1906|  3.54k|        ++it;
 1907|  3.54k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  3.54k|        return {it, {}};
 1909|  3.54k|    }
 1910|       |
 1911|  1.04M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 920k, False: 124k]
  ------------------
 1912|   920k|        ++it;
 1913|   920k|        return {it, string_type(1, *range.begin())};
 1914|   920k|    }
 1915|       |
 1916|   124k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|   124k|    return {it, string_type{range.begin(), it}};
 1918|  1.04M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  3.54k|{
 1155|  3.54k|    auto it = input.begin();
 1156|  6.91k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 6.87k, False: 42]
  ------------------
 1157|  6.87k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 3.50k, False: 3.37k]
  ------------------
 1158|  3.50k|            break;
 1159|  3.50k|        }
 1160|  6.87k|    }
 1161|  3.54k|    return it;
 1162|  3.54k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|   124k|    {
  283|   124k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   124k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|   124k|    {
  212|   124k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 54, False: 124k]
  ------------------
  213|     54|            auto dist = bound - i;
  214|     54|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     54|            return dist;
  216|     54|        }
  217|   124k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|   124k|        return n;
  219|   124k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   249k|    {
  132|   249k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 249k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   249k|        return t;
  136|   249k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|  1.04M|    {
 1890|  1.04M|        return !codepoint.empty();
 1891|  1.04M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  4.56k|    {
  754|  4.56k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  1.04M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.04M|              cvref<T> obj = *get<T>(fn);
  745|  1.04M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.04M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.04M|              }
  748|  1.04M|              else {
  749|  1.04M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.04M|              }
  751|  1.04M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  1.04M|    {
  684|  1.04M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.04M|            return static_cast<T*>(s.m_cp);
  686|  1.04M|        }
  687|  1.04M|        else if constexpr (std::is_object_v<T>) {
  688|  1.04M|            return static_cast<T*>(s.m_p);
  689|  1.04M|        }
  690|  1.04M|        else {
  691|  1.04M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.04M|        }
  693|  1.04M|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  1.04M|            const auto cb = [&](char32_t cp) {
 5164|  1.04M|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  1.04M|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  4.56k|        {
  667|  4.56k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  4.89k|    {
 5191|  4.89k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 1.24k, False: 3.65k]
  ------------------
 5192|  1.24k|            return unexpected_scan_error(
 5193|  1.24k|                scan_error::invalid_scanned_value,
 5194|  1.24k|                "No characters matched in [character set]");
 5195|  1.24k|        }
 5196|       |
 5197|  3.65k|        return it;
 5198|  4.89k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  4.23k|{
 2082|  4.23k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  4.23k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    336|    {
  754|    336|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  4.04k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.04k|              cvref<T> obj = *get<T>(fn);
  745|  4.04k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.04k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.04k|              }
  748|  4.04k|              else {
  749|  4.04k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.04k|              }
  751|  4.04k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.04k|    {
  684|  4.04k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.04k|            return static_cast<T*>(s.m_cp);
  686|  4.04k|        }
  687|  4.04k|        else if constexpr (std::is_object_v<T>) {
  688|  4.04k|            return static_cast<T*>(s.m_p);
  689|  4.04k|        }
  690|  4.04k|        else {
  691|  4.04k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.04k|        }
  693|  4.04k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  4.04k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.04k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.04k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    336|        {
  667|    336|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  2.24k|{
 4752|  2.24k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  2.24k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  2.24k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 250, False: 1.99k]
  ------------------
 4756|    250|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    250|                                     "Invalid encoding in scanned string");
 4758|    250|    }
 4759|  1.99k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.99k|    static_cast<    \
  |  |  929|  1.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.99k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.99k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.99k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.99k|    static_cast<    \
  |  |  929|  1.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.99k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  8.83k|    {
 4891|  8.83k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  8.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.80k, False: 1.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.80k|    }                                                  \
  |  |  |  | 3671|  8.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.03k|        return read_string_impl(range, it, value);
 4893|  8.83k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4912|  26.5k|    {
 4913|  26.5k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  53.0k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  26.5k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  26.5k|            return unexpected_scan_error(
 4916|  26.5k|                scan_error::invalid_scanned_value,
 4917|  26.5k|                "Regex backend doesn't support wide strings as input");
 4918|  26.5k|        }
 4919|  26.5k|        else {
 4920|  26.5k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 26.5k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  26.5k|            auto input = get_as_contiguous(range);
 4928|  26.5k|            SCN_TRY(it,
  ------------------
  |  | 3672|  26.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 23.4k, False: 3.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  23.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  23.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  23.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  23.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  23.4k|    }                                                  \
  |  |  |  | 3671|  26.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  3.09k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  3.09k|            return ranges::next(range.begin(),
 4931|  3.09k|                                ranges::distance(input.begin(), it));
 4932|  26.5k|        }
 4933|  26.5k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  26.5k|{
  959|  26.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  26.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  26.5k|        return true;
  962|  26.5k|    }
  963|  26.5k|    else if constexpr (std::is_same_v<
  964|  26.5k|                           ranges::const_iterator_t<Range>,
  965|  26.5k|                           typename detail::basic_scan_buffer<
  966|  26.5k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  26.5k|        auto beg = r.begin();
  968|  26.5k|        if (!beg.stores_parent()) {
  969|  26.5k|            return true;
  970|  26.5k|        }
  971|  26.5k|        return beg.parent()->is_contiguous();
  972|  26.5k|    }
  973|  26.5k|    else {
  974|  26.5k|        return false;
  975|  26.5k|    }
  976|  26.5k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  26.5k|{
 1065|  26.5k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  26.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  26.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  26.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  26.5k|        return r;
 1070|  26.5k|    }
 1071|  26.5k|    else if constexpr (std::is_same_v<
 1072|  26.5k|                           ranges::const_iterator_t<Range>,
 1073|  26.5k|                           typename detail::basic_scan_buffer<
 1074|  26.5k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  26.5k|        if constexpr (ranges::common_range<Range>) {
 1076|  26.5k|            return detail::make_string_view_from_pointers(
 1077|  26.5k|                r.begin().to_contiguous_segment_iterator(),
 1078|  26.5k|                r.end().to_contiguous_segment_iterator());
 1079|  26.5k|        }
 1080|  26.5k|        else {
 1081|  26.5k|            return r.begin().contiguous_segment();
 1082|  26.5k|        }
 1083|  26.5k|    }
 1084|  26.5k|    else {
 1085|  26.5k|        SCN_EXPECT(false);
 1086|  26.5k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  26.5k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  26.5k|    }
 1090|  26.5k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  26.5k|{
  981|  26.5k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  26.5k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  26.5k|        return true;
  984|  26.5k|    }
  985|  26.5k|    else if constexpr (std::is_same_v<
  986|  26.5k|                           ranges::const_iterator_t<Range>,
  987|  26.5k|                           typename detail::basic_scan_buffer<
  988|  26.5k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  26.5k|        auto beg = r.begin();
  990|  26.5k|        if (beg.contiguous_segment().empty()) {
  991|  26.5k|            return false;
  992|  26.5k|        }
  993|  26.5k|        if constexpr (ranges::common_range<Range>) {
  994|  26.5k|            return beg.contiguous_segment().end() ==
  995|  26.5k|                   ranges::end(r).contiguous_segment().end();
  996|  26.5k|        }
  997|  26.5k|        else {
  998|  26.5k|            if (beg.stores_parent()) {
  999|  26.5k|                return beg.contiguous_segment().end() ==
 1000|  26.5k|                       beg.parent()->current_view().end();
 1001|  26.5k|            }
 1002|  26.5k|            return true;
 1003|  26.5k|        }
 1004|  26.5k|    }
 1005|  26.5k|    else {
 1006|  26.5k|        return false;
 1007|  26.5k|    }
 1008|  26.5k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  26.5k|{
 4346|  26.5k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  26.5k|                  ranges::borrowed_range<Input> &&
 4348|  26.5k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  26.5k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  26.5k|    std::basic_regex<CharT> re{};
 4352|  26.5k|    try {
 4353|  26.5k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  26.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  26.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  26.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 26.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  26.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  26.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  26.5k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  26.5k|                                     re_flags | std::regex_constants::nosubs};
 4356|  26.5k|    }
 4357|  26.5k|    catch (const std::regex_error& err) {
 4358|  17.0k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  17.0k|                                     "Invalid regex");
 4360|  17.0k|    }
 4361|       |
 4362|  9.51k|    std::match_results<const CharT*> matches{};
 4363|  9.51k|    try {
 4364|  9.51k|        bool found = std::regex_search(input.data(),
 4365|  9.51k|                                       input.data() + input.size(), matches, re,
 4366|  9.51k|                                       std::regex_constants::match_continuous);
 4367|  9.51k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 6.42k, False: 3.09k]
  |  Branch (4367:23): [True: 0, False: 3.09k]
  ------------------
 4368|  5.95k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  5.95k|                                         "Regular expression didn't match");
 4370|  5.95k|        }
 4371|  9.51k|    }
 4372|  9.51k|    catch (const std::regex_error& err) {
 4373|    468|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|    468|                                     "Regex matching failed with an error");
 4375|    468|    }
 4376|       |
 4377|  3.09k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  9.51k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5808|  13.3k|{
 5809|  13.3k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  13.3k|        return reader_impl_for_bool<CharT>{};
 5811|  13.3k|    }
 5812|  13.3k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  13.3k|        return reader_impl_for_char<CharT>{};
 5814|  13.3k|    }
 5815|  13.3k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  13.3k|        return reader_impl_for_wchar<CharT>{};
 5817|  13.3k|    }
 5818|  13.3k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  13.3k|        return reader_impl_for_code_point<CharT>{};
 5820|  13.3k|    }
 5821|  13.3k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  13.3k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  13.3k|        return reader_impl_for_string<CharT>{};
 5824|  13.3k|    }
 5825|  13.3k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  13.3k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  13.3k|        return reader_impl_for_string<CharT>{};
 5828|  13.3k|    }
 5829|  13.3k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  13.3k|                       std::is_same_v<T, wregex_matches>) {
 5831|  13.3k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  13.3k|    }
 5833|  13.3k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  13.3k|        return reader_impl_for_voidptr<CharT>{};
 5835|  13.3k|    }
 5836|  13.3k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  13.3k|        return reader_impl_for_float<CharT>{};
 5838|  13.3k|    }
 5839|  13.3k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  13.3k|                       !std::is_same_v<T, wchar_t> &&
 5841|  13.3k|                       !std::is_same_v<T, char32_t> &&
 5842|  13.3k|                       !std::is_same_v<T, bool>) {
 5843|  13.3k|        return reader_impl_for_int<CharT>{};
 5844|  13.3k|    }
 5845|  13.3k|    else {
 5846|  13.3k|        return reader_impl_for_monostate<CharT>{};
 5847|  13.3k|    }
 5848|  13.3k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    582|{
 2993|    582|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    582|        if (source.stores_allocated_string()) {
 2995|    582|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    582|        }
 2997|    582|        else {
 2998|    582|            dest.assign(source.view());
 2999|    582|        }
 3000|    582|    }
 3001|    582|    else {
 3002|    582|        return transcode_impl(source.view(), dest);
 3003|    582|    }
 3004|       |
 3005|      0|    return {};
 3006|    582|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  3.23k|{
 2968|  3.23k|    dst.clear();
 2969|  3.23k|    transcode_valid_to_string(src, dst);
 2970|  3.23k|    return {};
 2971|  3.23k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  3.23k|{
 1403|  3.23k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  3.23k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  3.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  3.23k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  3.23k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  3.23k|            std::u32string tmp;
 1410|  3.23k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  3.23k|            return transcode_to_string_impl_32to16<true>(
 1412|  3.23k|                std::u32string_view{tmp}, dest);
 1413|  3.23k|        }
 1414|  3.23k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  3.23k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  3.23k|        }
 1417|  3.23k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  3.23k|{
 1277|  3.23k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  3.23k|    auto it = src.begin();
 1280|   397k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 394k, False: 3.23k]
  ------------------
 1281|   394k|        auto res = get_next_code_point_valid(
 1282|   394k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   394k|                                                                 src.end()));
 1284|   394k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   394k|        dest.push_back(res.value);
 1286|   394k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   394k|    }
 1288|  3.23k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   394k|{
 1189|   394k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   394k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   394k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   394k|    return {input.begin() + len,
 1195|   394k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   394k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|  1.65k|    {
 5277|  1.65k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.65k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.65k|        return read_impl(range, specs, value);
 5279|  1.65k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|  1.65k|    {
 5295|  1.65k|        SCN_CLANG_PUSH
 5296|  1.65k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.65k|        switch (m_type) {
 5299|    394|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 394, False: 1.26k]
  ------------------
 5300|    394|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 56, False: 1.59k]
  ------------------
 5303|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     56|                                                                   value);
 5305|       |
 5306|     36|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 36, False: 1.61k]
  ------------------
 5307|     36|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    558|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 558, False: 1.09k]
  ------------------
 5310|    558|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    558|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.65k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    608|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 608, False: 1.04k]
  ------------------
 5320|    608|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    608|                    range,
 5322|    608|                    get_unescaped_regex_pattern(
 5323|    608|                        specs.charset_string<SourceCharT>()),
 5324|    608|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.65k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.65k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.65k|        }
 5331|       |
 5332|  1.65k|        SCN_CLANG_POP
 5333|  1.65k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    394|    {
 4820|    394|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    394|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    486|{
 4752|    486|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    486|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    486|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 198, False: 288]
  ------------------
 4756|    198|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    198|                                     "Invalid encoding in scanned string");
 4758|    198|    }
 4759|    288|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    288|    static_cast<    \
  |  |  929|    288|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    288|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 288]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    288|    return SCN_MOVE(result);
  ------------------
  |  |  928|    288|    static_cast<    \
  |  |  929|    288|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    288|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     56|    {
 4841|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 22]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|     22|        return read_string_impl(
 4851|     22|            range,
 4852|     22|            read_until_code_units(
 4853|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     22|            value);
 4855|     56|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES18_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlcE_clEc:
 4847|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     36|    {
 4947|     36|        return read_impl(
 4948|     36|            range,
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
 4952|     36|            detail::priority_tag<1>{});
 4953|     36|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     36|    {
 4974|     36|        return read_cb(range);
 4975|     36|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     36|            [&](const auto& rng) {
 4950|     36|                return read_string_impl(rng, read_all(rng), value);
 4951|     36|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5047|    558|    {
 5048|    558|        auto it = read_source_impl(range, {specs});
 5049|    558|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    558|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 536]
  |  |  ------------------
  ------------------
 5050|     22|            return unexpected(it.error());
 5051|     22|        }
 5052|       |
 5053|    536|        return read_string_impl(range, *it, value);
 5054|    558|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4751|    536|{
 4752|    536|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    536|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    536|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 242, False: 294]
  ------------------
 4756|    242|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    242|                                     "Invalid encoding in scanned string");
 4758|    242|    }
 4759|    294|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    294|    static_cast<    \
  |  |  929|    294|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    294|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    294|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 294]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    294|    return SCN_MOVE(result);
  ------------------
  |  |  928|    294|    static_cast<    \
  |  |  929|    294|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    294|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|    610|    {
 4891|    610|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    610|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    610|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    610|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    610|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 610, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    610|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    610|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    610|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    610|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    610|    }                                                  \
  |  |  |  | 3671|    610|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|    610|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  10.8k|    {
 5277|  10.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  10.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  10.8k|        return read_impl(range, specs, value);
 5279|  10.8k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  10.8k|    {
 5295|  10.8k|        SCN_CLANG_PUSH
 5296|  10.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  10.8k|        switch (m_type) {
 5299|    296|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 296, False: 10.5k]
  ------------------
 5300|    296|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 10.7k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 10.8k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.63k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.63k, False: 9.18k]
  ------------------
 5310|  1.63k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.63k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  8.02k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 8.02k, False: 2.78k]
  ------------------
 5315|  8.02k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  8.02k|                    range, specs.charset_string<SourceCharT>(),
 5317|  8.02k|                    specs.regexp_flags, value);
 5318|       |
 5319|    810|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 810, False: 10.0k]
  ------------------
 5320|    810|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    810|                    range,
 5322|    810|                    get_unescaped_regex_pattern(
 5323|    810|                        specs.charset_string<SourceCharT>()),
 5324|    810|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 10.8k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  10.8k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  10.8k|        }
 5331|       |
 5332|  10.8k|        SCN_CLANG_POP
 5333|  10.8k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.01k|    {
 4820|  1.01k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.01k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.06k|{
 4752|  1.06k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.06k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.06k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 406, False: 654]
  ------------------
 4756|    406|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    406|                                     "Invalid encoding in scanned string");
 4758|    406|    }
 4759|    654|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    654|    static_cast<    \
  |  |  929|    654|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    654|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    654|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 654]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    654|    return SCN_MOVE(result);
  ------------------
  |  |  928|    654|    static_cast<    \
  |  |  929|    654|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    654|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  2.65k|{
 3012|  2.65k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  2.65k|        dest.assign(source.view());
 3014|  2.65k|    }
 3015|  2.65k|    else {
 3016|  2.65k|        return transcode_impl(source.view(), dest);
 3017|  2.65k|    }
 3018|       |
 3019|      0|    return {};
 3020|  2.65k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     46|    {
 4841|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 14]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|     14|        return read_string_impl(
 4851|     14|            range,
 4852|     14|            read_until_code_units(
 4853|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|     14|            value);
 4855|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4847|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  1.63k|    {
 5048|  1.63k|        auto it = read_source_impl(range, {specs});
 5049|  1.63k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 414, False: 1.21k]
  |  |  ------------------
  ------------------
 5050|    414|            return unexpected(it.error());
 5051|    414|        }
 5052|       |
 5053|  1.21k|        return read_string_impl(range, *it, value);
 5054|  1.63k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  2.24k|{
 4752|  2.24k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  2.24k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  2.24k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 250, False: 1.99k]
  ------------------
 4756|    250|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    250|                                     "Invalid encoding in scanned string");
 4758|    250|    }
 4759|  1.99k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.99k|    static_cast<    \
  |  |  929|  1.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.99k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.99k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.99k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.99k|    static_cast<    \
  |  |  929|  1.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.99k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  8.83k|    {
 4891|  8.83k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  8.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.80k, False: 1.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.80k|    }                                                  \
  |  |  |  | 3671|  8.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|  1.03k|        return read_string_impl(range, it, value);
 4893|  8.83k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|  13.3k|{
 5809|  13.3k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  13.3k|        return reader_impl_for_bool<CharT>{};
 5811|  13.3k|    }
 5812|  13.3k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  13.3k|        return reader_impl_for_char<CharT>{};
 5814|  13.3k|    }
 5815|  13.3k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  13.3k|        return reader_impl_for_wchar<CharT>{};
 5817|  13.3k|    }
 5818|  13.3k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  13.3k|        return reader_impl_for_code_point<CharT>{};
 5820|  13.3k|    }
 5821|  13.3k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  13.3k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  13.3k|        return reader_impl_for_string<CharT>{};
 5824|  13.3k|    }
 5825|  13.3k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  13.3k|                       std::is_same_v<T, std::wstring>) {
 5827|  13.3k|        return reader_impl_for_string<CharT>{};
 5828|  13.3k|    }
 5829|  13.3k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  13.3k|                       std::is_same_v<T, wregex_matches>) {
 5831|  13.3k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  13.3k|    }
 5833|  13.3k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  13.3k|        return reader_impl_for_voidptr<CharT>{};
 5835|  13.3k|    }
 5836|  13.3k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  13.3k|        return reader_impl_for_float<CharT>{};
 5838|  13.3k|    }
 5839|  13.3k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  13.3k|                       !std::is_same_v<T, wchar_t> &&
 5841|  13.3k|                       !std::is_same_v<T, char32_t> &&
 5842|  13.3k|                       !std::is_same_v<T, bool>) {
 5843|  13.3k|        return reader_impl_for_int<CharT>{};
 5844|  13.3k|    }
 5845|  13.3k|    else {
 5846|  13.3k|        return reader_impl_for_monostate<CharT>{};
 5847|  13.3k|    }
 5848|  13.3k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  1.65k|    {
 5277|  1.65k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.65k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  1.65k|        return read_impl(range, specs, value);
 5279|  1.65k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  1.65k|    {
 5295|  1.65k|        SCN_CLANG_PUSH
 5296|  1.65k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  1.65k|        switch (m_type) {
 5299|    394|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 394, False: 1.26k]
  ------------------
 5300|    394|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     56|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 56, False: 1.59k]
  ------------------
 5303|     56|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     56|                                                                   value);
 5305|       |
 5306|     36|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 36, False: 1.61k]
  ------------------
 5307|     36|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    558|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 558, False: 1.09k]
  ------------------
 5310|    558|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    558|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      2|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 2, False: 1.65k]
  ------------------
 5315|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      2|                    range, specs.charset_string<SourceCharT>(),
 5317|      2|                    specs.regexp_flags, value);
 5318|       |
 5319|    608|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 608, False: 1.04k]
  ------------------
 5320|    608|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    608|                    range,
 5322|    608|                    get_unescaped_regex_pattern(
 5323|    608|                        specs.charset_string<SourceCharT>()),
 5324|    608|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 1.65k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  1.65k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  1.65k|        }
 5331|       |
 5332|  1.65k|        SCN_CLANG_POP
 5333|  1.65k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    394|    {
 4827|    394|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    394|                                     value);
 4829|    394|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    486|{
 4773|    486|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    486|    auto src = [&]() {
 4776|    486|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    486|            return make_contiguous_buffer(
 4778|    486|                ranges::subrange{range.begin().base(), result.base()});
 4779|    486|        }
 4780|    486|        else {
 4781|    486|            return make_contiguous_buffer(
 4782|    486|                ranges::subrange{range.begin(), result});
 4783|    486|        }
 4784|    486|    }();
 4785|    486|    using src_type = decltype(src);
 4786|       |
 4787|    486|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    486|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    486|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    486|                                     "Cannot read a string_view from "
 4796|    486|                                     "this source range (would require "
 4797|    486|                                     "transcoding)");
 4798|    486|    }
 4799|    486|    else {
 4800|    486|        const auto view = src.view();
 4801|    486|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    486|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 198, False: 288]
  ------------------
 4804|    198|            return unexpected_scan_error(
 4805|    198|                scan_error::invalid_scanned_value,
 4806|    198|                "Invalid encoding in scanned string_view");
 4807|    198|        }
 4808|       |
 4809|    288|        return SCN_MOVE(result);
  ------------------
  |  |  928|    288|    static_cast<    \
  |  |  929|    288|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    486|    }
 4811|    486|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    486|    auto src = [&]() {
 4776|    486|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    486|            return make_contiguous_buffer(
 4778|    486|                ranges::subrange{range.begin().base(), result.base()});
 4779|    486|        }
 4780|    486|        else {
 4781|    486|            return make_contiguous_buffer(
 4782|    486|                ranges::subrange{range.begin(), result});
 4783|    486|        }
 4784|    486|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     56|    {
 4863|     56|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 22]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|     22|        return read_string_view_impl(
 4873|     22|            range,
 4874|     22|            read_until_code_units(
 4875|     22|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     22|            value);
 4877|     56|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    782|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    782|              cvref<T> obj = *get<T>(fn);
  745|    782|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    782|                  obj(static_cast<decltype(args)>(args)...);
  747|    782|              }
  748|    782|              else {
  749|    782|                  return obj(static_cast<decltype(args)>(args)...);
  750|    782|              }
  751|    782|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlcE_EEDaNS3_7storageE:
  683|    782|    {
  684|    782|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    782|            return static_cast<T*>(s.m_cp);
  686|    782|        }
  687|    782|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    782|            return static_cast<T*>(s.m_p);
  689|    782|        }
  690|    782|        else {
  691|    782|            return reinterpret_cast<T*>(s.m_fp);
  692|    782|        }
  693|    782|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlcE_clEc:
 4869|    782|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlcE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     36|    {
 4959|     36|        return read_impl(
 4960|     36|            range,
 4961|     36|            [&](const auto& rng) {
 4962|     36|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     36|            },
 4964|     36|            detail::priority_tag<1>{});
 4965|     36|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     36|    {
 4974|     36|        return read_cb(range);
 4975|     36|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     36|            [&](const auto& rng) {
 4962|     36|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     36|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5061|    558|    {
 5062|    558|        auto it = read_source_impl(range, {specs});
 5063|    558|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    558|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 536]
  |  |  ------------------
  ------------------
 5064|     22|            return unexpected(it.error());
 5065|     22|        }
 5066|       |
 5067|    536|        return read_string_view_impl(range, *it, value);
 5068|    558|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4772|    536|{
 4773|    536|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    536|    auto src = [&]() {
 4776|    536|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    536|            return make_contiguous_buffer(
 4778|    536|                ranges::subrange{range.begin().base(), result.base()});
 4779|    536|        }
 4780|    536|        else {
 4781|    536|            return make_contiguous_buffer(
 4782|    536|                ranges::subrange{range.begin(), result});
 4783|    536|        }
 4784|    536|    }();
 4785|    536|    using src_type = decltype(src);
 4786|       |
 4787|    536|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    536|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    536|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    536|                                     "Cannot read a string_view from "
 4796|    536|                                     "this source range (would require "
 4797|    536|                                     "transcoding)");
 4798|    536|    }
 4799|    536|    else {
 4800|    536|        const auto view = src.view();
 4801|    536|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    536|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 242, False: 294]
  ------------------
 4804|    242|            return unexpected_scan_error(
 4805|    242|                scan_error::invalid_scanned_value,
 4806|    242|                "Invalid encoding in scanned string_view");
 4807|    242|        }
 4808|       |
 4809|    294|        return SCN_MOVE(result);
  ------------------
  |  |  928|    294|    static_cast<    \
  |  |  929|    294|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    536|    }
 4811|    536|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4775|    536|    auto src = [&]() {
 4776|    536|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    536|            return make_contiguous_buffer(
 4778|    536|                ranges::subrange{range.begin().base(), result.base()});
 4779|    536|        }
 4780|    536|        else {
 4781|    536|            return make_contiguous_buffer(
 4782|    536|                ranges::subrange{range.begin(), result});
 4783|    536|        }
 4784|    536|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|    610|    {
 4902|    610|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|    610|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    610|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    610|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    610|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 610, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    610|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    610|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    610|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    610|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    610|    }                                                  \
  |  |  |  | 3671|    610|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|    610|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  10.8k|    {
 5277|  10.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  10.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  10.8k|        return read_impl(range, specs, value);
 5279|  10.8k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  10.8k|    {
 5295|  10.8k|        SCN_CLANG_PUSH
 5296|  10.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  10.8k|        switch (m_type) {
 5299|    296|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 296, False: 10.5k]
  ------------------
 5300|    296|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     46|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 46, False: 10.7k]
  ------------------
 5303|     46|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     46|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 10.8k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  1.63k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 1.63k, False: 9.18k]
  ------------------
 5310|  1.63k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  1.63k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  8.02k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 8.02k, False: 2.78k]
  ------------------
 5315|  8.02k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  8.02k|                    range, specs.charset_string<SourceCharT>(),
 5317|  8.02k|                    specs.regexp_flags, value);
 5318|       |
 5319|    810|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 810, False: 10.0k]
  ------------------
 5320|    810|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    810|                    range,
 5322|    810|                    get_unescaped_regex_pattern(
 5323|    810|                        specs.charset_string<SourceCharT>()),
 5324|    810|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 10.8k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  10.8k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  10.8k|        }
 5331|       |
 5332|  10.8k|        SCN_CLANG_POP
 5333|  10.8k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  1.01k|    {
 4827|  1.01k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  1.01k|                                     value);
 4829|  1.01k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  1.06k|{
 4773|  1.06k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.06k|    auto src = [&]() {
 4776|  1.06k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.06k|            return make_contiguous_buffer(
 4778|  1.06k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.06k|        }
 4780|  1.06k|        else {
 4781|  1.06k|            return make_contiguous_buffer(
 4782|  1.06k|                ranges::subrange{range.begin(), result});
 4783|  1.06k|        }
 4784|  1.06k|    }();
 4785|  1.06k|    using src_type = decltype(src);
 4786|       |
 4787|  1.06k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.06k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.06k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.06k|                                     "Cannot read a string_view from "
 4796|  1.06k|                                     "this source range (would require "
 4797|  1.06k|                                     "transcoding)");
 4798|  1.06k|    }
 4799|  1.06k|    else {
 4800|  1.06k|        const auto view = src.view();
 4801|  1.06k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.06k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 406, False: 654]
  ------------------
 4804|    406|            return unexpected_scan_error(
 4805|    406|                scan_error::invalid_scanned_value,
 4806|    406|                "Invalid encoding in scanned string_view");
 4807|    406|        }
 4808|       |
 4809|    654|        return SCN_MOVE(result);
  ------------------
  |  |  928|    654|    static_cast<    \
  |  |  929|    654|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.06k|    }
 4811|  1.06k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  1.06k|    auto src = [&]() {
 4776|  1.06k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.06k|            return make_contiguous_buffer(
 4778|  1.06k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.06k|        }
 4780|  1.06k|        else {
 4781|  1.06k|            return make_contiguous_buffer(
 4782|  1.06k|                ranges::subrange{range.begin(), result});
 4783|  1.06k|        }
 4784|  1.06k|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     46|    {
 4863|     46|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 32, False: 14]
  ------------------
 4864|     32|            return read_string_view_impl(
 4865|     32|                range,
 4866|     32|                read_until_code_unit(
 4867|     32|                    range,
 4868|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     32|                        SourceCharT ch) { return ch == until; }),
 4870|     32|                value);
 4871|     32|        }
 4872|     14|        return read_string_view_impl(
 4873|     14|            range,
 4874|     14|            read_until_code_units(
 4875|     14|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|     14|            value);
 4877|     46|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    454|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    454|              cvref<T> obj = *get<T>(fn);
  745|    454|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    454|                  obj(static_cast<decltype(args)>(args)...);
  747|    454|              }
  748|    454|              else {
  749|    454|                  return obj(static_cast<decltype(args)>(args)...);
  750|    454|              }
  751|    454|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    454|    {
  684|    454|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    454|            return static_cast<T*>(s.m_cp);
  686|    454|        }
  687|    454|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    454|            return static_cast<T*>(s.m_p);
  689|    454|        }
  690|    454|        else {
  691|    454|            return reinterpret_cast<T*>(s.m_fp);
  692|    454|        }
  693|    454|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4869|    454|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  1.63k|    {
 5062|  1.63k|        auto it = read_source_impl(range, {specs});
 5063|  1.63k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 414, False: 1.21k]
  |  |  ------------------
  ------------------
 5064|    414|            return unexpected(it.error());
 5065|    414|        }
 5066|       |
 5067|  1.21k|        return read_string_view_impl(range, *it, value);
 5068|  1.63k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  2.24k|{
 4773|  2.24k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  2.24k|    auto src = [&]() {
 4776|  2.24k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  2.24k|            return make_contiguous_buffer(
 4778|  2.24k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  2.24k|        }
 4780|  2.24k|        else {
 4781|  2.24k|            return make_contiguous_buffer(
 4782|  2.24k|                ranges::subrange{range.begin(), result});
 4783|  2.24k|        }
 4784|  2.24k|    }();
 4785|  2.24k|    using src_type = decltype(src);
 4786|       |
 4787|  2.24k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  2.24k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  2.24k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  2.24k|                                     "Cannot read a string_view from "
 4796|  2.24k|                                     "this source range (would require "
 4797|  2.24k|                                     "transcoding)");
 4798|  2.24k|    }
 4799|  2.24k|    else {
 4800|  2.24k|        const auto view = src.view();
 4801|  2.24k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  2.24k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 250, False: 1.99k]
  ------------------
 4804|    250|            return unexpected_scan_error(
 4805|    250|                scan_error::invalid_scanned_value,
 4806|    250|                "Invalid encoding in scanned string_view");
 4807|    250|        }
 4808|       |
 4809|  1.99k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.99k|    static_cast<    \
  |  |  929|  1.99k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  2.24k|    }
 4811|  2.24k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  2.24k|    auto src = [&]() {
 4776|  2.24k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  2.24k|            return make_contiguous_buffer(
 4778|  2.24k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  2.24k|        }
 4780|  2.24k|        else {
 4781|  2.24k|            return make_contiguous_buffer(
 4782|  2.24k|                ranges::subrange{range.begin(), result});
 4783|  2.24k|        }
 4784|  2.24k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  8.83k|    {
 4902|  8.83k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  8.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  8.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  8.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  8.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.80k, False: 1.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  7.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  7.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  7.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  7.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  7.80k|    }                                                  \
  |  |  |  | 3671|  8.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|  1.03k|        return read_string_view_impl(range, it, value);
 4904|  8.83k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5623|  7.77k|    {
 5624|  7.77k|        reader_error_handler eh{};
 5625|  7.77k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5625:23): [Folded - Ignored]
  ------------------
 5626|  7.77k|            detail::check_code_point_type_specs(specs, eh);
 5627|  7.77k|        }
 5628|  7.77k|        else {
 5629|  7.77k|            detail::check_char_type_specs(specs, eh);
 5630|  7.77k|        }
 5631|  7.77k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.15k, False: 616]
  |  |  ------------------
  ------------------
 5632|  7.15k|            return {scan_error::invalid_format_string, eh.m_msg};
 5633|  7.15k|        }
 5634|    616|        return {};
 5635|  7.77k|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  10.7k|    {
  763|  10.7k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  10.7k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  1.87k|    {
  754|  1.87k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  3.41k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.41k|              cvref<T> obj = *get<T>(fn);
  745|  3.41k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.41k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.41k|              }
  748|  3.41k|              else {
  749|  3.41k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.41k|              }
  751|  3.41k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.41k|    {
  684|  3.41k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.41k|            return static_cast<T*>(s.m_cp);
  686|  3.41k|        }
  687|  3.41k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.41k|            return static_cast<T*>(s.m_p);
  689|  3.41k|        }
  690|  3.41k|        else {
  691|  3.41k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.41k|        }
  693|  3.41k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  1.87k|        {
  662|  1.87k|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5618|  1.79k|    {
 5619|  1.79k|        return false;
 5620|  1.79k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|    124|    {
 1780|    124|        auto stdloc = loc.get<std::locale>();
 1781|    124|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    124|        grouping = numpunct.grouping();
 1783|    124|        thousands_sep =
 1784|    124|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 124]
  ------------------
 1785|    124|        decimal_point = numpunct.decimal_point();
 1786|    124|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|    164|{
 1717|    164|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 164, False: 0]
  ------------------
 1718|    164|        return std::use_facet<Facet>(stdloc);
 1719|    164|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    164|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  5.59k|{
 2349|  5.59k|    size_t count{0};
 2350|  5.59k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  5.59k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  5.59k|    });
 2353|  5.59k|    return count;
 2354|  5.59k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  5.59k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  5.59k|    auto it = input.begin();
 1448|  12.1k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 6.59k, False: 5.59k]
  ------------------
 1449|  6.59k|        auto res = get_next_code_point(
 1450|  6.59k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  6.59k|        cb(res.value);
 1452|  6.59k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  6.59k|    }
 1454|  5.59k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   231k|{
 1169|   231k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   231k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   231k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 231k]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   231k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 231k]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   231k|    return {input.begin() + len,
 1181|   231k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   231k|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  5.59k|    {
  754|  5.59k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  6.59k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.59k|              cvref<T> obj = *get<T>(fn);
  745|  6.59k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.59k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.59k|              }
  748|  6.59k|              else {
  749|  6.59k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.59k|              }
  751|  6.59k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  6.59k|    {
  684|  6.59k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.59k|            return static_cast<T*>(s.m_cp);
  686|  6.59k|        }
  687|  6.59k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.59k|            return static_cast<T*>(s.m_p);
  689|  6.59k|        }
  690|  6.59k|        else {
  691|  6.59k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.59k|        }
  693|  6.59k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  6.59k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  6.59k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  6.59k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  5.59k|        {
  662|  5.59k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.65k|    {
 1582|  2.65k|        return m_view;
 1583|  2.65k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  3.01k|    ~contiguous_range_factory() = default;
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E14multibyte_leftEv:
 2420|    386|    {
 2421|    386|        return m_multibyte_left;
 2422|    386|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2425|  80.3k|    {
 2426|  80.3k|        return *m_current;
 2427|  80.3k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EppEv:
 2434|  53.6k|    {
 2435|  53.6k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  53.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  53.6k|        _increment_current();
 2437|  53.6k|        return *this;
 2438|  53.6k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E18_increment_currentEv:
 2667|  53.6k|    {
 2668|  53.6k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 53.6k, False: 0]
  ------------------
 2669|  53.6k|            auto cplen = _get_cp_length_at_current();
 2670|  53.6k|            m_multibyte_left = cplen - 1;
 2671|  53.6k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  53.6k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  53.6k|        ++m_current;
 2678|  53.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E25_get_cp_length_at_currentEv:
 2638|  53.6k|    {
 2639|  53.6k|        return static_cast<difference_type>(
 2640|  53.6k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  53.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E30_get_width_at_current_cp_startEl:
 2644|  53.6k|    {
 2645|  53.6k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  53.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 53.6k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  53.6k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 53.6k, False: 0]
  ------------------
 2650|  53.6k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  53.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  53.6k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  53.6k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  53.6k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  6.32k|{
 1857|  6.32k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  6.32k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.32k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  6.32k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  6.32k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  6.32k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 136, False: 6.18k]
  ------------------
 1862|    136|            return unexpected(eof_error::eof);
 1863|    136|        }
 1864|       |
 1865|  6.18k|        return ranges::next(range.begin(), count);
 1866|  6.32k|    }
 1867|  6.32k|    else {
 1868|  6.32k|        auto it = range.begin();
 1869|  6.32k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  6.32k|            return ranges::next(it, count);
 1871|  6.32k|        }
 1872|       |
 1873|  6.32k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  6.32k|            if (it == range.end()) {
 1875|  6.32k|                return unexpected(eof_error::eof);
 1876|  6.32k|            }
 1877|  6.32k|        }
 1878|       |
 1879|  6.32k|        return it;
 1880|  6.32k|    }
 1881|  6.32k|}
_ZN3scn2v34impl27counted_width_iterator_implneIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|  19.8k|    {
 2531|  19.8k|        return !(a == b);
 2532|  19.8k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKwS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|  20.7k|    {
 2523|  20.7k|        return a.m_current == b.m_current;
 2524|  20.7k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EdeEv:
 2429|  3.05k|    {
 2430|  3.05k|        return *m_current;
 2431|  3.05k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EEwE8is_validEv:
 1889|  26.1k|    {
 1890|  26.1k|        return !codepoint.empty();
 1891|  26.1k|    }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EESB_EEEEDaOT_:
 1682|    498|{
 1683|    498|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|    498|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|    498|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|    498|        return string_view_wrapper{SCN_FWD(range)};
 1687|    498|    }
 1688|    498|    else {
 1689|    498|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|    498|    }
 1691|    498|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EELPv0EEEOT_:
 1536|    498|    {
 1537|    498|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    498|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|    498|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EESD_EEEEvOT_:
 1620|    498|    {
 1621|    498|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    498|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    498|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    498|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    498|            m_storage.reset();
 1627|    498|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    498|        }
 1629|    498|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|    498|                                          std::basic_string<CharT>>) {
 1631|    498|            m_storage.emplace(SCN_FWD(range));
 1632|    498|            m_view = string_view_type{*m_storage};
 1633|    498|        }
 1634|    498|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|    498|                                          typename detail::basic_scan_buffer<
 1636|    498|                                              value_t>::forward_iterator> &&
 1637|    498|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|    498|            auto beg_seg = range.begin().contiguous_segment();
 1639|    498|            auto end_seg = range.end().contiguous_segment();
 1640|    498|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    498|                             detail::to_address(end_seg.end()))) {
 1642|    498|                auto& str = m_storage.emplace();
 1643|    498|                str.reserve(range.end().position() - range.begin().position());
 1644|    498|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    498|                m_view = string_view_type{str};
 1646|    498|                return;
 1647|    498|            }
 1648|       |
 1649|    498|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    498|                                                            end_seg.data());
 1651|    498|            m_storage.reset();
 1652|    498|        }
 1653|    498|        else {
 1654|    498|            auto& str = m_storage.emplace();
 1655|    498|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|    498|                str.reserve(range.size());
 1657|    498|            }
 1658|    498|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|    498|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    498|                          std::back_inserter(str));
 1661|    498|            }
 1662|    498|            else {
 1663|    498|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    498|                     ++it) {
 1665|    498|                    str.push_back(*it);
 1666|    498|                }
 1667|    498|            }
 1668|    498|            m_view = string_view_type{str};
 1669|    498|        }
 1670|    498|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EC2ES5_S5_l:
 2381|  12.5k|    {
 2382|  12.5k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E4baseEv:
 2412|  72.8k|    {
 2413|  72.8k|        return m_current;
 2414|  72.8k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  26.9k|{
 2117|  26.9k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  26.9k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  26.9k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  26.9k|        auto buf = make_contiguous_buffer(range);
 2121|  26.9k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  26.9k|        return ranges::next(range.begin(),
 2123|  26.9k|                            ranges::distance(buf.view().begin(), it));
 2124|  26.9k|    }
 2125|  26.9k|    else {
 2126|  26.9k|        auto it = range.begin();
 2127|       |
 2128|  26.9k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  26.9k|            auto seg = get_contiguous_beginning(range);
 2130|  26.9k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  26.9k|                seg_it != seg.end()) {
 2132|  26.9k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  26.9k|            }
 2134|  26.9k|            ranges::advance(it, seg.size());
 2135|  26.9k|        }
 2136|       |
 2137|  26.9k|        return read_while_code_point(
 2138|  26.9k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  26.9k|    }
 2140|  26.9k|}
_ZN3scn2v34impl21read_while_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2081|  26.9k|{
 2082|  26.9k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  26.9k|}
_ZN3scn2v34impl21read_until_code_pointINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_NS1_12function_refIFbDiESG_EE:
 2060|  26.9k|{
 2061|  26.9k|    auto it = range.begin();
 2062|  37.2k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 36.1k, False: 1.14k]
  ------------------
 2063|  36.1k|        const auto val =
 2064|  36.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  36.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  36.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 36.1k, False: 0]
  |  |  ------------------
  ------------------
 2066|  36.1k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  36.1k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  36.1k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 25.8k, False: 10.2k]
  ------------------
 2069|  25.8k|                return it;
 2070|  25.8k|            }
 2071|  36.1k|        }
 2072|  10.2k|        it = val.iterator;
 2073|  10.2k|    }
 2074|       |
 2075|  1.14k|    return it;
 2076|  26.9k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   134k|{
 1899|   134k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   134k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   134k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   134k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   134k|    auto it = range.begin();
 1903|   134k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   134k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 134k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   134k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 134k, False: 0]
  ------------------
 1912|   134k|        ++it;
 1913|   134k|        return {it, string_type(1, *range.begin())};
 1914|   134k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   134k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   158k|{
  944|   158k|    return is_range_eof(r.begin(), r.end());
  945|   158k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   383k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   383k|    {
  937|   383k|        return begin == end;
  938|   383k|    }
  939|   383k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.02k|    {
  190|  1.02k|        i = std::move(bound);
  191|  1.02k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   134k|    {
 1890|   134k|        return !codepoint.empty();
 1891|   134k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_:
  753|  26.9k|    {
  754|  26.9k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_LPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESO_Di:
  743|  36.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.1k|              cvref<T> obj = *get<T>(fn);
  745|  36.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  36.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  36.1k|              }
  748|  36.1k|              else {
  749|  36.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.1k|              }
  751|  36.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  36.1k|    {
  684|  36.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  36.1k|            return static_cast<T*>(s.m_cp);
  686|  36.1k|        }
  687|  36.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  36.1k|            return static_cast<T*>(s.m_p);
  689|  36.1k|        }
  690|  36.1k|        else {
  691|  36.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  36.1k|        }
  693|  36.1k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2138|  36.1k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_LPv0EEEPSE_:
  661|  26.9k|        {
  662|  26.9k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  23.7k|{
  950|  23.7k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  23.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.7k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  23.7k|    return eof_error::good;
  954|  23.7k|}
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  4.48k|    {
 2832|  4.48k|        return take_width_view{r, n};
 2833|  4.48k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2ERKS9_l:
 2800|  4.48k|    {
 2801|  4.48k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvEC2ERKS9_:
 2713|  4.48k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERwNSN_10locale_refE:
 5698|    208|    {
 5699|    208|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 178, False: 30]
  ------------------
 5700|    208|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 30]
  ------------------
 5701|    178|            return read_default(range, value, loc);
 5702|    178|        }
 5703|       |
 5704|     30|        reader_impl_for_int<CharT> reader{};
 5705|     30|        using integer_type =
 5706|     30|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     30|        integer_type tmp_value{};
 5708|     30|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     30|        value = static_cast<integer_type>(value);
 5710|     30|        return ret;
 5711|    208|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RwNS0_6detail10locale_refE:
 5682|    178|    {
 5683|    178|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    178|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|    178|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|    178|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|    178|        }
 5687|    178|        else {
 5688|    178|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|    178|        }
 5690|    178|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rw:
 5563|    178|    {
 5564|    178|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|    178|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    178|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    178|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    178|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 178]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    178|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    178|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|    178|        ch = *range.begin();
 5566|    178|        return it;
 5567|    178|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  1.52k|{
 1846|  1.52k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.52k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  1.52k|    return ranges::next(range.begin());
 1851|  1.52k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_9eof_errorET_:
  949|  1.52k|{
  950|  1.52k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.52k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.52k|    return eof_error::good;
  954|  1.52k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  943|  1.52k|{
  944|  1.52k|    return is_range_eof(r.begin(), r.end());
  945|  1.52k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|  27.6k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  27.6k|    {
  937|  27.6k|        return begin == end;
  938|  27.6k|    }
  939|  27.6k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|  69.8k|        {
 2770|  69.8k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 386, False: 69.4k]
  |  Branch (2770:39): [True: 386, False: 0]
  ------------------
 2771|  69.8k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 432, False: 69.0k]
  ------------------
 2772|  69.8k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE3endEv:
 2815|  15.7k|    {
 2816|  15.7k|        return sentinel<true>{m_base.get().end()};
 2817|  15.7k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEvE3getEv:
 2716|  40.8k|    {
 2717|  40.8k|        return view;
 2718|  40.8k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE8sentinelILb1EEC2ES8_:
 2750|  15.7k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  1.55k|    {
  296|  1.55k|        ++x;
  297|  1.55k|        return x;
  298|  1.55k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 2809|  12.5k|    {
 2810|  12.5k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  12.5k|                                      m_count};
 2812|  12.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    256|    {
 3539|    256|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    256|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    256|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    256|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    256|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 256]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    256|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    256|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    256|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    256|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 256]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    256|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 256]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    256|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    256|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 238, False: 18]
  |  |  ------------------
  ------------------
 3565|    238|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    238|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    238|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    238|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    238|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 238, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    238|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    238|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    238|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    238|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    238|    }                                                  \
  |  |  |  | 3671|    238|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     18|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     18|            localized_number_formatting_options<CharT>{loc};
 3586|     18|#endif
 3587|       |
 3588|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     18|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    664|{
 3326|    664|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|    664|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    664|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    664|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    664|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 664]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    664|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    664|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    664|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    664|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    664|        parse_integer_base_prefix(
 3331|    664|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    664|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 664]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|    664|    else {
 3343|    664|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 664]
  |  Branch (3343:13): [True: 664, False: 0]
  ------------------
 3344|    664|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 664, False: 0]
  ------------------
 3345|    664|            digits_begin_it = base_prefix_begin_it;
 3346|    664|        }
 3347|    664|    }
 3348|       |
 3349|    664|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 664, False: 0]
  ------------------
 3350|    664|        sign = sign_type::plus_sign;
 3351|    664|    }
 3352|    664|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|    664|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|    664|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|    890|{
 3141|    890|    auto r = read_one_of_code_unit(range, "+-");
 3142|    890|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 890, False: 0]
  ------------------
 3143|    890|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 890, False: 0]
  ------------------
 3144|    890|            return std::pair{range.begin(), sign_type::default_sign};
 3145|    890|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|    890|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|    890|{
 2272|    890|    auto it = read_code_unit(range);
 2273|    890|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    890|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 890]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  1.78k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.78k, False: 890]
  ------------------
 2278|  1.78k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 1.78k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  1.78k|    }
 2282|       |
 2283|    890|    return unexpected(parse_error::error);
 2284|    890|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    664|{
 3293|    664|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 658]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|     24|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 24, False: 640]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     24|            bool zero_parsed = false;
 3302|     24|            auto it = apply_opt(
 3303|     24|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     24|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    188|        case 16:
  ------------------
  |  Branch (3307:9): [True: 188, False: 476]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    188|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    188|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 652]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    434|        default:
  ------------------
  |  Branch (3316:9): [True: 434, False: 230]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    434|            return {range.begin(), base, false};
 3319|    664|    }
 3320|    664|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    218|{
 2291|    218|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 218, False: 0]
  ------------------
 2292|    218|        return range.begin();
 2293|    218|    }
 2294|      0|    return *result;
 2295|    218|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|    914|{
 2231|    914|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|    914|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|    914|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|    914|        if (range.size() < str.size()) {
 2236|    914|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    914|        }
 2238|    914|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|    914|            return unexpected(parse_error::error);
 2240|    914|        }
 2241|    914|        return ranges::next(range.begin(), str.size());
 2242|    914|    }
 2243|    914|    else {
 2244|    914|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    914|            if (ch < 'A' || ch > 'Z') {
 2246|    914|                return ch;
 2247|    914|            }
 2248|    914|            return static_cast<char_type>(ch +
 2249|    914|                                          static_cast<char_type>('a' - 'A'));
 2250|    914|        };
 2251|       |
 2252|    914|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    914|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    914|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    914|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    914|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 78, False: 836]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     78|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     78|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     78|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     78|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     78|    }                                                  \
  |  |  |  | 3671|    914|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    836|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|    836|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|    836|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|    836|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|    836|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 836, False: 0]
  |  |  ------------------
  ------------------
 2257|    836|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|    836|                    return ascii_tolower(a) ==
 2259|    836|                           static_cast<detail::char_t<Range>>(b);
 2260|    836|                }))) {
 2261|    836|            return unexpected(parse_error::error);
 2262|    836|        }
 2263|       |
 2264|      0|        return it;
 2265|    836|    }
 2266|    914|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|    914|{
 1857|    914|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    914|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    914|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    914|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    914|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    914|        if (sz < count) {
 1862|    914|            return unexpected(eof_error::eof);
 1863|    914|        }
 1864|       |
 1865|    914|        return ranges::next(range.begin(), count);
 1866|    914|    }
 1867|    914|    else {
 1868|    914|        auto it = range.begin();
 1869|    914|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 914]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.10k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.26k, False: 836]
  ------------------
 1874|  2.26k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 78, False: 2.18k]
  ------------------
 1875|     78|                return unexpected(eof_error::eof);
 1876|     78|            }
 1877|  2.26k|        }
 1878|       |
 1879|    836|        return it;
 1880|    914|    }
 1881|    914|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|    914|{
 1095|    914|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    914|        return r.size();
 1097|    914|    }
 1098|    914|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    914|                           ranges::const_iterator_t<Range>,
 1100|    914|                           typename detail::basic_scan_buffer<
 1101|    914|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    914|        if constexpr (ranges::common_range<Range>) {
 1103|    914|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    914|        }
 1105|    914|        else {
 1106|    914|            if (r.begin().stores_parent()) {
 1107|    914|                return static_cast<size_t>(
 1108|    914|                    r.begin().parent()->chars_available() -
 1109|    914|                    r.begin().position());
 1110|    914|            }
 1111|    914|            return r.begin().contiguous_segment().size();
 1112|    914|        }
 1113|    914|    }
 1114|    914|    else {
 1115|    914|        return 0;
 1116|    914|    }
 1117|    914|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
 2244|    836|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|    836|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 22, False: 814]
  |  Branch (2245:29): [True: 814, False: 0]
  ------------------
 2246|    836|                return ch;
 2247|    836|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|    836|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     36|{
 3258|     36|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 36]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     36|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 36]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     36|    return unexpected(parse_error::error);
 3268|     36|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     36|{
 2146|     36|    auto it = read_code_unit(range);
 2147|     36|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     36|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 2152|     36|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     36|        return unexpected(parse_error::error);
 2154|     36|    }
 2155|       |
 2156|      0|    return *it;
 2157|     36|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     36|{
 1846|     36|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     36|    return ranges::next(range.begin());
 1851|     36|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|     36|{
  950|     36|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 36]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|     36|    return eof_error::good;
  954|     36|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|  26.1k|{
  944|  26.1k|    return is_range_eof(r.begin(), r.end());
  945|  26.1k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    200|{
 3251|    200|    return read_matching_string_classic_nocase(range, "0x");
 3252|    200|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3359|    628|{
 3360|    628|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|    628|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|    628|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3364|    628|            return unexpected_scan_error(
 3365|    628|                scan_error::invalid_scanned_value,
 3366|    628|                "Failed to parse integer: No digits found");
 3367|    628|        }
 3368|    628|        return range.end();
 3369|    628|    }
 3370|    628|    else {
 3371|    628|        return read_while1_code_unit(range,
 3372|    628|                                     [&](char_type ch) noexcept {
 3373|    628|                                         return char_to_int(ch) < base;
 3374|    628|                                     })
 3375|    628|            .transform_error(map_parse_error_to_scan_error(
 3376|    628|                scan_error::invalid_scanned_value,
 3377|    628|                "Failed to parse integer: No digits found"));
 3378|    628|    }
 3379|    628|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|    854|{
 1996|    854|    auto it = read_while_code_unit(range, pred);
 1997|    854|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 854, False: 0]
  ------------------
 1998|    854|        return unexpected(parse_error::error);
 1999|    854|    }
 2000|      0|    return it;
 2001|    854|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|    854|{
 1976|    854|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    854|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|    854|{
 1957|    854|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    854|        return std::find_if(range.begin(), range.end(), pred);
 1959|    854|    }
 1960|    854|    else {
 1961|    854|        auto first = range.begin();
 1962|    854|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 854, False: 0]
  ------------------
 1963|    854|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 854, False: 0]
  ------------------
 1964|    854|                return first;
 1965|    854|            }
 1966|    854|        }
 1967|      0|        return first;
 1968|    854|    }
 1969|    854|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|  32.5k|        {
 2781|  32.5k|            return !(y == x);
 2782|  32.5k|        }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_:
  753|    628|    {
  754|    628|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|    628|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    628|              cvref<T> obj = *get<T>(fn);
  745|    628|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    628|                  obj(static_cast<decltype(args)>(args)...);
  747|    628|              }
  748|    628|              else {
  749|    628|                  return obj(static_cast<decltype(args)>(args)...);
  750|    628|              }
  751|    628|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlwE_EEDaNS3_7storageE:
  683|    628|    {
  684|    628|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    628|            return static_cast<T*>(s.m_cp);
  686|    628|        }
  687|    628|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    628|            return static_cast<T*>(s.m_p);
  689|    628|        }
  690|    628|        else {
  691|    628|            return reinterpret_cast<T*>(s.m_fp);
  692|    628|        }
  693|    628|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlwE_clEw:
 3372|    628|                                     [&](char_type ch) noexcept {
 3373|    628|                                         return char_to_int(ch) < base;
 3374|    628|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlwE_LPv0EEEPSP_:
  661|    628|        {
  662|    628|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3389|     36|{
 3390|     36|    std::basic_string<CharT> output;
 3391|     36|    std::string thsep_indices;
 3392|     36|    auto it = range.begin();
 3393|     36|    bool digit_matched = false;
 3394|     36|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 36, False: 0]
  ------------------
 3395|     36|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 36]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     36|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 36, False: 0]
  ------------------
 3400|     36|            break;
 3401|     36|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     36|    }
 3407|     36|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 0]
  |  |  ------------------
  ------------------
 3408|     36|        return unexpected_scan_error(
 3409|     36|            scan_error::invalid_scanned_value,
 3410|     36|            "Failed to parse integer: No digits found");
 3411|     36|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     36|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKwS5_E5countEv:
 2416|  70.5k|    {
 2417|  70.5k|        return m_count;
 2418|  70.5k|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5698|    406|    {
 5699|    406|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5699:13): [True: 390, False: 16]
  ------------------
 5700|    406|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5700:13): [True: 0, False: 16]
  ------------------
 5701|    390|            return read_default(range, value, loc);
 5702|    390|        }
 5703|       |
 5704|     16|        reader_impl_for_int<CharT> reader{};
 5705|     16|        using integer_type =
 5706|     16|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5707|     16|        integer_type tmp_value{};
 5708|     16|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5709|     16|        value = static_cast<integer_type>(value);
 5710|     16|        return ret;
 5711|    406|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5682|  1.00k|    {
 5683|  1.00k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.00k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5684|  1.00k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5684:23): [Folded - Ignored]
  ------------------
 5685|  1.00k|            return code_point_reader<wchar_t>{}.read(range, value);
 5686|  1.00k|        }
 5687|  1.00k|        else {
 5688|  1.00k|            return code_unit_reader<wchar_t>{}.read(range, value);
 5689|  1.00k|        }
 5690|  1.00k|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5563|  1.00k|    {
 5564|  1.00k|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3672|  1.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5565|  1.00k|        ch = *range.begin();
 5566|  1.00k|        return it;
 5567|  1.00k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  7.27k|{
 1846|  7.27k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.27k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.27k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  7.27k|    return ranges::next(range.begin());
 1851|  7.27k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  49.0k|    {
  296|  49.0k|        ++x;
  297|  49.0k|        return x;
  298|  49.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    452|    {
 3539|    452|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    452|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    452|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    452|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 452]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    452|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    452|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    452|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    452|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 452]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
  ------------------
  |  Branch (3550:21): [True: 0, False: 0]
  ------------------
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    452|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 452]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    452|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    452|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 422, False: 30]
  |  |  ------------------
  ------------------
 3565|    422|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    422|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    422|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    422|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    422|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 422]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    422|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    422|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    422|                    parse_integer_digits_without_thsep(
 3567|    422|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    422|                        prefix_result.parsed_base));
 3569|       |
 3570|    422|            auto buf = make_contiguous_buffer(
 3571|    422|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    422|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    422|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    422|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    422|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    422|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 422, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    422|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    422|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    422|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    422|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    422|    }                                                  \
  |  |  |  | 3671|    422|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    422|        }
 3580|       |
 3581|     30|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     30|            localized_number_formatting_options<CharT>{loc};
 3586|     30|#endif
 3587|       |
 3588|     30|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     30|    }                                                  \
  |  |  |  | 3671|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  3.11k|{
 3326|  3.11k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3672|  3.11k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.11k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.11k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.11k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.11k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  3.11k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  3.11k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  3.11k|        parse_integer_base_prefix(
 3331|  3.11k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  3.11k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 3.11k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it = base_prefix_begin_it;
 3337|      0|        }
 3338|      0|        else {
 3339|      0|            parsed_zero = false;
 3340|      0|        }
 3341|      0|    }
 3342|  3.11k|    else {
 3343|  3.11k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3343:13): [True: 0, False: 3.11k]
  ------------------
 3344|  3.11k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3344:13): [True: 3.11k, False: 0]
  ------------------
 3345|  3.11k|            digits_begin_it = base_prefix_begin_it;
 3346|  3.11k|        }
 3347|  3.11k|    }
 3348|       |
 3349|  3.11k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3349:9): [True: 3.11k, False: 0]
  ------------------
 3350|  3.11k|        sign = sign_type::plus_sign;
 3351|  3.11k|    }
 3352|  3.11k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3353|  3.11k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3354|  3.11k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  4.14k|{
 3141|  4.14k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  4.14k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 4.14k, False: 0]
  ------------------
 3143|  4.14k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 4.14k, False: 0]
  ------------------
 3144|  4.14k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  4.14k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  4.14k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  4.14k|{
 2272|  4.14k|    auto it = read_code_unit(range);
 2273|  4.14k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.14k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  8.29k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 8.29k, False: 4.14k]
  ------------------
 2278|  8.29k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 8.29k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  8.29k|    }
 2282|       |
 2283|  4.14k|    return unexpected(parse_error::error);
 2284|  4.14k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  3.11k|{
 3293|  3.11k|    switch (base) {
 3294|     12|        case 2:
  ------------------
  |  Branch (3294:9): [True: 12, False: 3.10k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     12|                    false};
 3298|       |
 3299|     10|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 10, False: 3.10k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     10|            bool zero_parsed = false;
 3302|     10|            auto it = apply_opt(
 3303|     10|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     10|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|  1.04k|        case 16:
  ------------------
  |  Branch (3307:9): [True: 1.04k, False: 2.07k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|  1.04k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|  1.04k|                    false};
 3311|       |
 3312|     10|        case 0:
  ------------------
  |  Branch (3312:9): [True: 10, False: 3.10k]
  ------------------
 3313|       |            // detect base
 3314|     10|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  2.04k|        default:
  ------------------
  |  Branch (3316:9): [True: 2.04k, False: 1.07k]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  2.04k|            return {range.begin(), base, false};
 3319|  3.11k|    }
 3320|  3.11k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|  1.06k|{
 2291|  1.06k|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 1.06k, False: 0]
  ------------------
 2292|  1.06k|        return range.begin();
 2293|  1.06k|    }
 2294|      0|    return *result;
 2295|  1.06k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     22|{
 3244|     22|    return read_matching_string_classic_nocase(range, "0b");
 3245|     22|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  4.18k|{
 2231|  4.18k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  4.18k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  4.18k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  4.18k|        if (range.size() < str.size()) {
 2236|  4.18k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  4.18k|        }
 2238|  4.18k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  4.18k|            return unexpected(parse_error::error);
 2240|  4.18k|        }
 2241|  4.18k|        return ranges::next(range.begin(), str.size());
 2242|  4.18k|    }
 2243|  4.18k|    else {
 2244|  4.18k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.18k|            if (ch < 'A' || ch > 'Z') {
 2246|  4.18k|                return ch;
 2247|  4.18k|            }
 2248|  4.18k|            return static_cast<char_type>(ch +
 2249|  4.18k|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.18k|        };
 2251|       |
 2252|  4.18k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  4.18k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.18k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.18k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.18k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 4.17k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      4|    }                                                  \
  |  |  |  | 3671|  4.18k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.17k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  4.17k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  4.17k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  4.17k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.17k, False: 0]
  |  |  ------------------
  ------------------
 2257|  4.17k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  4.17k|                    return ascii_tolower(a) ==
 2259|  4.17k|                           static_cast<detail::char_t<Range>>(b);
 2260|  4.17k|                }))) {
 2261|  4.17k|            return unexpected(parse_error::error);
 2262|  4.17k|        }
 2263|       |
 2264|      0|        return it;
 2265|  4.17k|    }
 2266|  4.18k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  4.17k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.17k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 20, False: 4.15k]
  |  Branch (2245:29): [True: 4.15k, False: 0]
  ------------------
 2246|  4.17k|                return ch;
 2247|  4.17k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.17k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     20|{
 3258|     20|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 20]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     20|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 20]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     20|    return unexpected(parse_error::error);
 3268|     20|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  2.12k|{
 2146|  2.12k|    auto it = read_code_unit(range);
 2147|  2.12k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.12k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  2.12k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.12k, False: 0]
  |  |  ------------------
  ------------------
 2152|  2.12k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.12k|        return unexpected(parse_error::error);
 2154|  2.12k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  2.12k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|  1.05k|{
 3251|  1.05k|    return read_matching_string_classic_nocase(range, "0x");
 3252|  1.05k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     10|{
 3274|     10|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 10]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     10|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 10]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     10|    {
 3281|     10|        bool zero_parsed{false};
 3282|     10|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 10]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     10|    }
 3286|     10|    return {range.begin(), 10, false};
 3287|     10|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3359|  3.05k|{
 3360|  3.05k|    using char_type = detail::char_t<Range>;
 3361|       |
 3362|  3.05k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3362:19): [Folded - Ignored]
  ------------------
 3363|  3.05k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.05k]
  |  |  ------------------
  ------------------
 3364|      0|            return unexpected_scan_error(
 3365|      0|                scan_error::invalid_scanned_value,
 3366|      0|                "Failed to parse integer: No digits found");
 3367|      0|        }
 3368|  3.05k|        return range.end();
 3369|  3.05k|    }
 3370|  3.05k|    else {
 3371|  3.05k|        return read_while1_code_unit(range,
 3372|  3.05k|                                     [&](char_type ch) noexcept {
 3373|  3.05k|                                         return char_to_int(ch) < base;
 3374|  3.05k|                                     })
 3375|  3.05k|            .transform_error(map_parse_error_to_scan_error(
 3376|  3.05k|                scan_error::invalid_scanned_value,
 3377|  3.05k|                "Failed to parse integer: No digits found"));
 3378|  3.05k|    }
 3379|  3.05k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3389|     60|{
 3390|     60|    std::basic_string<CharT> output;
 3391|     60|    std::string thsep_indices;
 3392|     60|    auto it = range.begin();
 3393|     60|    bool digit_matched = false;
 3394|     60|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3394:12): [True: 60, False: 0]
  ------------------
 3395|     60|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3395:13): [True: 0, False: 60]
  ------------------
 3396|      0|            thsep_indices.push_back(
 3397|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3398|      0|        }
 3399|     60|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3399:18): [True: 60, False: 0]
  ------------------
 3400|     60|            break;
 3401|     60|        }
 3402|      0|        else {
 3403|      0|            output.push_back(*it);
 3404|      0|            digit_matched = true;
 3405|      0|        }
 3406|     60|    }
 3407|     60|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 60, False: 0]
  |  |  ------------------
  ------------------
 3408|     60|        return unexpected_scan_error(
 3409|     60|            scan_error::invalid_scanned_value,
 3410|     60|            "Failed to parse integer: No digits found");
 3411|     60|    }
 3412|      0|    return std::tuple{it, output, thsep_indices};
 3413|     60|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  15.1k|{
 1683|  15.1k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  15.1k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  15.1k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  15.1k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  15.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  15.1k|    }
 1688|  15.1k|    else {
 1689|  15.1k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  15.1k|    }
 1691|  15.1k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  15.1k|    {
 1490|  15.1k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  17.8k|    {
 1503|  17.8k|        return sv;
 1504|  17.8k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5950|    430|{
 5951|    430|    using char_type = detail::char_t<Range>;
 5952|    430|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    430|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 430, False: 0]
  ------------------
 5955|    430|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    430|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    430|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 374, False: 56]
  ------------------
 5959|    374|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|    374|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 42, False: 332]
  ------------------
 5962|     42|                auto prefix_width =
 5963|     42|                    static_cast<std::ptrdiff_t>(
 5964|     42|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|     42|                    ranges::distance(range.begin(), it);
 5966|     42|                return result_type{it, prefix_width};
 5967|     42|            }
 5968|    332|            return result_type{it, 0};
 5969|    374|        }
 5970|       |
 5971|     56|        auto max_width_view = take_width(range, max_width);
 5972|     56|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|     56|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 56, False: 0]
  ------------------
 5975|     56|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|     56|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|     56|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    576|{
 1976|    576|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    576|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    870|{
 1957|    870|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    870|        return std::find_if(range.begin(), range.end(), pred);
 1959|    870|    }
 1960|    870|    else {
 1961|    870|        auto first = range.begin();
 1962|    870|        for (; first != range.end(); ++first) {
 1963|    870|            if (pred(*first)) {
 1964|    870|                return first;
 1965|    870|            }
 1966|    870|        }
 1967|    870|        return first;
 1968|    870|    }
 1969|    870|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    430|    {
  754|    430|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    546|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    546|              cvref<T> obj = *get<T>(fn);
  745|    546|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    546|                  obj(static_cast<decltype(args)>(args)...);
  747|    546|              }
  748|    546|              else {
  749|    546|                  return obj(static_cast<decltype(args)>(args)...);
  750|    546|              }
  751|    546|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    546|    {
  684|    546|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    546|            return static_cast<T*>(s.m_cp);
  686|    546|        }
  687|    546|        else if constexpr (std::is_object_v<T>) {
  688|    546|            return static_cast<T*>(s.m_p);
  689|    546|        }
  690|    546|        else {
  691|    546|            return reinterpret_cast<T*>(s.m_fp);
  692|    546|        }
  693|    546|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    546|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    430|        {
  667|    430|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|     56|{
 1976|     56|    return read_until_code_unit(range, std::not_fn(pred));
 1977|     56|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|    158|{
 1957|    158|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    158|        return std::find_if(range.begin(), range.end(), pred);
 1959|    158|    }
 1960|    158|    else {
 1961|    158|        auto first = range.begin();
 1962|  1.21k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.11k, False: 104]
  ------------------
 1963|  1.11k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 54, False: 1.06k]
  ------------------
 1964|     54|                return first;
 1965|     54|            }
 1966|  1.11k|        }
 1967|    104|        return first;
 1968|    158|    }
 1969|    158|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|    156|{
 2951|    156|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 0, False: 156]
  ------------------
 2952|      0|        auto it = read_while_classic_space(range);
 2953|      0|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|      0|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|      0|        return it;
 2959|      0|    }
 2960|       |
 2961|    156|    return read_while_classic_space(range);
 2962|    156|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|    156|{
 2117|    156|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|    156|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|    156|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|    156|        auto buf = make_contiguous_buffer(range);
 2121|    156|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|    156|        return ranges::next(range.begin(),
 2123|    156|                            ranges::distance(buf.view().begin(), it));
 2124|    156|    }
 2125|    156|    else {
 2126|    156|        auto it = range.begin();
 2127|       |
 2128|    156|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|    156|            auto seg = get_contiguous_beginning(range);
 2130|    156|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|    156|                seg_it != seg.end()) {
 2132|    156|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|    156|            }
 2134|    156|            ranges::advance(it, seg.size());
 2135|    156|        }
 2136|       |
 2137|    156|        return read_while_code_point(
 2138|    156|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|    156|    }
 2140|    156|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|    156|{
 2082|    156|    return read_until_code_point(range, std::not_fn(pred));
 2083|    156|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|    156|{
 2061|    156|    auto it = range.begin();
 2062|    156|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 156, False: 0]
  ------------------
 2063|    156|        const auto val =
 2064|    156|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|    156|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|    156|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 156, False: 0]
  |  |  ------------------
  ------------------
 2066|    156|            const auto cp = detail::decode_code_point_exhaustive(
 2067|    156|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|    156|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 156, False: 0]
  ------------------
 2069|    156|                return it;
 2070|    156|            }
 2071|    156|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|    156|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|  26.1k|{
 1899|  26.1k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  26.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  26.1k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  26.1k|    auto it = range.begin();
 1903|  26.1k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  26.1k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  26.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26.1k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  26.1k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 26.1k, False: 0]
  ------------------
 1912|  26.1k|        ++it;
 1913|  26.1k|        return {it, string_type(1, *range.begin())};
 1914|  26.1k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  26.1k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    156|    {
  754|    156|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|    156|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    156|              cvref<T> obj = *get<T>(fn);
  745|    156|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    156|                  obj(static_cast<decltype(args)>(args)...);
  747|    156|              }
  748|    156|              else {
  749|    156|                  return obj(static_cast<decltype(args)>(args)...);
  750|    156|              }
  751|    156|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|    156|    {
  684|    156|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    156|            return static_cast<T*>(s.m_cp);
  686|    156|        }
  687|    156|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    156|            return static_cast<T*>(s.m_p);
  689|    156|        }
  690|    156|        else {
  691|    156|            return reinterpret_cast<T*>(s.m_fp);
  692|    156|        }
  693|    156|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|    156|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    156|        {
  662|    156|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  9.07k|{
 2951|  9.07k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.95k, False: 1.12k]
  ------------------
 2952|  7.95k|        auto it = read_while_classic_space(range);
 2953|  7.95k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.95k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.95k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.95k|        return it;
 2959|  7.95k|    }
 2960|       |
 2961|  1.12k|    return read_while_classic_space(range);
 2962|  9.07k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  36.0k|{
 2117|  36.0k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  36.0k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  36.0k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  36.0k|        auto buf = make_contiguous_buffer(range);
 2121|  36.0k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  36.0k|        return ranges::next(range.begin(),
 2123|  36.0k|                            ranges::distance(buf.view().begin(), it));
 2124|  36.0k|    }
 2125|  36.0k|    else {
 2126|  36.0k|        auto it = range.begin();
 2127|       |
 2128|  36.0k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  36.0k|            auto seg = get_contiguous_beginning(range);
 2130|  36.0k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  36.0k|                seg_it != seg.end()) {
 2132|  36.0k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  36.0k|            }
 2134|  36.0k|            ranges::advance(it, seg.size());
 2135|  36.0k|        }
 2136|       |
 2137|  36.0k|        return read_while_code_point(
 2138|  36.0k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  36.0k|    }
 2140|  36.0k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  36.5k|{
 2082|  36.5k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  36.5k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  39.8k|{
 2061|  39.8k|    auto it = range.begin();
 2062|   101k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 98.7k, False: 3.23k]
  ------------------
 2063|  98.7k|        const auto val =
 2064|  98.7k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  98.7k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  98.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 98.7k, False: 0]
  |  |  ------------------
  ------------------
 2066|  98.7k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  98.7k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  98.7k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 36.5k, False: 62.1k]
  ------------------
 2069|  36.5k|                return it;
 2070|  36.5k|            }
 2071|  98.7k|        }
 2072|  62.1k|        it = val.iterator;
 2073|  62.1k|    }
 2074|       |
 2075|  3.23k|    return it;
 2076|  39.8k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  36.0k|    {
  754|  36.0k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  38.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.6k|              cvref<T> obj = *get<T>(fn);
  745|  38.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  38.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.6k|              }
  748|  38.6k|              else {
  749|  38.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.6k|              }
  751|  38.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  38.6k|    {
  684|  38.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  38.6k|            return static_cast<T*>(s.m_cp);
  686|  38.6k|        }
  687|  38.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  38.6k|            return static_cast<T*>(s.m_p);
  689|  38.6k|        }
  690|  38.6k|        else {
  691|  38.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  38.6k|        }
  693|  38.6k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  38.6k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  36.0k|        {
  662|  36.0k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  15.6k|    {
 3040|  15.6k|        reader_error_handler eh{};
 3041|  15.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  15.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.3k, False: 1.32k]
  |  |  ------------------
  ------------------
 3043|  14.3k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  14.3k|        }
 3045|  1.32k|        return {};
 3046|  15.6k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|  15.6k|    {
 3051|  15.6k|        return static_cast<Derived&>(*this);
 3052|  15.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3484|  15.6k|    {
 3485|  15.6k|        detail::check_int_type_specs(specs, eh);
 3486|  15.6k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  2.55k|    {
 3035|  2.55k|        return true;
 3036|  2.55k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    226|    {
 3539|    226|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 226]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    226|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    226|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 226]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    226|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 226]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    226|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    226|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 208, False: 18]
  |  |  ------------------
  ------------------
 3565|    208|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    208|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    208|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    208|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 208, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    208|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    208|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    208|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    208|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    208|    }                                                  \
  |  |  |  | 3671|    208|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|     18|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     18|            localized_number_formatting_options<CharT>{loc};
 3586|     18|#endif
 3587|       |
 3588|     18|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     18|    }                                                  \
  |  |  |  | 3671|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|    436|    {
 3539|    436|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    436|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    436|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    436|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    436|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 436]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    436|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    436|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    436|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    436|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 436]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    436|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 436]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    436|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    436|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 406, False: 30]
  |  |  ------------------
  ------------------
 3565|    406|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 406]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|    406|                    parse_integer_digits_without_thsep(
 3567|    406|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|    406|                        prefix_result.parsed_base));
 3569|       |
 3570|    406|            auto buf = make_contiguous_buffer(
 3571|    406|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|    406|            SCN_TRY(result_it,
  ------------------
  |  | 3672|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 406, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    406|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    406|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    406|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    406|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    406|    }                                                  \
  |  |  |  | 3671|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|    406|        }
 3580|       |
 3581|     30|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|     30|            localized_number_formatting_options<CharT>{loc};
 3586|     30|#endif
 3587|       |
 3588|     30|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|     30|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     30|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     30|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     30|    }                                                  \
  |  |  |  | 3671|     30|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3538|    182|    {
 3539|    182|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|    182|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    182|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    182|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 182]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    182|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    182|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|    182|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|    182|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 182]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|    182|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 182]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|    182|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    182|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 182, False: 0]
  |  |  ------------------
  ------------------
 3565|    182|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    182|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    182|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    182|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 182, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    182|    }                                                  \
  |  |  |  | 3671|    182|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|      0|                    parse_integer_digits_without_thsep(
 3567|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|      0|                        prefix_result.parsed_base));
 3569|       |
 3570|      0|            auto buf = make_contiguous_buffer(
 3571|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|      0|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3538|  1.00k|    {
 3539|  1.00k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3672|  1.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3540|  1.00k|                                   .transform_error(make_eof_scan_error));
 3541|       |
 3542|  1.00k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3542:13): [True: 0, False: 1.00k]
  ------------------
 3543|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3543:27): [Folded - Ignored]
  ------------------
 3544|      0|                return unexpected_scan_error(
 3545|      0|                    scan_error::invalid_scanned_value,
 3546|      0|                    "Unexpected '-' sign when parsing an "
 3547|      0|                    "unsigned value");
 3548|      0|            }
 3549|      0|            else {
 3550|      0|                if (specs.type ==
 3551|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3552|      0|                    return unexpected_scan_error(
 3553|      0|                        scan_error::invalid_scanned_value,
 3554|      0|                        "'u'-option disallows negative values");
 3555|      0|                }
 3556|      0|            }
 3557|      0|        }
 3558|       |
 3559|  1.00k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3559:13): [True: 0, False: 1.00k]
  ------------------
 3560|      0|            value = T{0};
 3561|      0|            return std::next(prefix_result.iterator);
 3562|      0|        }
 3563|       |
 3564|  1.00k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  1.00k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.00k, False: 0]
  |  |  ------------------
  ------------------
 3565|  1.00k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|  1.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3566|  1.00k|                    parse_integer_digits_without_thsep(
 3567|  1.00k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3568|  1.00k|                        prefix_result.parsed_base));
 3569|       |
 3570|  1.00k|            auto buf = make_contiguous_buffer(
 3571|  1.00k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3572|  1.00k|            SCN_TRY(result_it,
  ------------------
  |  | 3672|  1.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.00k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.00k|    }                                                  \
  |  |  |  | 3671|  1.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3573|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3574|      0|                                        prefix_result.parsed_base));
 3575|       |
 3576|      0|            return ranges::next(
 3577|      0|                prefix_result.iterator,
 3578|      0|                ranges::distance(buf.view().begin(), result_it));
 3579|  1.00k|        }
 3580|       |
 3581|      0|        auto locale_options =
 3582|       |#if SCN_DISABLE_LOCALE
 3583|       |            localized_number_formatting_options<CharT>{};
 3584|       |#else
 3585|      0|            localized_number_formatting_options<CharT>{loc};
 3586|      0|#endif
 3587|       |
 3588|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3589|      0|                parse_integer_digits_with_thsep(
 3590|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3591|      0|                    prefix_result.parsed_base, locale_options));
 3592|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3593|      0|            parse_digits_result;
 3594|       |
 3595|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3595:13): [True: 0, False: 0]
  ------------------
 3596|      0|            if (auto e = check_thsep_grouping(
 3597|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3598|      0|                    thsep_indices, locale_options.grouping);
 3599|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3600|      0|                return unexpected(e);
 3601|      0|            }
 3602|      0|        }
 3603|       |
 3604|      0|        auto nothsep_source_view =
 3605|      0|            std::basic_string_view<CharT>{nothsep_source};
 3606|      0|        SCN_TRY(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3607|      0|            nothsep_source_it,
 3608|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3609|      0|                                prefix_result.parsed_base));
 3610|       |
 3611|      0|        return ranges::next(
 3612|      0|            prefix_result.iterator,
 3613|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3614|      0|                ranges::ssize(thsep_indices));
 3615|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  7.84k|    {
 3040|  7.84k|        reader_error_handler eh{};
 3041|  7.84k|        get_derived().check_specs_impl(specs, eh);
 3042|  7.84k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.19k, False: 650]
  |  |  ------------------
  ------------------
 3043|  7.19k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  7.19k|        }
 3045|    650|        return {};
 3046|  7.84k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  7.84k|    {
 3051|  7.84k|        return static_cast<Derived&>(*this);
 3052|  7.84k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  7.84k|    {
 4145|  7.84k|        detail::check_float_type_specs(specs, eh);
 4146|  7.84k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.26k|    {
 3035|  1.26k|        return true;
 3036|  1.26k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|    646|    {
 4217|    646|        unsigned options{};
 4218|    646|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 28, False: 618]
  ------------------
 4219|     28|            options |= float_reader_base::allow_thsep;
 4220|     28|        }
 4221|       |
 4222|    646|        SCN_GCC_COMPAT_PUSH
 4223|    646|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|    646|        switch (specs.type) {
 4226|     14|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 14, False: 632]
  ------------------
 4227|     14|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|     14|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 14, False: 632]
  ------------------
 4230|     14|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|     26|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 26, False: 620]
  ------------------
 4233|     26|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 0, False: 646]
  ------------------
 4236|      0|                return options | float_reader_base::allow_scientific |
 4237|      0|                       float_reader_base::allow_fixed;
 4238|       |
 4239|    592|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 592, False: 54]
  ------------------
 4240|    592|                return options | float_reader_base::allow_scientific |
 4241|    592|                       float_reader_base::allow_fixed |
 4242|    592|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 646]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|    646|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|    646|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|    646|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|    646|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.25k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.51k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|  1.02k|    {
 4057|  1.02k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 1.02k, False: 0]
  ------------------
 4058|  1.02k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 1.02k, False: 0]
  ------------------
 4059|  1.02k|            return;
 4060|  1.02k|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|    220|    {
 1587|    220|        return m_storage.has_value();
 1588|    220|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|    110|    {
 1592|    110|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    110|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    110|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    110|        return *m_storage;
 1594|    110|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    226|    {
  763|    226|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    226|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3678|     18|    {
 3679|     18|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     18|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     18|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     18|        return read_source_impl(range);
 3685|     18|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3704|    226|    {
 3705|    226|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 226]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|    226|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|    226|        auto it = sign_result.first;
 3708|    226|        m_sign = sign_result.second;
 3709|       |
 3710|    226|        auto digits_begin = it;
 3711|    226|        auto r = ranges::subrange{it, range.end()};
 3712|    226|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|    226|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    226|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|    226|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|    226|                SCN_TRY_ASSIGN(
 3717|    226|                    it,
 3718|    226|                    do_read_source_impl(
 3719|    226|                        r,
 3720|    226|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|    226|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|    226|            }
 3723|    226|            else {
 3724|    226|                auto cb = [&](const auto& rr)
 3725|    226|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|    226|                    auto res = read_all(rr);
 3727|    226|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|    226|                        return unexpected_scan_error(
 3729|    226|                            scan_error::invalid_scanned_value,
 3730|    226|                            "Invalid float value");
 3731|    226|                    }
 3732|    226|                    return res;
 3733|    226|                };
 3734|    226|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|    226|            }
 3736|    226|        }
 3737|    226|        else {
 3738|    226|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 226, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    226|    }                                                  \
  |  | 3671|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    226|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|      0|                it,
 3740|      0|                do_read_source_impl(
 3741|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|      0|        }
 3744|       |
 3745|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 0, False: 0]
  |  Branch (3747:48): [True: 0, False: 0]
  ------------------
 3748|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|      0|        }
 3752|       |
 3753|      0|        handle_separators();
 3754|       |
 3755|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 0]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|      0|        return it;
 3768|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 3999|    226|    {
 4000|    226|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|    226|        const bool allowed_nonhex =
 4002|    226|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|    226|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|    226|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 226, False: 0]
  |  Branch (4005:45): [True: 0, False: 226]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|    226|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 226]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|    226|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 226, False: 0]
  |  Branch (4014:45): [True: 0, False: 226]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|    226|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 226]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|    226|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 208, False: 18]
  |  Branch (4021:28): [True: 12, False: 196]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     12|            auto it = range.begin();
 4025|       |
 4026|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 12]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     12|            else {
 4031|     12|                m_kind = float_kind::hex_without_prefix;
 4032|     12|            }
 4033|       |
 4034|     12|            return read_hex(ranges::subrange{it, range.end()});
 4035|     12|        }
 4036|    214|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 18, False: 196]
  |  Branch (4036:29): [True: 18, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     18|            m_kind = float_kind::generic;
 4040|     18|            return read_regular_float(range);
 4041|     18|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|    196|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    196|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 196]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|    196|        m_kind = float_kind::generic;
 4052|    196|        return read_regular(range);
 4053|    196|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3810|    226|    {
 3811|    226|        auto it = range.begin();
 3812|    226|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 226, False: 0]
  ------------------
 3813|    226|            return unexpected(r.error());
 3814|    226|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3833|    226|    {
 3834|    226|        auto it = range.begin();
 3835|    226|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 226, False: 0]
  ------------------
 3836|    226|            return r.transform_error(map_parse_error_to_scan_error(
 3837|    226|                scan_error::invalid_scanned_value,
 3838|    226|                "Invalid floating-point NaN value"));
 3839|    226|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3803|    208|    {
 3804|    208|        return read_matching_string_classic_nocase(range, "0x");
 3805|    208|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3903|     12|    {
 3904|     12|        auto it = range.begin();
 3905|       |
 3906|     12|        std::ptrdiff_t digits_count = 0;
 3907|     12|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|     12|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 3909|     12|            return r.transform_error(map_parse_error_to_scan_error(
 3910|     12|                scan_error::invalid_scanned_value,
 3911|     12|                "Invalid hexadecimal floating-point value"));
 3912|     12|        }
 3913|      0|        else {
 3914|      0|            digits_count += ranges::distance(it, *r);
 3915|      0|            it = *r;
 3916|      0|        }
 3917|       |
 3918|      0|        m_integral_part_length = digits_count;
 3919|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 0, False: 0]
  ------------------
 3920|      0|                                             m_locale_options.decimal_point)) {
 3921|      0|            it = *r;
 3922|      0|        }
 3923|       |
 3924|      0|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 0, False: 0]
  ------------------
 3925|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|      0|            digits_count += ranges::distance(it, *r);
 3927|      0|            it = *r;
 3928|      0|        }
 3929|       |
 3930|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|      0|        return it;
 3938|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3788|     12|    {
 3789|     12|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12]
  |  |  |  Branch (859:45): [True: 0, False: 12]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|     12|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|     12|        return read_while1_code_unit(
 3798|     12|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|     12|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|     12|    {
  754|     12|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|     12|    {
  684|     12|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     12|            return static_cast<T*>(s.m_cp);
  686|     12|        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     12|            return static_cast<T*>(s.m_p);
  689|     12|        }
  690|     12|        else {
  691|     12|            return reinterpret_cast<T*>(s.m_fp);
  692|     12|        }
  693|     12|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3798|     12|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|     12|        {
  662|     12|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3943|    214|    {
 3944|    214|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|    214|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 208, False: 6]
  |  Branch (3945:50): [True: 12, False: 196]
  ------------------
 3946|       |
 3947|    214|        auto it = ranges::begin(range);
 3948|    214|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|    214|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|    214|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214, False: 0]
  |  |  ------------------
  ------------------
 3952|    214|            return r.transform_error(
 3953|    214|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|    214|                                              "Invalid floating-point value"));
 3955|    214|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3773|    214|    {
 3774|    214|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    214|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 214]
  |  |  |  Branch (859:45): [True: 0, False: 214]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|    214|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|    214|        return read_while1_code_unit(
 3783|    214|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|    214|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_:
  753|    214|    {
  754|    214|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|    214|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    214|              cvref<T> obj = *get<T>(fn);
  745|    214|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    214|                  obj(static_cast<decltype(args)>(args)...);
  747|    214|              }
  748|    214|              else {
  749|    214|                  return obj(static_cast<decltype(args)>(args)...);
  750|    214|              }
  751|    214|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlwE0_EEDaNS3_7storageE:
  683|    214|    {
  684|    214|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    214|            return static_cast<T*>(s.m_cp);
  686|    214|        }
  687|    214|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    214|            return static_cast<T*>(s.m_p);
  689|    214|        }
  690|    214|        else {
  691|    214|            return reinterpret_cast<T*>(s.m_fp);
  692|    214|        }
  693|    214|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlwE0_clEw:
 3783|    214|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlwE0_LPv0EEEPSR_:
  661|    214|        {
  662|    214|        }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3664|    208|    {
 3665|    208|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 208]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|    208|        return read_source_impl(range);
 3671|    208|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.03k|    {
  763|  1.03k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.03k|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|     10|    {
 3679|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|     10|        return read_source_impl(range);
 3685|     10|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.03k|    {
 3705|  1.03k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.03k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.03k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.03k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.03k|        auto it = sign_result.first;
 3708|  1.03k|        m_sign = sign_result.second;
 3709|       |
 3710|  1.03k|        auto digits_begin = it;
 3711|  1.03k|        auto r = ranges::subrange{it, range.end()};
 3712|  1.03k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3712:23): [Folded - Ignored]
  |  Branch (3712:23): [Folded - Ignored]
  ------------------
 3713|  1.03k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  1.03k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03k]
  |  |  |  Branch (859:45): [True: 0, False: 1.03k]
  |  |  |  Branch (859:45): [True: 0, False: 1.03k]
  |  |  ------------------
  ------------------
 3715|  1.03k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.03k|            else {
 3724|  1.03k|                auto cb = [&](const auto& rr)
 3725|  1.03k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.03k|                    auto res = read_all(rr);
 3727|  1.03k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.03k|                        return unexpected_scan_error(
 3729|  1.03k|                            scan_error::invalid_scanned_value,
 3730|  1.03k|                            "Invalid float value");
 3731|  1.03k|                    }
 3732|  1.03k|                    return res;
 3733|  1.03k|                };
 3734|  1.03k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.03k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.03k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 10, False: 1.02k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     10|    }                                                  \
  |  | 3671|  1.03k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.02k|            }
 3736|  1.03k|        }
 3737|  1.02k|        else {
 3738|  1.02k|            SCN_TRY_ASSIGN(
 3739|  1.02k|                it,
 3740|  1.02k|                do_read_source_impl(
 3741|  1.02k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.02k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.02k|        }
 3744|       |
 3745|  1.02k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.02k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.02k, False: 0]
  |  Branch (3747:48): [True: 1.02k, False: 0]
  ------------------
 3748|  1.02k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.02k, False: 0]
  ------------------
 3749|  1.02k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.02k, False: 0]
  ------------------
 3750|  1.02k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.02k|        }
 3752|       |
 3753|  1.02k|        handle_separators();
 3754|       |
 3755|  1.02k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.02k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.02k|        return it;
 3768|  1.02k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.03k|    {
 3811|  1.03k|        auto it = range.begin();
 3812|  1.03k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.03k, False: 0]
  ------------------
 3813|  1.03k|            return unexpected(r.error());
 3814|  1.03k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.03k|    {
 3834|  1.03k|        auto it = range.begin();
 3835|  1.03k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.03k, False: 0]
  ------------------
 3836|  1.03k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.03k|                scan_error::invalid_scanned_value,
 3838|  1.03k|                "Invalid floating-point NaN value"));
 3839|  1.03k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|  1.02k|    {
 3804|  1.02k|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.02k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     10|{
 1996|     10|    auto it = read_while_code_unit(range, pred);
 1997|     10|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 10, False: 0]
  ------------------
 1998|     10|        return unexpected(parse_error::error);
 1999|     10|    }
 2000|      0|    return it;
 2001|     10|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|     10|    {
 3944|     10|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|     10|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 2, False: 8]
  |  Branch (3945:50): [True: 2, False: 0]
  ------------------
 3946|       |
 3947|     10|        auto it = ranges::begin(range);
 3948|     10|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|     10|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|     10|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 3952|     10|            return r.transform_error(
 3953|     10|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|     10|                                              "Invalid floating-point value"));
 3955|     10|        }
 3956|      0|        else {
 3957|      0|            digits_count += ranges::distance(it, *r);
 3958|      0|            it = *r;
 3959|      0|        }
 3960|       |
 3961|      0|        m_integral_part_length = digits_count;
 3962|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 0, False: 0]
  ------------------
 3963|      0|                                             m_locale_options.decimal_point)) {
 3964|      0|            it = *r;
 3965|      0|        }
 3966|       |
 3967|      0|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 0, False: 0]
  ------------------
 3968|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|      0|            digits_count += ranges::distance(it, *r);
 3970|      0|            it = *r;
 3971|      0|        }
 3972|       |
 3973|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|      0|        auto beg_exp_it = it;
 3979|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 0, False: 0]
  ------------------
 3980|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|      0|        }
 3982|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 0, False: 0]
  |  Branch (3982:29): [True: 0, False: 0]
  ------------------
 3983|      0|            return unexpected_scan_error(
 3984|      0|                scan_error::invalid_scanned_value,
 3985|      0|                "No exponent given to scientific float");
 3986|      0|        }
 3987|       |
 3988|      0|        m_kind =
 3989|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 0, False: 0]
  ------------------
 3990|       |
 3991|      0|        return it;
 3992|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|     10|    {
 3774|     10|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10]
  |  |  |  Branch (859:45): [True: 0, False: 10]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|     10|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|     10|        return read_while1_code_unit(
 3783|     10|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|     10|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|     10|    {
  684|     10|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     10|            return static_cast<T*>(s.m_cp);
  686|     10|        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     10|            return static_cast<T*>(s.m_p);
  689|     10|        }
  690|     10|        else {
  691|     10|            return reinterpret_cast<T*>(s.m_fp);
  692|     10|        }
  693|     10|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|     10|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.03k|    {
 4000|  1.03k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.03k|        const bool allowed_nonhex =
 4002|  1.03k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.03k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.03k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.03k, False: 0]
  |  Branch (4005:45): [True: 0, False: 1.03k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.03k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 1.03k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|  1.03k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.03k, False: 0]
  |  Branch (4014:45): [True: 0, False: 1.03k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|  1.03k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 1.03k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|  1.03k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.02k, False: 10]
  |  Branch (4021:28): [True: 14, False: 1.00k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|     14|            auto it = range.begin();
 4025|       |
 4026|     14|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 0, False: 14]
  ------------------
 4027|      0|                m_kind = float_kind::hex_with_prefix;
 4028|      0|                it = *r;
 4029|      0|            }
 4030|     14|            else {
 4031|     14|                m_kind = float_kind::hex_without_prefix;
 4032|     14|            }
 4033|       |
 4034|     14|            return read_hex(ranges::subrange{it, range.end()});
 4035|     14|        }
 4036|  1.01k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 10, False: 1.00k]
  |  Branch (4036:29): [True: 10, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|     10|            m_kind = float_kind::generic;
 4040|     10|            return read_regular_float(range);
 4041|     10|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|  1.00k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.00k]
  |  |  ------------------
  ------------------
 4047|      0|            m_kind = float_kind::hex_with_prefix;
 4048|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4049|      0|        }
 4050|       |
 4051|  1.00k|        m_kind = float_kind::generic;
 4052|  1.00k|        return read_regular(range);
 4053|  1.00k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|  1.02k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.02k|                    auto res = read_all(rr);
 3727|  1.02k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.02k]
  |  |  ------------------
  ------------------
 3728|      0|                        return unexpected_scan_error(
 3729|      0|                            scan_error::invalid_scanned_value,
 3730|      0|                            "Invalid float value");
 3731|      0|                    }
 3732|  1.02k|                    return res;
 3733|  1.02k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.02k|{
 1839|  1.02k|    return ranges::next(range.begin(), range.end());
 1840|  1.02k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.02k|    {
  313|  1.02k|        ranges::advance(x, bound);
  314|  1.02k|        return x;
  315|  1.02k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.02k|    {
  275|  1.02k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.02k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|  1.02k|    {
 1577|  1.02k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.02k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|  1.02k|    {
 1621|  1.02k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.02k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.02k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.02k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.02k|            m_storage.reset();
 1627|  1.02k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.02k|        }
 1629|  1.02k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.02k|                                          std::basic_string<CharT>>) {
 1631|  1.02k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.02k|            m_view = string_view_type{*m_storage};
 1633|  1.02k|        }
 1634|  1.02k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  1.02k|                                          typename detail::basic_scan_buffer<
 1636|  1.02k|                                              value_t>::forward_iterator> &&
 1637|  1.02k|                           ranges::common_range<Range>) {
 1638|  1.02k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.02k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.02k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.02k|                             detail::to_address(end_seg.end()))) {
 1642|  1.02k|                auto& str = m_storage.emplace();
 1643|  1.02k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.02k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.02k|                m_view = string_view_type{str};
 1646|  1.02k|                return;
 1647|  1.02k|            }
 1648|       |
 1649|  1.02k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.02k|                                                            end_seg.data());
 1651|  1.02k|            m_storage.reset();
 1652|  1.02k|        }
 1653|  1.02k|        else {
 1654|  1.02k|            auto& str = m_storage.emplace();
 1655|  1.02k|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.02k|                str.reserve(range.size());
 1657|  1.02k|            }
 1658|  1.02k|            if constexpr (ranges::common_range<Range>) {
 1659|  1.02k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.02k|                          std::back_inserter(str));
 1661|  1.02k|            }
 1662|  1.02k|            else {
 1663|  1.02k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.02k|                     ++it) {
 1665|  1.02k|                    str.push_back(*it);
 1666|  1.02k|                }
 1667|  1.02k|            }
 1668|  1.02k|            m_view = string_view_type{str};
 1669|  1.02k|        }
 1670|  1.02k|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.02k|    {
 3665|  1.02k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.02k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.02k|        return read_source_impl(range);
 3671|  1.02k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|  1.02k|    {
 3691|  1.02k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|  1.02k|        const std::ptrdiff_t sign_len =
 3694|  1.02k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 0, False: 1.02k]
  ------------------
 3695|       |
 3696|  1.02k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|  1.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.02k|    }                                                  \
  |  |  |  | 3671|  1.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|  1.02k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4169|    226|    {
 4170|    226|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    226|#if !SCN_DISABLE_LOCALE
 4173|    226|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 18, False: 208]
  ------------------
 4174|     18|            return read_impl<Range>(
 4175|     18|                range, rd,
 4176|     18|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     18|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     18|                },
 4179|     18|                value, loc);
 4180|     18|        }
 4181|    208|#endif
 4182|       |
 4183|    208|        return read_impl<Range>(
 4184|    208|            range, rd,
 4185|    208|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    208|                return r.read_source(SCN_FWD(args)...);
 4187|    208|            },
 4188|    208|            value);
 4189|    226|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIwEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|    226|    {
 4206|    226|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|    226|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 226, False: 0]
  |  |  ------------------
  ------------------
 4208|    226|            return unexpected(r.error());
 4209|    226|        }
 4210|       |
 4211|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|     18|    {
  754|     18|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|     18|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     18|              cvref<T> obj = *get<T>(fn);
  745|     18|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     18|                  obj(static_cast<decltype(args)>(args)...);
  747|     18|              }
  748|     18|              else {
  749|     18|                  return obj(static_cast<decltype(args)>(args)...);
  750|     18|              }
  751|     18|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     18|    {
  684|     18|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     18|            return static_cast<T*>(s.m_cp);
  686|     18|        }
  687|     18|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     18|            return static_cast<T*>(s.m_p);
  689|     18|        }
  690|     18|        else {
  691|     18|            return reinterpret_cast<T*>(s.m_fp);
  692|     18|        }
  693|     18|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4176|     18|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     18|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     18|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     18|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSL_:
  661|     18|        {
  662|     18|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    208|    {
  754|    208|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwS7_EEEERNS1_12float_readerIwEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    208|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    208|              cvref<T> obj = *get<T>(fn);
  745|    208|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    208|                  obj(static_cast<decltype(args)>(args)...);
  747|    208|              }
  748|    208|              else {
  749|    208|                  return obj(static_cast<decltype(args)>(args)...);
  750|    208|              }
  751|    208|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    208|    {
  684|    208|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    208|            return static_cast<T*>(s.m_cp);
  686|    208|        }
  687|    208|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    208|            return static_cast<T*>(s.m_p);
  689|    208|        }
  690|    208|        else {
  691|    208|            return reinterpret_cast<T*>(s.m_fp);
  692|    208|        }
  693|    208|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4185|    208|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    208|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    208|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    208|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSL_:
  661|    208|        {
  662|    208|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|    420|    {
 4170|    420|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|    420|#if !SCN_DISABLE_LOCALE
 4173|    420|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 10, False: 410]
  ------------------
 4174|     10|            return read_impl<Range>(
 4175|     10|                range, rd,
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|     10|                },
 4179|     10|                value, loc);
 4180|     10|        }
 4181|    410|#endif
 4182|       |
 4183|    410|        return read_impl<Range>(
 4184|    410|            range, rd,
 4185|    410|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    410|                return r.read_source(SCN_FWD(args)...);
 4187|    410|            },
 4188|    410|            value);
 4189|    420|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|  1.03k|    {
 4206|  1.03k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|  1.03k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 1.02k]
  |  |  ------------------
  ------------------
 4208|     10|            return unexpected(r.error());
 4209|     10|        }
 4210|       |
 4211|  1.02k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|  1.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.02k|    }                                                  \
  |  |  |  | 3671|  1.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|      0|        return ranges::next(range.begin(), n);
 4213|  1.02k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|     10|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     10|            return static_cast<T*>(s.m_cp);
  686|     10|        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     10|            return static_cast<T*>(s.m_p);
  689|     10|        }
  690|     10|        else {
  691|     10|            return reinterpret_cast<T*>(s.m_fp);
  692|     10|        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4177|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    410|    {
  754|    410|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    410|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    410|              cvref<T> obj = *get<T>(fn);
  745|    410|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    410|                  obj(static_cast<decltype(args)>(args)...);
  747|    410|              }
  748|    410|              else {
  749|    410|                  return obj(static_cast<decltype(args)>(args)...);
  750|    410|              }
  751|    410|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    410|    {
  684|    410|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    410|            return static_cast<T*>(s.m_cp);
  686|    410|        }
  687|    410|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    410|            return static_cast<T*>(s.m_p);
  689|    410|        }
  690|    410|        else {
  691|    410|            return reinterpret_cast<T*>(s.m_fp);
  692|    410|        }
  693|    410|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|    410|            [](float_reader<CharT>& r, auto&&... args) {
 4186|    410|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|    410|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    410|        {
  662|    410|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5808|  8.38k|{
 5809|  8.38k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  8.38k|        return reader_impl_for_bool<CharT>{};
 5811|  8.38k|    }
 5812|  8.38k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  8.38k|        return reader_impl_for_char<CharT>{};
 5814|  8.38k|    }
 5815|  8.38k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  8.38k|        return reader_impl_for_wchar<CharT>{};
 5817|  8.38k|    }
 5818|  8.38k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  8.38k|        return reader_impl_for_code_point<CharT>{};
 5820|  8.38k|    }
 5821|  8.38k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  8.38k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  8.38k|        return reader_impl_for_string<CharT>{};
 5824|  8.38k|    }
 5825|  8.38k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  8.38k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  8.38k|        return reader_impl_for_string<CharT>{};
 5828|  8.38k|    }
 5829|  8.38k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  8.38k|                       std::is_same_v<T, wregex_matches>) {
 5831|  8.38k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  8.38k|    }
 5833|  8.38k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  8.38k|        return reader_impl_for_voidptr<CharT>{};
 5835|  8.38k|    }
 5836|  8.38k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  8.38k|        return reader_impl_for_float<CharT>{};
 5838|  8.38k|    }
 5839|  8.38k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  8.38k|                       !std::is_same_v<T, wchar_t> &&
 5841|  8.38k|                       !std::is_same_v<T, char32_t> &&
 5842|  8.38k|                       !std::is_same_v<T, bool>) {
 5843|  8.38k|        return reader_impl_for_int<CharT>{};
 5844|  8.38k|    }
 5845|  8.38k|    else {
 5846|  8.38k|        return reader_impl_for_monostate<CharT>{};
 5847|  8.38k|    }
 5848|  8.38k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  25.1k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  23.3k|    {
 3040|  23.3k|        reader_error_handler eh{};
 3041|  23.3k|        get_derived().check_specs_impl(specs, eh);
 3042|  23.3k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 318, False: 23.0k]
  |  |  ------------------
  ------------------
 3043|    318|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    318|        }
 3045|  23.0k|        return {};
 3046|  23.3k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  23.3k|    {
 3051|  23.3k|        return static_cast<Derived&>(*this);
 3052|  23.3k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  23.3k|    {
 5210|  23.3k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  23.3k|        SCN_GCC_PUSH
 5213|  23.3k|        SCN_GCC_IGNORE("-Wswitch")
 5214|  23.3k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  23.3k|        SCN_CLANG_PUSH
 5217|  23.3k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  23.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  23.3k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 312, False: 23.0k]
  ------------------
 5221|  1.71k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 1.71k, False: 21.6k]
  ------------------
 5222|  1.71k|                m_type = reader_type::word;
 5223|  1.71k|                break;
 5224|       |
 5225|    258|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 258, False: 23.0k]
  ------------------
 5226|    258|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 102, False: 156]
  ------------------
 5227|    258|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 102, False: 54]
  ------------------
 5228|    204|                    m_type = reader_type::custom_word;
 5229|    204|                }
 5230|     54|                else {
 5231|     54|                    m_type = reader_type::word;
 5232|     54|                }
 5233|    258|                break;
 5234|      0|            }
 5235|       |
 5236|     72|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 72, False: 23.2k]
  ------------------
 5237|     72|                m_type = reader_type::character;
 5238|     72|                break;
 5239|       |
 5240|  1.14k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 1.14k, False: 22.1k]
  ------------------
 5241|  1.14k|                m_type = reader_type::character_set;
 5242|  1.14k|                break;
 5243|       |
 5244|  19.4k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 19.4k, False: 3.89k]
  ------------------
 5245|  19.4k|                m_type = reader_type::regex;
 5246|  19.4k|                break;
 5247|       |
 5248|    402|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 402, False: 22.9k]
  ------------------
 5249|    402|                m_type = reader_type::regex_escaped;
 5250|    402|                break;
 5251|  23.3k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  23.3k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  27.3k|    {
 5259|  27.3k|        return m_type == reader_type::word;
 5260|  27.3k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  8.42k|{
 1132|  8.42k|    auto it = src.begin();
 1133|  67.6k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 61.7k, False: 5.84k]
  ------------------
 1134|  61.7k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  61.7k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 61.7k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  61.7k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 61.7k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  61.7k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  61.7k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  61.7k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.58k, False: 59.2k]
  ------------------
 1144|  2.58k|            return false;
 1145|  2.58k|        }
 1146|  59.2k|        it += len;
 1147|  59.2k|    }
 1148|  5.84k|    return true;
 1149|  8.42k|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    110|{
 2993|    110|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    110|        if (source.stores_allocated_string()) {
 2995|    110|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    110|        }
 2997|    110|        else {
 2998|    110|            dest.assign(source.view());
 2999|    110|        }
 3000|    110|    }
 3001|    110|    else {
 3002|    110|        return transcode_impl(source.view(), dest);
 3003|    110|    }
 3004|       |
 3005|      0|    return {};
 3006|    110|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  1.46k|{
 2968|  1.46k|    dst.clear();
 2969|  1.46k|    transcode_valid_to_string(src, dst);
 2970|  1.46k|    return {};
 2971|  1.46k|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  1.46k|{
 1403|  1.46k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  1.46k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  1.46k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  1.46k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  1.46k|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  1.46k|            std::u32string tmp;
 1410|  1.46k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  1.46k|            return transcode_to_string_impl_32to16<true>(
 1412|  1.46k|                std::u32string_view{tmp}, dest);
 1413|  1.46k|        }
 1414|  1.46k|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|  1.46k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  1.46k|        }
 1417|  1.46k|    }
 1418|  1.46k|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|  1.46k|        if constexpr (sizeof(DestCharT) == 1) {
 1420|  1.46k|            std::u32string tmp;
 1421|  1.46k|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|  1.46k|            return transcode_to_string_impl_32to8<true>(
 1423|  1.46k|                std::u32string_view{tmp}, dest);
 1424|  1.46k|        }
 1425|  1.46k|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|  1.46k|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|  1.46k|        }
 1428|  1.46k|    }
 1429|  1.46k|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|  1.46k|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|  1.46k|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|  1.46k|        }
 1433|  1.46k|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|  1.46k|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|  1.46k|        }
 1436|  1.46k|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|  1.46k|{
 1294|  1.46k|    static_assert(sizeof(SourceCharT) == 4);
 1295|  1.46k|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  11.1k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 11.1k, False: 1.46k]
  ------------------
 1298|  11.1k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  11.1k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  11.1k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 9.70k, False: 1.42k]
  ------------------
 1306|  9.70k|            dest.push_back(static_cast<char>(cp));
 1307|  9.70k|        }
 1308|  1.42k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 386, False: 1.04k]
  ------------------
 1309|    386|            dest.push_back(
 1310|    386|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|    386|            dest.push_back(
 1312|    386|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|    386|        }
 1314|  1.04k|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 488, False: 552]
  ------------------
 1315|    488|            dest.push_back(
 1316|    488|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    488|            dest.push_back(static_cast<char>(
 1318|    488|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    488|            dest.push_back(
 1320|    488|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    488|        }
 1322|    552|        else {
 1323|    552|            dest.push_back(
 1324|    552|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    552|            dest.push_back(static_cast<char>(
 1326|    552|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    552|            dest.push_back(static_cast<char>(
 1328|    552|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    552|            dest.push_back(
 1330|    552|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    552|        }
 1332|  11.1k|    }
 1333|  1.46k|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|  1.14k|        {
 5103|  1.14k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 390, False: 750]
  ------------------
 5104|    390|                return {};
 5105|    390|            }
 5106|       |
 5107|    750|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|    750|            auto it = detail::to_address(charset_string.begin());
 5109|    750|            auto set = detail::parse_presentation_set(
 5110|    750|                it, detail::to_address(charset_string.end()), nonascii);
 5111|    750|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|    750|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 750]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|    750|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|    750|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|    750|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|    750|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|    750|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|    750|            std::sort(nonascii.extra_ranges.begin(),
 5118|    750|                      nonascii.extra_ranges.end());
 5119|    750|            return {};
 5120|    750|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback28on_classic_with_extra_rangesEDi:
 5137|  12.3k|        {
 5138|  12.3k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5138:17): [True: 1.76k, False: 10.5k]
  ------------------
 5139|  1.76k|                return helper.is_char_set_in_extra_literals(cp);
 5140|  1.76k|            }
 5141|       |
 5142|  10.5k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5143|  12.3k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDi:
 5085|  1.76k|        {
 5086|       |            // TODO: binary search?
 5087|  1.76k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5087:17): [True: 0, False: 1.76k]
  ------------------
 5088|      0|                return false;
 5089|      0|            }
 5090|       |
 5091|  1.76k|            const auto cp_val = static_cast<uint32_t>(cp);
 5092|  1.76k|            return std::find_if(
 5093|  1.76k|                       nonascii.extra_ranges.begin(),
 5094|  1.76k|                       nonascii.extra_ranges.end(),
 5095|  1.76k|                       [cp_val](const auto& pair) noexcept {
 5096|  1.76k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5097|  1.76k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5098|  1.76k|                       }) != nonascii.extra_ranges.end();
 5099|  1.76k|        }
_ZZNK3scn2v34impl25character_set_reader_implIwE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5095|  6.67k|                       [cp_val](const auto& pair) noexcept {
 5096|  6.67k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5096:35): [True: 6.67k, False: 0]
  ------------------
 5097|  6.67k|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5097:35): [True: 1.75k, False: 4.92k]
  ------------------
 5098|  6.67k|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  12.8k|        {
 5076|  12.8k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  12.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  12.8k|            const auto val =
 5078|  12.8k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  12.8k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  12.8k|                    (val % 8)) &
 5081|  12.8k|                   1u;
 5082|  12.8k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  2.34k|        {
 5129|  2.34k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 24, False: 2.32k]
  ------------------
 5130|     24|                return false;
 5131|     24|            }
 5132|       |
 5133|  2.32k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  2.34k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  1.14k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    258|    {
 5277|    258|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    258|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    258|        return read_impl(range, specs, value);
 5279|    258|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    258|    {
 5295|    258|        SCN_CLANG_PUSH
 5296|    258|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    258|        switch (m_type) {
 5299|    182|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 182, False: 76]
  ------------------
 5300|    182|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 224]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|     22|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 22, False: 236]
  ------------------
 5307|     22|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 258]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 248]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|     10|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 10, False: 248]
  ------------------
 5320|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     10|                    range,
 5322|     10|                    get_unescaped_regex_pattern(
 5323|     10|                        specs.charset_string<SourceCharT>()),
 5324|     10|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 258]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    258|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    258|        }
 5331|       |
 5332|    258|        SCN_CLANG_POP
 5333|    258|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    182|    {
 4820|    182|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    182|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    238|{
 4752|    238|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    238|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    238|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 128, False: 110]
  ------------------
 4756|    128|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    128|                                     "Invalid encoding in scanned string");
 4758|    128|    }
 4759|    110|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    110|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 110]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    110|    return SCN_MOVE(result);
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    110|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    546|{
 2088|    546|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    546|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    546|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    546|        auto buf = make_contiguous_buffer(range);
 2092|    546|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    546|        return ranges::next(range.begin(),
 2094|    546|                            ranges::distance(buf.view().begin(), it));
 2095|    546|    }
 2096|    546|    else {
 2097|    546|        auto it = range.begin();
 2098|       |
 2099|    546|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    546|            auto seg = get_contiguous_beginning(range);
 2101|    546|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    546|                seg_it != seg.end()) {
 2103|    546|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|    546|            }
 2105|    546|            ranges::advance(it, seg.size());
 2106|    546|        }
 2107|       |
 2108|    546|        return read_until_code_point(
 2109|    546|            ranges::subrange{it, range.end()},
 2110|    546|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    546|    }
 2112|    546|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    546|{
 2061|    546|    auto it = range.begin();
 2062|  26.4k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 25.9k, False: 492]
  ------------------
 2063|  25.9k|        const auto val =
 2064|  25.9k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  25.9k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  25.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 25.9k, False: 0]
  |  |  ------------------
  ------------------
 2066|  25.9k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  25.9k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  25.9k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 54, False: 25.9k]
  ------------------
 2069|     54|                return it;
 2070|     54|            }
 2071|  25.9k|        }
 2072|  25.9k|        it = val.iterator;
 2073|  25.9k|    }
 2074|       |
 2075|    492|    return it;
 2076|    546|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    546|    {
  754|    546|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  25.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.9k|              cvref<T> obj = *get<T>(fn);
  745|  25.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  25.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  25.9k|              }
  748|  25.9k|              else {
  749|  25.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.9k|              }
  751|  25.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  25.9k|    {
  684|  25.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  25.9k|            return static_cast<T*>(s.m_cp);
  686|  25.9k|        }
  687|  25.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  25.9k|            return static_cast<T*>(s.m_p);
  689|  25.9k|        }
  690|  25.9k|        else {
  691|  25.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  25.9k|        }
  693|  25.9k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  25.9k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    546|        {
  662|    546|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     34|    {
 4841|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 0]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    344|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    344|              cvref<T> obj = *get<T>(fn);
  745|    344|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    344|                  obj(static_cast<decltype(args)>(args)...);
  747|    344|              }
  748|    344|              else {
  749|    344|                  return obj(static_cast<decltype(args)>(args)...);
  750|    344|              }
  751|    344|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    344|    {
  684|    344|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    344|            return static_cast<T*>(s.m_cp);
  686|    344|        }
  687|    344|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    344|            return static_cast<T*>(s.m_p);
  689|    344|        }
  690|    344|        else {
  691|    344|            return reinterpret_cast<T*>(s.m_fp);
  692|    344|        }
  693|    344|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    344|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEcEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     22|    {
 4947|     22|        return read_impl(
 4948|     22|            range,
 4949|     22|            [&](const auto& rng) {
 4950|     22|                return read_string_impl(rng, read_all(rng), value);
 4951|     22|            },
 4952|     22|            detail::priority_tag<1>{});
 4953|     22|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     22|    {
 4974|     22|        return read_cb(range);
 4975|     22|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     22|            [&](const auto& rng) {
 4950|     22|                return read_string_impl(rng, read_all(rng), value);
 4951|     22|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|     66|{
 1839|     66|    return ranges::next(range.begin(), range.end());
 1840|     66|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|     66|    {
  313|     66|        ranges::advance(x, bound);
  314|     66|        return x;
  315|     66|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|     66|    {
  275|     66|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|     66|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKwSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|     66|    {
  203|    798|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 732, False: 66]
  ------------------
  204|    732|            ++i;
  205|    732|        }
  206|     66|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     20|    {
 4891|     20|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     20|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|     60|    {
 4913|     60|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    120|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|     60|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|     60|            return unexpected_scan_error(
 4916|     60|                scan_error::invalid_scanned_value,
 4917|     60|                "Regex backend doesn't support wide strings as input");
 4918|     60|        }
 4919|     60|        else {
 4920|     60|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 60, False: 0]
  ------------------
 4921|     60|                return unexpected_scan_error(
 4922|     60|                    scan_error::invalid_scanned_value,
 4923|     60|                    "Cannot use regex with a non-contiguous source "
 4924|     60|                    "range");
 4925|     60|            }
 4926|       |
 4927|      0|            auto input = get_as_contiguous(range);
 4928|      0|            SCN_TRY(it,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|      0|            return ranges::next(range.begin(),
 4931|      0|                                ranges::distance(input.begin(), it));
 4932|      0|        }
 4933|     60|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEbT_:
  958|     60|{
  959|     60|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|     60|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|     60|        return true;
  962|     60|    }
  963|     60|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|     60|                           ranges::const_iterator_t<Range>,
  965|     60|                           typename detail::basic_scan_buffer<
  966|     60|                               detail::char_t<Range>>::forward_iterator>) {
  967|     60|        auto beg = r.begin();
  968|     60|        if (!beg.stores_parent()) {
  969|     60|            return true;
  970|     60|        }
  971|     60|        return beg.parent()->is_contiguous();
  972|     60|    }
  973|     60|    else {
  974|     60|        return false;
  975|     60|    }
  976|     60|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  7.39k|    {
 5277|  7.39k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  7.39k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  7.39k|        return read_impl(range, specs, value);
 5279|  7.39k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  7.39k|    {
 5295|  7.39k|        SCN_CLANG_PUSH
 5296|  7.39k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  7.39k|        switch (m_type) {
 5299|    404|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 404, False: 6.99k]
  ------------------
 5300|    404|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     32|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 32, False: 7.36k]
  ------------------
 5303|     32|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     32|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 7.39k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    380|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 380, False: 7.01k]
  ------------------
 5310|    380|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    380|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  6.45k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 6.45k, False: 940]
  ------------------
 5315|  6.45k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  6.45k|                    range, specs.charset_string<SourceCharT>(),
 5317|  6.45k|                    specs.regexp_flags, value);
 5318|       |
 5319|    124|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 124, False: 7.27k]
  ------------------
 5320|    124|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    124|                    range,
 5322|    124|                    get_unescaped_regex_pattern(
 5323|    124|                        specs.charset_string<SourceCharT>()),
 5324|    124|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 7.39k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  7.39k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  7.39k|        }
 5331|       |
 5332|  7.39k|        SCN_CLANG_POP
 5333|  7.39k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.01k|    {
 4820|  1.01k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.01k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.04k|{
 4752|  1.04k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.04k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.04k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 342, False: 706]
  ------------------
 4756|    342|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    342|                                     "Invalid encoding in scanned string");
 4758|    342|    }
 4759|    706|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    706|    static_cast<    \
  |  |  929|    706|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    706|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    706|    return SCN_MOVE(result);
  ------------------
  |  |  928|    706|    static_cast<    \
  |  |  929|    706|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    706|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.35k|{
 3012|  1.35k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.35k|        dest.assign(source.view());
 3014|  1.35k|    }
 3015|  1.35k|    else {
 3016|  1.35k|        return transcode_impl(source.view(), dest);
 3017|  1.35k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.35k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  3.04k|{
 2088|  3.04k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  3.04k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  3.04k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  3.04k|        auto buf = make_contiguous_buffer(range);
 2092|  3.04k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  3.04k|        return ranges::next(range.begin(),
 2094|  3.04k|                            ranges::distance(buf.view().begin(), it));
 2095|  3.04k|    }
 2096|  3.04k|    else {
 2097|  3.04k|        auto it = range.begin();
 2098|       |
 2099|  3.04k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  3.04k|            auto seg = get_contiguous_beginning(range);
 2101|  3.04k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  3.04k|                seg_it != seg.end()) {
 2103|  3.04k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  3.04k|            }
 2105|  3.04k|            ranges::advance(it, seg.size());
 2106|  3.04k|        }
 2107|       |
 2108|  3.04k|        return read_until_code_point(
 2109|  3.04k|            ranges::subrange{it, range.end()},
 2110|  3.04k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  3.04k|    }
 2112|  3.04k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  3.04k|    {
  754|  3.04k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  47.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  47.7k|              cvref<T> obj = *get<T>(fn);
  745|  47.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  47.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  47.7k|              }
  748|  47.7k|              else {
  749|  47.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  47.7k|              }
  751|  47.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  47.7k|    {
  684|  47.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  47.7k|            return static_cast<T*>(s.m_cp);
  686|  47.7k|        }
  687|  47.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  47.7k|            return static_cast<T*>(s.m_p);
  689|  47.7k|        }
  690|  47.7k|        else {
  691|  47.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  47.7k|        }
  693|  47.7k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  47.7k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  3.04k|        {
  662|  3.04k|        }
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     32|    {
 4841|     32|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 0]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     32|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    678|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    678|              cvref<T> obj = *get<T>(fn);
  745|    678|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    678|                  obj(static_cast<decltype(args)>(args)...);
  747|    678|              }
  748|    678|              else {
  749|    678|                  return obj(static_cast<decltype(args)>(args)...);
  750|    678|              }
  751|    678|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    678|    {
  684|    678|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    678|            return static_cast<T*>(s.m_cp);
  686|    678|        }
  687|    678|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    678|            return static_cast<T*>(s.m_p);
  689|    678|        }
  690|    678|        else {
  691|    678|            return reinterpret_cast<T*>(s.m_fp);
  692|    678|        }
  693|    678|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    678|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    380|    {
 5048|    380|        auto it = read_source_impl(range, {specs});
 5049|    380|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62, False: 318]
  |  |  ------------------
  ------------------
 5050|     62|            return unexpected(it.error());
 5051|     62|        }
 5052|       |
 5053|    318|        return read_string_impl(range, *it, value);
 5054|    380|    }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  1.14k|    {
 5153|  1.14k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  1.14k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  1.14k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  1.14k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  1.14k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 750, False: 390]
  ------------------
 5163|    750|            const auto cb = [&](char32_t cp) {
 5164|    750|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|    750|            };
 5166|       |
 5167|    750|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 186, False: 564]
  ------------------
 5168|    186|                auto it = read_until_code_point(range, cb);
 5169|    186|                return check_nonempty(it, range);
 5170|    186|            }
 5171|    564|            auto it = read_while_code_point(range, cb);
 5172|    564|            return check_nonempty(it, range);
 5173|    750|        }
 5174|       |
 5175|    390|        const auto cb = [&](SourceCharT ch) {
 5176|    390|            return cb_wrapper.on_ascii_only(ch);
 5177|    390|        };
 5178|       |
 5179|    390|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 198, False: 192]
  ------------------
 5180|    198|            auto it = read_until_code_unit(range, cb);
 5181|    198|            return check_nonempty(it, range);
 5182|    198|        }
 5183|    192|        auto it = read_while_code_unit(range, cb);
 5184|    192|        return check_nonempty(it, range);
 5185|    390|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|    750|    {
  754|    750|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|  12.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.3k|              cvref<T> obj = *get<T>(fn);
  745|  12.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.3k|              }
  748|  12.3k|              else {
  749|  12.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.3k|              }
  751|  12.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|  12.3k|    {
  684|  12.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.3k|            return static_cast<T*>(s.m_cp);
  686|  12.3k|        }
  687|  12.3k|        else if constexpr (std::is_object_v<T>) {
  688|  12.3k|            return static_cast<T*>(s.m_p);
  689|  12.3k|        }
  690|  12.3k|        else {
  691|  12.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.3k|        }
  693|  12.3k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5163|  12.3k|            const auto cb = [&](char32_t cp) {
 5164|  12.3k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|  12.3k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|    750|        {
  667|    750|        }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  1.14k|    {
 5191|  1.14k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 186, False: 954]
  ------------------
 5192|    186|            return unexpected_scan_error(
 5193|    186|                scan_error::invalid_scanned_value,
 5194|    186|                "No characters matched in [character set]");
 5195|    186|        }
 5196|       |
 5197|    954|        return it;
 5198|  1.14k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|    390|    {
  754|    390|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  2.34k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.34k|              cvref<T> obj = *get<T>(fn);
  745|  2.34k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.34k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.34k|              }
  748|  2.34k|              else {
  749|  2.34k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.34k|              }
  751|  2.34k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  2.34k|    {
  684|  2.34k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.34k|            return static_cast<T*>(s.m_cp);
  686|  2.34k|        }
  687|  2.34k|        else if constexpr (std::is_object_v<T>) {
  688|  2.34k|            return static_cast<T*>(s.m_p);
  689|  2.34k|        }
  690|  2.34k|        else {
  691|  2.34k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.34k|        }
  693|  2.34k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  2.34k|        const auto cb = [&](SourceCharT ch) {
 5176|  2.34k|            return cb_wrapper.on_ascii_only(ch);
 5177|  2.34k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|    390|        {
  667|    390|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.03k|{
 4752|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.03k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.03k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 390, False: 644]
  ------------------
 4756|    390|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    390|                                     "Invalid encoding in scanned string");
 4758|    390|    }
 4759|    644|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    644|    static_cast<    \
  |  |  929|    644|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    644|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    644|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 644]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    644|    return SCN_MOVE(result);
  ------------------
  |  |  928|    644|    static_cast<    \
  |  |  929|    644|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    644|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  6.58k|    {
 4891|  6.58k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  6.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.86k, False: 716]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.86k|    }                                                  \
  |  |  |  | 3671|  6.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    716|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    716|        return read_string_impl(range, it, value);
 4893|  6.58k|    }
_ZN3scn2v34impl24regex_string_reader_implIwE4implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsE:
 4912|  19.7k|    {
 4913|  19.7k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  39.4k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4913:23): [Folded - Ignored]
  |  Branch (4913:23): [Folded - Ignored]
  ------------------
 4914|  19.7k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  19.7k|            return unexpected_scan_error(
 4916|  19.7k|                scan_error::invalid_scanned_value,
 4917|  19.7k|                "Regex backend doesn't support wide strings as input");
 4918|  19.7k|        }
 4919|  19.7k|        else {
 4920|  19.7k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4920:17): [True: 0, False: 19.7k]
  ------------------
 4921|      0|                return unexpected_scan_error(
 4922|      0|                    scan_error::invalid_scanned_value,
 4923|      0|                    "Cannot use regex with a non-contiguous source "
 4924|      0|                    "range");
 4925|      0|            }
 4926|       |
 4927|  19.7k|            auto input = get_as_contiguous(range);
 4928|  19.7k|            SCN_TRY(it,
  ------------------
  |  | 3672|  19.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 17.5k, False: 2.14k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  17.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  17.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  17.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  17.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  17.5k|    }                                                  \
  |  |  |  | 3671|  19.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.14k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4929|  2.14k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4930|  2.14k|            return ranges::next(range.begin(),
 4931|  2.14k|                                ranges::distance(input.begin(), it));
 4932|  19.7k|        }
 4933|  19.7k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  958|  19.7k|{
  959|  19.7k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  19.7k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  19.7k|        return true;
  962|  19.7k|    }
  963|  19.7k|    else if constexpr (std::is_same_v<
  964|  19.7k|                           ranges::const_iterator_t<Range>,
  965|  19.7k|                           typename detail::basic_scan_buffer<
  966|  19.7k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  19.7k|        auto beg = r.begin();
  968|  19.7k|        if (!beg.stores_parent()) {
  969|  19.7k|            return true;
  970|  19.7k|        }
  971|  19.7k|        return beg.parent()->is_contiguous();
  972|  19.7k|    }
  973|  19.7k|    else {
  974|  19.7k|        return false;
  975|  19.7k|    }
  976|  19.7k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaT_:
 1064|  19.7k|{
 1065|  19.7k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  19.7k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  19.7k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  19.7k|        return r;
 1070|  19.7k|    }
 1071|  19.7k|    else if constexpr (std::is_same_v<
 1072|  19.7k|                           ranges::const_iterator_t<Range>,
 1073|  19.7k|                           typename detail::basic_scan_buffer<
 1074|  19.7k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  19.7k|        if constexpr (ranges::common_range<Range>) {
 1076|  19.7k|            return detail::make_string_view_from_pointers(
 1077|  19.7k|                r.begin().to_contiguous_segment_iterator(),
 1078|  19.7k|                r.end().to_contiguous_segment_iterator());
 1079|  19.7k|        }
 1080|  19.7k|        else {
 1081|  19.7k|            return r.begin().contiguous_segment();
 1082|  19.7k|        }
 1083|  19.7k|    }
 1084|  19.7k|    else {
 1085|  19.7k|        SCN_EXPECT(false);
 1086|  19.7k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  19.7k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  19.7k|    }
 1090|  19.7k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  980|  19.7k|{
  981|  19.7k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  19.7k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  19.7k|        return true;
  984|  19.7k|    }
  985|  19.7k|    else if constexpr (std::is_same_v<
  986|  19.7k|                           ranges::const_iterator_t<Range>,
  987|  19.7k|                           typename detail::basic_scan_buffer<
  988|  19.7k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  19.7k|        auto beg = r.begin();
  990|  19.7k|        if (beg.contiguous_segment().empty()) {
  991|  19.7k|            return false;
  992|  19.7k|        }
  993|  19.7k|        if constexpr (ranges::common_range<Range>) {
  994|  19.7k|            return beg.contiguous_segment().end() ==
  995|  19.7k|                   ranges::end(r).contiguous_segment().end();
  996|  19.7k|        }
  997|  19.7k|        else {
  998|  19.7k|            if (beg.stores_parent()) {
  999|  19.7k|                return beg.contiguous_segment().end() ==
 1000|  19.7k|                       beg.parent()->current_view().end();
 1001|  19.7k|            }
 1002|  19.7k|            return true;
 1003|  19.7k|        }
 1004|  19.7k|    }
 1005|  19.7k|    else {
 1006|  19.7k|        return false;
 1007|  19.7k|    }
 1008|  19.7k|}
_ZN3scn2v34impl22read_regex_string_implIwNS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4345|  19.7k|{
 4346|  19.7k|    static_assert(ranges::contiguous_range<Input> &&
 4347|  19.7k|                  ranges::borrowed_range<Input> &&
 4348|  19.7k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4349|       |
 4350|  19.7k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4351|  19.7k|    std::basic_regex<CharT> re{};
 4352|  19.7k|    try {
 4353|  19.7k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3672|  19.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  19.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4354|  19.7k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4355|  19.7k|                                     re_flags | std::regex_constants::nosubs};
 4356|  19.7k|    }
 4357|  19.7k|    catch (const std::regex_error& err) {
 4358|  7.87k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4359|  7.87k|                                     "Invalid regex");
 4360|  7.87k|    }
 4361|       |
 4362|  11.8k|    std::match_results<const CharT*> matches{};
 4363|  11.8k|    try {
 4364|  11.8k|        bool found = std::regex_search(input.data(),
 4365|  11.8k|                                       input.data() + input.size(), matches, re,
 4366|  11.8k|                                       std::regex_constants::match_continuous);
 4367|  11.8k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4367:13): [True: 9.71k, False: 2.14k]
  |  Branch (4367:23): [True: 0, False: 2.14k]
  ------------------
 4368|  9.70k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4369|  9.70k|                                         "Regular expression didn't match");
 4370|  9.70k|        }
 4371|  11.8k|    }
 4372|  11.8k|    catch (const std::regex_error& err) {
 4373|     12|        return unexpected_scan_error(scan_error::invalid_format_string,
 4374|     12|                                     "Regex matching failed with an error");
 4375|     12|    }
 4376|       |
 4377|  2.14k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4378|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4379|       |    auto re =
 4380|       |#if SCN_REGEX_BOOST_USE_ICU
 4381|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4382|       |                             make_regex_flags(flags) |
 4383|       |                                 boost::regex_constants::no_except |
 4384|       |                                 boost::regex_constants::nosubs);
 4385|       |#else
 4386|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4387|       |                                  make_regex_flags(flags) |
 4388|       |                                      boost::regex_constants::no_except |
 4389|       |                                      boost::regex_constants::nosubs};
 4390|       |#endif
 4391|       |    if (re.status() != 0) {
 4392|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4393|       |                                     "Invalid regex");
 4394|       |    }
 4395|       |
 4396|       |    boost::match_results<const CharT*> matches{};
 4397|       |    try {
 4398|       |        bool found =
 4399|       |#if SCN_REGEX_BOOST_USE_ICU
 4400|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4401|       |                                   matches, re,
 4402|       |                                   boost::regex_constants::match_continuous);
 4403|       |#else
 4404|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4405|       |                                matches, re,
 4406|       |                                boost::regex_constants::match_continuous);
 4407|       |#endif
 4408|       |        if (!found || matches.prefix().matched) {
 4409|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4410|       |                                         "Regular expression didn't match");
 4411|       |        }
 4412|       |    }
 4413|       |    catch (const std::runtime_error& err) {
 4414|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4415|       |                                     "Regex matching failed with an error");
 4416|       |    }
 4417|       |
 4418|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4419|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4420|       |    static_assert(std::is_same_v<CharT, char>);
 4421|       |    std::string flagged_pattern{};
 4422|       |    auto re = [&]() {
 4423|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4424|       |        opts.set_never_capture(true);
 4425|       |        if (flagstr.empty()) {
 4426|       |            return re2::RE2{pattern, opts};
 4427|       |        }
 4428|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4429|       |        flagged_pattern.append(flagstr);
 4430|       |        flagged_pattern.append(pattern);
 4431|       |        return re2::RE2{flagged_pattern, opts};
 4432|       |    }();
 4433|       |    if (!re.ok()) {
 4434|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4435|       |                                     "Failed to parse regular expression");
 4436|       |    }
 4437|       |
 4438|       |    auto new_input = detail::make_string_view_from_pointers(
 4439|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4440|       |    bool found = re2::RE2::Consume(&new_input, re);
 4441|       |    if (!found) {
 4442|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4443|       |                                     "Regular expression didn't match");
 4444|       |    }
 4445|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4446|       |#endif  // SCN_REGEX_BACKEND == ...
 4447|  11.8k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  8.38k|{
 5809|  8.38k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  8.38k|        return reader_impl_for_bool<CharT>{};
 5811|  8.38k|    }
 5812|  8.38k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  8.38k|        return reader_impl_for_char<CharT>{};
 5814|  8.38k|    }
 5815|  8.38k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  8.38k|        return reader_impl_for_wchar<CharT>{};
 5817|  8.38k|    }
 5818|  8.38k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  8.38k|        return reader_impl_for_code_point<CharT>{};
 5820|  8.38k|    }
 5821|  8.38k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  8.38k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  8.38k|        return reader_impl_for_string<CharT>{};
 5824|  8.38k|    }
 5825|  8.38k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  8.38k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  8.38k|        return reader_impl_for_string<CharT>{};
 5828|  8.38k|    }
 5829|  8.38k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  8.38k|                       std::is_same_v<T, wregex_matches>) {
 5831|  8.38k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  8.38k|    }
 5833|  8.38k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  8.38k|        return reader_impl_for_voidptr<CharT>{};
 5835|  8.38k|    }
 5836|  8.38k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  8.38k|        return reader_impl_for_float<CharT>{};
 5838|  8.38k|    }
 5839|  8.38k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  8.38k|                       !std::is_same_v<T, wchar_t> &&
 5841|  8.38k|                       !std::is_same_v<T, char32_t> &&
 5842|  8.38k|                       !std::is_same_v<T, bool>) {
 5843|  8.38k|        return reader_impl_for_int<CharT>{};
 5844|  8.38k|    }
 5845|  8.38k|    else {
 5846|  8.38k|        return reader_impl_for_monostate<CharT>{};
 5847|  8.38k|    }
 5848|  8.38k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    110|{
 2993|    110|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    110|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 110, False: 0]
  ------------------
 2995|    110|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    110|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    110|    }
 3001|    110|    else {
 3002|    110|        return transcode_impl(source.view(), dest);
 3003|    110|    }
 3004|       |
 3005|    110|    return {};
 3006|    110|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5276|    258|    {
 5277|    258|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    258|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    258|        return read_impl(range, specs, value);
 5279|    258|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5294|    258|    {
 5295|    258|        SCN_CLANG_PUSH
 5296|    258|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    258|        switch (m_type) {
 5299|    182|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 182, False: 76]
  ------------------
 5300|    182|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 224]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|     22|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 22, False: 236]
  ------------------
 5307|     22|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 258]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 248]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|     10|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 10, False: 248]
  ------------------
 5320|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     10|                    range,
 5322|     10|                    get_unescaped_regex_pattern(
 5323|     10|                        specs.charset_string<SourceCharT>()),
 5324|     10|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 258]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    258|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    258|        }
 5331|       |
 5332|    258|        SCN_CLANG_POP
 5333|    258|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4819|    182|    {
 4820|    182|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|    182|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4751|    238|{
 4752|    238|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    238|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    238|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 128, False: 110]
  ------------------
 4756|    128|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    128|                                     "Invalid encoding in scanned string");
 4758|    128|    }
 4759|    110|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    110|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    110|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 110]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    110|    return SCN_MOVE(result);
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    110|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 4840|     34|    {
 4841|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 34, False: 0]
  ------------------
 4842|     34|            return read_string_impl(
 4843|     34|                range,
 4844|     34|                read_until_code_unit(
 4845|     34|                    range,
 4846|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     34|                        SourceCharT ch) { return ch == until; }),
 4848|     34|                value);
 4849|     34|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_S13_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES18_w:
  743|    344|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    344|              cvref<T> obj = *get<T>(fn);
  745|    344|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    344|                  obj(static_cast<decltype(args)>(args)...);
  747|    344|              }
  748|    344|              else {
  749|    344|                  return obj(static_cast<decltype(args)>(args)...);
  750|    344|              }
  751|    344|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_12basic_stringIT0_NSI_11char_traitsISV_EENSI_9allocatorISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    344|    {
  684|    344|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    344|            return static_cast<T*>(s.m_cp);
  686|    344|        }
  687|    344|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    344|            return static_cast<T*>(s.m_p);
  689|    344|        }
  690|    344|        else {
  691|    344|            return reinterpret_cast<T*>(s.m_fp);
  692|    344|        }
  693|    344|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEEENKUlwE_clEw:
 4847|    344|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_12basic_stringIT0_NSJ_11char_traitsISW_EENSJ_9allocatorISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4946|     22|    {
 4947|     22|        return read_impl(
 4948|     22|            range,
 4949|     22|            [&](const auto& rng) {
 4950|     22|                return read_string_impl(rng, read_all(rng), value);
 4951|     22|            },
 4952|     22|            detail::priority_tag<1>{});
 4953|     22|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     22|    {
 4974|     22|        return read_cb(range);
 4975|     22|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4949|     22|            [&](const auto& rng) {
 4950|     22|                return read_string_impl(rng, read_all(rng), value);
 4951|     22|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4890|     20|    {
 4891|     20|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|      0|        return read_string_impl(range, it, value);
 4893|     20|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  7.39k|    {
 5277|  7.39k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  7.39k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  7.39k|        return read_impl(range, specs, value);
 5279|  7.39k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  7.39k|    {
 5295|  7.39k|        SCN_CLANG_PUSH
 5296|  7.39k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  7.39k|        switch (m_type) {
 5299|    404|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 404, False: 6.99k]
  ------------------
 5300|    404|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     32|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 32, False: 7.36k]
  ------------------
 5303|     32|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     32|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 7.39k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    380|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 380, False: 7.01k]
  ------------------
 5310|    380|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    380|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  6.45k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 6.45k, False: 940]
  ------------------
 5315|  6.45k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  6.45k|                    range, specs.charset_string<SourceCharT>(),
 5317|  6.45k|                    specs.regexp_flags, value);
 5318|       |
 5319|    124|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 124, False: 7.27k]
  ------------------
 5320|    124|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    124|                    range,
 5322|    124|                    get_unescaped_regex_pattern(
 5323|    124|                        specs.charset_string<SourceCharT>()),
 5324|    124|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 7.39k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  7.39k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  7.39k|        }
 5331|       |
 5332|  7.39k|        SCN_CLANG_POP
 5333|  7.39k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.01k|    {
 4820|  1.01k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.01k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.04k|{
 4752|  1.04k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.04k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.04k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 342, False: 706]
  ------------------
 4756|    342|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    342|                                     "Invalid encoding in scanned string");
 4758|    342|    }
 4759|    706|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    706|    static_cast<    \
  |  |  929|    706|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    706|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    706|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 706]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    706|    return SCN_MOVE(result);
  ------------------
  |  |  928|    706|    static_cast<    \
  |  |  929|    706|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    706|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.35k|{
 3012|  1.35k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.35k|        dest.assign(source.view());
 3014|  1.35k|    }
 3015|  1.35k|    else {
 3016|  1.35k|        return transcode_impl(source.view(), dest);
 3017|  1.35k|    }
 3018|       |
 3019|  1.35k|    return {};
 3020|  1.35k|}
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4840|     32|    {
 4841|     32|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4841:13): [True: 32, False: 0]
  ------------------
 4842|     32|            return read_string_impl(
 4843|     32|                range,
 4844|     32|                read_until_code_unit(
 4845|     32|                    range,
 4846|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4847|     32|                        SourceCharT ch) { return ch == until; }),
 4848|     32|                value);
 4849|     32|        }
 4850|      0|        return read_string_impl(
 4851|      0|            range,
 4852|      0|            read_until_code_units(
 4853|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4854|      0|            value);
 4855|     32|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    678|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    678|              cvref<T> obj = *get<T>(fn);
  745|    678|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    678|                  obj(static_cast<decltype(args)>(args)...);
  747|    678|              }
  748|    678|              else {
  749|    678|                  return obj(static_cast<decltype(args)>(args)...);
  750|    678|              }
  751|    678|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    678|    {
  684|    678|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    678|            return static_cast<T*>(s.m_cp);
  686|    678|        }
  687|    678|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    678|            return static_cast<T*>(s.m_p);
  689|    678|        }
  690|    678|        else {
  691|    678|            return reinterpret_cast<T*>(s.m_fp);
  692|    678|        }
  693|    678|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlwE_clEw:
 4847|    678|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|    380|    {
 5048|    380|        auto it = read_source_impl(range, {specs});
 5049|    380|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62, False: 318]
  |  |  ------------------
  ------------------
 5050|     62|            return unexpected(it.error());
 5051|     62|        }
 5052|       |
 5053|    318|        return read_string_impl(range, *it, value);
 5054|    380|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.03k|{
 4752|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.03k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.03k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 390, False: 644]
  ------------------
 4756|    390|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|    390|                                     "Invalid encoding in scanned string");
 4758|    390|    }
 4759|    644|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    644|    static_cast<    \
  |  |  929|    644|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    644|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    644|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 644]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    644|    return SCN_MOVE(result);
  ------------------
  |  |  928|    644|    static_cast<    \
  |  |  929|    644|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    644|}
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4890|  6.58k|    {
 4891|  6.58k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  6.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.86k, False: 716]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.86k|    }                                                  \
  |  |  |  | 3671|  6.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    716|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4892|    716|        return read_string_impl(range, it, value);
 4893|  6.58k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  8.38k|{
 5809|  8.38k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  8.38k|        return reader_impl_for_bool<CharT>{};
 5811|  8.38k|    }
 5812|  8.38k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  8.38k|        return reader_impl_for_char<CharT>{};
 5814|  8.38k|    }
 5815|  8.38k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  8.38k|        return reader_impl_for_wchar<CharT>{};
 5817|  8.38k|    }
 5818|  8.38k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  8.38k|        return reader_impl_for_code_point<CharT>{};
 5820|  8.38k|    }
 5821|  8.38k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  8.38k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  8.38k|        return reader_impl_for_string<CharT>{};
 5824|  8.38k|    }
 5825|  8.38k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  8.38k|                       std::is_same_v<T, std::wstring>) {
 5827|  8.38k|        return reader_impl_for_string<CharT>{};
 5828|  8.38k|    }
 5829|  8.38k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  8.38k|                       std::is_same_v<T, wregex_matches>) {
 5831|  8.38k|        return reader_impl_for_regex_matches<CharT>{};
 5832|  8.38k|    }
 5833|  8.38k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  8.38k|        return reader_impl_for_voidptr<CharT>{};
 5835|  8.38k|    }
 5836|  8.38k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  8.38k|        return reader_impl_for_float<CharT>{};
 5838|  8.38k|    }
 5839|  8.38k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  8.38k|                       !std::is_same_v<T, wchar_t> &&
 5841|  8.38k|                       !std::is_same_v<T, char32_t> &&
 5842|  8.38k|                       !std::is_same_v<T, bool>) {
 5843|  8.38k|        return reader_impl_for_int<CharT>{};
 5844|  8.38k|    }
 5845|  8.38k|    else {
 5846|  8.38k|        return reader_impl_for_monostate<CharT>{};
 5847|  8.38k|    }
 5848|  8.38k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|    258|    {
 5277|    258|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    258|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|    258|        return read_impl(range, specs, value);
 5279|    258|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|    258|    {
 5295|    258|        SCN_CLANG_PUSH
 5296|    258|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|    258|        switch (m_type) {
 5299|    182|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 182, False: 76]
  ------------------
 5300|    182|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     34|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 34, False: 224]
  ------------------
 5303|     34|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     34|                                                                   value);
 5305|       |
 5306|     22|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 22, False: 236]
  ------------------
 5307|     22|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 0, False: 258]
  ------------------
 5310|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|      0|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|     10|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 10, False: 248]
  ------------------
 5315|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|     10|                    range, specs.charset_string<SourceCharT>(),
 5317|     10|                    specs.regexp_flags, value);
 5318|       |
 5319|     10|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 10, False: 248]
  ------------------
 5320|     10|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|     10|                    range,
 5322|     10|                    get_unescaped_regex_pattern(
 5323|     10|                        specs.charset_string<SourceCharT>()),
 5324|     10|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 258]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|    258|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|    258|        }
 5331|       |
 5332|    258|        SCN_CLANG_POP
 5333|    258|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4826|    182|    {
 4827|    182|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|    182|                                     value);
 4829|    182|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4772|    238|{
 4773|    238|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    238|    auto src = [&]() {
 4776|    238|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    238|            return make_contiguous_buffer(
 4778|    238|                ranges::subrange{range.begin().base(), result.base()});
 4779|    238|        }
 4780|    238|        else {
 4781|    238|            return make_contiguous_buffer(
 4782|    238|                ranges::subrange{range.begin(), result});
 4783|    238|        }
 4784|    238|    }();
 4785|    238|    using src_type = decltype(src);
 4786|       |
 4787|    238|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    238|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    238|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    238|                                     "Cannot read a string_view from "
 4796|    238|                                     "this source range (would require "
 4797|    238|                                     "transcoding)");
 4798|    238|    }
 4799|    238|    else {
 4800|    238|        const auto view = src.view();
 4801|    238|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    238|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 128, False: 110]
  ------------------
 4804|    128|            return unexpected_scan_error(
 4805|    128|                scan_error::invalid_scanned_value,
 4806|    128|                "Invalid encoding in scanned string_view");
 4807|    128|        }
 4808|       |
 4809|    110|        return SCN_MOVE(result);
  ------------------
  |  |  928|    110|    static_cast<    \
  |  |  929|    110|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    238|    }
 4811|    238|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4775|    238|    auto src = [&]() {
 4776|    238|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    238|            return make_contiguous_buffer(
 4778|    238|                ranges::subrange{range.begin().base(), result.base()});
 4779|    238|        }
 4780|    238|        else {
 4781|    238|            return make_contiguous_buffer(
 4782|    238|                ranges::subrange{range.begin(), result});
 4783|    238|        }
 4784|    238|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 4862|     34|    {
 4863|     34|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 34, False: 0]
  ------------------
 4864|     34|            return read_string_view_impl(
 4865|     34|                range,
 4866|     34|                read_until_code_unit(
 4867|     34|                    range,
 4868|     34|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     34|                        SourceCharT ch) { return ch == until; }),
 4870|     34|                value);
 4871|     34|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     34|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_:
  753|     34|    {
  754|     34|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_S11_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|    344|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    344|              cvref<T> obj = *get<T>(fn);
  745|    344|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    344|                  obj(static_cast<decltype(args)>(args)...);
  747|    344|              }
  748|    344|              else {
  749|    344|                  return obj(static_cast<decltype(args)>(args)...);
  750|    344|              }
  751|    344|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERNSI_17basic_string_viewIT0_NSI_11char_traitsISV_EEEEEUlwE_EEDaNS3_7storageE:
  683|    344|    {
  684|    344|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    344|            return static_cast<T*>(s.m_cp);
  686|    344|        }
  687|    344|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    344|            return static_cast<T*>(s.m_p);
  689|    344|        }
  690|    344|        else {
  691|    344|            return reinterpret_cast<T*>(s.m_fp);
  692|    344|        }
  693|    344|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEEENKUlwE_clEw:
 4869|    344|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSF_EEEEwEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERNSJ_17basic_string_viewIT0_NSJ_11char_traitsISW_EEEEEUlwE_LPv0EEEPSL_:
  661|     34|        {
  662|     34|        }
_ZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4958|     22|    {
 4959|     22|        return read_impl(
 4960|     22|            range,
 4961|     22|            [&](const auto& rng) {
 4962|     22|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     22|            },
 4964|     22|            detail::priority_tag<1>{});
 4965|     22|    }
_ZN3scn2v34impl21character_reader_implIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4973|     22|    {
 4974|     22|        return read_cb(range);
 4975|     22|    }
_ZZN3scn2v34impl21character_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4961|     22|            [&](const auto& rng) {
 4962|     22|                return read_string_view_impl(rng, read_all(rng), value);
 4963|     22|            },
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIwNSF_11char_traitsIwEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4901|     20|    {
 4902|     20|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|      0|        return read_string_view_impl(range, it, value);
 4904|     20|    }
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  7.39k|    {
 5277|  7.39k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  7.39k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  7.39k|        return read_impl(range, specs, value);
 5279|  7.39k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  7.39k|    {
 5295|  7.39k|        SCN_CLANG_PUSH
 5296|  7.39k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  7.39k|        switch (m_type) {
 5299|    404|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 404, False: 6.99k]
  ------------------
 5300|    404|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|     32|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 32, False: 7.36k]
  ------------------
 5303|     32|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|     32|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 7.39k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|    380|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 380, False: 7.01k]
  ------------------
 5310|    380|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|    380|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|  6.45k|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 6.45k, False: 940]
  ------------------
 5315|  6.45k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|  6.45k|                    range, specs.charset_string<SourceCharT>(),
 5317|  6.45k|                    specs.regexp_flags, value);
 5318|       |
 5319|    124|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 124, False: 7.27k]
  ------------------
 5320|    124|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|    124|                    range,
 5322|    124|                    get_unescaped_regex_pattern(
 5323|    124|                        specs.charset_string<SourceCharT>()),
 5324|    124|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 7.39k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  7.39k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  7.39k|        }
 5331|       |
 5332|  7.39k|        SCN_CLANG_POP
 5333|  7.39k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  1.01k|    {
 4827|  1.01k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  1.01k|                                     value);
 4829|  1.01k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  1.04k|{
 4773|  1.04k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.04k|    auto src = [&]() {
 4776|  1.04k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.04k|            return make_contiguous_buffer(
 4778|  1.04k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.04k|        }
 4780|  1.04k|        else {
 4781|  1.04k|            return make_contiguous_buffer(
 4782|  1.04k|                ranges::subrange{range.begin(), result});
 4783|  1.04k|        }
 4784|  1.04k|    }();
 4785|  1.04k|    using src_type = decltype(src);
 4786|       |
 4787|  1.04k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.04k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.04k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.04k|                                     "Cannot read a string_view from "
 4796|  1.04k|                                     "this source range (would require "
 4797|  1.04k|                                     "transcoding)");
 4798|  1.04k|    }
 4799|  1.04k|    else {
 4800|  1.04k|        const auto view = src.view();
 4801|  1.04k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.04k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 342, False: 706]
  ------------------
 4804|    342|            return unexpected_scan_error(
 4805|    342|                scan_error::invalid_scanned_value,
 4806|    342|                "Invalid encoding in scanned string_view");
 4807|    342|        }
 4808|       |
 4809|    706|        return SCN_MOVE(result);
  ------------------
  |  |  928|    706|    static_cast<    \
  |  |  929|    706|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.04k|    }
 4811|  1.04k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  1.04k|    auto src = [&]() {
 4776|  1.04k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.04k|            return make_contiguous_buffer(
 4778|  1.04k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.04k|        }
 4780|  1.04k|        else {
 4781|  1.04k|            return make_contiguous_buffer(
 4782|  1.04k|                ranges::subrange{range.begin(), result});
 4783|  1.04k|        }
 4784|  1.04k|    }();
_ZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4862|     32|    {
 4863|     32|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4863:13): [True: 32, False: 0]
  ------------------
 4864|     32|            return read_string_view_impl(
 4865|     32|                range,
 4866|     32|                read_until_code_unit(
 4867|     32|                    range,
 4868|     32|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4869|     32|                        SourceCharT ch) { return ch == until; }),
 4870|     32|                value);
 4871|     32|        }
 4872|      0|        return read_string_view_impl(
 4873|      0|            range,
 4874|      0|            read_until_code_units(
 4875|      0|                range, specs.fill.template get_code_units<SourceCharT>()),
 4876|      0|            value);
 4877|     32|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_:
  753|     32|    {
  754|     32|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES14_w:
  743|    678|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    678|              cvref<T> obj = *get<T>(fn);
  745|    678|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    678|                  obj(static_cast<decltype(args)>(args)...);
  747|    678|              }
  748|    678|              else {
  749|    678|                  return obj(static_cast<decltype(args)>(args)...);
  750|    678|              }
  751|    678|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlwE_EEDaNS3_7storageE:
  683|    678|    {
  684|    678|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    678|            return static_cast<T*>(s.m_cp);
  686|    678|        }
  687|    678|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    678|            return static_cast<T*>(s.m_p);
  689|    678|        }
  690|    678|        else {
  691|    678|            return reinterpret_cast<T*>(s.m_fp);
  692|    678|        }
  693|    678|    }
_ZZN3scn2v34impl23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlwE_clEw:
 4869|    678|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlwE_LPv0EEEPSJ_:
  661|     32|        {
  662|     32|        }
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|    380|    {
 5062|    380|        auto it = read_source_impl(range, {specs});
 5063|    380|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    380|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 62, False: 318]
  |  |  ------------------
  ------------------
 5064|     62|            return unexpected(it.error());
 5065|     62|        }
 5066|       |
 5067|    318|        return read_string_view_impl(range, *it, value);
 5068|    380|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.03k|{
 4773|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.03k|    auto src = [&]() {
 4776|  1.03k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.03k|            return make_contiguous_buffer(
 4778|  1.03k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.03k|        }
 4780|  1.03k|        else {
 4781|  1.03k|            return make_contiguous_buffer(
 4782|  1.03k|                ranges::subrange{range.begin(), result});
 4783|  1.03k|        }
 4784|  1.03k|    }();
 4785|  1.03k|    using src_type = decltype(src);
 4786|       |
 4787|  1.03k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  1.03k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  1.03k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  1.03k|                                     "Cannot read a string_view from "
 4796|  1.03k|                                     "this source range (would require "
 4797|  1.03k|                                     "transcoding)");
 4798|  1.03k|    }
 4799|  1.03k|    else {
 4800|  1.03k|        const auto view = src.view();
 4801|  1.03k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.03k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 390, False: 644]
  ------------------
 4804|    390|            return unexpected_scan_error(
 4805|    390|                scan_error::invalid_scanned_value,
 4806|    390|                "Invalid encoding in scanned string_view");
 4807|    390|        }
 4808|       |
 4809|    644|        return SCN_MOVE(result);
  ------------------
  |  |  928|    644|    static_cast<    \
  |  |  929|    644|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.03k|    }
 4811|  1.03k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.03k|    auto src = [&]() {
 4776|  1.03k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  1.03k|            return make_contiguous_buffer(
 4778|  1.03k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.03k|        }
 4780|  1.03k|        else {
 4781|  1.03k|            return make_contiguous_buffer(
 4782|  1.03k|                ranges::subrange{range.begin(), result});
 4783|  1.03k|        }
 4784|  1.03k|    }();
_ZN3scn2v34impl24regex_string_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIwNSD_11char_traitsIwEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4901|  6.58k|    {
 4902|  6.58k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3672|  6.58k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  6.58k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  6.58k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.58k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.86k, False: 716]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.86k|    }                                                  \
  |  |  |  | 3671|  6.58k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    716|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4903|    716|        return read_string_view_impl(range, it, value);
 4904|  6.58k|    }
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  8.62k|{
 1683|  8.62k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  8.62k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  8.62k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  8.62k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  8.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  8.62k|    }
 1688|  8.62k|    else {
 1689|  8.62k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  8.62k|    }
 1691|  8.62k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|  8.62k|    {
 1490|  8.62k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|    994|    {
 4100|    994|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 994]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|    994|        return std::copysign(value, T{1.0});
 4104|    994|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|  1.02k|    {
 4100|  1.02k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 0, False: 1.02k]
  ------------------
 4101|      0|            return std::copysign(value, T{-1.0});
 4102|      0|        }
 4103|  1.02k|        return std::copysign(value, T{1.0});
 4104|  1.02k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  6.46k|{
 5795|  6.46k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.46k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  6.46k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 718, False: 5.74k]
  ------------------
 5800|    718|        return range.begin();
 5801|    718|    }
 5802|       |
 5803|  5.74k|    return skip_classic_whitespace(range);
 5804|  6.46k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5870|    718|    {
 5871|    718|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    718|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    718|                          basic_contiguous_scan_context<char_type>>) {
 5875|    718|            auto rd = make_reader<T, char_type>();
 5876|    718|            return impl(rd, range, value);
 5877|    718|        }
 5878|    718|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    718|            auto rd = make_reader<T, char_type>();
 5880|    718|            if (!is_segment_contiguous(range)) {
 5881|    718|                return impl(rd, range, value);
 5882|    718|            }
 5883|    718|            auto crange = get_as_contiguous(range);
 5884|    718|            SCN_TRY(it, impl(rd, crange, value));
 5885|    718|            return ranges::next(range.begin(),
 5886|    718|                                ranges::distance(crange.begin(), it));
 5887|    718|        }
 5888|    718|        else {
 5889|    718|            SCN_EXPECT(false);
 5890|    718|            SCN_UNREACHABLE;
 5891|    718|        }
 5892|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    718|    {
 5863|    718|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    718|                        .transform_error(make_eof_scan_error));
 5865|    718|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    718|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    718|    {
 3528|    718|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    718|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    718|        return read_default_with_base(range, value, 10);
 3530|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5870|    718|    {
 5871|    718|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    718|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    718|                          basic_contiguous_scan_context<char_type>>) {
 5875|    718|            auto rd = make_reader<T, char_type>();
 5876|    718|            return impl(rd, range, value);
 5877|    718|        }
 5878|    718|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    718|            auto rd = make_reader<T, char_type>();
 5880|    718|            if (!is_segment_contiguous(range)) {
 5881|    718|                return impl(rd, range, value);
 5882|    718|            }
 5883|    718|            auto crange = get_as_contiguous(range);
 5884|    718|            SCN_TRY(it, impl(rd, crange, value));
 5885|    718|            return ranges::next(range.begin(),
 5886|    718|                                ranges::distance(crange.begin(), it));
 5887|    718|        }
 5888|    718|        else {
 5889|    718|            SCN_EXPECT(false);
 5890|    718|            SCN_UNREACHABLE;
 5891|    718|        }
 5892|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    718|    {
 5863|    718|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    718|                        .transform_error(make_eof_scan_error));
 5865|    718|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    718|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    718|    {
 3528|    718|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    718|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    718|        return read_default_with_base(range, value, 10);
 3530|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5870|    718|    {
 5871|    718|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    718|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    718|                          basic_contiguous_scan_context<char_type>>) {
 5875|    718|            auto rd = make_reader<T, char_type>();
 5876|    718|            return impl(rd, range, value);
 5877|    718|        }
 5878|    718|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    718|            auto rd = make_reader<T, char_type>();
 5880|    718|            if (!is_segment_contiguous(range)) {
 5881|    718|                return impl(rd, range, value);
 5882|    718|            }
 5883|    718|            auto crange = get_as_contiguous(range);
 5884|    718|            SCN_TRY(it, impl(rd, crange, value));
 5885|    718|            return ranges::next(range.begin(),
 5886|    718|                                ranges::distance(crange.begin(), it));
 5887|    718|        }
 5888|    718|        else {
 5889|    718|            SCN_EXPECT(false);
 5890|    718|            SCN_UNREACHABLE;
 5891|    718|        }
 5892|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    718|    {
 5863|    718|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    718|                        .transform_error(make_eof_scan_error));
 5865|    718|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    718|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5747|  1.35k|    {
 5748|  1.35k|        return true;
 5749|  1.35k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|    954|    {
 5765|    954|        detail::format_specs specs{};
 5766|    954|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    954|        std::uintptr_t intvalue{};
 5769|    954|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    954|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    954|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    954|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    954|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 954, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    954|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    954|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    954|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    954|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    954|    }                                                  \
  |  |  |  | 3671|    954|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    954|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5870|    718|    {
 5871|    718|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    718|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    718|                          basic_contiguous_scan_context<char_type>>) {
 5875|    718|            auto rd = make_reader<T, char_type>();
 5876|    718|            return impl(rd, range, value);
 5877|    718|        }
 5878|    718|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    718|            auto rd = make_reader<T, char_type>();
 5880|    718|            if (!is_segment_contiguous(range)) {
 5881|    718|                return impl(rd, range, value);
 5882|    718|            }
 5883|    718|            auto crange = get_as_contiguous(range);
 5884|    718|            SCN_TRY(it, impl(rd, crange, value));
 5885|    718|            return ranges::next(range.begin(),
 5886|    718|                                ranges::distance(crange.begin(), it));
 5887|    718|        }
 5888|    718|        else {
 5889|    718|            SCN_EXPECT(false);
 5890|    718|            SCN_UNREACHABLE;
 5891|    718|        }
 5892|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    718|    {
 5863|    718|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    718|                        .transform_error(make_eof_scan_error));
 5865|    718|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    718|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.61k|    {
 3035|  1.61k|        return true;
 3036|  1.61k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    718|    {
 5504|    718|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    718|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    718|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    718|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5348|  1.33k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.08k|    {
 5355|  1.08k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.08k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.08k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 970, False: 110]
  ------------------
 5359|    970|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 970]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    970|            else {
 5363|    970|                err = r.error();
 5364|    970|            }
 5365|    970|        }
 5366|       |
 5367|  1.08k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 1.06k, False: 20]
  ------------------
 5368|  1.06k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 1.06k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  1.06k|            else {
 5372|  1.06k|                err = r.error();
 5373|  1.06k|            }
 5374|  1.06k|        }
 5375|       |
 5376|  1.08k|        return unexpected(err);
 5377|  1.08k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|    994|    {
 5384|    994|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 994]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    994|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 994]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    994|        return unexpected_scan_error(
 5394|    994|            scan_error::invalid_scanned_value,
 5395|    994|            "Failed to read numeric boolean value: No match");
 5396|    994|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  1.06k|    {
 5402|  1.06k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 1.06k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  1.06k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 1.06k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  1.06k|        return unexpected_scan_error(
 5412|  1.06k|            scan_error::invalid_scanned_value,
 5413|  1.06k|            "Failed to read textual boolean value: No match");
 5414|  1.06k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.12k|{
 2194|  2.12k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 100, False: 2.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    100|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    100|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    100|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    100|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    100|    }                                                  \
  |  |  |  | 3671|  2.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  2.02k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  2.02k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  2.02k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  2.02k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  2.02k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  2.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.02k, False: 0]
  |  |  ------------------
  ------------------
 2201|  2.02k|            return unexpected(parse_error::error);
 2202|  2.02k|        }
 2203|      0|        return it;
 2204|  2.02k|    }
 2205|  2.02k|    else {
 2206|  2.02k|        auto range_it = range.begin();
 2207|  2.02k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  2.02k|            if (SCN_UNLIKELY(*range_it !=
 2209|  2.02k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  2.02k|                return unexpected(parse_error::error);
 2211|  2.02k|            }
 2212|  2.02k|        }
 2213|  2.02k|        return it;
 2214|  2.02k|    }
 2215|  2.02k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5870|    718|    {
 5871|    718|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    718|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    718|                          basic_contiguous_scan_context<char_type>>) {
 5875|    718|            auto rd = make_reader<T, char_type>();
 5876|    718|            return impl(rd, range, value);
 5877|    718|        }
 5878|    718|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    718|            auto rd = make_reader<T, char_type>();
 5880|    718|            if (!is_segment_contiguous(range)) {
 5881|    718|                return impl(rd, range, value);
 5882|    718|            }
 5883|    718|            auto crange = get_as_contiguous(range);
 5884|    718|            SCN_TRY(it, impl(rd, crange, value));
 5885|    718|            return ranges::next(range.begin(),
 5886|    718|                                ranges::distance(crange.begin(), it));
 5887|    718|        }
 5888|    718|        else {
 5889|    718|            SCN_EXPECT(false);
 5890|    718|            SCN_UNREACHABLE;
 5891|    718|        }
 5892|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    718|    {
 5863|    718|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    718|                        .transform_error(make_eof_scan_error));
 5865|    718|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    718|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|    718|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.33k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|    718|    {
 5871|    718|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    718|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    718|                          basic_contiguous_scan_context<char_type>>) {
 5875|    718|            auto rd = make_reader<T, char_type>();
 5876|    718|            return impl(rd, range, value);
 5877|    718|        }
 5878|    718|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    718|            auto rd = make_reader<T, char_type>();
 5880|    718|            if (!is_segment_contiguous(range)) {
 5881|    718|                return impl(rd, range, value);
 5882|    718|            }
 5883|    718|            auto crange = get_as_contiguous(range);
 5884|    718|            SCN_TRY(it, impl(rd, crange, value));
 5885|    718|            return ranges::next(range.begin(),
 5886|    718|                                ranges::distance(crange.begin(), it));
 5887|    718|        }
 5888|    718|        else {
 5889|    718|            SCN_EXPECT(false);
 5890|    718|            SCN_UNREACHABLE;
 5891|    718|        }
 5892|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    718|    {
 5863|    718|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    718|                        .transform_error(make_eof_scan_error));
 5865|    718|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    718|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    718|    {
 4152|    718|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    718|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    718|        float_reader<CharT> rd{};
 4155|    718|        return read_impl<Range>(
 4156|    718|            range, rd,
 4157|    718|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    718|                return r.read_source(SCN_FWD(args)...);
 4159|    718|            },
 4160|    718|            value);
 4161|    718|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    718|    {
  754|    718|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    718|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    718|              cvref<T> obj = *get<T>(fn);
  745|    718|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    718|                  obj(static_cast<decltype(args)>(args)...);
  747|    718|              }
  748|    718|              else {
  749|    718|                  return obj(static_cast<decltype(args)>(args)...);
  750|    718|              }
  751|    718|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    718|    {
  684|    718|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    718|            return static_cast<T*>(s.m_cp);
  686|    718|        }
  687|    718|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    718|            return static_cast<T*>(s.m_p);
  689|    718|        }
  690|    718|        else {
  691|    718|            return reinterpret_cast<T*>(s.m_fp);
  692|    718|        }
  693|    718|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    718|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    718|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    718|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    718|        {
  662|    718|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    718|    {
 5871|    718|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    718|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    718|                          basic_contiguous_scan_context<char_type>>) {
 5875|    718|            auto rd = make_reader<T, char_type>();
 5876|    718|            return impl(rd, range, value);
 5877|    718|        }
 5878|    718|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    718|            auto rd = make_reader<T, char_type>();
 5880|    718|            if (!is_segment_contiguous(range)) {
 5881|    718|                return impl(rd, range, value);
 5882|    718|            }
 5883|    718|            auto crange = get_as_contiguous(range);
 5884|    718|            SCN_TRY(it, impl(rd, crange, value));
 5885|    718|            return ranges::next(range.begin(),
 5886|    718|                                ranges::distance(crange.begin(), it));
 5887|    718|        }
 5888|    718|        else {
 5889|    718|            SCN_EXPECT(false);
 5890|    718|            SCN_UNREACHABLE;
 5891|    718|        }
 5892|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    718|    {
 5863|    718|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    718|                        .transform_error(make_eof_scan_error));
 5865|    718|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    718|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    718|    {
 5266|    718|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    718|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    718|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    718|    {
 5871|    718|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    718|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    718|                          basic_contiguous_scan_context<char_type>>) {
 5875|    718|            auto rd = make_reader<T, char_type>();
 5876|    718|            return impl(rd, range, value);
 5877|    718|        }
 5878|    718|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    718|            auto rd = make_reader<T, char_type>();
 5880|    718|            if (!is_segment_contiguous(range)) {
 5881|    718|                return impl(rd, range, value);
 5882|    718|            }
 5883|    718|            auto crange = get_as_contiguous(range);
 5884|    718|            SCN_TRY(it, impl(rd, crange, value));
 5885|    718|            return ranges::next(range.begin(),
 5886|    718|                                ranges::distance(crange.begin(), it));
 5887|    718|        }
 5888|    718|        else {
 5889|    718|            SCN_EXPECT(false);
 5890|    718|            SCN_UNREACHABLE;
 5891|    718|        }
 5892|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    718|    {
 5863|    718|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    718|                        .transform_error(make_eof_scan_error));
 5865|    718|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    718|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    718|    {
 5266|    718|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    718|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    718|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|    718|    {
 5871|    718|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    718|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    718|                          basic_contiguous_scan_context<char_type>>) {
 5875|    718|            auto rd = make_reader<T, char_type>();
 5876|    718|            return impl(rd, range, value);
 5877|    718|        }
 5878|    718|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    718|            auto rd = make_reader<T, char_type>();
 5880|    718|            if (!is_segment_contiguous(range)) {
 5881|    718|                return impl(rd, range, value);
 5882|    718|            }
 5883|    718|            auto crange = get_as_contiguous(range);
 5884|    718|            SCN_TRY(it, impl(rd, crange, value));
 5885|    718|            return ranges::next(range.begin(),
 5886|    718|                                ranges::distance(crange.begin(), it));
 5887|    718|        }
 5888|    718|        else {
 5889|    718|            SCN_EXPECT(false);
 5890|    718|            SCN_UNREACHABLE;
 5891|    718|        }
 5892|    718|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    718|    {
 5863|    718|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    718|                        .transform_error(make_eof_scan_error));
 5865|    718|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    718|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    718|    {
 5266|    718|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    718|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    718|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    718|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   207k|    {
 2879|   207k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   421k|    {
 2883|   421k|        return m_current;
 2884|   421k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   294k|    {
 2888|   294k|        return m_range.end();
 2889|   294k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|  80.2k|{
 1221|       |    // TODO: optimize
 1222|  80.2k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|  80.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|  80.2k|    auto res = get_next_code_point(str);
 1224|  80.2k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|  80.2k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  84.2k|    {
 2903|  84.2k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  84.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  84.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  84.2k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  84.2k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 84.2k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  84.2k|        }
 2909|  84.2k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  84.2k|    static_cast<    \
  |  |  929|  84.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  84.2k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   129k|    {
 2893|   129k|        return ranges::subrange{begin(), end()};
 2894|   129k|    }
_ZN3scn2v34impl24read_while_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2116|  8.62k|{
 2117|  8.62k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  8.62k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  8.62k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  8.62k|        auto buf = make_contiguous_buffer(range);
 2121|  8.62k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  8.62k|        return ranges::next(range.begin(),
 2123|  8.62k|                            ranges::distance(buf.view().begin(), it));
 2124|  8.62k|    }
 2125|  8.62k|    else {
 2126|  8.62k|        auto it = range.begin();
 2127|       |
 2128|  8.62k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  8.62k|            auto seg = get_contiguous_beginning(range);
 2130|  8.62k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  8.62k|                seg_it != seg.end()) {
 2132|  8.62k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  8.62k|            }
 2134|  8.62k|            ranges::advance(it, seg.size());
 2135|  8.62k|        }
 2136|       |
 2137|  8.62k|        return read_while_code_point(
 2138|  8.62k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  8.62k|    }
 2140|  8.62k|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  7.72k|    {
 6037|  7.72k|        const bool need_skipped_width =
 6038|  7.72k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 184, False: 7.53k]
  |  Branch (6038:33): [True: 7.53k, False: 0]
  ------------------
 6039|  7.72k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  7.72k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 658, False: 7.06k]
  ------------------
 6043|  7.72k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 530, False: 6.53k]
  ------------------
 6044|  1.18k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  1.18k|                             need_skipped_width);
 6046|  1.18k|        }
 6047|  6.53k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 6.16k, False: 370]
  |  Branch (6047:56): [True: 3.02k, False: 3.13k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.02k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 3.02k, False: 0]
  ------------------
 6051|  3.02k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  3.02k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  3.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 112, False: 2.91k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    112|    }                                                  \
  |  |  |  | 3671|  3.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  2.91k|                                  .transform_error(make_eof_scan_error));
 6054|  2.91k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  3.02k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|  3.50k|        return result_type{rng.begin(), 0};
 6070|  6.53k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|  1.18k|{
 5951|  1.18k|    using char_type = detail::char_t<Range>;
 5952|  1.18k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|  1.18k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 950, False: 238]
  ------------------
 5955|    950|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    950|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    950|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 950]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    950|        auto max_width_view = take_width(range, max_width);
 5972|    950|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    950|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 950, False: 0]
  ------------------
 5975|    950|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    950|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    950|    }
 5979|       |
 5980|    238|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|    238|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 238]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|    238|    auto max_width_view = take_width(range, max_width);
 5994|    238|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|    238|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 238, False: 0]
  ------------------
 5997|    238|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|    238|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|    238|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_:
  753|    950|    {
  754|    950|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  1.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.26k|              cvref<T> obj = *get<T>(fn);
  745|  1.26k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.26k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.26k|              }
  748|  1.26k|              else {
  749|  1.26k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.26k|              }
  751|  1.26k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  1.26k|    {
  684|  1.26k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.26k|            return static_cast<T*>(s.m_cp);
  686|  1.26k|        }
  687|  1.26k|        else if constexpr (std::is_object_v<T>) {
  688|  1.26k|            return static_cast<T*>(s.m_p);
  689|  1.26k|        }
  690|  1.26k|        else {
  691|  1.26k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.26k|        }
  693|  1.26k|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5956|  1.26k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSJ_:
  666|    950|        {
  667|    950|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    950|{
 1976|    950|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    950|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    950|{
 1957|    950|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    950|        return std::find_if(range.begin(), range.end(), pred);
 1959|    950|    }
 1960|    950|    else {
 1961|    950|        auto first = range.begin();
 1962|  1.34k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.26k, False: 84]
  ------------------
 1963|  1.26k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 866, False: 398]
  ------------------
 1964|    866|                return first;
 1965|    866|            }
 1966|  1.26k|        }
 1967|     84|        return first;
 1968|    950|    }
 1969|    950|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE5beginEv:
 2809|  7.24k|    {
 2810|  7.24k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  7.24k|                                      m_count};
 2812|  7.24k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvE3getEv:
 2716|  27.7k|    {
 2717|  27.7k|        return view;
 2718|  27.7k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  7.24k|    {
 2382|  7.24k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  6.89k|        {
 2781|  6.89k|            return !(y == x);
 2782|  6.89k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  14.8k|        {
 2770|  14.8k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 590, False: 14.2k]
  |  Branch (2770:39): [True: 386, False: 204]
  ------------------
 2771|  14.8k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 14.4k]
  ------------------
 2772|  14.8k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|    590|    {
 2421|    590|        return m_multibyte_left;
 2422|    590|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE3endEv:
 2815|  13.3k|    {
 2816|  13.3k|        return sentinel<true>{m_base.get().end()};
 2817|  13.3k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  13.3k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  10.4k|    {
 2426|  10.4k|        return *m_current;
 2427|  10.4k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  7.96k|    {
 2435|  7.96k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  7.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  7.96k|        _increment_current();
 2437|  7.96k|        return *this;
 2438|  7.96k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  7.96k|    {
 2668|  7.96k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 5.93k, False: 2.03k]
  ------------------
 2669|  5.93k|            auto cplen = _get_cp_length_at_current();
 2670|  5.93k|            m_multibyte_left = cplen - 1;
 2671|  5.93k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  5.93k|        }
 2673|  2.03k|        else {
 2674|  2.03k|            --m_multibyte_left;
 2675|  2.03k|        }
 2676|       |
 2677|  7.96k|        ++m_current;
 2678|  7.96k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  5.93k|    {
 2639|  5.93k|        return static_cast<difference_type>(
 2640|  5.93k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  5.93k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  5.93k|    {
 2645|  5.93k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  5.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.93k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  5.93k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 4.63k, False: 1.29k]
  ------------------
 2650|  4.63k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  4.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  4.63k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  4.63k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  4.63k|        }
 2654|       |
 2655|  1.29k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  1.29k|                                           cplen);
 2657|  1.29k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.29k]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|  1.29k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  1.29k|        return static_cast<difference_type>(
 2663|  1.29k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  1.29k|    }
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENSt3__117basic_string_viewIcNSD_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEESJ_RKT0_:
 2036|    238|{
 2037|    238|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    238|    auto it = range.begin();
 2040|    238|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 238, False: 0]
  ------------------
 2041|    238|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    238|                                           needle.size());
 2043|    238|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 78, False: 160]
  ------------------
 2044|     78|            return it;
 2045|     78|        }
 2046|    160|        static_assert(
 2047|    160|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    160|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 160, False: 0]
  ------------------
 2049|    160|            return it;
 2050|    160|        }
 2051|      0|        it = *r;
 2052|      0|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_l:
 1856|    238|{
 1857|    238|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    238|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    238|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    238|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    238|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    238|        if (sz < count) {
 1862|    238|            return unexpected(eof_error::eof);
 1863|    238|        }
 1864|       |
 1865|    238|        return ranges::next(range.begin(), count);
 1866|    238|    }
 1867|    238|    else {
 1868|    238|        auto it = range.begin();
 1869|    238|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 238]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|    946|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 786, False: 160]
  ------------------
 1874|    786|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 78, False: 708]
  ------------------
 1875|     78|                return unexpected(eof_error::eof);
 1876|     78|            }
 1877|    786|        }
 1878|       |
 1879|    160|        return it;
 1880|    238|    }
 1881|    238|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEmT_:
 1094|    238|{
 1095|    238|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    238|        return r.size();
 1097|    238|    }
 1098|    238|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    238|                           ranges::const_iterator_t<Range>,
 1100|    238|                           typename detail::basic_scan_buffer<
 1101|    238|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    238|        if constexpr (ranges::common_range<Range>) {
 1103|    238|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    238|        }
 1105|    238|        else {
 1106|    238|            if (r.begin().stores_parent()) {
 1107|    238|                return static_cast<size_t>(
 1108|    238|                    r.begin().parent()->chars_available() -
 1109|    238|                    r.begin().position());
 1110|    238|            }
 1111|    238|            return r.begin().contiguous_segment().size();
 1112|    238|        }
 1113|    238|    }
 1114|    238|    else {
 1115|    238|        return 0;
 1116|    238|    }
 1117|    238|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeE:
  267|  3.02k|    {
  268|  3.02k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.02k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISM_EEvE4typeERSM_NS1_20incrementable_traitsISM_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  3.02k|    {
  161|  3.02k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  3.02k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 3.02k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  3.02k|        else {
  169|  3.02k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 3.02k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  3.02k|        }
  173|  3.02k|    }
_ZN3scn2v34impl27counted_width_iterator_implneINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2530|  2.99k|    {
 2531|  2.99k|        return !(a == b);
 2532|  2.99k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqINS2_22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEDTeqclscPFRKS7_vELDnEEclscPFRKT_vELDnEEERKNS4_IS7_SG_EERKNS4_ISL_T0_EE:
 2522|  2.99k|    {
 2523|  2.99k|        return a.m_current == b.m_current;
 2524|  2.99k|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  4.21k|    {
 2832|  4.21k|        return take_width_view{r, n};
 2833|  4.21k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEEC2ERKSA_l:
 2800|  4.21k|    {
 2801|  4.21k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEvEC2ERKSB_:
 2713|  4.21k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  3.02k|{
 2951|  3.02k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 3.02k, False: 0]
  ------------------
 2952|  3.02k|        auto it = read_while_classic_space(range);
 2953|  3.02k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  3.02k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 2.91k]
  |  |  ------------------
  ------------------
 2955|    112|            return unexpected(e);
 2956|    112|        }
 2957|       |
 2958|  2.91k|        return it;
 2959|  3.02k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  3.02k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  3.02k|{
 2117|  3.02k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  3.02k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  3.02k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  3.02k|        auto buf = make_contiguous_buffer(range);
 2121|  3.02k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  3.02k|        return ranges::next(range.begin(),
 2123|  3.02k|                            ranges::distance(buf.view().begin(), it));
 2124|  3.02k|    }
 2125|  3.02k|    else {
 2126|  3.02k|        auto it = range.begin();
 2127|       |
 2128|  3.02k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  3.02k|            auto seg = get_contiguous_beginning(range);
 2130|  3.02k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  3.02k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 3.02k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  3.02k|            ranges::advance(it, seg.size());
 2135|  3.02k|        }
 2136|       |
 2137|  3.02k|        return read_while_code_point(
 2138|  3.02k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  3.02k|    }
 2140|  3.02k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDaT_:
 1038|  3.02k|{
 1039|  3.02k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  3.02k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  3.02k|        return r;
 1042|  3.02k|    }
 1043|  3.02k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  3.02k|                           ranges::const_iterator_t<Range>,
 1045|  3.02k|                           typename detail::basic_scan_buffer<
 1046|  3.02k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  3.02k|        if constexpr (ranges::common_range<Range>) {
 1048|  3.02k|            auto seg = r.begin().contiguous_segment();
 1049|  3.02k|            auto dist =
 1050|  3.02k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  3.02k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  3.02k|        }
 1053|  3.02k|        else {
 1054|  3.02k|            return r.begin().contiguous_segment();
 1055|  3.02k|        }
 1056|  3.02k|    }
 1057|  3.02k|    else {
 1058|  3.02k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  3.02k|    }
 1060|  3.02k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  3.02k|{
 2082|  3.02k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  3.02k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  3.02k|{
 2061|  3.02k|    auto it = range.begin();
 2062|  4.28k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 4.17k, False: 112]
  ------------------
 2063|  4.17k|        const auto val =
 2064|  4.17k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  4.17k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  4.17k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.17k, False: 0]
  |  |  ------------------
  ------------------
 2066|  4.17k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  4.17k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  4.17k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.91k, False: 1.25k]
  ------------------
 2069|  2.91k|                return it;
 2070|  2.91k|            }
 2071|  4.17k|        }
 2072|  1.25k|        it = val.iterator;
 2073|  1.25k|    }
 2074|       |
 2075|    112|    return it;
 2076|  3.02k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  4.17k|{
 1899|  4.17k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  4.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  4.17k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  4.17k|    auto it = range.begin();
 1903|  4.17k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  4.17k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  4.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.17k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  4.17k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 3.78k, False: 392]
  ------------------
 1912|  3.78k|        ++it;
 1913|  3.78k|        return {it, string_type(1, *range.begin())};
 1914|  3.78k|    }
 1915|       |
 1916|    392|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|    392|    return {it, string_type{range.begin(), it}};
 1918|  4.17k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  7.20k|{
  944|  7.20k|    return is_range_eof(r.begin(), r.end());
  945|  7.20k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  7.20k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  7.20k|    {
  937|  7.20k|        return begin == end;
  938|  7.20k|    }
  939|  7.20k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  282|    392|    {
  283|    392|        return n - fn::impl_i_n_s(i, n, bound);
  284|    392|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSC_ISG_E8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SP_EENS1_20incrementable_traitsISP_E15difference_typeEE4typeERSP_ST_SQ_:
  226|    392|    {
  227|    392|        constexpr iter_difference_t<I> zero{0};
  228|    392|        iter_difference_t<I> counter{0};
  229|       |
  230|    392|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 392]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|    392|        else {
  237|  1.41k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 1.02k, False: 392]
  |  Branch (237:34): [True: 1.02k, False: 0]
  ------------------
  238|  1.02k|                ++i;
  239|  1.02k|                ++counter;
  240|  1.02k|            }
  241|    392|        }
  242|       |
  243|    392|        return counter;
  244|    392|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEcE8is_validEv:
 1889|  4.17k|    {
 1890|  4.17k|        return !codepoint.empty();
 1891|  4.17k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  3.02k|    {
  754|  3.02k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  4.17k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.17k|              cvref<T> obj = *get<T>(fn);
  745|  4.17k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.17k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.17k|              }
  748|  4.17k|              else {
  749|  4.17k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.17k|              }
  751|  4.17k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  4.17k|    {
  684|  4.17k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.17k|            return static_cast<T*>(s.m_cp);
  686|  4.17k|        }
  687|  4.17k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  4.17k|            return static_cast<T*>(s.m_p);
  689|  4.17k|        }
  690|  4.17k|        else {
  691|  4.17k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.17k|        }
  693|  4.17k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  4.17k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  3.02k|        {
  662|  3.02k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  3.02k|{
  950|  3.02k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 112, False: 2.91k]
  |  |  ------------------
  ------------------
  951|    112|        return eof_error::eof;
  952|    112|    }
  953|  2.91k|    return eof_error::good;
  954|  3.02k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  18.6k|    {
 2413|  18.6k|        return m_current;
 2414|  18.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKcS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  18.9k|    {
 2417|  18.9k|        return m_count;
 2418|  18.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  34.1k|    {
 6037|  34.1k|        const bool need_skipped_width =
 6038|  34.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 1.93k, False: 32.2k]
  |  Branch (6038:33): [True: 0, False: 32.2k]
  ------------------
 6039|  34.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  34.1k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 236, False: 33.9k]
  ------------------
 6043|  34.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 4.42k, False: 29.5k]
  ------------------
 6044|  4.65k|            return skip_fill(rng, specs.precision, specs.fill,
 6045|  4.65k|                             need_skipped_width);
 6046|  4.65k|        }
 6047|  29.5k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 29.1k, False: 396]
  |  Branch (6047:56): [True: 1.84k, False: 27.2k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.84k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.84k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  3.68k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.84k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.84k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  3.68k|                            make_eof_scan_error));
 6058|       |
 6059|  3.68k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 1.13k, False: 712]
  ------------------
 6060|  1.13k|                return result_type{
 6061|  1.13k|                    it,
 6062|  1.13k|                    calculate_text_width(make_contiguous_buffer(
 6063|  1.13k|                                             ranges::subrange{rng.begin(), it})
 6064|  1.13k|                                             .view())};
 6065|  1.13k|            }
 6066|    712|            return result_type{it, 0};
 6067|  3.68k|        }
 6068|       |
 6069|  27.6k|        return result_type{rng.begin(), 0};
 6070|  29.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  7.72k|    {
 6079|  7.72k|        const bool need_skipped_width =
 6080|  7.72k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 522, False: 7.20k]
  |  Branch (6080:33): [True: 1.83k, False: 5.37k]
  ------------------
 6081|  7.72k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  7.72k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 202, False: 7.52k]
  ------------------
 6084|  7.72k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 326, False: 7.19k]
  ------------------
 6085|    528|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 240, False: 288]
  ------------------
 6086|    528|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 84, False: 156]
  ------------------
 6087|     84|                return result_type{rng.begin(), 0};
 6088|     84|            }
 6089|    444|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    444|                             specs.fill, need_skipped_width);
 6091|    528|        }
 6092|  7.19k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 6.90k, False: 294]
  ------------------
 6093|  7.19k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 6.38k, False: 516]
  ------------------
 6094|  7.19k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 346, False: 6.04k]
  |  Branch (6094:35): [True: 310, False: 36]
  ------------------
 6095|  6.38k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 922, False: 5.15k]
  ------------------
 6096|  6.07k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 822, False: 100]
  ------------------
 6097|  1.13k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 826, False: 306]
  ------------------
 6098|    826|                const auto initial_width =
 6099|    826|                    specs.precision - prefix_width - value_width;
 6100|    826|                auto max_width_view = take_width(rng, initial_width);
 6101|    826|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    826|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    826|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    826|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    826|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 826]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    826|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    826|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    826|                                  .transform_error(make_eof_scan_error));
 6103|    826|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    826|            }
 6105|    612|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|    306|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    306|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    306|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 306]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    306|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    306|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|    612|                            make_eof_scan_error));
 6107|       |
 6108|    612|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 306, False: 0]
  ------------------
 6109|    306|                return result_type{
 6110|    306|                    it,
 6111|    306|                    calculate_text_width(make_contiguous_buffer(
 6112|    306|                                             ranges::subrange{rng.begin(), it})
 6113|    306|                                             .view())};
 6114|    306|            }
 6115|      0|            return result_type{it, 0};
 6116|    612|        }
 6117|  6.06k|        return result_type{rng.begin(), 0};
 6118|  7.19k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6192|  12.6k|    {
 6193|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  12.6k|            auto rd = make_reader<T, char_type>();
 6198|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 716]
  |  |  ------------------
  ------------------
 6199|  11.9k|                return unexpected(e);
 6200|  11.9k|            }
 6201|       |
 6202|    716|            return impl(rd, range, value);
 6203|  12.6k|        }
 6204|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  12.6k|            auto rd = make_reader<T, char_type>();
 6206|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  12.6k|                return unexpected(e);
 6208|  12.6k|            }
 6209|       |
 6210|  12.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  12.6k|                specs.width != 0) {
 6212|  12.6k|                return impl(rd, range, value);
 6213|  12.6k|            }
 6214|       |
 6215|  12.6k|            auto crange = get_as_contiguous(range);
 6216|  12.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  12.6k|            return ranges::next(range.begin(),
 6218|  12.6k|                                ranges::distance(crange.begin(), it));
 6219|  12.6k|        }
 6220|  12.6k|        else {
 6221|  12.6k|            SCN_EXPECT(false);
 6222|  12.6k|            SCN_UNREACHABLE;
 6223|  12.6k|        }
 6224|  12.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    716|    {
 6124|    716|        const bool need_skipped_width =
 6125|    716|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 180, False: 536]
  |  Branch (6125:33): [True: 436, False: 100]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    716|        auto it = rng.begin();
 6129|    716|        std::ptrdiff_t prefix_width = 0;
 6130|    716|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 442, False: 274]
  ------------------
 6131|    442|            auto max_width_view = take_width(rng, specs.precision);
 6132|    442|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 426]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    426|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    426|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    426|            it = prefix_result.first.base();
 6135|    426|            prefix_width = prefix_result.second;
 6136|    426|        }
 6137|    274|        else {
 6138|    274|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    274|            std::tie(it, prefix_width) = prefix_result;
 6140|    274|        }
 6141|    700|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    700|        std::ptrdiff_t value_width = 0;
 6145|    700|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 426, False: 274]
  ------------------
 6146|    426|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 420]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    420|            const auto initial_width = specs.precision - prefix_width;
 6154|    420|            auto max_width_view =
 6155|    420|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    420|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    420|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 420, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    420|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    420|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    420|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    420|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    420|    }                                                  \
  |  |  |  | 3671|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    274|        else {
 6161|    274|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 274, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    274|    }                                                  \
  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6192|  12.6k|    {
 6193|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  12.6k|            auto rd = make_reader<T, char_type>();
 6198|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 716]
  |  |  ------------------
  ------------------
 6199|  11.9k|                return unexpected(e);
 6200|  11.9k|            }
 6201|       |
 6202|    716|            return impl(rd, range, value);
 6203|  12.6k|        }
 6204|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  12.6k|            auto rd = make_reader<T, char_type>();
 6206|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  12.6k|                return unexpected(e);
 6208|  12.6k|            }
 6209|       |
 6210|  12.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  12.6k|                specs.width != 0) {
 6212|  12.6k|                return impl(rd, range, value);
 6213|  12.6k|            }
 6214|       |
 6215|  12.6k|            auto crange = get_as_contiguous(range);
 6216|  12.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  12.6k|            return ranges::next(range.begin(),
 6218|  12.6k|                                ranges::distance(crange.begin(), it));
 6219|  12.6k|        }
 6220|  12.6k|        else {
 6221|  12.6k|            SCN_EXPECT(false);
 6222|  12.6k|            SCN_UNREACHABLE;
 6223|  12.6k|        }
 6224|  12.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    716|    {
 6124|    716|        const bool need_skipped_width =
 6125|    716|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 180, False: 536]
  |  Branch (6125:33): [True: 436, False: 100]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    716|        auto it = rng.begin();
 6129|    716|        std::ptrdiff_t prefix_width = 0;
 6130|    716|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 442, False: 274]
  ------------------
 6131|    442|            auto max_width_view = take_width(rng, specs.precision);
 6132|    442|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 426]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    426|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    426|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    426|            it = prefix_result.first.base();
 6135|    426|            prefix_width = prefix_result.second;
 6136|    426|        }
 6137|    274|        else {
 6138|    274|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    274|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    274|            std::tie(it, prefix_width) = prefix_result;
 6140|    274|        }
 6141|    700|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    700|        std::ptrdiff_t value_width = 0;
 6145|    700|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 426, False: 274]
  ------------------
 6146|    426|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 420]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    420|            const auto initial_width = specs.precision - prefix_width;
 6154|    420|            auto max_width_view =
 6155|    420|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    420|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    420|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 420, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    420|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    420|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    420|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    420|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    420|    }                                                  \
  |  |  |  | 3671|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    274|        else {
 6161|    274|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    274|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    274|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    274|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 274, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    274|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    274|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    274|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    274|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    274|    }                                                  \
  |  | 3671|    274|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6192|  12.6k|    {
 6193|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  12.6k|            auto rd = make_reader<T, char_type>();
 6198|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 638]
  |  |  ------------------
  ------------------
 6199|  11.9k|                return unexpected(e);
 6200|  11.9k|            }
 6201|       |
 6202|    638|            return impl(rd, range, value);
 6203|  12.6k|        }
 6204|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  12.6k|            auto rd = make_reader<T, char_type>();
 6206|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  12.6k|                return unexpected(e);
 6208|  12.6k|            }
 6209|       |
 6210|  12.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  12.6k|                specs.width != 0) {
 6212|  12.6k|                return impl(rd, range, value);
 6213|  12.6k|            }
 6214|       |
 6215|  12.6k|            auto crange = get_as_contiguous(range);
 6216|  12.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  12.6k|            return ranges::next(range.begin(),
 6218|  12.6k|                                ranges::distance(crange.begin(), it));
 6219|  12.6k|        }
 6220|  12.6k|        else {
 6221|  12.6k|            SCN_EXPECT(false);
 6222|  12.6k|            SCN_UNREACHABLE;
 6223|  12.6k|        }
 6224|  12.6k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5752|  12.6k|    {
 5753|  12.6k|        reader_error_handler eh{};
 5754|  12.6k|        detail::check_pointer_type_specs(specs, eh);
 5755|  12.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 638]
  |  |  ------------------
  ------------------
 5756|  11.9k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  11.9k|        }
 5758|    638|        return {};
 5759|  12.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    638|    {
 6124|    638|        const bool need_skipped_width =
 6125|    638|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 176, False: 462]
  |  Branch (6125:33): [True: 396, False: 66]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    638|        auto it = rng.begin();
 6129|    638|        std::ptrdiff_t prefix_width = 0;
 6130|    638|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 402, False: 236]
  ------------------
 6131|    402|            auto max_width_view = take_width(rng, specs.precision);
 6132|    402|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      8|    }                                                  \
  |  |  |  | 3671|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    394|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    394|            it = prefix_result.first.base();
 6135|    394|            prefix_width = prefix_result.second;
 6136|    394|        }
 6137|    236|        else {
 6138|    236|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    236|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 236]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    236|            std::tie(it, prefix_width) = prefix_result;
 6140|    236|        }
 6141|    630|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    630|        std::ptrdiff_t value_width = 0;
 6145|    630|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 394, False: 236]
  ------------------
 6146|    394|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 390]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    390|            const auto initial_width = specs.precision - prefix_width;
 6154|    390|            auto max_width_view =
 6155|    390|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    390|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    390|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    390|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    390|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 390, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    390|    }                                                  \
  |  |  |  | 3671|    390|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    236|        else {
 6161|    236|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 236, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    236|    }                                                  \
  |  | 3671|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    390|    {
 5782|    390|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    390|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    390|        return read_default(range, value, loc);
 5784|    390|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    390|    {
 5765|    390|        detail::format_specs specs{};
 5766|    390|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    390|        std::uintptr_t intvalue{};
 5769|    390|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    390|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    390|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    390|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 390, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    390|    }                                                  \
  |  |  |  | 3671|    390|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    390|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    236|    {
 5782|    236|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    236|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    236|        return read_default(range, value, loc);
 5784|    236|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6192|  12.6k|    {
 6193|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  12.6k|            auto rd = make_reader<T, char_type>();
 6198|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.7k, False: 900]
  |  |  ------------------
  ------------------
 6199|  11.7k|                return unexpected(e);
 6200|  11.7k|            }
 6201|       |
 6202|    900|            return impl(rd, range, value);
 6203|  12.6k|        }
 6204|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  12.6k|            auto rd = make_reader<T, char_type>();
 6206|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  12.6k|                return unexpected(e);
 6208|  12.6k|            }
 6209|       |
 6210|  12.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  12.6k|                specs.width != 0) {
 6212|  12.6k|                return impl(rd, range, value);
 6213|  12.6k|            }
 6214|       |
 6215|  12.6k|            auto crange = get_as_contiguous(range);
 6216|  12.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  12.6k|            return ranges::next(range.begin(),
 6218|  12.6k|                                ranges::distance(crange.begin(), it));
 6219|  12.6k|        }
 6220|  12.6k|        else {
 6221|  12.6k|            SCN_EXPECT(false);
 6222|  12.6k|            SCN_UNREACHABLE;
 6223|  12.6k|        }
 6224|  12.6k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  12.6k|    {
 3040|  12.6k|        reader_error_handler eh{};
 3041|  12.6k|        get_derived().check_specs_impl(specs, eh);
 3042|  12.6k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.7k, False: 900]
  |  |  ------------------
  ------------------
 3043|  11.7k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  11.7k|        }
 3045|    900|        return {};
 3046|  12.6k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  12.6k|    {
 3051|  12.6k|        return static_cast<Derived&>(*this);
 3052|  12.6k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  12.6k|    {
 5497|  12.6k|        detail::check_bool_type_specs(specs, eh);
 5498|  12.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    900|    {
 6124|    900|        const bool need_skipped_width =
 6125|    900|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 190, False: 710]
  |  Branch (6125:33): [True: 504, False: 206]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    900|        auto it = rng.begin();
 6129|    900|        std::ptrdiff_t prefix_width = 0;
 6130|    900|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 512, False: 388]
  ------------------
 6131|    512|            auto max_width_view = take_width(rng, specs.precision);
 6132|    512|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    512|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    512|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    512|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    512|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 492]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     20|    }                                                  \
  |  |  |  | 3671|    512|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    492|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    492|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    492|            it = prefix_result.first.base();
 6135|    492|            prefix_width = prefix_result.second;
 6136|    492|        }
 6137|    388|        else {
 6138|    388|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    388|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 388]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    388|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    388|            std::tie(it, prefix_width) = prefix_result;
 6140|    388|        }
 6141|    880|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    880|        std::ptrdiff_t value_width = 0;
 6145|    880|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 492, False: 388]
  ------------------
 6146|    492|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 486]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    486|            const auto initial_width = specs.precision - prefix_width;
 6154|    486|            auto max_width_view =
 6155|    486|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    486|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    486|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    486|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    486|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    486|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 486, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    486|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    486|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    486|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    486|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    486|    }                                                  \
  |  |  |  | 3671|    486|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    388|        else {
 6161|    388|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    388|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    388|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    388|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 388, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    388|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    388|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    388|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    388|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    388|    }                                                  \
  |  | 3671|    388|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    486|    {
 5516|    486|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    486|#if !SCN_DISABLE_LOCALE
 5519|    486|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 12, False: 474]
  ------------------
 5520|     12|            return rd.read_localized(range, loc, value);
 5521|     12|        }
 5522|    474|#endif
 5523|       |
 5524|    474|        return rd.read_classic(range, value);
 5525|    486|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5528|    874|    {
 5529|    874|        SCN_GCC_COMPAT_PUSH
 5530|    874|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    874|        switch (specs.type) {
 5533|    176|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 176, False: 698]
  ------------------
 5534|    176|                return bool_reader_base::allow_text;
 5535|       |
 5536|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 10, False: 864]
  ------------------
 5537|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 10, False: 864]
  ------------------
 5538|     26|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 868]
  ------------------
 5539|     34|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 8, False: 866]
  ------------------
 5540|     60|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 26, False: 848]
  ------------------
 5541|     64|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 4, False: 870]
  ------------------
 5542|     64|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    634|            default:
  ------------------
  |  Branch (5544:13): [True: 634, False: 240]
  ------------------
 5545|    634|                return bool_reader_base::allow_text |
 5546|    634|                       bool_reader_base::allow_numeric;
 5547|    874|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    874|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     12|    {
 5428|     12|        scan_error err{scan_error::invalid_scanned_value,
 5429|     12|                       "Failed to read boolean"};
 5430|       |
 5431|     12|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 10, False: 2]
  ------------------
 5432|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 10]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     10|            else {
 5436|     10|                err = r.error();
 5437|     10|            }
 5438|     10|        }
 5439|       |
 5440|     12|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 10, False: 2]
  ------------------
 5441|     10|            auto stdloc = loc.get<std::locale>();
 5442|     10|            const auto& numpunct =
 5443|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     10|            const auto truename = numpunct.truename();
 5445|     10|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     10|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 10]
  ------------------
 5448|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     10|            else {
 5452|     10|                err = r.error();
 5453|     10|            }
 5454|     10|        }
 5455|       |
 5456|     12|        return unexpected(err);
 5457|     12|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    422|    {
 5384|    422|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 422]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    422|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 422]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    422|        return unexpected_scan_error(
 5394|    422|            scan_error::invalid_scanned_value,
 5395|    422|            "Failed to read numeric boolean value: No match");
 5396|    422|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    844|{
 2146|    844|    auto it = read_code_unit(range);
 2147|    844|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    844|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 844]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    844|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    844|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 844, False: 0]
  |  |  ------------------
  ------------------
 2152|    844|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    844|        return unexpected(parse_error::error);
 2154|    844|    }
 2155|       |
 2156|      0|    return *it;
 2157|    844|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5467|     10|    {
 5468|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     10|        const auto shorter = std::pair{
 5470|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 10, False: 0]
  ------------------
 5471|     10|        const auto longer = std::pair{
 5472|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 10]
  ------------------
 5473|       |
 5474|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 10]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 10]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     10|                                     "read_textual: No match");
 5485|     10|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      8|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      8|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      8|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      8|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2185|      8|        return unexpected(parse_error::error);
 2186|      8|    }
 2187|      0|    return it;
 2188|      8|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    920|{
 1857|    920|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    920|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    920|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    920|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    920|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    920|        if (sz < count) {
 1862|    920|            return unexpected(eof_error::eof);
 1863|    920|        }
 1864|       |
 1865|    920|        return ranges::next(range.begin(), count);
 1866|    920|    }
 1867|    920|    else {
 1868|    920|        auto it = range.begin();
 1869|    920|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 920]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  4.68k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.91k, False: 776]
  ------------------
 1874|  3.91k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 144, False: 3.76k]
  ------------------
 1875|    144|                return unexpected(eof_error::eof);
 1876|    144|            }
 1877|  3.91k|        }
 1878|       |
 1879|    776|        return it;
 1880|    920|    }
 1881|    920|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    920|{
 1095|    920|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    920|        return r.size();
 1097|    920|    }
 1098|    920|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    920|                           ranges::const_iterator_t<Range>,
 1100|    920|                           typename detail::basic_scan_buffer<
 1101|    920|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    920|        if constexpr (ranges::common_range<Range>) {
 1103|    920|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    920|        }
 1105|    920|        else {
 1106|    920|            if (r.begin().stores_parent()) {
 1107|    920|                return static_cast<size_t>(
 1108|    920|                    r.begin().parent()->chars_available() -
 1109|    920|                    r.begin().position());
 1110|    920|            }
 1111|    920|            return r.begin().contiguous_segment().size();
 1112|    920|        }
 1113|    920|    }
 1114|    920|    else {
 1115|    920|        return 0;
 1116|    920|    }
 1117|    920|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    474|    {
 5355|    474|        scan_error err{scan_error::invalid_scanned_value,
 5356|    474|                       "Failed to read boolean"};
 5357|       |
 5358|    474|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 412, False: 62]
  ------------------
 5359|    412|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 412]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    412|            else {
 5363|    412|                err = r.error();
 5364|    412|            }
 5365|    412|        }
 5366|       |
 5367|    474|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 450, False: 24]
  ------------------
 5368|    450|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 450]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    450|            else {
 5372|    450|                err = r.error();
 5373|    450|            }
 5374|    450|        }
 5375|       |
 5376|    474|        return unexpected(err);
 5377|    474|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    450|    {
 5402|    450|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 450]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    450|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 450]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    450|        return unexpected_scan_error(
 5412|    450|            scan_error::invalid_scanned_value,
 5413|    450|            "Failed to read textual boolean value: No match");
 5414|    450|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    900|{
 2194|    900|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    900|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    900|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    900|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    900|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 132, False: 768]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    132|    }                                                  \
  |  |  |  | 3671|    900|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    768|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    768|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    768|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    768|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    768|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    768|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 768, False: 0]
  |  |  ------------------
  ------------------
 2201|    768|            return unexpected(parse_error::error);
 2202|    768|        }
 2203|      0|        return it;
 2204|    768|    }
 2205|    768|    else {
 2206|    768|        auto range_it = range.begin();
 2207|    768|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    768|            if (SCN_UNLIKELY(*range_it !=
 2209|    768|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    768|                return unexpected(parse_error::error);
 2211|    768|            }
 2212|    768|        }
 2213|    768|        return it;
 2214|    768|    }
 2215|    768|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    388|    {
 5516|    388|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    388|#if !SCN_DISABLE_LOCALE
 5519|    388|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 26, False: 362]
  ------------------
 5520|     26|            return rd.read_localized(range, loc, value);
 5521|     26|        }
 5522|    362|#endif
 5523|       |
 5524|    362|        return rd.read_classic(range, value);
 5525|    388|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     26|    {
 5428|     26|        scan_error err{scan_error::invalid_scanned_value,
 5429|     26|                       "Failed to read boolean"};
 5430|       |
 5431|     26|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 24, False: 2]
  ------------------
 5432|     24|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 24]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     24|            else {
 5436|     24|                err = r.error();
 5437|     24|            }
 5438|     24|        }
 5439|       |
 5440|     26|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 8, False: 18]
  ------------------
 5441|      8|            auto stdloc = loc.get<std::locale>();
 5442|      8|            const auto& numpunct =
 5443|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|      8|            const auto truename = numpunct.truename();
 5445|      8|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|      8|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 8]
  ------------------
 5448|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|      8|            else {
 5452|      8|                err = r.error();
 5453|      8|            }
 5454|      8|        }
 5455|       |
 5456|     26|        return unexpected(err);
 5457|     26|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5467|      8|    {
 5468|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|      8|        const auto shorter = std::pair{
 5470|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 8, False: 0]
  ------------------
 5471|      8|        const auto longer = std::pair{
 5472|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 8]
  ------------------
 5473|       |
 5474|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 8]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 8]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|      8|                                     "read_textual: No match");
 5485|      8|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6192|  12.6k|    {
 6193|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  12.6k|            auto rd = make_reader<T, char_type>();
 6198|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 686]
  |  |  ------------------
  ------------------
 6199|  11.9k|                return unexpected(e);
 6200|  11.9k|            }
 6201|       |
 6202|    686|            return impl(rd, range, value);
 6203|  12.6k|        }
 6204|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  12.6k|            auto rd = make_reader<T, char_type>();
 6206|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  12.6k|                return unexpected(e);
 6208|  12.6k|            }
 6209|       |
 6210|  12.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  12.6k|                specs.width != 0) {
 6212|  12.6k|                return impl(rd, range, value);
 6213|  12.6k|            }
 6214|       |
 6215|  12.6k|            auto crange = get_as_contiguous(range);
 6216|  12.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  12.6k|            return ranges::next(range.begin(),
 6218|  12.6k|                                ranges::distance(crange.begin(), it));
 6219|  12.6k|        }
 6220|  12.6k|        else {
 6221|  12.6k|            SCN_EXPECT(false);
 6222|  12.6k|            SCN_UNREACHABLE;
 6223|  12.6k|        }
 6224|  12.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    686|    {
 6124|    686|        const bool need_skipped_width =
 6125|    686|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 178, False: 508]
  |  Branch (6125:33): [True: 428, False: 80]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    686|        auto it = rng.begin();
 6129|    686|        std::ptrdiff_t prefix_width = 0;
 6130|    686|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 434, False: 252]
  ------------------
 6131|    434|            auto max_width_view = take_width(rng, specs.precision);
 6132|    434|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    434|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    434|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    434|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    434|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 434]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    434|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    434|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    434|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    434|            it = prefix_result.first.base();
 6135|    434|            prefix_width = prefix_result.second;
 6136|    434|        }
 6137|    252|        else {
 6138|    252|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    252|            std::tie(it, prefix_width) = prefix_result;
 6140|    252|        }
 6141|    686|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    686|        std::ptrdiff_t value_width = 0;
 6145|    686|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 434, False: 252]
  ------------------
 6146|    434|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 6, False: 428]
  ------------------
 6147|      6|                return unexpected_scan_error(
 6148|      6|                    scan_error::invalid_scanned_value,
 6149|      6|                    "Too many fill characters before value, "
 6150|      6|                    "precision exceeded before reading value");
 6151|      6|            }
 6152|       |
 6153|    428|            const auto initial_width = specs.precision - prefix_width;
 6154|    428|            auto max_width_view =
 6155|    428|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    428|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    428|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    428|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    428|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 396]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     32|    }                                                  \
  |  |  |  | 3671|    428|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    396|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    396|            it = w_it.base();
 6158|    396|            value_width = initial_width - w_it.count();
 6159|    396|        }
 6160|    252|        else {
 6161|    252|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 232]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     20|    }                                                  \
  |  | 3671|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    232|                                             specs, value, loc));
 6163|       |
 6164|    232|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 168, False: 64]
  ------------------
 6165|    168|                value_width = calculate_text_width(
 6166|    168|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    168|                        .view());
 6168|    168|            }
 6169|    232|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    628|        std::ptrdiff_t postfix_width = 0;
 6173|    628|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 628, False: 0]
  ------------------
 6174|    628|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    628|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    628|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    628|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    628|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 628]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    628|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    628|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    628|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    628|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    628|                                 value_width));
 6178|    628|            std::tie(it, postfix_width) = postfix_result;
 6179|    628|        }
 6180|       |
 6181|    628|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    628|                                                 value_width, postfix_width);
 6183|    628|            !e) {
  ------------------
  |  Branch (6183:13): [True: 156, False: 472]
  ------------------
 6184|    156|            return unexpected(e);
 6185|    156|        }
 6186|       |
 6187|    472|        return it;
 6188|    628|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|  12.6k|    {
 6193|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  12.6k|            auto rd = make_reader<T, char_type>();
 6198|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 744]
  |  |  ------------------
  ------------------
 6199|  11.9k|                return unexpected(e);
 6200|  11.9k|            }
 6201|       |
 6202|    744|            return impl(rd, range, value);
 6203|  12.6k|        }
 6204|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  12.6k|            auto rd = make_reader<T, char_type>();
 6206|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  12.6k|                return unexpected(e);
 6208|  12.6k|            }
 6209|       |
 6210|  12.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  12.6k|                specs.width != 0) {
 6212|  12.6k|                return impl(rd, range, value);
 6213|  12.6k|            }
 6214|       |
 6215|  12.6k|            auto crange = get_as_contiguous(range);
 6216|  12.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  12.6k|            return ranges::next(range.begin(),
 6218|  12.6k|                                ranges::distance(crange.begin(), it));
 6219|  12.6k|        }
 6220|  12.6k|        else {
 6221|  12.6k|            SCN_EXPECT(false);
 6222|  12.6k|            SCN_UNREACHABLE;
 6223|  12.6k|        }
 6224|  12.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    744|    {
 6124|    744|        const bool need_skipped_width =
 6125|    744|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 186, False: 558]
  |  Branch (6125:33): [True: 434, False: 124]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    744|        auto it = rng.begin();
 6129|    744|        std::ptrdiff_t prefix_width = 0;
 6130|    744|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 442, False: 302]
  ------------------
 6131|    442|            auto max_width_view = take_width(rng, specs.precision);
 6132|    442|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 426]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     16|    }                                                  \
  |  |  |  | 3671|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    426|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    426|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    426|            it = prefix_result.first.base();
 6135|    426|            prefix_width = prefix_result.second;
 6136|    426|        }
 6137|    302|        else {
 6138|    302|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    302|            std::tie(it, prefix_width) = prefix_result;
 6140|    302|        }
 6141|    728|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    728|        std::ptrdiff_t value_width = 0;
 6145|    728|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 426, False: 302]
  ------------------
 6146|    426|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 8, False: 418]
  ------------------
 6147|      8|                return unexpected_scan_error(
 6148|      8|                    scan_error::invalid_scanned_value,
 6149|      8|                    "Too many fill characters before value, "
 6150|      8|                    "precision exceeded before reading value");
 6151|      8|            }
 6152|       |
 6153|    418|            const auto initial_width = specs.precision - prefix_width;
 6154|    418|            auto max_width_view =
 6155|    418|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    418|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    418|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    418|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    418|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    418|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 418, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    418|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    418|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    418|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    418|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    418|    }                                                  \
  |  |  |  | 3671|    418|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    302|        else {
 6161|    302|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 302, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    302|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    302|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    302|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    302|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    302|    }                                                  \
  |  | 3671|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  12.6k|    {
 6193|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  12.6k|            auto rd = make_reader<T, char_type>();
 6198|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 12.4k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  12.4k|            return impl(rd, range, value);
 6203|  12.6k|        }
 6204|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  12.6k|            auto rd = make_reader<T, char_type>();
 6206|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  12.6k|                return unexpected(e);
 6208|  12.6k|            }
 6209|       |
 6210|  12.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  12.6k|                specs.width != 0) {
 6212|  12.6k|                return impl(rd, range, value);
 6213|  12.6k|            }
 6214|       |
 6215|  12.6k|            auto crange = get_as_contiguous(range);
 6216|  12.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  12.6k|            return ranges::next(range.begin(),
 6218|  12.6k|                                ranges::distance(crange.begin(), it));
 6219|  12.6k|        }
 6220|  12.6k|        else {
 6221|  12.6k|            SCN_EXPECT(false);
 6222|  12.6k|            SCN_UNREACHABLE;
 6223|  12.6k|        }
 6224|  12.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  12.4k|    {
 6124|  12.4k|        const bool need_skipped_width =
 6125|  12.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 344, False: 12.1k]
  |  Branch (6125:33): [True: 1.63k, False: 10.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  12.4k|        auto it = rng.begin();
 6129|  12.4k|        std::ptrdiff_t prefix_width = 0;
 6130|  12.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.68k, False: 10.8k]
  ------------------
 6131|  1.68k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.68k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 1.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  1.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.67k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.67k|            it = prefix_result.first.base();
 6135|  1.67k|            prefix_width = prefix_result.second;
 6136|  1.67k|        }
 6137|  10.8k|        else {
 6138|  10.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  10.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  10.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  10.8k|        }
 6141|  12.4k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  12.4k|        std::ptrdiff_t value_width = 0;
 6145|  12.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.67k, False: 10.8k]
  ------------------
 6146|  1.67k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 1.65k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  1.65k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.65k|            auto max_width_view =
 6155|  1.65k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.65k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.07k, False: 582]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.07k|    }                                                  \
  |  |  |  | 3671|  1.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    582|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    582|            it = w_it.base();
 6158|    582|            value_width = initial_width - w_it.count();
 6159|    582|        }
 6160|  10.8k|        else {
 6161|  10.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.54k, False: 2.26k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  8.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  8.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  8.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  8.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  8.54k|    }                                                  \
  |  | 3671|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  2.26k|                                             specs, value, loc));
 6163|       |
 6164|  2.26k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 250, False: 2.01k]
  ------------------
 6165|    250|                value_width = calculate_text_width(
 6166|    250|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    250|                        .view());
 6168|    250|            }
 6169|  2.26k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  2.84k|        std::ptrdiff_t postfix_width = 0;
 6173|  2.84k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 2.36k, False: 482]
  ------------------
 6174|  2.36k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  2.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  2.36k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  2.36k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  2.36k|                                 value_width));
 6178|  2.36k|            std::tie(it, postfix_width) = postfix_result;
 6179|  2.36k|        }
 6180|       |
 6181|  2.84k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  2.84k|                                                 value_width, postfix_width);
 6183|  2.84k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 142, False: 2.70k]
  ------------------
 6184|    142|            return unexpected(e);
 6185|    142|        }
 6186|       |
 6187|  2.70k|        return it;
 6188|  2.84k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  12.6k|    {
 6193|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  12.6k|            auto rd = make_reader<T, char_type>();
 6198|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 12.4k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  12.4k|            return impl(rd, range, value);
 6203|  12.6k|        }
 6204|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  12.6k|            auto rd = make_reader<T, char_type>();
 6206|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  12.6k|                return unexpected(e);
 6208|  12.6k|            }
 6209|       |
 6210|  12.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  12.6k|                specs.width != 0) {
 6212|  12.6k|                return impl(rd, range, value);
 6213|  12.6k|            }
 6214|       |
 6215|  12.6k|            auto crange = get_as_contiguous(range);
 6216|  12.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  12.6k|            return ranges::next(range.begin(),
 6218|  12.6k|                                ranges::distance(crange.begin(), it));
 6219|  12.6k|        }
 6220|  12.6k|        else {
 6221|  12.6k|            SCN_EXPECT(false);
 6222|  12.6k|            SCN_UNREACHABLE;
 6223|  12.6k|        }
 6224|  12.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  12.4k|    {
 6124|  12.4k|        const bool need_skipped_width =
 6125|  12.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 344, False: 12.1k]
  |  Branch (6125:33): [True: 1.63k, False: 10.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  12.4k|        auto it = rng.begin();
 6129|  12.4k|        std::ptrdiff_t prefix_width = 0;
 6130|  12.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.68k, False: 10.8k]
  ------------------
 6131|  1.68k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.68k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 1.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  1.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.67k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.67k|            it = prefix_result.first.base();
 6135|  1.67k|            prefix_width = prefix_result.second;
 6136|  1.67k|        }
 6137|  10.8k|        else {
 6138|  10.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  10.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  10.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  10.8k|        }
 6141|  12.4k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  12.4k|        std::ptrdiff_t value_width = 0;
 6145|  12.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.67k, False: 10.8k]
  ------------------
 6146|  1.67k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 1.65k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  1.65k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.65k|            auto max_width_view =
 6155|  1.65k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.65k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.07k, False: 582]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.07k|    }                                                  \
  |  |  |  | 3671|  1.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    582|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    582|            it = w_it.base();
 6158|    582|            value_width = initial_width - w_it.count();
 6159|    582|        }
 6160|  10.8k|        else {
 6161|  10.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.54k, False: 2.26k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  8.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  8.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  8.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  8.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  8.54k|    }                                                  \
  |  | 3671|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  2.26k|                                             specs, value, loc));
 6163|       |
 6164|  2.26k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 250, False: 2.01k]
  ------------------
 6165|    250|                value_width = calculate_text_width(
 6166|    250|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    250|                        .view());
 6168|    250|            }
 6169|  2.26k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  2.84k|        std::ptrdiff_t postfix_width = 0;
 6173|  2.84k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 2.36k, False: 482]
  ------------------
 6174|  2.36k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  2.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  2.36k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  2.36k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  2.36k|                                 value_width));
 6178|  2.36k|            std::tie(it, postfix_width) = postfix_result;
 6179|  2.36k|        }
 6180|       |
 6181|  2.84k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  2.84k|                                                 value_width, postfix_width);
 6183|  2.84k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 142, False: 2.70k]
  ------------------
 6184|    142|            return unexpected(e);
 6185|    142|        }
 6186|       |
 6187|  2.70k|        return it;
 6188|  2.84k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  12.6k|    {
 6193|  12.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  12.6k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  12.6k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  12.6k|            auto rd = make_reader<T, char_type>();
 6198|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 12.4k]
  |  |  ------------------
  ------------------
 6199|    128|                return unexpected(e);
 6200|    128|            }
 6201|       |
 6202|  12.4k|            return impl(rd, range, value);
 6203|  12.6k|        }
 6204|  12.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  12.6k|            auto rd = make_reader<T, char_type>();
 6206|  12.6k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  12.6k|                return unexpected(e);
 6208|  12.6k|            }
 6209|       |
 6210|  12.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  12.6k|                specs.width != 0) {
 6212|  12.6k|                return impl(rd, range, value);
 6213|  12.6k|            }
 6214|       |
 6215|  12.6k|            auto crange = get_as_contiguous(range);
 6216|  12.6k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  12.6k|            return ranges::next(range.begin(),
 6218|  12.6k|                                ranges::distance(crange.begin(), it));
 6219|  12.6k|        }
 6220|  12.6k|        else {
 6221|  12.6k|            SCN_EXPECT(false);
 6222|  12.6k|            SCN_UNREACHABLE;
 6223|  12.6k|        }
 6224|  12.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  12.4k|    {
 6124|  12.4k|        const bool need_skipped_width =
 6125|  12.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 344, False: 12.1k]
  |  Branch (6125:33): [True: 1.63k, False: 10.5k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  12.4k|        auto it = rng.begin();
 6129|  12.4k|        std::ptrdiff_t prefix_width = 0;
 6130|  12.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 1.68k, False: 10.8k]
  ------------------
 6131|  1.68k|            auto max_width_view = take_width(rng, specs.precision);
 6132|  1.68k|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|  1.68k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.68k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.68k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 1.67k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     12|    }                                                  \
  |  |  |  | 3671|  1.68k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.67k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|  1.67k|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|  1.67k|            it = prefix_result.first.base();
 6135|  1.67k|            prefix_width = prefix_result.second;
 6136|  1.67k|        }
 6137|  10.8k|        else {
 6138|  10.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  10.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 10.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  10.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  10.8k|        }
 6141|  12.4k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  12.4k|        std::ptrdiff_t value_width = 0;
 6145|  12.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 1.67k, False: 10.8k]
  ------------------
 6146|  1.67k|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 16, False: 1.65k]
  ------------------
 6147|     16|                return unexpected_scan_error(
 6148|     16|                    scan_error::invalid_scanned_value,
 6149|     16|                    "Too many fill characters before value, "
 6150|     16|                    "precision exceeded before reading value");
 6151|     16|            }
 6152|       |
 6153|  1.65k|            const auto initial_width = specs.precision - prefix_width;
 6154|  1.65k|            auto max_width_view =
 6155|  1.65k|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|  1.65k|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|  1.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.07k, False: 582]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.07k|    }                                                  \
  |  |  |  | 3671|  1.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    582|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    582|            it = w_it.base();
 6158|    582|            value_width = initial_width - w_it.count();
 6159|    582|        }
 6160|  10.8k|        else {
 6161|  10.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.54k, False: 2.26k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  8.54k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  8.54k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  8.54k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  8.54k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  8.54k|    }                                                  \
  |  | 3671|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  2.26k|                                             specs, value, loc));
 6163|       |
 6164|  2.26k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 250, False: 2.01k]
  ------------------
 6165|    250|                value_width = calculate_text_width(
 6166|    250|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    250|                        .view());
 6168|    250|            }
 6169|  2.26k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  2.84k|        std::ptrdiff_t postfix_width = 0;
 6173|  2.84k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 2.36k, False: 482]
  ------------------
 6174|  2.36k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  2.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  2.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  2.36k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  2.36k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  2.36k|                                 value_width));
 6178|  2.36k|            std::tie(it, postfix_width) = postfix_result;
 6179|  2.36k|        }
 6180|       |
 6181|  2.84k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  2.84k|                                                 value_width, postfix_width);
 6183|  2.84k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 142, False: 2.70k]
  ------------------
 6184|    142|            return unexpected(e);
 6185|    142|        }
 6186|       |
 6187|  2.70k|        return it;
 6188|  2.84k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  5.50k|{
 5795|  5.50k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.50k]
  |  |  ------------------
  ------------------
 5796|      0|        return unexpected(e);
 5797|      0|    }
 5798|       |
 5799|  5.50k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 612, False: 4.89k]
  ------------------
 5800|    612|        return range.begin();
 5801|    612|    }
 5802|       |
 5803|  4.89k|    return skip_classic_whitespace(range);
 5804|  5.50k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5870|    612|    {
 5871|    612|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    612|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    612|                          basic_contiguous_scan_context<char_type>>) {
 5875|    612|            auto rd = make_reader<T, char_type>();
 5876|    612|            return impl(rd, range, value);
 5877|    612|        }
 5878|    612|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    612|            auto rd = make_reader<T, char_type>();
 5880|    612|            if (!is_segment_contiguous(range)) {
 5881|    612|                return impl(rd, range, value);
 5882|    612|            }
 5883|    612|            auto crange = get_as_contiguous(range);
 5884|    612|            SCN_TRY(it, impl(rd, crange, value));
 5885|    612|            return ranges::next(range.begin(),
 5886|    612|                                ranges::distance(crange.begin(), it));
 5887|    612|        }
 5888|    612|        else {
 5889|    612|            SCN_EXPECT(false);
 5890|    612|            SCN_UNREACHABLE;
 5891|    612|        }
 5892|    612|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    612|    {
 5863|    612|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    612|                        .transform_error(make_eof_scan_error));
 5865|    612|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    612|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    612|    {
 3528|    612|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    612|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    612|        return read_default_with_base(range, value, 10);
 3530|    612|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    612|    {
 3492|    612|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    612|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    612|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    612|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    612|                return unexpected_scan_error(
 3498|    612|                    scan_error::invalid_scanned_value,
 3499|    612|                    "Unexpected '-' sign when parsing an "
 3500|    612|                    "unsigned value");
 3501|    612|            }
 3502|    612|        }
 3503|       |
 3504|    612|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 612]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.22k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.22k|                parse_integer_digits_without_thsep(
 3511|  1.22k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.22k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.22k|        auto buf = make_contiguous_buffer(
 3515|  1.22k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.22k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 612, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    612|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    612|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    612|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    612|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    612|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.22k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5870|    612|    {
 5871|    612|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    612|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    612|                          basic_contiguous_scan_context<char_type>>) {
 5875|    612|            auto rd = make_reader<T, char_type>();
 5876|    612|            return impl(rd, range, value);
 5877|    612|        }
 5878|    612|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    612|            auto rd = make_reader<T, char_type>();
 5880|    612|            if (!is_segment_contiguous(range)) {
 5881|    612|                return impl(rd, range, value);
 5882|    612|            }
 5883|    612|            auto crange = get_as_contiguous(range);
 5884|    612|            SCN_TRY(it, impl(rd, crange, value));
 5885|    612|            return ranges::next(range.begin(),
 5886|    612|                                ranges::distance(crange.begin(), it));
 5887|    612|        }
 5888|    612|        else {
 5889|    612|            SCN_EXPECT(false);
 5890|    612|            SCN_UNREACHABLE;
 5891|    612|        }
 5892|    612|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    612|    {
 5863|    612|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    612|                        .transform_error(make_eof_scan_error));
 5865|    612|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    612|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3527|    612|    {
 3528|    612|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    612|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3529|    612|        return read_default_with_base(range, value, 10);
 3530|    612|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    612|    {
 3492|    612|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    612|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    612|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    612|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 612]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    612|        }
 3503|       |
 3504|    612|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 612]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.22k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.22k|                parse_integer_digits_without_thsep(
 3511|  1.22k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.22k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.22k|        auto buf = make_contiguous_buffer(
 3515|  1.22k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.22k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 612, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    612|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    612|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    612|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    612|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    612|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.22k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5870|    612|    {
 5871|    612|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    612|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    612|                          basic_contiguous_scan_context<char_type>>) {
 5875|    612|            auto rd = make_reader<T, char_type>();
 5876|    612|            return impl(rd, range, value);
 5877|    612|        }
 5878|    612|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    612|            auto rd = make_reader<T, char_type>();
 5880|    612|            if (!is_segment_contiguous(range)) {
 5881|    612|                return impl(rd, range, value);
 5882|    612|            }
 5883|    612|            auto crange = get_as_contiguous(range);
 5884|    612|            SCN_TRY(it, impl(rd, crange, value));
 5885|    612|            return ranges::next(range.begin(),
 5886|    612|                                ranges::distance(crange.begin(), it));
 5887|    612|        }
 5888|    612|        else {
 5889|    612|            SCN_EXPECT(false);
 5890|    612|            SCN_UNREACHABLE;
 5891|    612|        }
 5892|    612|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5862|    612|    {
 5863|    612|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    612|                        .transform_error(make_eof_scan_error));
 5865|    612|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    612|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5747|  1.18k|    {
 5748|  1.18k|        return true;
 5749|  1.18k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5764|  1.00k|    {
 5765|  1.00k|        detail::format_specs specs{};
 5766|  1.00k|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|  1.00k|        std::uintptr_t intvalue{};
 5769|  1.00k|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|  1.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.00k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.00k|    }                                                  \
  |  |  |  | 3671|  1.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|  1.00k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5870|    612|    {
 5871|    612|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    612|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    612|                          basic_contiguous_scan_context<char_type>>) {
 5875|    612|            auto rd = make_reader<T, char_type>();
 5876|    612|            return impl(rd, range, value);
 5877|    612|        }
 5878|    612|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    612|            auto rd = make_reader<T, char_type>();
 5880|    612|            if (!is_segment_contiguous(range)) {
 5881|    612|                return impl(rd, range, value);
 5882|    612|            }
 5883|    612|            auto crange = get_as_contiguous(range);
 5884|    612|            SCN_TRY(it, impl(rd, crange, value));
 5885|    612|            return ranges::next(range.begin(),
 5886|    612|                                ranges::distance(crange.begin(), it));
 5887|    612|        }
 5888|    612|        else {
 5889|    612|            SCN_EXPECT(false);
 5890|    612|            SCN_UNREACHABLE;
 5891|    612|        }
 5892|    612|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    612|    {
 5863|    612|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    612|                        .transform_error(make_eof_scan_error));
 5865|    612|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    612|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.38k|    {
 3035|  1.38k|        return true;
 3036|  1.38k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5503|    612|    {
 5504|    612|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    612|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5505|       |
 5506|    612|        return bool_reader<CharT>{}.read_classic(range, value);
 5507|    612|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5354|  1.06k|    {
 5355|  1.06k|        scan_error err{scan_error::invalid_scanned_value,
 5356|  1.06k|                       "Failed to read boolean"};
 5357|       |
 5358|  1.06k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 1.01k, False: 46]
  ------------------
 5359|  1.01k|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 1.01k]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|  1.01k|            else {
 5363|  1.01k|                err = r.error();
 5364|  1.01k|            }
 5365|  1.01k|        }
 5366|       |
 5367|  1.06k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 1.04k, False: 16]
  ------------------
 5368|  1.04k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 1.04k]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|  1.04k|            else {
 5372|  1.04k|                err = r.error();
 5373|  1.04k|            }
 5374|  1.04k|        }
 5375|       |
 5376|  1.06k|        return unexpected(err);
 5377|  1.06k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5383|  1.05k|    {
 5384|  1.05k|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 1.05k]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|  1.05k|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 1.05k]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|  1.05k|        return unexpected_scan_error(
 5394|  1.05k|            scan_error::invalid_scanned_value,
 5395|  1.05k|            "Failed to read numeric boolean value: No match");
 5396|  1.05k|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5401|  1.04k|    {
 5402|  1.04k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 1.04k]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|  1.04k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 1.04k]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|  1.04k|        return unexpected_scan_error(
 5412|  1.04k|            scan_error::invalid_scanned_value,
 5413|  1.04k|            "Failed to read textual boolean value: No match");
 5414|  1.04k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.09k|{
 2194|  2.09k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  2.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  2.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  2.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 130, False: 1.96k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    130|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    130|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    130|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    130|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    130|    }                                                  \
  |  |  |  | 3671|  2.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.96k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.96k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.96k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.96k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.96k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  1.96k|            return unexpected(parse_error::error);
 2202|  1.96k|        }
 2203|  1.96k|        return it;
 2204|  1.96k|    }
 2205|  1.96k|    else {
 2206|  1.96k|        auto range_it = range.begin();
 2207|  1.96k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 1.96k, False: 0]
  ------------------
 2208|  1.96k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.96k, False: 0]
  |  |  ------------------
  ------------------
 2209|  1.96k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.96k|                return unexpected(parse_error::error);
 2211|  1.96k|            }
 2212|  1.96k|        }
 2213|      0|        return it;
 2214|  1.96k|    }
 2215|  1.96k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5870|    612|    {
 5871|    612|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    612|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    612|                          basic_contiguous_scan_context<char_type>>) {
 5875|    612|            auto rd = make_reader<T, char_type>();
 5876|    612|            return impl(rd, range, value);
 5877|    612|        }
 5878|    612|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    612|            auto rd = make_reader<T, char_type>();
 5880|    612|            if (!is_segment_contiguous(range)) {
 5881|    612|                return impl(rd, range, value);
 5882|    612|            }
 5883|    612|            auto crange = get_as_contiguous(range);
 5884|    612|            SCN_TRY(it, impl(rd, crange, value));
 5885|    612|            return ranges::next(range.begin(),
 5886|    612|                                ranges::distance(crange.begin(), it));
 5887|    612|        }
 5888|    612|        else {
 5889|    612|            SCN_EXPECT(false);
 5890|    612|            SCN_UNREACHABLE;
 5891|    612|        }
 5892|    612|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    612|    {
 5863|    612|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    612|                        .transform_error(make_eof_scan_error));
 5865|    612|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    612|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|    612|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|    612|    {
 5871|    612|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    612|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    612|                          basic_contiguous_scan_context<char_type>>) {
 5875|    612|            auto rd = make_reader<T, char_type>();
 5876|    612|            return impl(rd, range, value);
 5877|    612|        }
 5878|    612|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    612|            auto rd = make_reader<T, char_type>();
 5880|    612|            if (!is_segment_contiguous(range)) {
 5881|    612|                return impl(rd, range, value);
 5882|    612|            }
 5883|    612|            auto crange = get_as_contiguous(range);
 5884|    612|            SCN_TRY(it, impl(rd, crange, value));
 5885|    612|            return ranges::next(range.begin(),
 5886|    612|                                ranges::distance(crange.begin(), it));
 5887|    612|        }
 5888|    612|        else {
 5889|    612|            SCN_EXPECT(false);
 5890|    612|            SCN_UNREACHABLE;
 5891|    612|        }
 5892|    612|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|    612|    {
 5863|    612|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    612|                        .transform_error(make_eof_scan_error));
 5865|    612|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    612|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|    612|    {
 4152|    612|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    612|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|    612|        float_reader<CharT> rd{};
 4155|    612|        return read_impl<Range>(
 4156|    612|            range, rd,
 4157|    612|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    612|                return r.read_source(SCN_FWD(args)...);
 4159|    612|            },
 4160|    612|            value);
 4161|    612|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    612|    {
  754|    612|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    612|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    612|              cvref<T> obj = *get<T>(fn);
  745|    612|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    612|                  obj(static_cast<decltype(args)>(args)...);
  747|    612|              }
  748|    612|              else {
  749|    612|                  return obj(static_cast<decltype(args)>(args)...);
  750|    612|              }
  751|    612|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    612|    {
  684|    612|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    612|            return static_cast<T*>(s.m_cp);
  686|    612|        }
  687|    612|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    612|            return static_cast<T*>(s.m_p);
  689|    612|        }
  690|    612|        else {
  691|    612|            return reinterpret_cast<T*>(s.m_fp);
  692|    612|        }
  693|    612|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|    612|            [](float_reader<CharT>& r, auto&&... args) {
 4158|    612|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|    612|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    612|        {
  662|    612|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    612|    {
 5871|    612|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    612|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    612|                          basic_contiguous_scan_context<char_type>>) {
 5875|    612|            auto rd = make_reader<T, char_type>();
 5876|    612|            return impl(rd, range, value);
 5877|    612|        }
 5878|    612|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    612|            auto rd = make_reader<T, char_type>();
 5880|    612|            if (!is_segment_contiguous(range)) {
 5881|    612|                return impl(rd, range, value);
 5882|    612|            }
 5883|    612|            auto crange = get_as_contiguous(range);
 5884|    612|            SCN_TRY(it, impl(rd, crange, value));
 5885|    612|            return ranges::next(range.begin(),
 5886|    612|                                ranges::distance(crange.begin(), it));
 5887|    612|        }
 5888|    612|        else {
 5889|    612|            SCN_EXPECT(false);
 5890|    612|            SCN_UNREACHABLE;
 5891|    612|        }
 5892|    612|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    612|    {
 5863|    612|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    612|                        .transform_error(make_eof_scan_error));
 5865|    612|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    612|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    612|    {
 5266|    612|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    612|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    612|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    612|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    612|    {
 5871|    612|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    612|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    612|                          basic_contiguous_scan_context<char_type>>) {
 5875|    612|            auto rd = make_reader<T, char_type>();
 5876|    612|            return impl(rd, range, value);
 5877|    612|        }
 5878|    612|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    612|            auto rd = make_reader<T, char_type>();
 5880|    612|            if (!is_segment_contiguous(range)) {
 5881|    612|                return impl(rd, range, value);
 5882|    612|            }
 5883|    612|            auto crange = get_as_contiguous(range);
 5884|    612|            SCN_TRY(it, impl(rd, crange, value));
 5885|    612|            return ranges::next(range.begin(),
 5886|    612|                                ranges::distance(crange.begin(), it));
 5887|    612|        }
 5888|    612|        else {
 5889|    612|            SCN_EXPECT(false);
 5890|    612|            SCN_UNREACHABLE;
 5891|    612|        }
 5892|    612|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|    612|    {
 5863|    612|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    612|                        .transform_error(make_eof_scan_error));
 5865|    612|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    612|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|    612|    {
 5266|    612|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    612|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    612|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    612|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|    612|    {
 5871|    612|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|    612|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|    612|                          basic_contiguous_scan_context<char_type>>) {
 5875|    612|            auto rd = make_reader<T, char_type>();
 5876|    612|            return impl(rd, range, value);
 5877|    612|        }
 5878|    612|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|    612|            auto rd = make_reader<T, char_type>();
 5880|    612|            if (!is_segment_contiguous(range)) {
 5881|    612|                return impl(rd, range, value);
 5882|    612|            }
 5883|    612|            auto crange = get_as_contiguous(range);
 5884|    612|            SCN_TRY(it, impl(rd, crange, value));
 5885|    612|            return ranges::next(range.begin(),
 5886|    612|                                ranges::distance(crange.begin(), it));
 5887|    612|        }
 5888|    612|        else {
 5889|    612|            SCN_EXPECT(false);
 5890|    612|            SCN_UNREACHABLE;
 5891|    612|        }
 5892|    612|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|    612|    {
 5863|    612|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|    612|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    612|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    612|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    612|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 612]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    612|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    612|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|    612|                        .transform_error(make_eof_scan_error));
 5865|    612|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|    612|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|    612|    {
 5266|    612|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    612|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|    612|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|    612|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   414k|    {
 2879|   414k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   744k|    {
 2883|   744k|        return m_current;
 2884|   744k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   401k|    {
 2888|   401k|        return m_range.end();
 2889|   401k|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   224k|{
 1221|       |    // TODO: optimize
 1222|   224k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   224k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   224k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   224k|    auto res = get_next_code_point(str);
 1224|   224k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   224k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  73.0k|    {
 2903|  73.0k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  73.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  73.0k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  73.0k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 73.0k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  73.0k|        }
 2909|  73.0k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  73.0k|    static_cast<    \
  |  |  929|  73.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  73.0k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   103k|    {
 2893|   103k|        return ranges::subrange{begin(), end()};
 2894|   103k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_b:
 6036|  2.16k|    {
 6037|  2.16k|        const bool need_skipped_width =
 6038|  2.16k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 124, False: 2.04k]
  |  Branch (6038:33): [True: 2.04k, False: 0]
  ------------------
 6039|  2.16k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  2.16k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 72, False: 2.09k]
  ------------------
 6043|  2.16k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 318, False: 1.77k]
  ------------------
 6044|    390|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    390|                             need_skipped_width);
 6046|    390|        }
 6047|  1.77k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.66k, False: 110]
  |  Branch (6047:56): [True: 1.39k, False: 268]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.39k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 1.39k, False: 0]
  ------------------
 6051|  1.39k|                auto max_width_view = take_width(rng, specs.precision);
 6052|  1.39k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|  1.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|  1.39k|                                  .transform_error(make_eof_scan_error));
 6054|  1.39k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|  1.39k|            }
 6056|      0|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|      0|                            make_eof_scan_error));
 6058|       |
 6059|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 0]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|      0|            return result_type{it, 0};
 6067|      0|        }
 6068|       |
 6069|    378|        return result_type{rng.begin(), 0};
 6070|  1.77k|    }
_ZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEb:
 5950|    390|{
 5951|    390|    using char_type = detail::char_t<Range>;
 5952|    390|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5953|       |
 5954|    390|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5954:9): [True: 390, False: 0]
  ------------------
 5955|    390|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5956|    390|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5957|       |
 5958|    390|        if (max_width == 0) {
  ------------------
  |  Branch (5958:13): [True: 0, False: 390]
  ------------------
 5959|      0|            auto it = read_while_code_unit(range, pred);
 5960|       |
 5961|      0|            if (want_skipped_width) {
  ------------------
  |  Branch (5961:17): [True: 0, False: 0]
  ------------------
 5962|      0|                auto prefix_width =
 5963|      0|                    static_cast<std::ptrdiff_t>(
 5964|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5965|      0|                    ranges::distance(range.begin(), it);
 5966|      0|                return result_type{it, prefix_width};
 5967|      0|            }
 5968|      0|            return result_type{it, 0};
 5969|      0|        }
 5970|       |
 5971|    390|        auto max_width_view = take_width(range, max_width);
 5972|    390|        auto w_it = read_while_code_unit(max_width_view, pred);
 5973|       |
 5974|    390|        if (want_skipped_width) {
  ------------------
  |  Branch (5974:13): [True: 390, False: 0]
  ------------------
 5975|    390|            return result_type{w_it.base(), max_width - w_it.count()};
 5976|    390|        }
 5977|      0|        return result_type{w_it.base(), 0};
 5978|    390|    }
 5979|       |
 5980|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5981|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5981:9): [True: 0, False: 0]
  ------------------
 5982|      0|        auto it = read_while_code_units(range, fill_chars);
 5983|       |
 5984|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5984:13): [True: 0, False: 0]
  ------------------
 5985|      0|            auto prefix_width =
 5986|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5987|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5988|      0|            return result_type{it, prefix_width};
 5989|      0|        }
 5990|      0|        return result_type{it, 0};
 5991|      0|    }
 5992|       |
 5993|      0|    auto max_width_view = take_width(range, max_width);
 5994|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5995|       |
 5996|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5996:9): [True: 0, False: 0]
  ------------------
 5997|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5998|      0|    }
 5999|      0|    return result_type{w_it.base(), 0};
 6000|      0|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_:
  753|    390|    {
  754|    390|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_ST_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESZ_w:
  743|    464|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    464|              cvref<T> obj = *get<T>(fn);
  745|    464|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    464|                  obj(static_cast<decltype(args)>(args)...);
  747|    464|              }
  748|    464|              else {
  749|    464|                  return obj(static_cast<decltype(args)>(args)...);
  750|    464|              }
  751|    464|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESI_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    464|    {
  684|    464|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    464|            return static_cast<T*>(s.m_cp);
  686|    464|        }
  687|    464|        else if constexpr (std::is_object_v<T>) {
  688|    464|            return static_cast<T*>(s.m_p);
  689|    464|        }
  690|    464|        else {
  691|    464|            return reinterpret_cast<T*>(s.m_fp);
  692|    464|        }
  693|    464|    }
_ZZN3scn2v34impl9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESF_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5956|    464|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRT_EEEElEEEESJ_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSJ_:
  666|    390|        {
  667|    390|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|    390|{
 1976|    390|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    390|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|    390|{
 1957|    390|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    390|        return std::find_if(range.begin(), range.end(), pred);
 1959|    390|    }
 1960|    390|    else {
 1961|    390|        auto first = range.begin();
 1962|    522|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 464, False: 58]
  ------------------
 1963|    464|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 332, False: 132]
  ------------------
 1964|    332|                return first;
 1965|    332|            }
 1966|    464|        }
 1967|     58|        return first;
 1968|    390|    }
 1969|    390|}
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE5beginEv:
 2809|  3.18k|    {
 2810|  3.18k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  3.18k|                                      m_count};
 2812|  3.18k|    }
_ZNK3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvE3getEv:
 2716|  11.0k|    {
 2717|  11.0k|        return view;
 2718|  11.0k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEC2ES6_SF_l:
 2381|  3.18k|    {
 2382|  3.18k|    }
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2780|  1.91k|        {
 2781|  1.91k|            return !(y == x);
 2782|  1.91k|        }
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEERKNS7_ISD_E8sentinelILb1EEE:
 2769|  4.71k|        {
 2770|  4.71k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 58, False: 4.65k]
  |  Branch (2770:39): [True: 58, False: 0]
  ------------------
 2771|  4.71k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 0, False: 4.65k]
  ------------------
 2772|  4.71k|        }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE14multibyte_leftEv:
 2420|     58|    {
 2421|     58|        return m_multibyte_left;
 2422|     58|    }
_ZNK3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE3endEv:
 2815|  4.71k|    {
 2816|  4.71k|        return sentinel<true>{m_base.get().end()};
 2817|  4.71k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEE8sentinelILb1EEC2ENSA_8sentinelILb1EEE:
 2750|  4.71k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEdeEv:
 2425|  3.25k|    {
 2426|  3.25k|        return *m_current;
 2427|  3.25k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEEppEv:
 2434|  1.52k|    {
 2435|  1.52k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|  1.52k|        _increment_current();
 2437|  1.52k|        return *this;
 2438|  1.52k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE18_increment_currentEv:
 2667|  1.52k|    {
 2668|  1.52k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 1.52k, False: 0]
  ------------------
 2669|  1.52k|            auto cplen = _get_cp_length_at_current();
 2670|  1.52k|            m_multibyte_left = cplen - 1;
 2671|  1.52k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|  1.52k|        }
 2673|      0|        else {
 2674|      0|            --m_multibyte_left;
 2675|      0|        }
 2676|       |
 2677|  1.52k|        ++m_current;
 2678|  1.52k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE25_get_cp_length_at_currentEv:
 2638|  1.52k|    {
 2639|  1.52k|        return static_cast<difference_type>(
 2640|  1.52k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|  1.52k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE30_get_width_at_current_cp_startEl:
 2644|  1.52k|    {
 2645|  1.52k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|  1.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.52k]
  |  |  ------------------
  ------------------
 2646|      0|            return 0;
 2647|      0|        }
 2648|       |
 2649|  1.52k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 1.52k, False: 0]
  ------------------
 2650|  1.52k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|  1.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|  1.52k|            auto cp = static_cast<char32_t>(*m_current);
 2652|  1.52k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|  1.52k|        }
 2654|       |
 2655|      0|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|      0|                                           cplen);
 2657|      0|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2658|      0|            return 0;
 2659|      0|        }
 2660|       |
 2661|      0|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|      0|        return static_cast<difference_type>(
 2663|      0|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|      0|    }
_ZNK3scn2v34impl14_take_width_fnclINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEEDTtlS4_fp_fp0_EERKT_l:
 2831|  1.78k|    {
 2832|  1.78k|        return take_width_view{r, n};
 2833|  1.78k|    }
_ZN3scn2v34impl15take_width_viewINS2_INS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEEC2ERKSA_l:
 2800|  1.78k|    {
 2801|  1.78k|    }
_ZN3scn2v34impl23take_width_view_storageINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEvEC2ERKSB_:
 2713|  1.78k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.39k|{
 2951|  1.39k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.39k, False: 0]
  ------------------
 2952|  1.39k|        auto it = read_while_classic_space(range);
 2953|  1.39k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.39k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.39k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  1.39k|        return it;
 2959|  1.39k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.39k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.39k|{
 2117|  1.39k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  1.39k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  1.39k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  1.39k|        auto buf = make_contiguous_buffer(range);
 2121|  1.39k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.39k|        return ranges::next(range.begin(),
 2123|  1.39k|                            ranges::distance(buf.view().begin(), it));
 2124|  1.39k|    }
 2125|  1.39k|    else {
 2126|  1.39k|        auto it = range.begin();
 2127|       |
 2128|  1.39k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  1.39k|            auto seg = get_contiguous_beginning(range);
 2130|  1.39k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.39k|                seg_it != seg.end()) {
 2132|  1.39k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  1.39k|            }
 2134|  1.39k|            ranges::advance(it, seg.size());
 2135|  1.39k|        }
 2136|       |
 2137|  1.39k|        return read_while_code_point(
 2138|  1.39k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.39k|    }
 2140|  1.39k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.39k|{
 2082|  1.39k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.39k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.39k|{
 2061|  1.39k|    auto it = range.begin();
 2062|  1.39k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.39k, False: 0]
  ------------------
 2063|  1.39k|        const auto val =
 2064|  1.39k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.39k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.39k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.39k, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.39k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.39k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.39k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.39k, False: 0]
  ------------------
 2069|  1.39k|                return it;
 2070|  1.39k|            }
 2071|  1.39k|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|  1.39k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISP_EEE4typeEEESP_:
 1898|  1.39k|{
 1899|  1.39k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.39k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.39k|    auto it = range.begin();
 1903|  1.39k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.39k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.39k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.39k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.39k, False: 0]
  ------------------
 1912|  1.39k|        ++it;
 1913|  1.39k|        return {it, string_type(1, *range.begin())};
 1914|  1.39k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.39k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEEbT_:
  943|  2.79k|{
  944|  2.79k|    return is_range_eof(r.begin(), r.end());
  945|  2.79k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEENS8_ISE_E8sentinelILb1EEEEEbT_T0_:
  927|  2.79k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.79k|    {
  937|  2.79k|        return begin == end;
  938|  2.79k|    }
  939|  2.79k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorINS4_IPKwS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEwE8is_validEv:
 1889|  1.39k|    {
 1890|  1.39k|        return !codepoint.empty();
 1891|  1.39k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  1.39k|    {
  754|  1.39k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.39k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.39k|              cvref<T> obj = *get<T>(fn);
  745|  1.39k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.39k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.39k|              }
  748|  1.39k|              else {
  749|  1.39k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.39k|              }
  751|  1.39k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS6_INS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.39k|    {
  684|  1.39k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.39k|            return static_cast<T*>(s.m_cp);
  686|  1.39k|        }
  687|  1.39k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.39k|            return static_cast<T*>(s.m_p);
  689|  1.39k|        }
  690|  1.39k|        else {
  691|  1.39k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.39k|        }
  693|  1.39k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS3_INS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.39k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS7_INS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  1.39k|        {
  662|  1.39k|        }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorINS8_IPKwSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENSC_ISE_E8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  1.39k|{
  950|  1.39k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.39k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  1.39k|    return eof_error::good;
  954|  1.39k|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE4baseEv:
 2412|  6.43k|    {
 2413|  6.43k|        return m_current;
 2414|  6.43k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorINS3_IPKwS5_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEEE5countEv:
 2416|  6.49k|    {
 2417|  6.49k|        return m_count;
 2418|  6.49k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  24.7k|    {
 6037|  24.7k|        const bool need_skipped_width =
 6038|  24.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 20.1k, False: 4.58k]
  |  Branch (6038:33): [True: 0, False: 4.58k]
  ------------------
 6039|  24.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  24.7k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 72, False: 24.7k]
  ------------------
 6043|  24.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 232, False: 24.4k]
  ------------------
 6044|    304|            return skip_fill(rng, specs.precision, specs.fill,
 6045|    304|                             need_skipped_width);
 6046|    304|        }
 6047|  24.4k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 24.0k, False: 396]
  |  Branch (6047:56): [True: 3.05k, False: 21.0k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  3.05k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 3.05k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  6.10k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  3.05k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  3.05k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  3.05k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.05k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 3.05k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  3.05k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.05k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  6.10k|                            make_eof_scan_error));
 6058|       |
 6059|  6.10k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 2.44k, False: 606]
  ------------------
 6060|  2.44k|                return result_type{
 6061|  2.44k|                    it,
 6062|  2.44k|                    calculate_text_width(make_contiguous_buffer(
 6063|  2.44k|                                             ranges::subrange{rng.begin(), it})
 6064|  2.44k|                                             .view())};
 6065|  2.44k|            }
 6066|    606|            return result_type{it, 0};
 6067|  6.10k|        }
 6068|       |
 6069|  21.4k|        return result_type{rng.begin(), 0};
 6070|  24.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  3.10k|    {
 6079|  3.10k|        const bool need_skipped_width =
 6080|  3.10k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 1.46k, False: 1.64k]
  |  Branch (6080:33): [True: 340, False: 1.30k]
  ------------------
 6081|  3.10k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  3.10k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 76, False: 3.03k]
  ------------------
 6084|  3.10k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 112, False: 2.91k]
  ------------------
 6085|    188|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 100, False: 88]
  ------------------
 6086|    188|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 62, False: 38]
  ------------------
 6087|     62|                return result_type{rng.begin(), 0};
 6088|     62|            }
 6089|    126|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|    126|                             specs.fill, need_skipped_width);
 6091|    188|        }
 6092|  2.91k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 2.89k, False: 22]
  ------------------
 6093|  2.91k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 2.47k, False: 420]
  ------------------
 6094|  2.91k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 1.14k, False: 1.33k]
  |  Branch (6094:35): [True: 1.12k, False: 20]
  ------------------
 6095|  2.47k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 188, False: 1.16k]
  ------------------
 6096|  1.35k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 156, False: 32]
  ------------------
 6097|  1.27k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 156, False: 1.12k]
  ------------------
 6098|    156|                const auto initial_width =
 6099|    156|                    specs.precision - prefix_width - value_width;
 6100|    156|                auto max_width_view = take_width(rng, initial_width);
 6101|    156|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|    156|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    156|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    156|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 156]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    156|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    156|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|    156|                                  .transform_error(make_eof_scan_error));
 6103|    156|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|    156|            }
 6105|  2.24k|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|  1.12k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.12k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.12k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.12k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.12k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|  2.24k|                            make_eof_scan_error));
 6107|       |
 6108|  2.24k|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 1.12k, False: 0]
  ------------------
 6109|  1.12k|                return result_type{
 6110|  1.12k|                    it,
 6111|  1.12k|                    calculate_text_width(make_contiguous_buffer(
 6112|  1.12k|                                             ranges::subrange{rng.begin(), it})
 6113|  1.12k|                                             .view())};
 6114|  1.12k|            }
 6115|      0|            return result_type{it, 0};
 6116|  2.24k|        }
 6117|  1.64k|        return result_type{rng.begin(), 0};
 6118|  2.91k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6192|  7.84k|    {
 6193|  7.84k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.84k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.84k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.84k|            auto rd = make_reader<T, char_type>();
 6198|  7.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.18k, False: 664]
  |  |  ------------------
  ------------------
 6199|  7.18k|                return unexpected(e);
 6200|  7.18k|            }
 6201|       |
 6202|    664|            return impl(rd, range, value);
 6203|  7.84k|        }
 6204|  7.84k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.84k|            auto rd = make_reader<T, char_type>();
 6206|  7.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.84k|                return unexpected(e);
 6208|  7.84k|            }
 6209|       |
 6210|  7.84k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.84k|                specs.width != 0) {
 6212|  7.84k|                return impl(rd, range, value);
 6213|  7.84k|            }
 6214|       |
 6215|  7.84k|            auto crange = get_as_contiguous(range);
 6216|  7.84k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.84k|            return ranges::next(range.begin(),
 6218|  7.84k|                                ranges::distance(crange.begin(), it));
 6219|  7.84k|        }
 6220|  7.84k|        else {
 6221|  7.84k|            SCN_EXPECT(false);
 6222|  7.84k|            SCN_UNREACHABLE;
 6223|  7.84k|        }
 6224|  7.84k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    664|    {
 6124|    664|        const bool need_skipped_width =
 6125|    664|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 322, False: 342]
  |  Branch (6125:33): [True: 216, False: 126]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    664|        auto it = rng.begin();
 6129|    664|        std::ptrdiff_t prefix_width = 0;
 6130|    664|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 228, False: 436]
  ------------------
 6131|    228|            auto max_width_view = take_width(rng, specs.precision);
 6132|    228|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    228|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    228|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    228|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 228]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    228|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    228|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    228|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    228|            it = prefix_result.first.base();
 6135|    228|            prefix_width = prefix_result.second;
 6136|    228|        }
 6137|    436|        else {
 6138|    436|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    436|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    436|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    436|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    436|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 436]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    436|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    436|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    436|            std::tie(it, prefix_width) = prefix_result;
 6140|    436|        }
 6141|    664|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    664|        std::ptrdiff_t value_width = 0;
 6145|    664|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 228, False: 436]
  ------------------
 6146|    228|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 226]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    226|            const auto initial_width = specs.precision - prefix_width;
 6154|    226|            auto max_width_view =
 6155|    226|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    226|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 226, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    226|    }                                                  \
  |  |  |  | 3671|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    436|        else {
 6161|    436|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    436|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    436|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    436|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 436, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    436|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    436|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    436|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    436|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    436|    }                                                  \
  |  | 3671|    436|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    436|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6192|  7.84k|    {
 6193|  7.84k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.84k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.84k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.84k|            auto rd = make_reader<T, char_type>();
 6198|  7.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.18k, False: 664]
  |  |  ------------------
  ------------------
 6199|  7.18k|                return unexpected(e);
 6200|  7.18k|            }
 6201|       |
 6202|    664|            return impl(rd, range, value);
 6203|  7.84k|        }
 6204|  7.84k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.84k|            auto rd = make_reader<T, char_type>();
 6206|  7.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.84k|                return unexpected(e);
 6208|  7.84k|            }
 6209|       |
 6210|  7.84k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.84k|                specs.width != 0) {
 6212|  7.84k|                return impl(rd, range, value);
 6213|  7.84k|            }
 6214|       |
 6215|  7.84k|            auto crange = get_as_contiguous(range);
 6216|  7.84k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.84k|            return ranges::next(range.begin(),
 6218|  7.84k|                                ranges::distance(crange.begin(), it));
 6219|  7.84k|        }
 6220|  7.84k|        else {
 6221|  7.84k|            SCN_EXPECT(false);
 6222|  7.84k|            SCN_UNREACHABLE;
 6223|  7.84k|        }
 6224|  7.84k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    664|    {
 6124|    664|        const bool need_skipped_width =
 6125|    664|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 322, False: 342]
  |  Branch (6125:33): [True: 216, False: 126]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    664|        auto it = rng.begin();
 6129|    664|        std::ptrdiff_t prefix_width = 0;
 6130|    664|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 228, False: 436]
  ------------------
 6131|    228|            auto max_width_view = take_width(rng, specs.precision);
 6132|    228|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    228|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    228|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    228|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    228|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 228]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    228|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    228|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    228|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    228|            it = prefix_result.first.base();
 6135|    228|            prefix_width = prefix_result.second;
 6136|    228|        }
 6137|    436|        else {
 6138|    436|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    436|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    436|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    436|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    436|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 436]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    436|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    436|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    436|            std::tie(it, prefix_width) = prefix_result;
 6140|    436|        }
 6141|    664|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    664|        std::ptrdiff_t value_width = 0;
 6145|    664|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 228, False: 436]
  ------------------
 6146|    228|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 226]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    226|            const auto initial_width = specs.precision - prefix_width;
 6154|    226|            auto max_width_view =
 6155|    226|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    226|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 226, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    226|    }                                                  \
  |  |  |  | 3671|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    436|        else {
 6161|    436|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    436|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    436|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    436|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 436, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    436|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    436|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    436|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    436|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    436|    }                                                  \
  |  | 3671|    436|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    436|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6192|  7.77k|    {
 6193|  7.77k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.77k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.77k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.77k|            auto rd = make_reader<T, char_type>();
 6198|  7.77k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.19k, False: 576]
  |  |  ------------------
  ------------------
 6199|  7.19k|                return unexpected(e);
 6200|  7.19k|            }
 6201|       |
 6202|    576|            return impl(rd, range, value);
 6203|  7.77k|        }
 6204|  7.77k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.77k|            auto rd = make_reader<T, char_type>();
 6206|  7.77k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.77k|                return unexpected(e);
 6208|  7.77k|            }
 6209|       |
 6210|  7.77k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.77k|                specs.width != 0) {
 6212|  7.77k|                return impl(rd, range, value);
 6213|  7.77k|            }
 6214|       |
 6215|  7.77k|            auto crange = get_as_contiguous(range);
 6216|  7.77k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.77k|            return ranges::next(range.begin(),
 6218|  7.77k|                                ranges::distance(crange.begin(), it));
 6219|  7.77k|        }
 6220|  7.77k|        else {
 6221|  7.77k|            SCN_EXPECT(false);
 6222|  7.77k|            SCN_UNREACHABLE;
 6223|  7.77k|        }
 6224|  7.77k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5752|  7.77k|    {
 5753|  7.77k|        reader_error_handler eh{};
 5754|  7.77k|        detail::check_pointer_type_specs(specs, eh);
 5755|  7.77k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.19k, False: 576]
  |  |  ------------------
  ------------------
 5756|  7.19k|            return {scan_error::invalid_format_string, eh.m_msg};
 5757|  7.19k|        }
 5758|    576|        return {};
 5759|  7.77k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6123|    576|    {
 6124|    576|        const bool need_skipped_width =
 6125|    576|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 320, False: 256]
  |  Branch (6125:33): [True: 172, False: 84]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    576|        auto it = rng.begin();
 6129|    576|        std::ptrdiff_t prefix_width = 0;
 6130|    576|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 184, False: 392]
  ------------------
 6131|    184|            auto max_width_view = take_width(rng, specs.precision);
 6132|    184|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    184|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    184|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    184|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 184]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    184|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    184|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    184|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    184|            it = prefix_result.first.base();
 6135|    184|            prefix_width = prefix_result.second;
 6136|    184|        }
 6137|    392|        else {
 6138|    392|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    392|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 392]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    392|            std::tie(it, prefix_width) = prefix_result;
 6140|    392|        }
 6141|    576|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    576|        std::ptrdiff_t value_width = 0;
 6145|    576|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 184, False: 392]
  ------------------
 6146|    184|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 182]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    182|            const auto initial_width = specs.precision - prefix_width;
 6154|    182|            auto max_width_view =
 6155|    182|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    182|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    182|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    182|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    182|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 182, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    182|    }                                                  \
  |  |  |  | 3671|    182|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    392|        else {
 6161|    392|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    392|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    392|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    392|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 392, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    392|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    392|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    392|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    392|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    392|    }                                                  \
  |  | 3671|    392|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    392|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5781|    182|    {
 5782|    182|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    182|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    182|        return read_default(range, value, loc);
 5784|    182|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5764|    182|    {
 5765|    182|        detail::format_specs specs{};
 5766|    182|        specs.type = detail::presentation_type::int_hex;
 5767|       |
 5768|    182|        std::uintptr_t intvalue{};
 5769|    182|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3672|    182|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    182|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    182|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    182|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 182, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    182|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    182|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    182|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    182|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    182|    }                                                  \
  |  |  |  | 3671|    182|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5770|      0|                                                                intvalue, loc));
 5771|      0|        value = reinterpret_cast<void*>(intvalue);
 5772|      0|        return result;
 5773|    182|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5781|    392|    {
 5782|    392|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    392|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5783|    392|        return read_default(range, value, loc);
 5784|    392|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6192|  7.84k|    {
 6193|  7.84k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.84k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.84k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.84k|            auto rd = make_reader<T, char_type>();
 6198|  7.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.07k, False: 768]
  |  |  ------------------
  ------------------
 6199|  7.07k|                return unexpected(e);
 6200|  7.07k|            }
 6201|       |
 6202|    768|            return impl(rd, range, value);
 6203|  7.84k|        }
 6204|  7.84k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.84k|            auto rd = make_reader<T, char_type>();
 6206|  7.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.84k|                return unexpected(e);
 6208|  7.84k|            }
 6209|       |
 6210|  7.84k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.84k|                specs.width != 0) {
 6212|  7.84k|                return impl(rd, range, value);
 6213|  7.84k|            }
 6214|       |
 6215|  7.84k|            auto crange = get_as_contiguous(range);
 6216|  7.84k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.84k|            return ranges::next(range.begin(),
 6218|  7.84k|                                ranges::distance(crange.begin(), it));
 6219|  7.84k|        }
 6220|  7.84k|        else {
 6221|  7.84k|            SCN_EXPECT(false);
 6222|  7.84k|            SCN_UNREACHABLE;
 6223|  7.84k|        }
 6224|  7.84k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  7.84k|    {
 3040|  7.84k|        reader_error_handler eh{};
 3041|  7.84k|        get_derived().check_specs_impl(specs, eh);
 3042|  7.84k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.07k, False: 768]
  |  |  ------------------
  ------------------
 3043|  7.07k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  7.07k|        }
 3045|    768|        return {};
 3046|  7.84k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|  7.84k|    {
 3051|  7.84k|        return static_cast<Derived&>(*this);
 3052|  7.84k|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5496|  7.84k|    {
 5497|  7.84k|        detail::check_bool_type_specs(specs, eh);
 5498|  7.84k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    768|    {
 6124|    768|        const bool need_skipped_width =
 6125|    768|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 334, False: 434]
  |  Branch (6125:33): [True: 254, False: 180]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    768|        auto it = rng.begin();
 6129|    768|        std::ptrdiff_t prefix_width = 0;
 6130|    768|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 268, False: 500]
  ------------------
 6131|    268|            auto max_width_view = take_width(rng, specs.precision);
 6132|    268|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    268|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    268|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    268|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    268|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 268]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    268|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    268|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    268|            it = prefix_result.first.base();
 6135|    268|            prefix_width = prefix_result.second;
 6136|    268|        }
 6137|    500|        else {
 6138|    500|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    500|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 500]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    500|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    500|            std::tie(it, prefix_width) = prefix_result;
 6140|    500|        }
 6141|    768|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    768|        std::ptrdiff_t value_width = 0;
 6145|    768|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 268, False: 500]
  ------------------
 6146|    268|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 264]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    264|            const auto initial_width = specs.precision - prefix_width;
 6154|    264|            auto max_width_view =
 6155|    264|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    264|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    264|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    264|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    264|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 264, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    264|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    264|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    264|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    264|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    264|    }                                                  \
  |  |  |  | 3671|    264|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    500|        else {
 6161|    500|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    500|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    500|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    500|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 500, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    500|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    500|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    500|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    500|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    500|    }                                                  \
  |  | 3671|    500|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    500|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5515|    264|    {
 5516|    264|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    264|#if !SCN_DISABLE_LOCALE
 5519|    264|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 18, False: 246]
  ------------------
 5520|     18|            return rd.read_localized(range, loc, value);
 5521|     18|        }
 5522|    246|#endif
 5523|       |
 5524|    246|        return rd.read_classic(range, value);
 5525|    264|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5528|    764|    {
 5529|    764|        SCN_GCC_COMPAT_PUSH
 5530|    764|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5531|       |
 5532|    764|        switch (specs.type) {
 5533|    100|            case detail::presentation_type::string:
  ------------------
  |  Branch (5533:13): [True: 100, False: 664]
  ------------------
 5534|    100|                return bool_reader_base::allow_text;
 5535|       |
 5536|      8|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5536:13): [True: 8, False: 756]
  ------------------
 5537|     16|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5537:13): [True: 8, False: 756]
  ------------------
 5538|     22|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5538:13): [True: 6, False: 758]
  ------------------
 5539|     42|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5539:13): [True: 20, False: 744]
  ------------------
 5540|     54|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5540:13): [True: 12, False: 752]
  ------------------
 5541|     72|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5541:13): [True: 18, False: 746]
  ------------------
 5542|     72|                return bool_reader_base::allow_numeric;
 5543|       |
 5544|    592|            default:
  ------------------
  |  Branch (5544:13): [True: 592, False: 172]
  ------------------
 5545|    592|                return bool_reader_base::allow_text |
 5546|    592|                       bool_reader_base::allow_numeric;
 5547|    764|        }
 5548|       |
 5549|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5550|    764|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5427|     18|    {
 5428|     18|        scan_error err{scan_error::invalid_scanned_value,
 5429|     18|                       "Failed to read boolean"};
 5430|       |
 5431|     18|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 18, False: 0]
  ------------------
 5432|     18|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 18]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     18|            else {
 5436|     18|                err = r.error();
 5437|     18|            }
 5438|     18|        }
 5439|       |
 5440|     18|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 18, False: 0]
  ------------------
 5441|     18|            auto stdloc = loc.get<std::locale>();
 5442|     18|            const auto& numpunct =
 5443|     18|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     18|            const auto truename = numpunct.truename();
 5445|     18|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     18|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 18]
  ------------------
 5448|     18|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     18|            else {
 5452|     18|                err = r.error();
 5453|     18|            }
 5454|     18|        }
 5455|       |
 5456|     18|        return unexpected(err);
 5457|     18|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5383|    226|    {
 5384|    226|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5384:18): [True: 0, False: 226]
  ------------------
 5385|      0|            value = false;
 5386|      0|            return *r;
 5387|      0|        }
 5388|    226|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5388:18): [True: 0, False: 226]
  ------------------
 5389|      0|            value = true;
 5390|      0|            return *r;
 5391|      0|        }
 5392|       |
 5393|    226|        return unexpected_scan_error(
 5394|    226|            scan_error::invalid_scanned_value,
 5395|    226|            "Failed to read numeric boolean value: No match");
 5396|    226|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    452|{
 2146|    452|    auto it = read_code_unit(range);
 2147|    452|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 452]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    452|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 452, False: 0]
  |  |  ------------------
  ------------------
 2152|    452|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    452|        return unexpected(parse_error::error);
 2154|    452|    }
 2155|       |
 2156|      0|    return *it;
 2157|    452|}
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIwNSF_11char_traitsIwEEEESR_:
 5467|     18|    {
 5468|     18|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     18|        const auto shorter = std::pair{
 5470|     18|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 18, False: 0]
  ------------------
 5471|     18|        const auto longer = std::pair{
 5472|     18|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 18]
  ------------------
 5473|       |
 5474|     18|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 18]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     18|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 18]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     18|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     18|                                     "read_textual: No match");
 5485|     18|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     36|{
 2179|     36|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     36|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     36|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     36|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     36|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14, False: 22]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     14|    }                                                  \
  |  |  |  | 3671|     36|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     22|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     22|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     22|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     22|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     22|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     22|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22, False: 0]
  |  |  ------------------
  ------------------
 2185|     22|        return unexpected(parse_error::error);
 2186|     22|    }
 2187|      0|    return it;
 2188|     22|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    468|{
 1857|    468|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    468|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    468|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    468|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    468|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    468|        if (sz < count) {
 1862|    468|            return unexpected(eof_error::eof);
 1863|    468|        }
 1864|       |
 1865|    468|        return ranges::next(range.begin(), count);
 1866|    468|    }
 1867|    468|    else {
 1868|    468|        auto it = range.begin();
 1869|    468|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 468]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  2.39k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.00k, False: 390]
  ------------------
 1874|  2.00k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 78, False: 1.92k]
  ------------------
 1875|     78|                return unexpected(eof_error::eof);
 1876|     78|            }
 1877|  2.00k|        }
 1878|       |
 1879|    390|        return it;
 1880|    468|    }
 1881|    468|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEEmT_:
 1094|    468|{
 1095|    468|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    468|        return r.size();
 1097|    468|    }
 1098|    468|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    468|                           ranges::const_iterator_t<Range>,
 1100|    468|                           typename detail::basic_scan_buffer<
 1101|    468|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    468|        if constexpr (ranges::common_range<Range>) {
 1103|    468|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    468|        }
 1105|    468|        else {
 1106|    468|            if (r.begin().stores_parent()) {
 1107|    468|                return static_cast<size_t>(
 1108|    468|                    r.begin().parent()->chars_available() -
 1109|    468|                    r.begin().position());
 1110|    468|            }
 1111|    468|            return r.begin().contiguous_segment().size();
 1112|    468|        }
 1113|    468|    }
 1114|    468|    else {
 1115|    468|        return 0;
 1116|    468|    }
 1117|    468|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5354|    246|    {
 5355|    246|        scan_error err{scan_error::invalid_scanned_value,
 5356|    246|                       "Failed to read boolean"};
 5357|       |
 5358|    246|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5358:13): [True: 208, False: 38]
  ------------------
 5359|    208|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5359:22): [True: 0, False: 208]
  ------------------
 5360|      0|                return *r;
 5361|      0|            }
 5362|    208|            else {
 5363|    208|                err = r.error();
 5364|    208|            }
 5365|    208|        }
 5366|       |
 5367|    246|        if (m_options & allow_text) {
  ------------------
  |  Branch (5367:13): [True: 216, False: 30]
  ------------------
 5368|    216|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5368:22): [True: 0, False: 216]
  ------------------
 5369|      0|                return *r;
 5370|      0|            }
 5371|    216|            else {
 5372|    216|                err = r.error();
 5373|    216|            }
 5374|    216|        }
 5375|       |
 5376|    246|        return unexpected(err);
 5377|    246|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5401|    216|    {
 5402|    216|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5402:18): [True: 0, False: 216]
  ------------------
 5403|      0|            value = true;
 5404|      0|            return *r;
 5405|      0|        }
 5406|    216|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5406:18): [True: 0, False: 216]
  ------------------
 5407|      0|            value = false;
 5408|      0|            return *r;
 5409|      0|        }
 5410|       |
 5411|    216|        return unexpected_scan_error(
 5412|    216|            scan_error::invalid_scanned_value,
 5413|    216|            "Failed to read textual boolean value: No match");
 5414|    216|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    432|{
 2194|    432|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|    432|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    432|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    432|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    432|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64, False: 368]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     64|    }                                                  \
  |  |  |  | 3671|    432|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    368|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    368|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    368|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    368|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    368|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    368|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|    368|            return unexpected(parse_error::error);
 2202|    368|        }
 2203|    368|        return it;
 2204|    368|    }
 2205|    368|    else {
 2206|    368|        auto range_it = range.begin();
 2207|    368|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 368, False: 0]
  ------------------
 2208|    368|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|    368|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 368, False: 0]
  |  |  ------------------
  ------------------
 2209|    368|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    368|                return unexpected(parse_error::error);
 2211|    368|            }
 2212|    368|        }
 2213|      0|        return it;
 2214|    368|    }
 2215|    368|}
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5515|    500|    {
 5516|    500|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5517|       |
 5518|    500|#if !SCN_DISABLE_LOCALE
 5519|    500|        if (specs.localized) {
  ------------------
  |  Branch (5519:13): [True: 48, False: 452]
  ------------------
 5520|     48|            return rd.read_localized(range, loc, value);
 5521|     48|        }
 5522|    452|#endif
 5523|       |
 5524|    452|        return rd.read_classic(range, value);
 5525|    500|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5427|     48|    {
 5428|     48|        scan_error err{scan_error::invalid_scanned_value,
 5429|     48|                       "Failed to read boolean"};
 5430|       |
 5431|     48|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5431:13): [True: 32, False: 16]
  ------------------
 5432|     32|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5432:22): [True: 0, False: 32]
  ------------------
 5433|      0|                return *r;
 5434|      0|            }
 5435|     32|            else {
 5436|     32|                err = r.error();
 5437|     32|            }
 5438|     32|        }
 5439|       |
 5440|     48|        if (m_options & allow_text) {
  ------------------
  |  Branch (5440:13): [True: 22, False: 26]
  ------------------
 5441|     22|            auto stdloc = loc.get<std::locale>();
 5442|     22|            const auto& numpunct =
 5443|     22|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5444|     22|            const auto truename = numpunct.truename();
 5445|     22|            const auto falsename = numpunct.falsename();
 5446|       |
 5447|     22|            if (auto r =
  ------------------
  |  Branch (5447:22): [True: 0, False: 22]
  ------------------
 5448|     22|                    read_textual_custom(range, value, truename, falsename)) {
 5449|      0|                return *r;
 5450|      0|            }
 5451|     22|            else {
 5452|     22|                err = r.error();
 5453|     22|            }
 5454|     22|        }
 5455|       |
 5456|     48|        return unexpected(err);
 5457|     48|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5467|     22|    {
 5468|     22|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5469|     22|        const auto shorter = std::pair{
 5470|     22|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5470:13): [True: 22, False: 0]
  ------------------
 5471|     22|        const auto longer = std::pair{
 5472|     22|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5472:13): [True: 0, False: 22]
  ------------------
 5473|       |
 5474|     22|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5474:18): [True: 0, False: 22]
  ------------------
 5475|      0|            value = shorter.second;
 5476|      0|            return *r;
 5477|      0|        }
 5478|     22|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5478:18): [True: 0, False: 22]
  ------------------
 5479|      0|            value = longer.second;
 5480|      0|            return *r;
 5481|      0|        }
 5482|       |
 5483|     22|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5484|     22|                                     "read_textual: No match");
 5485|     22|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     44|{
 2179|     44|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|     44|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|     44|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|     44|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     44|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 42]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      2|    }                                                  \
  |  |  |  | 3671|     44|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     42|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     42|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     42|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     42|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     42|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 0]
  |  |  ------------------
  ------------------
 2185|     42|        return unexpected(parse_error::error);
 2186|     42|    }
 2187|      0|    return it;
 2188|     42|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6192|  7.77k|    {
 6193|  7.77k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.77k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.77k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.77k|            auto rd = make_reader<T, char_type>();
 6198|  7.77k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.15k, False: 616]
  |  |  ------------------
  ------------------
 6199|  7.15k|                return unexpected(e);
 6200|  7.15k|            }
 6201|       |
 6202|    616|            return impl(rd, range, value);
 6203|  7.77k|        }
 6204|  7.77k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.77k|            auto rd = make_reader<T, char_type>();
 6206|  7.77k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.77k|                return unexpected(e);
 6208|  7.77k|            }
 6209|       |
 6210|  7.77k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.77k|                specs.width != 0) {
 6212|  7.77k|                return impl(rd, range, value);
 6213|  7.77k|            }
 6214|       |
 6215|  7.77k|            auto crange = get_as_contiguous(range);
 6216|  7.77k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.77k|            return ranges::next(range.begin(),
 6218|  7.77k|                                ranges::distance(crange.begin(), it));
 6219|  7.77k|        }
 6220|  7.77k|        else {
 6221|  7.77k|            SCN_EXPECT(false);
 6222|  7.77k|            SCN_UNREACHABLE;
 6223|  7.77k|        }
 6224|  7.77k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    616|    {
 6124|    616|        const bool need_skipped_width =
 6125|    616|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 322, False: 294]
  |  Branch (6125:33): [True: 198, False: 96]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    616|        auto it = rng.begin();
 6129|    616|        std::ptrdiff_t prefix_width = 0;
 6130|    616|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 210, False: 406]
  ------------------
 6131|    210|            auto max_width_view = take_width(rng, specs.precision);
 6132|    210|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    210|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    210|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    210|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    210|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 210]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    210|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    210|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    210|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    210|            it = prefix_result.first.base();
 6135|    210|            prefix_width = prefix_result.second;
 6136|    210|        }
 6137|    406|        else {
 6138|    406|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    406|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 406]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    406|            std::tie(it, prefix_width) = prefix_result;
 6140|    406|        }
 6141|    616|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    616|        std::ptrdiff_t value_width = 0;
 6145|    616|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 210, False: 406]
  ------------------
 6146|    210|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 2, False: 208]
  ------------------
 6147|      2|                return unexpected_scan_error(
 6148|      2|                    scan_error::invalid_scanned_value,
 6149|      2|                    "Too many fill characters before value, "
 6150|      2|                    "precision exceeded before reading value");
 6151|      2|            }
 6152|       |
 6153|    208|            const auto initial_width = specs.precision - prefix_width;
 6154|    208|            auto max_width_view =
 6155|    208|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    208|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    208|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    208|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    208|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    208|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 178]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|     30|    }                                                  \
  |  |  |  | 3671|    208|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    178|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    178|            it = w_it.base();
 6158|    178|            value_width = initial_width - w_it.count();
 6159|    178|        }
 6160|    406|        else {
 6161|    406|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    406|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    406|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    406|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16, False: 390]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|     16|    }                                                  \
  |  | 3671|    406|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    406|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|    390|                                             specs, value, loc));
 6163|       |
 6164|    390|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 308, False: 82]
  ------------------
 6165|    308|                value_width = calculate_text_width(
 6166|    308|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    308|                        .view());
 6168|    308|            }
 6169|    390|        }
 6170|       |
 6171|       |        // Read postfix
 6172|    568|        std::ptrdiff_t postfix_width = 0;
 6173|    568|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 568, False: 0]
  ------------------
 6174|    568|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    568|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    568|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    568|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    568|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 568]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    568|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    568|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    568|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    568|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    568|                                 value_width));
 6178|    568|            std::tie(it, postfix_width) = postfix_result;
 6179|    568|        }
 6180|       |
 6181|    568|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|    568|                                                 value_width, postfix_width);
 6183|    568|            !e) {
  ------------------
  |  Branch (6183:13): [True: 306, False: 262]
  ------------------
 6184|    306|            return unexpected(e);
 6185|    306|        }
 6186|       |
 6187|    262|        return it;
 6188|    568|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|  7.84k|    {
 6193|  7.84k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.84k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.84k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.84k|            auto rd = make_reader<T, char_type>();
 6198|  7.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.19k, False: 650]
  |  |  ------------------
  ------------------
 6199|  7.19k|                return unexpected(e);
 6200|  7.19k|            }
 6201|       |
 6202|    650|            return impl(rd, range, value);
 6203|  7.84k|        }
 6204|  7.84k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.84k|            auto rd = make_reader<T, char_type>();
 6206|  7.84k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.84k|                return unexpected(e);
 6208|  7.84k|            }
 6209|       |
 6210|  7.84k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.84k|                specs.width != 0) {
 6212|  7.84k|                return impl(rd, range, value);
 6213|  7.84k|            }
 6214|       |
 6215|  7.84k|            auto crange = get_as_contiguous(range);
 6216|  7.84k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.84k|            return ranges::next(range.begin(),
 6218|  7.84k|                                ranges::distance(crange.begin(), it));
 6219|  7.84k|        }
 6220|  7.84k|        else {
 6221|  7.84k|            SCN_EXPECT(false);
 6222|  7.84k|            SCN_UNREACHABLE;
 6223|  7.84k|        }
 6224|  7.84k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|    650|    {
 6124|    650|        const bool need_skipped_width =
 6125|    650|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 326, False: 324]
  |  Branch (6125:33): [True: 216, False: 108]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|    650|        auto it = rng.begin();
 6129|    650|        std::ptrdiff_t prefix_width = 0;
 6130|    650|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 230, False: 420]
  ------------------
 6131|    230|            auto max_width_view = take_width(rng, specs.precision);
 6132|    230|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    230|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    230|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    230|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    230|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 230]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    230|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    230|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    230|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    230|            it = prefix_result.first.base();
 6135|    230|            prefix_width = prefix_result.second;
 6136|    230|        }
 6137|    420|        else {
 6138|    420|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|    420|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 420]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|    420|            std::tie(it, prefix_width) = prefix_result;
 6140|    420|        }
 6141|    650|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|    650|        std::ptrdiff_t value_width = 0;
 6145|    650|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 230, False: 420]
  ------------------
 6146|    230|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 4, False: 226]
  ------------------
 6147|      4|                return unexpected_scan_error(
 6148|      4|                    scan_error::invalid_scanned_value,
 6149|      4|                    "Too many fill characters before value, "
 6150|      4|                    "precision exceeded before reading value");
 6151|      4|            }
 6152|       |
 6153|    226|            const auto initial_width = specs.precision - prefix_width;
 6154|    226|            auto max_width_view =
 6155|    226|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    226|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    226|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    226|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    226|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    226|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 226, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    226|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    226|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    226|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    226|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    226|    }                                                  \
  |  |  |  | 3671|    226|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|    420|        else {
 6161|    420|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|    420|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|    420|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    420|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 420, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|    420|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|    420|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|    420|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|    420|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|    420|    }                                                  \
  |  | 3671|    420|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    420|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|      0|                                             specs, value, loc));
 6163|       |
 6164|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 0]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|      0|        }
 6170|       |
 6171|       |        // Read postfix
 6172|      0|        std::ptrdiff_t postfix_width = 0;
 6173|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 0]
  ------------------
 6174|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6177|      0|                                 value_width));
 6178|      0|            std::tie(it, postfix_width) = postfix_result;
 6179|      0|        }
 6180|       |
 6181|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|      0|                                                 value_width, postfix_width);
 6183|      0|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 0]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|      0|        return it;
 6188|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  7.77k|    {
 6193|  7.77k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.77k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.77k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.77k|            auto rd = make_reader<T, char_type>();
 6198|  7.77k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 7.66k]
  |  |  ------------------
  ------------------
 6199|    106|                return unexpected(e);
 6200|    106|            }
 6201|       |
 6202|  7.66k|            return impl(rd, range, value);
 6203|  7.77k|        }
 6204|  7.77k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.77k|            auto rd = make_reader<T, char_type>();
 6206|  7.77k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.77k|                return unexpected(e);
 6208|  7.77k|            }
 6209|       |
 6210|  7.77k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.77k|                specs.width != 0) {
 6212|  7.77k|                return impl(rd, range, value);
 6213|  7.77k|            }
 6214|       |
 6215|  7.77k|            auto crange = get_as_contiguous(range);
 6216|  7.77k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.77k|            return ranges::next(range.begin(),
 6218|  7.77k|                                ranges::distance(crange.begin(), it));
 6219|  7.77k|        }
 6220|  7.77k|        else {
 6221|  7.77k|            SCN_EXPECT(false);
 6222|  7.77k|            SCN_UNREACHABLE;
 6223|  7.77k|        }
 6224|  7.77k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  7.66k|    {
 6124|  7.66k|        const bool need_skipped_width =
 6125|  7.66k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 6.12k, False: 1.54k]
  |  Branch (6125:33): [True: 256, False: 1.28k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  7.66k|        auto it = rng.begin();
 6129|  7.66k|        std::ptrdiff_t prefix_width = 0;
 6130|  7.66k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 272, False: 7.39k]
  ------------------
 6131|    272|            auto max_width_view = take_width(rng, specs.precision);
 6132|    272|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    272|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    272|            it = prefix_result.first.base();
 6135|    272|            prefix_width = prefix_result.second;
 6136|    272|        }
 6137|  7.39k|        else {
 6138|  7.39k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  7.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  7.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  7.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 7.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  7.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  7.39k|            std::tie(it, prefix_width) = prefix_result;
 6140|  7.39k|        }
 6141|  7.66k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  7.66k|        std::ptrdiff_t value_width = 0;
 6145|  7.66k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 272, False: 7.39k]
  ------------------
 6146|    272|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 258]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|    258|            const auto initial_width = specs.precision - prefix_width;
 6154|    258|            auto max_width_view =
 6155|    258|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    258|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 148, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    148|    }                                                  \
  |  |  |  | 3671|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    110|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    110|            it = w_it.base();
 6158|    110|            value_width = initial_width - w_it.count();
 6159|    110|        }
 6160|  7.39k|        else {
 6161|  7.39k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  7.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  7.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  7.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.37k, False: 1.02k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  6.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  6.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  6.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  6.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  6.37k|    }                                                  \
  |  | 3671|  7.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  7.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.02k|                                             specs, value, loc));
 6163|       |
 6164|  1.02k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 572, False: 454]
  ------------------
 6165|    572|                value_width = calculate_text_width(
 6166|    572|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    572|                        .view());
 6168|    572|            }
 6169|  1.02k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.13k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.13k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 846, False: 290]
  ------------------
 6174|    846|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    846|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    846|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    846|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    846|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 846]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    846|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    846|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    846|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    846|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    846|                                 value_width));
 6178|    846|            std::tie(it, postfix_width) = postfix_result;
 6179|    846|        }
 6180|       |
 6181|  1.13k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.13k|                                                 value_width, postfix_width);
 6183|  1.13k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 310, False: 826]
  ------------------
 6184|    310|            return unexpected(e);
 6185|    310|        }
 6186|       |
 6187|    826|        return it;
 6188|  1.13k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  7.77k|    {
 6193|  7.77k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.77k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.77k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.77k|            auto rd = make_reader<T, char_type>();
 6198|  7.77k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 7.66k]
  |  |  ------------------
  ------------------
 6199|    106|                return unexpected(e);
 6200|    106|            }
 6201|       |
 6202|  7.66k|            return impl(rd, range, value);
 6203|  7.77k|        }
 6204|  7.77k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.77k|            auto rd = make_reader<T, char_type>();
 6206|  7.77k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.77k|                return unexpected(e);
 6208|  7.77k|            }
 6209|       |
 6210|  7.77k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.77k|                specs.width != 0) {
 6212|  7.77k|                return impl(rd, range, value);
 6213|  7.77k|            }
 6214|       |
 6215|  7.77k|            auto crange = get_as_contiguous(range);
 6216|  7.77k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.77k|            return ranges::next(range.begin(),
 6218|  7.77k|                                ranges::distance(crange.begin(), it));
 6219|  7.77k|        }
 6220|  7.77k|        else {
 6221|  7.77k|            SCN_EXPECT(false);
 6222|  7.77k|            SCN_UNREACHABLE;
 6223|  7.77k|        }
 6224|  7.77k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  7.66k|    {
 6124|  7.66k|        const bool need_skipped_width =
 6125|  7.66k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 6.12k, False: 1.54k]
  |  Branch (6125:33): [True: 256, False: 1.28k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  7.66k|        auto it = rng.begin();
 6129|  7.66k|        std::ptrdiff_t prefix_width = 0;
 6130|  7.66k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 272, False: 7.39k]
  ------------------
 6131|    272|            auto max_width_view = take_width(rng, specs.precision);
 6132|    272|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    272|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    272|            it = prefix_result.first.base();
 6135|    272|            prefix_width = prefix_result.second;
 6136|    272|        }
 6137|  7.39k|        else {
 6138|  7.39k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  7.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  7.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  7.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 7.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  7.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  7.39k|            std::tie(it, prefix_width) = prefix_result;
 6140|  7.39k|        }
 6141|  7.66k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  7.66k|        std::ptrdiff_t value_width = 0;
 6145|  7.66k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 272, False: 7.39k]
  ------------------
 6146|    272|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 258]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|    258|            const auto initial_width = specs.precision - prefix_width;
 6154|    258|            auto max_width_view =
 6155|    258|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    258|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 148, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    148|    }                                                  \
  |  |  |  | 3671|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    110|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    110|            it = w_it.base();
 6158|    110|            value_width = initial_width - w_it.count();
 6159|    110|        }
 6160|  7.39k|        else {
 6161|  7.39k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  7.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  7.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  7.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.37k, False: 1.02k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  6.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  6.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  6.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  6.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  6.37k|    }                                                  \
  |  | 3671|  7.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  7.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.02k|                                             specs, value, loc));
 6163|       |
 6164|  1.02k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 572, False: 454]
  ------------------
 6165|    572|                value_width = calculate_text_width(
 6166|    572|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    572|                        .view());
 6168|    572|            }
 6169|  1.02k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.13k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.13k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 846, False: 290]
  ------------------
 6174|    846|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    846|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    846|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    846|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    846|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 846]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    846|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    846|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    846|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    846|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    846|                                 value_width));
 6178|    846|            std::tie(it, postfix_width) = postfix_result;
 6179|    846|        }
 6180|       |
 6181|  1.13k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.13k|                                                 value_width, postfix_width);
 6183|  1.13k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 310, False: 826]
  ------------------
 6184|    310|            return unexpected(e);
 6185|    310|        }
 6186|       |
 6187|    826|        return it;
 6188|  1.13k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  7.77k|    {
 6193|  7.77k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  7.77k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  7.77k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  7.77k|            auto rd = make_reader<T, char_type>();
 6198|  7.77k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 106, False: 7.66k]
  |  |  ------------------
  ------------------
 6199|    106|                return unexpected(e);
 6200|    106|            }
 6201|       |
 6202|  7.66k|            return impl(rd, range, value);
 6203|  7.77k|        }
 6204|  7.77k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  7.77k|            auto rd = make_reader<T, char_type>();
 6206|  7.77k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  7.77k|                return unexpected(e);
 6208|  7.77k|            }
 6209|       |
 6210|  7.77k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  7.77k|                specs.width != 0) {
 6212|  7.77k|                return impl(rd, range, value);
 6213|  7.77k|            }
 6214|       |
 6215|  7.77k|            auto crange = get_as_contiguous(range);
 6216|  7.77k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  7.77k|            return ranges::next(range.begin(),
 6218|  7.77k|                                ranges::distance(crange.begin(), it));
 6219|  7.77k|        }
 6220|  7.77k|        else {
 6221|  7.77k|            SCN_EXPECT(false);
 6222|  7.77k|            SCN_UNREACHABLE;
 6223|  7.77k|        }
 6224|  7.77k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  7.66k|    {
 6124|  7.66k|        const bool need_skipped_width =
 6125|  7.66k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 6.12k, False: 1.54k]
  |  Branch (6125:33): [True: 256, False: 1.28k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  7.66k|        auto it = rng.begin();
 6129|  7.66k|        std::ptrdiff_t prefix_width = 0;
 6130|  7.66k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 272, False: 7.39k]
  ------------------
 6131|    272|            auto max_width_view = take_width(rng, specs.precision);
 6132|    272|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|    272|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    272|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    272|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    272|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 272]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    272|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    272|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|    272|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|    272|            it = prefix_result.first.base();
 6135|    272|            prefix_width = prefix_result.second;
 6136|    272|        }
 6137|  7.39k|        else {
 6138|  7.39k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  7.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  7.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  7.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 7.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  7.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  7.39k|            std::tie(it, prefix_width) = prefix_result;
 6140|  7.39k|        }
 6141|  7.66k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  7.66k|        std::ptrdiff_t value_width = 0;
 6145|  7.66k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 272, False: 7.39k]
  ------------------
 6146|    272|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 14, False: 258]
  ------------------
 6147|     14|                return unexpected_scan_error(
 6148|     14|                    scan_error::invalid_scanned_value,
 6149|     14|                    "Too many fill characters before value, "
 6150|     14|                    "precision exceeded before reading value");
 6151|     14|            }
 6152|       |
 6153|    258|            const auto initial_width = specs.precision - prefix_width;
 6154|    258|            auto max_width_view =
 6155|    258|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|    258|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|    258|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    258|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    258|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    258|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 148, False: 110]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    148|    }                                                  \
  |  |  |  | 3671|    258|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    110|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|    110|            it = w_it.base();
 6158|    110|            value_width = initial_width - w_it.count();
 6159|    110|        }
 6160|  7.39k|        else {
 6161|  7.39k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  7.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  7.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  7.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6.37k, False: 1.02k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  6.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  6.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  6.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  6.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  6.37k|    }                                                  \
  |  | 3671|  7.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  7.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  1.02k|                                             specs, value, loc));
 6163|       |
 6164|  1.02k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 572, False: 454]
  ------------------
 6165|    572|                value_width = calculate_text_width(
 6166|    572|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|    572|                        .view());
 6168|    572|            }
 6169|  1.02k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  1.13k|        std::ptrdiff_t postfix_width = 0;
 6173|  1.13k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 846, False: 290]
  ------------------
 6174|    846|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|    846|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    846|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    846|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    846|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 846]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    846|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    846|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|    846|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|    846|                                 rd.skip_ws_before_read(), prefix_width,
 6177|    846|                                 value_width));
 6178|    846|            std::tie(it, postfix_width) = postfix_result;
 6179|    846|        }
 6180|       |
 6181|  1.13k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  1.13k|                                                 value_width, postfix_width);
 6183|  1.13k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 310, False: 826]
  ------------------
 6184|    310|            return unexpected(e);
 6185|    310|        }
 6186|       |
 6187|    826|        return it;
 6188|  1.13k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    718|    {
 3492|    718|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    718|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    718|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    718|            if (prefix_result.sign == sign_type::minus_sign) {
 3497|    718|                return unexpected_scan_error(
 3498|    718|                    scan_error::invalid_scanned_value,
 3499|    718|                    "Unexpected '-' sign when parsing an "
 3500|    718|                    "unsigned value");
 3501|    718|            }
 3502|    718|        }
 3503|       |
 3504|    718|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 718]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.43k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.43k|                parse_integer_digits_without_thsep(
 3511|  1.43k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.43k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.43k|        auto buf = make_contiguous_buffer(
 3515|  1.43k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.43k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 718, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    718|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    718|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    718|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    718|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    718|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.43k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3491|    718|    {
 3492|    718|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3493|    718|                                   .transform_error(make_eof_scan_error));
 3494|       |
 3495|    718|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3495:23): [Folded - Ignored]
  ------------------
 3496|    718|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3496:17): [True: 0, False: 718]
  ------------------
 3497|      0|                return unexpected_scan_error(
 3498|      0|                    scan_error::invalid_scanned_value,
 3499|      0|                    "Unexpected '-' sign when parsing an "
 3500|      0|                    "unsigned value");
 3501|      0|            }
 3502|    718|        }
 3503|       |
 3504|    718|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3504:13): [True: 0, False: 718]
  ------------------
 3505|      0|            value = T{0};
 3506|      0|            return std::next(prefix_result.iterator);
 3507|      0|        }
 3508|       |
 3509|  1.43k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 718]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    718|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3510|  1.43k|                parse_integer_digits_without_thsep(
 3511|  1.43k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3512|  1.43k|                    prefix_result.parsed_base));
 3513|       |
 3514|  1.43k|        auto buf = make_contiguous_buffer(
 3515|  1.43k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3516|  1.43k|        SCN_TRY(result_it,
  ------------------
  |  | 3672|    718|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|    718|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|    718|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    718|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 718, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    718|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    718|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    718|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    718|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    718|    }                                                  \
  |  |  |  | 3671|    718|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3517|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3518|      0|                                    prefix_result.parsed_base));
 3519|       |
 3520|      0|        return ranges::next(prefix_result.iterator,
 3521|      0|                            ranges::distance(buf.view().begin(), result_it));
 3522|  1.43k|    }

LLVMFuzzerTestOneInput:
   68|  11.5k|{
   69|  11.5k|    scn::fuzz::run(data, size);
   70|  11.5k|    return 0;
   71|  11.5k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  11.5k|{
   52|  11.5k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 11.5k]
  |  Branch (52:35): [True: 0, False: 11.5k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  11.5k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  11.5k|    run_for_source(sv);
   59|  11.5k|    run_for_source(wsv_reinterpret);
   60|  11.5k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 11.5k, False: 0]
  ------------------
   61|  11.5k|        run_for_source(wsv_transcode);
   62|  11.5k|    }
   63|  11.5k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  11.5k|{
   37|  11.5k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  11.5k|    run_for_type<char_type>(source);
   40|  11.5k|    run_for_type<int>(source);
   41|  11.5k|    run_for_type<unsigned>(source);
   42|  11.5k|    run_for_type<double>(source);
   43|  11.5k|    run_for_type<bool>(source);
   44|  11.5k|    run_for_type<void*>(source);
   45|  11.5k|    run_for_type<std::string>(source);
   46|  11.5k|    run_for_type<std::wstring>(source);
   47|  11.5k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  11.5k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  11.5k|{
   25|  11.5k|    {
   26|  11.5k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.5k|    }
   28|  11.5k|    {
   29|  11.5k|        auto _ =
   30|  11.5k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.5k|    }
   32|  11.5k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  11.5k|{
   25|  11.5k|    {
   26|  11.5k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.5k|    }
   28|  11.5k|    {
   29|  11.5k|        auto _ =
   30|  11.5k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.5k|    }
   32|  11.5k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  11.5k|{
   25|  11.5k|    {
   26|  11.5k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.5k|    }
   28|  11.5k|    {
   29|  11.5k|        auto _ =
   30|  11.5k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.5k|    }
   32|  11.5k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  11.5k|{
   25|  11.5k|    {
   26|  11.5k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.5k|    }
   28|  11.5k|    {
   29|  11.5k|        auto _ =
   30|  11.5k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.5k|    }
   32|  11.5k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  11.5k|{
   25|  11.5k|    {
   26|  11.5k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.5k|    }
   28|  11.5k|    {
   29|  11.5k|        auto _ =
   30|  11.5k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.5k|    }
   32|  11.5k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  11.5k|{
   25|  11.5k|    {
   26|  11.5k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.5k|    }
   28|  11.5k|    {
   29|  11.5k|        auto _ =
   30|  11.5k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.5k|    }
   32|  11.5k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  11.5k|{
   25|  11.5k|    {
   26|  11.5k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.5k|    }
   28|  11.5k|    {
   29|  11.5k|        auto _ =
   30|  11.5k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.5k|    }
   32|  11.5k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  11.5k|{
   25|  11.5k|    {
   26|  11.5k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.5k|    }
   28|  11.5k|    {
   29|  11.5k|        auto _ =
   30|  11.5k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.5k|    }
   32|  11.5k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  11.5k|{
   25|  11.5k|    {
   26|  11.5k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  11.5k|    }
   28|  11.5k|    {
   29|  11.5k|        auto _ =
   30|  11.5k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  11.5k|    }
   32|  11.5k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  23.0k|{
   37|  23.0k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  23.0k|    run_for_type<char_type>(source);
   40|  23.0k|    run_for_type<int>(source);
   41|  23.0k|    run_for_type<unsigned>(source);
   42|  23.0k|    run_for_type<double>(source);
   43|  23.0k|    run_for_type<bool>(source);
   44|  23.0k|    run_for_type<void*>(source);
   45|  23.0k|    run_for_type<std::string>(source);
   46|  23.0k|    run_for_type<std::wstring>(source);
   47|  23.0k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  23.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  23.0k|{
   25|  23.0k|    {
   26|  23.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.0k|    }
   28|  23.0k|    {
   29|  23.0k|        auto _ =
   30|  23.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.0k|    }
   32|  23.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  23.0k|{
   25|  23.0k|    {
   26|  23.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.0k|    }
   28|  23.0k|    {
   29|  23.0k|        auto _ =
   30|  23.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.0k|    }
   32|  23.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  23.0k|{
   25|  23.0k|    {
   26|  23.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.0k|    }
   28|  23.0k|    {
   29|  23.0k|        auto _ =
   30|  23.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.0k|    }
   32|  23.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  23.0k|{
   25|  23.0k|    {
   26|  23.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.0k|    }
   28|  23.0k|    {
   29|  23.0k|        auto _ =
   30|  23.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.0k|    }
   32|  23.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  23.0k|{
   25|  23.0k|    {
   26|  23.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.0k|    }
   28|  23.0k|    {
   29|  23.0k|        auto _ =
   30|  23.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.0k|    }
   32|  23.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  23.0k|{
   25|  23.0k|    {
   26|  23.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.0k|    }
   28|  23.0k|    {
   29|  23.0k|        auto _ =
   30|  23.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.0k|    }
   32|  23.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  23.0k|{
   25|  23.0k|    {
   26|  23.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.0k|    }
   28|  23.0k|    {
   29|  23.0k|        auto _ =
   30|  23.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.0k|    }
   32|  23.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  23.0k|{
   25|  23.0k|    {
   26|  23.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.0k|    }
   28|  23.0k|    {
   29|  23.0k|        auto _ =
   30|  23.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.0k|    }
   32|  23.0k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  23.0k|{
   25|  23.0k|    {
   26|  23.0k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  23.0k|    }
   28|  23.0k|    {
   29|  23.0k|        auto _ =
   30|  23.0k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  23.0k|    }
   32|  23.0k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  11.5k|{
   52|  11.5k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  11.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  11.5k|    string_buffer.resize(size);
   56|  11.5k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  11.5k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  11.5k|    const auto wsv_reinterpret_size =
   61|  11.5k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 94, False: 11.4k]
  ------------------
   62|  11.5k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  11.5k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  11.5k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  11.5k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  11.5k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  11.5k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  11.5k|}

