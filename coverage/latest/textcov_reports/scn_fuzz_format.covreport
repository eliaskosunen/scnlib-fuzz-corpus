_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSL_T0_E_clIccEEDaSL_SV_:
  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3777|  5.85M|{
 3778|  5.85M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|  5.85M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|  5.85M|    }
 3781|  5.85M|    else if constexpr (sizeof(U) == 2) {
 3782|  5.85M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|  5.85M|    }
 3784|  5.85M|    else {
 3785|       |        // utf-32
 3786|  5.85M|        static_assert(sizeof(U) == 4);
 3787|  5.85M|        SCN_UNUSED(ch);
 3788|  5.85M|        return 1;
 3789|  5.85M|    }
 3790|  5.85M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3741|  5.85M|{
 3742|  5.85M|    static_assert(sizeof(U8) == 1);
 3743|       |
 3744|  5.85M|    SCN_GCC_COMPAT_PUSH
 3745|  5.85M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3746|  5.85M|    constexpr char lengths[] =
 3747|  5.85M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3748|  5.85M|        "\1\1\1\1\1\1\1\1"
 3749|  5.85M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3750|       |                            // byte
 3751|  5.85M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3752|  5.85M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3753|  5.85M|        "\4";               // highest bits 11110 -> 4-byte cp
 3754|  5.85M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3755|  5.85M|    SCN_GCC_COMPAT_POP
 3756|  5.85M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|  5.29M|{
 3984|  5.29M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|  5.29M|        return decode_utf8_code_point_exhaustive(input);
 3986|  5.29M|    }
 3987|  5.29M|    else if constexpr (sizeof(CharT) == 2) {
 3988|  5.29M|        return decode_utf16_code_point_exhaustive(input);
 3989|  5.29M|    }
 3990|  5.29M|    else {
 3991|  5.29M|        SCN_EXPECT(input.size() == 1);
 3992|  5.29M|        auto cp = static_cast<char32_t>(input.front());
 3993|  5.29M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 3994|  5.29M|            return invalid_code_point;
 3995|  5.29M|        }
 3996|  5.29M|        return cp;
 3997|  5.29M|    }
 3998|  5.29M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3796|  5.29M|{
 3797|  5.29M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  5.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3798|       |
 3799|  5.29M|    const auto is_trailing_code_unit = [](char ch) {
 3800|  5.29M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|  5.29M|    };
 3802|       |
 3803|  5.29M|    if (input.size() == 1) {
  ------------------
  |  Branch (3803:9): [True: 4.72M, False: 568k]
  ------------------
 3804|  4.72M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3804:13): [True: 54, False: 4.72M]
  ------------------
 3805|     54|            SCN_UNLIKELY_ATTR
 3806|     54|            return invalid_code_point;
 3807|     54|        }
 3808|  4.72M|        return static_cast<char32_t>(input[0]);
 3809|  4.72M|    }
 3810|       |
 3811|   568k|    if (input.size() == 2) {
  ------------------
  |  Branch (3811:9): [True: 543k, False: 25.4k]
  ------------------
 3812|   543k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3812:13): [True: 12, False: 543k]
  ------------------
 3813|     12|            SCN_UNLIKELY_ATTR
 3814|     12|            return invalid_code_point;
 3815|     12|        }
 3816|   543k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3816:13): [True: 6.92k, False: 536k]
  ------------------
 3817|  6.92k|            SCN_UNLIKELY_ATTR
 3818|  6.92k|            return invalid_code_point;
 3819|  6.92k|        }
 3820|       |
 3821|   536k|        char32_t cp{};
 3822|   536k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3823|   536k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3824|   536k|        return cp;
 3825|   543k|    }
 3826|       |
 3827|  25.4k|    if (input.size() == 3) {
  ------------------
  |  Branch (3827:9): [True: 19.0k, False: 6.35k]
  ------------------
 3828|  19.0k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3828:13): [True: 6, False: 19.0k]
  ------------------
 3829|      6|            SCN_UNLIKELY_ATTR
 3830|      6|            return invalid_code_point;
 3831|      6|        }
 3832|  19.0k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3832:13): [True: 2.41k, False: 16.6k]
  ------------------
 3833|  19.0k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3833:13): [True: 234, False: 16.3k]
  ------------------
 3834|  2.64k|            SCN_UNLIKELY_ATTR
 3835|  2.64k|            return invalid_code_point;
 3836|  2.64k|        }
 3837|       |
 3838|  16.3k|        char32_t cp{};
 3839|  16.3k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3840|  16.3k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3841|  16.3k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3842|  16.3k|        return cp;
 3843|  19.0k|    }
 3844|       |
 3845|  6.35k|    if (input.size() == 4) {
  ------------------
  |  Branch (3845:9): [True: 6.35k, False: 0]
  ------------------
 3846|  6.35k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 6.35k]
  ------------------
 3847|      0|            SCN_UNLIKELY_ATTR
 3848|      0|            return invalid_code_point;
 3849|      0|        }
 3850|  6.35k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3850:13): [True: 425, False: 5.93k]
  ------------------
 3851|    425|            SCN_UNLIKELY_ATTR
 3852|    425|            return invalid_code_point;
 3853|    425|        }
 3854|  5.93k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3854:13): [True: 474, False: 5.46k]
  ------------------
 3855|  5.93k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3855:13): [True: 321, False: 5.13k]
  ------------------
 3856|  5.93k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3856:13): [True: 282, False: 4.85k]
  ------------------
 3857|  1.07k|            SCN_UNLIKELY_ATTR
 3858|  1.07k|            return invalid_code_point;
 3859|  1.07k|        }
 3860|       |
 3861|  4.85k|        char32_t cp{};
 3862|  4.85k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3863|  4.85k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3864|  4.85k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3865|  4.85k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3866|  4.85k|        return cp;
 3867|  5.93k|    }
 3868|       |
 3869|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3870|       |    // gcc 7 thinks we'll get here, even when we won't
 3871|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3872|      0|#endif
 3873|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3874|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3799|   595k|    const auto is_trailing_code_unit = [](char ch) {
 3800|   595k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|   595k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|  1.83M|{
 3670|  1.83M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|  1.83M|                                          decltype(first), decltype(last)> &&
 3672|  1.83M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|  1.83M|        return {first, last};
 3674|  1.83M|    }
 3675|  1.83M|    else {
 3676|  1.83M|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|  1.83M|                                       to_address(first), to_address(last)))};
 3678|  1.83M|    }
 3679|  1.83M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  5.54M|{
  322|  5.54M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  5.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  5.54M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  5.62M|{
  302|  5.62M|    return p;
  303|  5.62M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|   955k|{
 3701|   955k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|   955k|                      typename std::basic_string_view<CharT>::iterator,
 3703|   955k|                      decltype(it)> &&
 3704|   955k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|   955k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|   955k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|   955k|        return it;
 3707|   955k|    }
 3708|   955k|    else {
 3709|   955k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|   955k|    }
 3711|   955k|}
_ZN3scn2v34scanIJcERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.01k|{
 8828|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.01k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.01k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJcEEEDav:
 5356|  8.03k|{
 5357|  8.03k|    detail::check_scan_arg_types<Args...>();
 5358|  8.03k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.03k|}
_ZN3scn2v36detail20check_scan_arg_typesIJcEEEvv:
 5095|  8.03k|{
 5096|  8.03k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  8.03k|                  "Scan argument types must be default constructible");
 5098|  8.03k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  8.03k|                  "Scan argument types must be Destructible");
 5100|  8.03k|    static_assert(
 5101|  8.03k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  8.03k|        "Scan argument types must not be references");
 5103|  8.03k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEEC2Ev:
 5309|  8.03k|    {
 5310|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12make_argptrsIJcEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  8.03k|    {
 5321|  8.03k|        return {detail::make_arg<
 5322|  8.03k|            kind, Context,
 5323|  8.03k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.03k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.03k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE12EcvEEPvRT2_:
 5130|  8.03k|{
 5131|  8.03k|    return make_value<Context>(value).ref_value;
 5132|  8.03k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEcEEDaRT0_:
 5080|  8.03k|{
 5081|  8.03k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.03k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.03k|                                  needs_context_tag>) {
 5085|  8.03k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.03k|    }
 5087|  8.03k|    else {
 5088|  8.03k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.03k|            value, context_tag<Context>{}));
 5090|  8.03k|    }
 5091|  8.03k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERc:
 4948|  8.03k|    {
 4949|  8.03k|        if constexpr (std::is_same_v<char_type, char> &&
  ------------------
  |  Branch (4949:23): [Folded - Ignored]
  |  Branch (4949:23): [Folded - Ignored]
  ------------------
 4950|  8.03k|                      !is_type_disabled<char_type>) {
  ------------------
  |  Branch (4950:23): [Folded - Ignored]
  ------------------
 4951|  8.03k|            return val;
 4952|  8.03k|        }
 4953|  8.03k|        else if constexpr (is_type_disabled<char_type>) {
 4954|  8.03k|            return unscannable_disabled{val};
 4955|  8.03k|        }
 4956|  8.03k|        else {
 4957|  8.03k|            SCN_UNUSED(val);
 4958|  8.03k|            return unscannable_char{};
 4959|  8.03k|        }
 4960|  8.03k|    }
_ZN3scn2v36detail15make_value_implIRcEEDaOT_:
 5049|  8.03k|{
 5050|  8.03k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  8.03k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  8.03k|    constexpr bool scannable_char =
 5054|  8.03k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  8.03k|    static_assert(scannable_char,
 5056|  8.03k|                  "Cannot scan an argument of an unsupported character "
 5057|  8.03k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  8.03k|    constexpr bool scannable_const =
 5060|  8.03k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  8.03k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  8.03k|    constexpr bool scannable_disabled =
 5064|  8.03k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  8.03k|    static_assert(scannable_disabled,
 5066|  8.03k|                  "Cannot scan an argument that has been disabled by "
 5067|  8.03k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  8.03k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  8.03k|    static_assert(
 5071|  8.03k|        scannable,
 5072|  8.03k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  8.03k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  8.03k|    return arg_value{arg};
 5076|  8.03k|}
_ZN3scn2v36detail9arg_valueC2IcEERT_:
 4862|  8.03k|    {
 4863|  8.03k|    }
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|  36.1k|{
 8615|  36.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|  36.1k|}
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8551|  36.1k|{
 8552|  36.1k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  36.1k|    auto result = vscan_impl(buffer, format, args);
 8555|  36.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.8k, False: 1.25k]
  |  |  ------------------
  ------------------
 8556|  34.8k|        return unexpected(result.error());
 8557|  34.8k|    }
 8558|  1.25k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  36.1k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRKT_:
 4680|  72.2k|{
 4681|  72.2k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  72.2k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  72.2k|                  "\n"
 4685|  72.2k|                  "Unsupported range type given as input to a scanning "
 4686|  72.2k|                  "function.\n"
 4687|  72.2k|                  "A range needs to have a character type (value type) "
 4688|  72.2k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  72.2k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  72.2k|                  "to be included.\n"
 4691|  72.2k|                  "See the scnlib documentation for more details.");
 4692|  72.2k|    static_assert(
 4693|  72.2k|        !std::is_same_v<T, custom_char_traits>,
 4694|  72.2k|        "\n"
 4695|  72.2k|        "Unsupported range type given as input to a scanning "
 4696|  72.2k|        "function.\n"
 4697|  72.2k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  72.2k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  72.2k|        "not supported.");
 4700|  72.2k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  72.2k|                  "\n"
 4702|  72.2k|                  "Unsupported range type given as input to a scanning "
 4703|  72.2k|                  "function.\n"
 4704|  72.2k|                  "file_marker_found cannot be used as an "
 4705|  72.2k|                  "source range type to scn::scan.\n"
 4706|  72.2k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  72.2k|                  "and do not provide an explicit source range, "
 4708|  72.2k|                  "or use scn::scan with a FILE* directly.");
 4709|  72.2k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  72.2k|                  "\n"
 4711|  72.2k|                  "Unsupported range type given as input to a scanning "
 4712|  72.2k|                  "function.\n"
 4713|  72.2k|                  "In order to be scannable, a range needs to satisfy "
 4714|  72.2k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  72.2k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  72.2k|                  "\n"
 4717|  72.2k|                  "Unsupported range type given as input to a scanning "
 4718|  72.2k|                  "function.\n"
 4719|  72.2k|                  "A range needs to model forward_range and have a valid "
 4720|  72.2k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  72.2k|                  "Examples of scannable ranges are std::string, "
 4722|  72.2k|                  "std::string_view, "
 4723|  72.2k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  72.2k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  72.2k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  72.2k|}
_ZN3scn2v36detail17_make_scan_buffer4implIcEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4572|  72.2k|{
 4573|  72.2k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4573:19): [Folded - Ignored]
  ------------------
 4574|  72.2k|        return r;
 4575|       |        // return make_string_scan_buffer(r);
 4576|  72.2k|    }
 4577|  72.2k|    else {
 4578|  72.2k|        return invalid_char_type{};
 4579|  72.2k|    }
 4580|  72.2k|}
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1568|   220k|    {
 1569|   220k|        return has_value();
 1570|   220k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|   441k|    {
  481|   441k|        return m_has_value;
  482|   441k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1574|   217k|    {
 1575|   217k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   217k|        return this->get_unexpected().error();
 1577|   217k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   217k|    {
  464|   217k|        return m_unexpected;
  465|   217k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  1.27M|    {
  357|  1.27M|        return m_unexpected;
  358|  1.27M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|   721k|    {
  343|   721k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   721k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   721k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  69.7k|    {
 1447|  69.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  69.7k|    {
  443|  69.7k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|   749k|    {
  352|   749k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   749k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   749k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  72.2k|    {
 1148|  72.2k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5883|  2.51k|{
 5884|  2.51k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|  2.51k|                      ranges::iterator_t<SourceRange>>) {
 5886|  2.51k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|  2.51k|    }
 5888|  2.51k|    else {
 5889|  2.51k|        auto it = ranges::begin(source);
 5890|  2.51k|        while (n > 0) {
 5891|  2.51k|            --n;
 5892|  2.51k|            ++it;
 5893|  2.51k|        }
 5894|  2.51k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|  2.51k|    }
 5896|  2.51k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  2.51k|    {
 2695|  2.51k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  2.51k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  2.51k|    {
 2676|  2.51k|        return decay_copy(t.begin());
 2677|  2.51k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1919|   115k|{
 1920|   115k|    return SCN_FWD(t);
  ------------------
  |  |  930|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|   115k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaRT_:
 5870|  2.51k|{
 5871|  2.51k|    return ranges::end(source);
 5872|  2.51k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.51k|    {
 2752|  2.51k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.51k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.51k|    {
 2734|  2.51k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.51k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.51k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3286|   842k|    {
 3287|   842k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1623|  2.77k|    {
 1624|  2.77k|        return value();
 1625|  2.77k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1597|  2.77k|    {
 1598|  2.77k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.77k|        return this->get_value();
 1600|  2.77k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|  2.77k|    {
  447|  2.77k|        return m_value;
  448|  2.77k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  2.51k|    {
 1401|  2.51k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|  2.51k|    {
  433|  2.51k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEcvS6_Ev:
 7935|  8.03k|    {
 7936|  8.03k|        return m_str;
 7937|  8.03k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJcEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.03k|    {
 5387|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE12arg_pointersEv:
 5339|  8.03k|    {
 5340|  8.03k|        return m_argptrs;
 5341|  8.03k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5438|  72.2k|    {
 5439|  72.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  8.03k|{
 8781|  8.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.90k, False: 122]
  |  |  ------------------
  ------------------
 8782|  7.90k|        return unexpected(result.error());
 8783|  7.90k|    }
 8784|    122|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    122|    static_cast<    \
  |  |  929|    122|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    122|    static_cast<    \
  |  |  929|    122|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.03k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1568|  72.2k|    {
 1569|  72.2k|        return has_value();
 1570|  72.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   144k|    {
  481|   144k|        return m_has_value;
  482|   144k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1574|  69.7k|    {
 1575|  69.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  69.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  69.7k|        return this->get_unexpected().error();
 1577|  69.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  69.7k|    {
  464|  69.7k|        return m_unexpected;
  465|  69.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  7.90k|    {
 1447|  7.90k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  7.90k|    {
  443|  7.90k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.03k|    {
 1148|  8.03k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|  2.51k|    {
 1624|  2.51k|        return value();
 1625|  2.51k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.51k|    {
 1598|  2.51k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.51k|        return this->get_value();
 1600|  2.51k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.51k|    {
  447|  2.51k|        return m_value;
  448|  2.51k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJcEEC2ES8_ONSt3__15tupleIJcEEE:
 5790|    122|    {
 5791|    122|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5641|  2.51k|    {
 5642|  2.51k|    }
_ZN3scn2v36detail25scan_result_value_storageIJcEEC2EONSt3__15tupleIJcEEE:
 5576|    122|    {
 5577|    122|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJcEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|    122|    {
 1401|    122|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJcEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|    122|    {
  433|    122|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJcEE4argsEv:
 5334|  8.03k|    {
 5335|  8.03k|        return m_args;
 5336|  8.03k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7651|  72.2k|{
 7652|  72.2k|    return s;
 7653|  72.2k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7628|  72.2k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJcEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.03k|    {
 7932|  8.03k|    }
_ZN3scn2v34scanIJcENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.01k|{
 8895|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.01k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.01k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS2_6localeEvEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEERKT0_OSB_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|  36.1k|{
 8633|  36.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  36.1k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8567|  36.1k|{
 8568|  36.1k|#if !SCN_DISABLE_LOCALE
 8569|  36.1k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  36.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  36.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  36.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  36.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.8k, False: 1.25k]
  |  |  ------------------
  ------------------
 8576|  34.8k|        return unexpected(result.error());
 8577|  34.8k|    }
 8578|  1.25k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  36.1k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.01k|{
 8828|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.01k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.01k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5356|  8.03k|{
 5357|  8.03k|    detail::check_scan_arg_types<Args...>();
 5358|  8.03k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.03k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5095|  24.0k|{
 5096|  24.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  24.0k|                  "Scan argument types must be default constructible");
 5098|  24.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  24.0k|                  "Scan argument types must be Destructible");
 5100|  24.0k|    static_assert(
 5101|  24.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  24.0k|        "Scan argument types must not be references");
 5103|  24.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5309|  8.03k|    {
 5310|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  8.03k|    {
 5321|  8.03k|        return {detail::make_arg<
 5322|  8.03k|            kind, Context,
 5323|  8.03k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.03k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.03k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5130|  8.03k|{
 5131|  8.03k|    return make_value<Context>(value).ref_value;
 5132|  8.03k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5080|  8.03k|{
 5081|  8.03k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.03k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.03k|                                  needs_context_tag>) {
 5085|  8.03k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.03k|    }
 5087|  8.03k|    else {
 5088|  8.03k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.03k|            value, context_tag<Context>{}));
 5090|  8.03k|    }
 5091|  8.03k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4919|  8.03k|    {                                                                        \
 4920|  8.03k|        return val;                                                          \
 4921|  8.03k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5049|  24.0k|{
 5050|  24.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  24.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  24.0k|    constexpr bool scannable_char =
 5054|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  24.0k|    static_assert(scannable_char,
 5056|  24.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  24.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  24.0k|    constexpr bool scannable_const =
 5060|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  24.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  24.0k|    constexpr bool scannable_disabled =
 5064|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  24.0k|    static_assert(scannable_disabled,
 5066|  24.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  24.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  24.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  24.0k|    static_assert(
 5071|  24.0k|        scannable,
 5072|  24.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  24.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  24.0k|    return arg_value{arg};
 5076|  24.0k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4862|  24.0k|    {
 4863|  24.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEcvS6_Ev:
 7935|  8.03k|    {
 7936|  8.03k|        return m_str;
 7937|  8.03k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.03k|    {
 5387|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5339|  8.03k|    {
 5340|  8.03k|        return m_argptrs;
 5341|  8.03k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  8.03k|{
 8781|  8.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.03k, False: 0]
  |  |  ------------------
  ------------------
 8782|  8.03k|        return unexpected(result.error());
 8783|  8.03k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.03k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  8.03k|    {
 1447|  8.03k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.03k|    {
  443|  8.03k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.03k|    {
 1148|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5334|  8.03k|    {
 5335|  8.03k|        return m_args;
 5336|  8.03k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.03k|    {
 7932|  8.03k|    }
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.01k|{
 8895|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.01k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.01k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.01k|{
 8828|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.01k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.01k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5356|  8.03k|{
 5357|  8.03k|    detail::check_scan_arg_types<Args...>();
 5358|  8.03k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.03k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5095|  24.0k|{
 5096|  24.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  24.0k|                  "Scan argument types must be default constructible");
 5098|  24.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  24.0k|                  "Scan argument types must be Destructible");
 5100|  24.0k|    static_assert(
 5101|  24.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  24.0k|        "Scan argument types must not be references");
 5103|  24.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5309|  8.03k|    {
 5310|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  8.03k|    {
 5321|  8.03k|        return {detail::make_arg<
 5322|  8.03k|            kind, Context,
 5323|  8.03k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.03k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.03k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5130|  8.03k|{
 5131|  8.03k|    return make_value<Context>(value).ref_value;
 5132|  8.03k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5080|  8.03k|{
 5081|  8.03k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.03k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.03k|                                  needs_context_tag>) {
 5085|  8.03k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.03k|    }
 5087|  8.03k|    else {
 5088|  8.03k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.03k|            value, context_tag<Context>{}));
 5090|  8.03k|    }
 5091|  8.03k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4919|  8.03k|    {                                                                        \
 4920|  8.03k|        return val;                                                          \
 4921|  8.03k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5049|  24.0k|{
 5050|  24.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  24.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  24.0k|    constexpr bool scannable_char =
 5054|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  24.0k|    static_assert(scannable_char,
 5056|  24.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  24.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  24.0k|    constexpr bool scannable_const =
 5060|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  24.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  24.0k|    constexpr bool scannable_disabled =
 5064|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  24.0k|    static_assert(scannable_disabled,
 5066|  24.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  24.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  24.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  24.0k|    static_assert(
 5071|  24.0k|        scannable,
 5072|  24.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  24.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  24.0k|    return arg_value{arg};
 5076|  24.0k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4862|  24.0k|    {
 4863|  24.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEcvS6_Ev:
 7935|  8.03k|    {
 7936|  8.03k|        return m_str;
 7937|  8.03k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.03k|    {
 5387|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5339|  8.03k|    {
 5340|  8.03k|        return m_argptrs;
 5341|  8.03k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  8.03k|{
 8781|  8.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.03k, False: 0]
  |  |  ------------------
  ------------------
 8782|  8.03k|        return unexpected(result.error());
 8783|  8.03k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.03k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  8.03k|    {
 1447|  8.03k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.03k|    {
  443|  8.03k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.03k|    {
 1148|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5334|  8.03k|    {
 5335|  8.03k|        return m_args;
 5336|  8.03k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.03k|    {
 7932|  8.03k|    }
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.01k|{
 8895|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.01k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.01k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.01k|{
 8828|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.01k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.01k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5356|  8.03k|{
 5357|  8.03k|    detail::check_scan_arg_types<Args...>();
 5358|  8.03k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.03k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5095|  24.0k|{
 5096|  24.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  24.0k|                  "Scan argument types must be default constructible");
 5098|  24.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  24.0k|                  "Scan argument types must be Destructible");
 5100|  24.0k|    static_assert(
 5101|  24.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  24.0k|        "Scan argument types must not be references");
 5103|  24.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5309|  8.03k|    {
 5310|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  8.03k|    {
 5321|  8.03k|        return {detail::make_arg<
 5322|  8.03k|            kind, Context,
 5323|  8.03k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.03k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.03k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  8.03k|{
 5131|  8.03k|    return make_value<Context>(value).ref_value;
 5132|  8.03k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5080|  8.03k|{
 5081|  8.03k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.03k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.03k|                                  needs_context_tag>) {
 5085|  8.03k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.03k|    }
 5087|  8.03k|    else {
 5088|  8.03k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.03k|            value, context_tag<Context>{}));
 5090|  8.03k|    }
 5091|  8.03k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4919|  8.03k|    {                                                                        \
 4920|  8.03k|        return val;                                                          \
 4921|  8.03k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5049|  24.0k|{
 5050|  24.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  24.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  24.0k|    constexpr bool scannable_char =
 5054|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  24.0k|    static_assert(scannable_char,
 5056|  24.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  24.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  24.0k|    constexpr bool scannable_const =
 5060|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  24.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  24.0k|    constexpr bool scannable_disabled =
 5064|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  24.0k|    static_assert(scannable_disabled,
 5066|  24.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  24.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  24.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  24.0k|    static_assert(
 5071|  24.0k|        scannable,
 5072|  24.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  24.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  24.0k|    return arg_value{arg};
 5076|  24.0k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4862|  24.0k|    {
 4863|  24.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEcvS6_Ev:
 7935|  8.03k|    {
 7936|  8.03k|        return m_str;
 7937|  8.03k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.03k|    {
 5387|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5339|  8.03k|    {
 5340|  8.03k|        return m_argptrs;
 5341|  8.03k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  8.03k|{
 8781|  8.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.03k, False: 0]
  |  |  ------------------
  ------------------
 8782|  8.03k|        return unexpected(result.error());
 8783|  8.03k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.03k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  8.03k|    {
 1447|  8.03k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.03k|    {
  443|  8.03k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.03k|    {
 1148|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5334|  8.03k|    {
 5335|  8.03k|        return m_args;
 5336|  8.03k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.03k|    {
 7932|  8.03k|    }
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.01k|{
 8895|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.01k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.01k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.01k|{
 8828|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.01k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.01k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJbEEEDav:
 5356|  8.03k|{
 5357|  8.03k|    detail::check_scan_arg_types<Args...>();
 5358|  8.03k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.03k|}
_ZN3scn2v36detail20check_scan_arg_typesIJbEEEvv:
 5095|  24.0k|{
 5096|  24.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  24.0k|                  "Scan argument types must be default constructible");
 5098|  24.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  24.0k|                  "Scan argument types must be Destructible");
 5100|  24.0k|    static_assert(
 5101|  24.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  24.0k|        "Scan argument types must not be references");
 5103|  24.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEEC2Ev:
 5309|  8.03k|    {
 5310|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  8.03k|    {
 5321|  8.03k|        return {detail::make_arg<
 5322|  8.03k|            kind, Context,
 5323|  8.03k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.03k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.03k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE11EbvEEPvRT2_:
 5130|  8.03k|{
 5131|  8.03k|    return make_value<Context>(value).ref_value;
 5132|  8.03k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEbEEDaRT0_:
 5080|  8.03k|{
 5081|  8.03k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.03k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.03k|                                  needs_context_tag>) {
 5085|  8.03k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.03k|    }
 5087|  8.03k|    else {
 5088|  8.03k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.03k|            value, context_tag<Context>{}));
 5090|  8.03k|    }
 5091|  8.03k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERb:
 4919|  8.03k|    {                                                                        \
 4920|  8.03k|        return val;                                                          \
 4921|  8.03k|    }
_ZN3scn2v36detail15make_value_implIRbEEDaOT_:
 5049|  24.0k|{
 5050|  24.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  24.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  24.0k|    constexpr bool scannable_char =
 5054|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  24.0k|    static_assert(scannable_char,
 5056|  24.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  24.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  24.0k|    constexpr bool scannable_const =
 5060|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  24.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  24.0k|    constexpr bool scannable_disabled =
 5064|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  24.0k|    static_assert(scannable_disabled,
 5066|  24.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  24.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  24.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  24.0k|    static_assert(
 5071|  24.0k|        scannable,
 5072|  24.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  24.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  24.0k|    return arg_value{arg};
 5076|  24.0k|}
_ZN3scn2v36detail9arg_valueC2IbEERT_:
 4862|  24.0k|    {
 4863|  24.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEcvS6_Ev:
 7935|  8.03k|    {
 7936|  8.03k|        return m_str;
 7937|  8.03k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.03k|    {
 5387|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE12arg_pointersEv:
 5339|  8.03k|    {
 5340|  8.03k|        return m_argptrs;
 5341|  8.03k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  8.03k|{
 8781|  8.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.03k, False: 0]
  |  |  ------------------
  ------------------
 8782|  8.03k|        return unexpected(result.error());
 8783|  8.03k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.03k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  8.03k|    {
 1447|  8.03k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  8.03k|    {
  443|  8.03k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.03k|    {
 1148|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJbEE4argsEv:
 5334|  8.03k|    {
 5335|  8.03k|        return m_args;
 5336|  8.03k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.03k|    {
 7932|  8.03k|    }
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIcNS2_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.01k|{
 8895|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.01k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.01k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
 8827|  4.01k|{
 8828|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.01k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.01k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJPvEEEDav:
 5356|  8.03k|{
 5357|  8.03k|    detail::check_scan_arg_types<Args...>();
 5358|  8.03k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.03k|}
_ZN3scn2v36detail20check_scan_arg_typesIJPvEEEvv:
 5095|  24.0k|{
 5096|  24.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  24.0k|                  "Scan argument types must be default constructible");
 5098|  24.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  24.0k|                  "Scan argument types must be Destructible");
 5100|  24.0k|    static_assert(
 5101|  24.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  24.0k|        "Scan argument types must not be references");
 5103|  24.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEEC2Ev:
 5309|  8.03k|    {
 5310|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5320|  8.03k|    {
 5321|  8.03k|        return {detail::make_arg<
 5322|  8.03k|            kind, Context,
 5323|  8.03k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.03k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.03k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5130|  8.03k|{
 5131|  8.03k|    return make_value<Context>(value).ref_value;
 5132|  8.03k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEPvEEDaRT0_:
 5080|  8.03k|{
 5081|  8.03k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.03k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.03k|                                  needs_context_tag>) {
 5085|  8.03k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.03k|    }
 5087|  8.03k|    else {
 5088|  8.03k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.03k|            value, context_tag<Context>{}));
 5090|  8.03k|    }
 5091|  8.03k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERPv:
 4919|  8.03k|    {                                                                        \
 4920|  8.03k|        return val;                                                          \
 4921|  8.03k|    }
_ZN3scn2v36detail15make_value_implIRPvEEDaOT_:
 5049|  24.0k|{
 5050|  24.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  24.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  24.0k|    constexpr bool scannable_char =
 5054|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  24.0k|    static_assert(scannable_char,
 5056|  24.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  24.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  24.0k|    constexpr bool scannable_const =
 5060|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  24.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  24.0k|    constexpr bool scannable_disabled =
 5064|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  24.0k|    static_assert(scannable_disabled,
 5066|  24.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  24.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  24.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  24.0k|    static_assert(
 5071|  24.0k|        scannable,
 5072|  24.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  24.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  24.0k|    return arg_value{arg};
 5076|  24.0k|}
_ZN3scn2v36detail9arg_valueC2IPvEERT_:
 4862|  24.0k|    {
 4863|  24.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEcvS6_Ev:
 7935|  8.03k|    {
 7936|  8.03k|        return m_str;
 7937|  8.03k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.03k|    {
 5387|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE12arg_pointersEv:
 5339|  8.03k|    {
 5340|  8.03k|        return m_argptrs;
 5341|  8.03k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8780|  8.03k|{
 8781|  8.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.03k, False: 0]
  |  |  ------------------
  ------------------
 8782|  8.03k|        return unexpected(result.error());
 8783|  8.03k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.03k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  8.03k|    {
 1447|  8.03k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  8.03k|    {
  443|  8.03k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.03k|    {
 1148|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJPvEE4argsEv:
 5334|  8.03k|    {
 5335|  8.03k|        return m_args;
 5336|  8.03k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.03k|    {
 7932|  8.03k|    }
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIcNS3_11char_traitsIcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
 8894|  4.01k|{
 8895|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.01k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.01k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIcS5_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIcNSK_13type_identityISF_E4typeEJDpNSW_ISQ_E4typeEEEE:
 8827|  4.01k|{
 8828|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.01k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.01k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5356|  8.03k|{
 5357|  8.03k|    detail::check_scan_arg_types<Args...>();
 5358|  8.03k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.03k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5095|  24.0k|{
 5096|  24.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  24.0k|                  "Scan argument types must be default constructible");
 5098|  24.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  24.0k|                  "Scan argument types must be Destructible");
 5100|  24.0k|    static_assert(
 5101|  24.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  24.0k|        "Scan argument types must not be references");
 5103|  24.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5309|  8.03k|    {
 5310|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  8.03k|    {
 5321|  8.03k|        return {detail::make_arg<
 5322|  8.03k|            kind, Context,
 5323|  8.03k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.03k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.03k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5130|  8.03k|{
 5131|  8.03k|    return make_value<Context>(value).ref_value;
 5132|  8.03k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5080|  8.03k|{
 5081|  8.03k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.03k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.03k|                                  needs_context_tag>) {
 5085|  8.03k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.03k|    }
 5087|  8.03k|    else {
 5088|  8.03k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.03k|            value, context_tag<Context>{}));
 5090|  8.03k|    }
 5091|  8.03k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4919|  8.03k|    {                                                                        \
 4920|  8.03k|        return val;                                                          \
 4921|  8.03k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5049|  24.0k|{
 5050|  24.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  24.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  24.0k|    constexpr bool scannable_char =
 5054|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  24.0k|    static_assert(scannable_char,
 5056|  24.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  24.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  24.0k|    constexpr bool scannable_const =
 5060|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  24.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  24.0k|    constexpr bool scannable_disabled =
 5064|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  24.0k|    static_assert(scannable_disabled,
 5066|  24.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  24.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  24.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  24.0k|    static_assert(
 5071|  24.0k|        scannable,
 5072|  24.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  24.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  24.0k|    return arg_value{arg};
 5076|  24.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4862|  24.0k|    {
 4863|  24.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEcvS6_Ev:
 7935|  8.03k|    {
 7936|  8.03k|        return m_str;
 7937|  8.03k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.03k|    {
 5387|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5339|  8.03k|    {
 5340|  8.03k|        return m_argptrs;
 5341|  8.03k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  8.03k|{
 8781|  8.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.23k, False: 796]
  |  |  ------------------
  ------------------
 8782|  7.23k|        return unexpected(result.error());
 8783|  7.23k|    }
 8784|    796|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.03k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  7.23k|    {
 1447|  7.23k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  7.23k|    {
  622|  7.23k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  7.23k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  7.23k|    {
  685|  7.23k|        scn::detail::construct_at(unexpected_ptr(),
  686|  7.23k|                                  std::forward<Args>(args)...);
  687|  7.23k|        m_has_value = false;
  688|  7.23k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  387|  46.5k|{
  388|  46.5k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|  46.5k|        T(std::forward<Args>(args)...);
  390|  46.5k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  14.4k|    {
  714|  14.4k|        return reinterpret_cast<unexpected<E>*>(
  715|  14.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  14.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  14.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.03k|    {
 1148|  8.03k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|    796|    {
 5791|    796|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5576|    864|    {
 5577|    864|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|    796|    {
 1401|    796|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|    796|    {
  612|    796|        construct(std::forward<Args>(args)...);
  613|    796|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|    796|    {
  678|    796|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    796|        m_has_value = true;
  680|    796|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|    796|{
  388|    796|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    796|        T(std::forward<Args>(args)...);
  390|    796|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5782|    796|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  1.59k|    {
  702|  1.59k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.59k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  1.59k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5786|  1.59k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5334|  8.03k|    {
 5335|  8.03k|        return m_args;
 5336|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5331|  8.03k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIcS5_NS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.03k|    {
 7932|  8.03k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  8.03k|    {
  627|  8.03k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 796, False: 7.23k]
  ------------------
  628|    796|            destroy_value();
  629|    796|        }
  630|  7.23k|        else {
  631|  7.23k|            destroy_unexpected();
  632|  7.23k|        }
  633|  8.03k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  8.03k|    {
  671|  8.03k|        return m_has_value;
  672|  8.03k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    796|    {
  692|    796|        scn::detail::destroy_at(value_ptr());
  693|    796|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|    796|{
  394|    796|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    796|        for (auto& elem : *p) {
  396|    796|            scn::detail::destroy_at(&elem);
  397|    796|        }
  398|    796|    }
  399|    796|    else {
  400|    796|        p->~T();
  401|    796|    }
  402|    796|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  7.23k|    {
  696|  7.23k|        scn::detail::destroy_at(unexpected_ptr());
  697|  7.23k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  393|  46.5k|{
  394|  46.5k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|  46.5k|        for (auto& elem : *p) {
  396|  46.5k|            scn::detail::destroy_at(&elem);
  397|  46.5k|        }
  398|  46.5k|    }
  399|  46.5k|    else {
  400|  46.5k|        p->~T();
  401|  46.5k|    }
  402|  46.5k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIcS5_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNS10_ISR_E4typeEEEE:
 8894|  4.01k|{
 8895|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.01k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.01k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIcNS4_IcEEEEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
 8827|  4.01k|{
 8828|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.01k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.01k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5356|  8.03k|{
 5357|  8.03k|    detail::check_scan_arg_types<Args...>();
 5358|  8.03k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.03k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5095|  24.0k|{
 5096|  24.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  24.0k|                  "Scan argument types must be default constructible");
 5098|  24.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  24.0k|                  "Scan argument types must be Destructible");
 5100|  24.0k|    static_assert(
 5101|  24.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  24.0k|        "Scan argument types must not be references");
 5103|  24.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5309|  8.03k|    {
 5310|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  8.03k|    {
 5321|  8.03k|        return {detail::make_arg<
 5322|  8.03k|            kind, Context,
 5323|  8.03k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.03k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.03k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5130|  8.03k|{
 5131|  8.03k|    return make_value<Context>(value).ref_value;
 5132|  8.03k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5080|  8.03k|{
 5081|  8.03k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.03k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.03k|                                  needs_context_tag>) {
 5085|  8.03k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.03k|    }
 5087|  8.03k|    else {
 5088|  8.03k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.03k|            value, context_tag<Context>{}));
 5090|  8.03k|    }
 5091|  8.03k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4919|  8.03k|    {                                                                        \
 4920|  8.03k|        return val;                                                          \
 4921|  8.03k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5049|  24.0k|{
 5050|  24.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  24.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  24.0k|    constexpr bool scannable_char =
 5054|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  24.0k|    static_assert(scannable_char,
 5056|  24.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  24.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  24.0k|    constexpr bool scannable_const =
 5060|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  24.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  24.0k|    constexpr bool scannable_disabled =
 5064|  24.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  24.0k|    static_assert(scannable_disabled,
 5066|  24.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  24.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  24.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  24.0k|    static_assert(
 5071|  24.0k|        scannable,
 5072|  24.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  24.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  24.0k|    return arg_value{arg};
 5076|  24.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4862|  24.0k|    {
 4863|  24.0k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEcvS6_Ev:
 7935|  8.03k|    {
 7936|  8.03k|        return m_str;
 7937|  8.03k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.03k|    {
 5387|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5339|  8.03k|    {
 5340|  8.03k|        return m_argptrs;
 5341|  8.03k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  8.03k|{
 8781|  8.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.23k, False: 796]
  |  |  ------------------
  ------------------
 8782|  7.23k|        return unexpected(result.error());
 8783|  7.23k|    }
 8784|    796|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.03k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  7.23k|    {
 1447|  7.23k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  7.23k|    {
  622|  7.23k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  7.23k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  7.23k|    {
  685|  7.23k|        scn::detail::construct_at(unexpected_ptr(),
  686|  7.23k|                                  std::forward<Args>(args)...);
  687|  7.23k|        m_has_value = false;
  688|  7.23k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  14.4k|    {
  714|  14.4k|        return reinterpret_cast<unexpected<E>*>(
  715|  14.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  14.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  14.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.03k|    {
 1148|  8.03k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|    796|    {
 5791|    796|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5576|    864|    {
 5577|    864|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|    796|    {
 1401|    796|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|    796|    {
  612|    796|        construct(std::forward<Args>(args)...);
  613|    796|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|    796|    {
  678|    796|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|    796|        m_has_value = true;
  680|    796|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|    796|{
  388|    796|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|    796|        T(std::forward<Args>(args)...);
  390|    796|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5782|    796|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|  1.59k|    {
  702|  1.59k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.59k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|  1.59k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5786|  1.59k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5334|  8.03k|    {
 5335|  8.03k|        return m_args;
 5336|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5331|  8.03k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJNS2_12basic_stringIwNS4_IwEENS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.03k|    {
 7932|  8.03k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  8.03k|    {
  627|  8.03k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 796, False: 7.23k]
  ------------------
  628|    796|            destroy_value();
  629|    796|        }
  630|  7.23k|        else {
  631|  7.23k|            destroy_unexpected();
  632|  7.23k|        }
  633|  8.03k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  8.03k|    {
  671|  8.03k|        return m_has_value;
  672|  8.03k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|    796|    {
  692|    796|        scn::detail::destroy_at(value_ptr());
  693|    796|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|    796|{
  394|    796|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|    796|        for (auto& elem : *p) {
  396|    796|            scn::detail::destroy_at(&elem);
  397|    796|        }
  398|    796|    }
  399|    796|    else {
  400|    796|        p->~T();
  401|    796|    }
  402|    796|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  7.23k|    {
  696|  7.23k|        scn::detail::destroy_at(unexpected_ptr());
  697|  7.23k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIcNS4_IcEEEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
 8894|  4.01k|{
 8895|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.01k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.01k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEERS6_vEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESF_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIcNSG_13type_identityISB_E4typeEJDpNSS_ISM_E4typeEEEE:
 8827|  4.01k|{
 8828|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  4.01k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  4.01k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5356|  8.03k|{
 5357|  8.03k|    detail::check_scan_arg_types<Args...>();
 5358|  8.03k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  8.03k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5095|  8.03k|{
 5096|  8.03k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  8.03k|                  "Scan argument types must be default constructible");
 5098|  8.03k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  8.03k|                  "Scan argument types must be Destructible");
 5100|  8.03k|    static_assert(
 5101|  8.03k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  8.03k|        "Scan argument types must not be references");
 5103|  8.03k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5309|  8.03k|    {
 5310|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  8.03k|    {
 5321|  8.03k|        return {detail::make_arg<
 5322|  8.03k|            kind, Context,
 5323|  8.03k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  8.03k|                                 typename Context::char_type>::value>(args)...};
 5325|  8.03k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5130|  8.03k|{
 5131|  8.03k|    return make_value<Context>(value).ref_value;
 5132|  8.03k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5080|  8.03k|{
 5081|  8.03k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  8.03k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  8.03k|                                  needs_context_tag>) {
 5085|  8.03k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  8.03k|    }
 5087|  8.03k|    else {
 5088|  8.03k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  8.03k|            value, context_tag<Context>{}));
 5090|  8.03k|    }
 5091|  8.03k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4919|  8.03k|    {                                                                        \
 4920|  8.03k|        return val;                                                          \
 4921|  8.03k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5049|  8.03k|{
 5050|  8.03k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  8.03k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  8.03k|    constexpr bool scannable_char =
 5054|  8.03k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  8.03k|    static_assert(scannable_char,
 5056|  8.03k|                  "Cannot scan an argument of an unsupported character "
 5057|  8.03k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  8.03k|    constexpr bool scannable_const =
 5060|  8.03k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  8.03k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  8.03k|    constexpr bool scannable_disabled =
 5064|  8.03k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  8.03k|    static_assert(scannable_disabled,
 5066|  8.03k|                  "Cannot scan an argument that has been disabled by "
 5067|  8.03k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  8.03k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  8.03k|    static_assert(
 5071|  8.03k|        scannable,
 5072|  8.03k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  8.03k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  8.03k|    return arg_value{arg};
 5076|  8.03k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4862|  8.03k|    {
 4863|  8.03k|    }
_ZNK3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEcvS6_Ev:
 7935|  8.03k|    {
 7936|  8.03k|        return m_str;
 7937|  8.03k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  8.03k|    {
 5387|  8.03k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5339|  8.03k|    {
 5340|  8.03k|        return m_argptrs;
 5341|  8.03k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8780|  8.03k|{
 8781|  8.03k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.23k, False: 796]
  |  |  ------------------
  ------------------
 8782|  7.23k|        return unexpected(result.error());
 8783|  7.23k|    }
 8784|    796|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    796|    static_cast<    \
  |  |  929|    796|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  8.03k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|  7.23k|    {
 1447|  7.23k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  7.23k|    {
  443|  7.23k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  8.03k|    {
 1148|  8.03k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5790|    796|    {
 5791|    796|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5576|    796|    {
 5577|    796|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1400|    796|    {
 1401|    796|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|    796|    {
  433|    796|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5334|  8.03k|    {
 5335|  8.03k|        return m_args;
 5336|  8.03k|    }
_ZN3scn2v324basic_scan_format_stringIcRNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  8.03k|    {
 7932|  8.03k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeERS6_vvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIcNSH_13type_identityISC_E4typeEJDpNSW_ISN_E4typeEEEE:
 8894|  4.01k|{
 8895|  4.01k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  4.01k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  4.01k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  4.01k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJwEEEDav:
 5356|  16.0k|{
 5357|  16.0k|    detail::check_scan_arg_types<Args...>();
 5358|  16.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJwEEEvv:
 5095|  16.0k|{
 5096|  16.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  16.0k|                  "Scan argument types must be default constructible");
 5098|  16.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  16.0k|                  "Scan argument types must be Destructible");
 5100|  16.0k|    static_assert(
 5101|  16.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  16.0k|        "Scan argument types must not be references");
 5103|  16.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEEC2Ev:
 5309|  16.0k|    {
 5310|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12make_argptrsIJwEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  16.0k|    {
 5321|  16.0k|        return {detail::make_arg<
 5322|  16.0k|            kind, Context,
 5323|  16.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE13EwvEEPvRT2_:
 5130|  16.0k|{
 5131|  16.0k|    return make_value<Context>(value).ref_value;
 5132|  16.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEwEEDaRT0_:
 5080|  16.0k|{
 5081|  16.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.0k|                                  needs_context_tag>) {
 5085|  16.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.0k|    }
 5087|  16.0k|    else {
 5088|  16.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.0k|            value, context_tag<Context>{}));
 5090|  16.0k|    }
 5091|  16.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERw:
 4919|  16.0k|    {                                                                        \
 4920|  16.0k|        return val;                                                          \
 4921|  16.0k|    }
_ZN3scn2v36detail15make_value_implIRwEEDaOT_:
 5049|  16.0k|{
 5050|  16.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  16.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  16.0k|    constexpr bool scannable_char =
 5054|  16.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  16.0k|    static_assert(scannable_char,
 5056|  16.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  16.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  16.0k|    constexpr bool scannable_const =
 5060|  16.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  16.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  16.0k|    constexpr bool scannable_disabled =
 5064|  16.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  16.0k|    static_assert(scannable_disabled,
 5066|  16.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  16.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  16.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  16.0k|    static_assert(
 5071|  16.0k|        scannable,
 5072|  16.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  16.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  16.0k|    return arg_value{arg};
 5076|  16.0k|}
_ZN3scn2v36detail9arg_valueC2IwEERT_:
 4862|  16.0k|    {
 4863|  16.0k|    }
_ZN3scn2v36detail13vscan_genericIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESF_NS1_22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEEEOSB_NS4_IT0_NS5_ISN_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISN_EEEE:
 8551|  72.2k|{
 8552|  72.2k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  72.2k|    auto result = vscan_impl(buffer, format, args);
 8555|  72.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  72.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.1k, False: 133]
  |  |  ------------------
  ------------------
 8556|  72.1k|        return unexpected(result.error());
 8557|  72.1k|    }
 8558|    133|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    133|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  72.2k|}
_ZN3scn2v36detail16make_scan_bufferINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRKT_:
 4680|   144k|{
 4681|   144k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   144k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   144k|                  "\n"
 4685|   144k|                  "Unsupported range type given as input to a scanning "
 4686|   144k|                  "function.\n"
 4687|   144k|                  "A range needs to have a character type (value type) "
 4688|   144k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   144k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   144k|                  "to be included.\n"
 4691|   144k|                  "See the scnlib documentation for more details.");
 4692|   144k|    static_assert(
 4693|   144k|        !std::is_same_v<T, custom_char_traits>,
 4694|   144k|        "\n"
 4695|   144k|        "Unsupported range type given as input to a scanning "
 4696|   144k|        "function.\n"
 4697|   144k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   144k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   144k|        "not supported.");
 4700|   144k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   144k|                  "\n"
 4702|   144k|                  "Unsupported range type given as input to a scanning "
 4703|   144k|                  "function.\n"
 4704|   144k|                  "file_marker_found cannot be used as an "
 4705|   144k|                  "source range type to scn::scan.\n"
 4706|   144k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   144k|                  "and do not provide an explicit source range, "
 4708|   144k|                  "or use scn::scan with a FILE* directly.");
 4709|   144k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   144k|                  "\n"
 4711|   144k|                  "Unsupported range type given as input to a scanning "
 4712|   144k|                  "function.\n"
 4713|   144k|                  "In order to be scannable, a range needs to satisfy "
 4714|   144k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   144k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   144k|                  "\n"
 4717|   144k|                  "Unsupported range type given as input to a scanning "
 4718|   144k|                  "function.\n"
 4719|   144k|                  "A range needs to model forward_range and have a valid "
 4720|   144k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   144k|                  "Examples of scannable ranges are std::string, "
 4722|   144k|                  "std::string_view, "
 4723|   144k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   144k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   144k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   144k|}
_ZN3scn2v36detail17_make_scan_buffer4implIwEEDaNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEENS1_12priority_tagILm3EEE:
 4572|   144k|{
 4573|   144k|    if constexpr (is_valid_char_type<CharT>) {
  ------------------
  |  Branch (4573:19): [Folded - Ignored]
  ------------------
 4574|   144k|        return r;
 4575|       |        // return make_string_scan_buffer(r);
 4576|   144k|    }
 4577|   144k|    else {
 4578|   144k|        return invalid_char_type{};
 4579|   144k|    }
 4580|   144k|}
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|   144k|    {
 1447|   144k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|   144k|    {
  443|   144k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   144k|    {
 1148|   144k|    }
_ZN3scn2v36detail23make_vscan_result_rangeIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_l:
 5883|    266|{
 5884|    266|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|    266|                      ranges::iterator_t<SourceRange>>) {
 5886|    266|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|    266|    }
 5888|    266|    else {
 5889|    266|        auto it = ranges::begin(source);
 5890|    266|        while (n > 0) {
 5891|    266|            --n;
 5892|    266|            ++it;
 5893|    266|        }
 5894|    266|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|    266|    }
 5896|    266|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|    266|    {
 2695|    266|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    266|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|    266|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|    266|    {
 2676|    266|        return decay_copy(t.begin());
 2677|    266|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1919|  8.56k|{
 1920|  8.56k|    return SCN_FWD(t);
  ------------------
  |  |  930|  8.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  8.56k|}
_ZN3scn2v36detail27make_vscan_result_range_endINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaRT_:
 5870|    266|{
 5871|    266|    return ranges::end(source);
 5872|    266|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|    266|    {
 2752|    266|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    266|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|    266|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|    266|    {
 2734|    266|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|    266|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|    266|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3286|   252k|    {
 3287|   252k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|    266|    {
 1401|    266|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|    266|    {
  433|    266|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEcvS6_Ev:
 7935|  16.0k|    {
 7936|  16.0k|        return m_str;
 7937|  16.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJwEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.0k|    {
 5387|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE12arg_pointersEv:
 5339|  16.0k|    {
 5340|  16.0k|        return m_argptrs;
 5341|  16.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5438|   144k|    {
 5439|   144k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  16.0k|{
 8781|  16.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.9k, False: 62]
  |  |  ------------------
  ------------------
 8782|  15.9k|        return unexpected(result.error());
 8783|  15.9k|    }
 8784|     62|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     62|    static_cast<    \
  |  |  929|     62|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.0k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1568|   144k|    {
 1569|   144k|        return has_value();
 1570|   144k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   289k|    {
  481|   289k|        return m_has_value;
  482|   289k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1574|   144k|    {
 1575|   144k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   144k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   144k|        return this->get_unexpected().error();
 1577|   144k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|   144k|    {
  464|   144k|        return m_unexpected;
  465|   144k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  15.9k|    {
 1447|  15.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  15.9k|    {
  443|  15.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.0k|    {
 1148|  16.0k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|    266|    {
 1624|    266|        return value();
 1625|    266|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|    266|    {
 1598|    266|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    266|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    266|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    266|        return this->get_value();
 1600|    266|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|    266|    {
  447|    266|        return m_value;
  448|    266|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJwEEC2ES8_ONSt3__15tupleIJwEEE:
 5790|     62|    {
 5791|     62|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5641|    266|    {
 5642|    266|    }
_ZN3scn2v36detail25scan_result_value_storageIJwEEC2EONSt3__15tupleIJwEEE:
 5576|     62|    {
 5577|     62|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJwEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|     62|    {
 1401|     62|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJwEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|     62|    {
  433|     62|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJwEE4argsEv:
 5334|  16.0k|    {
 5335|  16.0k|        return m_args;
 5336|  16.0k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7656|   144k|{
 7657|   144k|    return s;
 7658|   144k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7628|   144k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJwEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.0k|    {
 7932|  16.0k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS1_22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT_OSC_NS5_IT1_NS6_ISR_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISR_EEEE:
 8567|  72.2k|{
 8568|  72.2k|#if !SCN_DISABLE_LOCALE
 8569|  72.2k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  72.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  72.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  72.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  72.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  72.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72.1k, False: 133]
  |  |  ------------------
  ------------------
 8576|  72.1k|        return unexpected(result.error());
 8577|  72.1k|    }
 8578|    133|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    133|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  72.2k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5356|  16.0k|{
 5357|  16.0k|    detail::check_scan_arg_types<Args...>();
 5358|  16.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5309|  16.0k|    {
 5310|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  16.0k|    {
 5321|  16.0k|        return {detail::make_arg<
 5322|  16.0k|            kind, Context,
 5323|  16.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5130|  16.0k|{
 5131|  16.0k|    return make_value<Context>(value).ref_value;
 5132|  16.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5080|  16.0k|{
 5081|  16.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.0k|                                  needs_context_tag>) {
 5085|  16.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.0k|    }
 5087|  16.0k|    else {
 5088|  16.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.0k|            value, context_tag<Context>{}));
 5090|  16.0k|    }
 5091|  16.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4919|  16.0k|    {                                                                        \
 4920|  16.0k|        return val;                                                          \
 4921|  16.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEcvS6_Ev:
 7935|  16.0k|    {
 7936|  16.0k|        return m_str;
 7937|  16.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.0k|    {
 5387|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5339|  16.0k|    {
 5340|  16.0k|        return m_argptrs;
 5341|  16.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  16.0k|{
 8781|  16.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.0k, False: 0]
  |  |  ------------------
  ------------------
 8782|  16.0k|        return unexpected(result.error());
 8783|  16.0k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  16.0k|    {
 1447|  16.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.0k|    {
  443|  16.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.0k|    {
 1148|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5334|  16.0k|    {
 5335|  16.0k|        return m_args;
 5336|  16.0k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.0k|    {
 7932|  16.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5356|  16.0k|{
 5357|  16.0k|    detail::check_scan_arg_types<Args...>();
 5358|  16.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5309|  16.0k|    {
 5310|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  16.0k|    {
 5321|  16.0k|        return {detail::make_arg<
 5322|  16.0k|            kind, Context,
 5323|  16.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5130|  16.0k|{
 5131|  16.0k|    return make_value<Context>(value).ref_value;
 5132|  16.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5080|  16.0k|{
 5081|  16.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.0k|                                  needs_context_tag>) {
 5085|  16.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.0k|    }
 5087|  16.0k|    else {
 5088|  16.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.0k|            value, context_tag<Context>{}));
 5090|  16.0k|    }
 5091|  16.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4919|  16.0k|    {                                                                        \
 4920|  16.0k|        return val;                                                          \
 4921|  16.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEcvS6_Ev:
 7935|  16.0k|    {
 7936|  16.0k|        return m_str;
 7937|  16.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.0k|    {
 5387|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5339|  16.0k|    {
 5340|  16.0k|        return m_argptrs;
 5341|  16.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  16.0k|{
 8781|  16.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.0k, False: 0]
  |  |  ------------------
  ------------------
 8782|  16.0k|        return unexpected(result.error());
 8783|  16.0k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  16.0k|    {
 1447|  16.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.0k|    {
  443|  16.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.0k|    {
 1148|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5334|  16.0k|    {
 5335|  16.0k|        return m_args;
 5336|  16.0k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.0k|    {
 7932|  16.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5356|  16.0k|{
 5357|  16.0k|    detail::check_scan_arg_types<Args...>();
 5358|  16.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5309|  16.0k|    {
 5310|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  16.0k|    {
 5321|  16.0k|        return {detail::make_arg<
 5322|  16.0k|            kind, Context,
 5323|  16.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  16.0k|{
 5131|  16.0k|    return make_value<Context>(value).ref_value;
 5132|  16.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5080|  16.0k|{
 5081|  16.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.0k|                                  needs_context_tag>) {
 5085|  16.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.0k|    }
 5087|  16.0k|    else {
 5088|  16.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.0k|            value, context_tag<Context>{}));
 5090|  16.0k|    }
 5091|  16.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4919|  16.0k|    {                                                                        \
 4920|  16.0k|        return val;                                                          \
 4921|  16.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEcvS6_Ev:
 7935|  16.0k|    {
 7936|  16.0k|        return m_str;
 7937|  16.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.0k|    {
 5387|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5339|  16.0k|    {
 5340|  16.0k|        return m_argptrs;
 5341|  16.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  16.0k|{
 8781|  16.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.0k, False: 0]
  |  |  ------------------
  ------------------
 8782|  16.0k|        return unexpected(result.error());
 8783|  16.0k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  16.0k|    {
 1447|  16.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.0k|    {
  443|  16.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.0k|    {
 1148|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5334|  16.0k|    {
 5335|  16.0k|        return m_args;
 5336|  16.0k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.0k|    {
 7932|  16.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJbEEEDav:
 5356|  16.0k|{
 5357|  16.0k|    detail::check_scan_arg_types<Args...>();
 5358|  16.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEEC2Ev:
 5309|  16.0k|    {
 5310|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12make_argptrsIJbEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  16.0k|    {
 5321|  16.0k|        return {detail::make_arg<
 5322|  16.0k|            kind, Context,
 5323|  16.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE11EbvEEPvRT2_:
 5130|  16.0k|{
 5131|  16.0k|    return make_value<Context>(value).ref_value;
 5132|  16.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEbEEDaRT0_:
 5080|  16.0k|{
 5081|  16.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.0k|                                  needs_context_tag>) {
 5085|  16.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.0k|    }
 5087|  16.0k|    else {
 5088|  16.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.0k|            value, context_tag<Context>{}));
 5090|  16.0k|    }
 5091|  16.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERb:
 4919|  16.0k|    {                                                                        \
 4920|  16.0k|        return val;                                                          \
 4921|  16.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEcvS6_Ev:
 7935|  16.0k|    {
 7936|  16.0k|        return m_str;
 7937|  16.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJbEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.0k|    {
 5387|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE12arg_pointersEv:
 5339|  16.0k|    {
 5340|  16.0k|        return m_argptrs;
 5341|  16.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJbEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  16.0k|{
 8781|  16.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.0k, False: 0]
  |  |  ------------------
  ------------------
 8782|  16.0k|        return unexpected(result.error());
 8783|  16.0k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJbEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|  16.0k|    {
 1447|  16.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|  16.0k|    {
  443|  16.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJbEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.0k|    {
 1148|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJbEE4argsEv:
 5334|  16.0k|    {
 5335|  16.0k|        return m_args;
 5336|  16.0k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJbEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.0k|    {
 7932|  16.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJPvEEEDav:
 5356|  16.0k|{
 5357|  16.0k|    detail::check_scan_arg_types<Args...>();
 5358|  16.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEEC2Ev:
 5309|  16.0k|    {
 5310|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12make_argptrsIJS5_EEENSt3__15arrayIS5_Lm1EEEDpRT_:
 5320|  16.0k|    {
 5321|  16.0k|        return {detail::make_arg<
 5322|  16.0k|            kind, Context,
 5323|  16.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE15EPvvEES7_RT2_:
 5130|  16.0k|{
 5131|  16.0k|    return make_value<Context>(value).ref_value;
 5132|  16.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEPvEEDaRT0_:
 5080|  16.0k|{
 5081|  16.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.0k|                                  needs_context_tag>) {
 5085|  16.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.0k|    }
 5087|  16.0k|    else {
 5088|  16.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.0k|            value, context_tag<Context>{}));
 5090|  16.0k|    }
 5091|  16.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERPv:
 4919|  16.0k|    {                                                                        \
 4920|  16.0k|        return val;                                                          \
 4921|  16.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEcvS6_Ev:
 7935|  16.0k|    {
 7936|  16.0k|        return m_str;
 7937|  16.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJPvEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.0k|    {
 5387|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE12arg_pointersEv:
 5339|  16.0k|    {
 5340|  16.0k|        return m_argptrs;
 5341|  16.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJPvEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSA_ISC_EEONSt3__15tupleIJSE_EEE:
 8780|  16.0k|{
 8781|  16.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.0k, False: 0]
  |  |  ------------------
  ------------------
 8782|  16.0k|        return unexpected(result.error());
 8783|  16.0k|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJPvEEENS0_10scan_errorEEC2ISC_LSA_0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  16.0k|    {
 1447|  16.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  442|  16.0k|    {
  443|  16.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJPvEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.0k|    {
 1148|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJPvEE4argsEv:
 5334|  16.0k|    {
 5335|  16.0k|        return m_args;
 5336|  16.0k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJPvEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.0k|    {
 7932|  16.0k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5356|  16.0k|{
 5357|  16.0k|    detail::check_scan_arg_types<Args...>();
 5358|  16.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5309|  16.0k|    {
 5310|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  16.0k|    {
 5321|  16.0k|        return {detail::make_arg<
 5322|  16.0k|            kind, Context,
 5323|  16.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5130|  16.0k|{
 5131|  16.0k|    return make_value<Context>(value).ref_value;
 5132|  16.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5080|  16.0k|{
 5081|  16.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.0k|                                  needs_context_tag>) {
 5085|  16.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.0k|    }
 5087|  16.0k|    else {
 5088|  16.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.0k|            value, context_tag<Context>{}));
 5090|  16.0k|    }
 5091|  16.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4919|  16.0k|    {                                                                        \
 4920|  16.0k|        return val;                                                          \
 4921|  16.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEcvS6_Ev:
 7935|  16.0k|    {
 7936|  16.0k|        return m_str;
 7937|  16.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.0k|    {
 5387|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5339|  16.0k|    {
 5340|  16.0k|        return m_argptrs;
 5341|  16.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  16.0k|{
 8781|  16.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.9k, False: 68]
  |  |  ------------------
  ------------------
 8782|  15.9k|        return unexpected(result.error());
 8783|  15.9k|    }
 8784|     68|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     68|    static_cast<    \
  |  |  929|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     68|    static_cast<    \
  |  |  929|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  15.9k|    {
 1447|  15.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  15.9k|    {
  622|  15.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  15.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  15.9k|    {
  685|  15.9k|        scn::detail::construct_at(unexpected_ptr(),
  686|  15.9k|                                  std::forward<Args>(args)...);
  687|  15.9k|        m_has_value = false;
  688|  15.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  31.9k|    {
  714|  31.9k|        return reinterpret_cast<unexpected<E>*>(
  715|  31.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  31.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  31.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.0k|    {
 1148|  16.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|     68|    {
 5791|     68|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|     68|    {
 1401|     68|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|     68|    {
  612|     68|        construct(std::forward<Args>(args)...);
  613|     68|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|     68|    {
  678|     68|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|     68|        m_has_value = true;
  680|     68|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|     68|{
  388|     68|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|     68|        T(std::forward<Args>(args)...);
  390|     68|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5782|     68|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|    136|    {
  702|    136|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    136|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|    136|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5786|    136|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5334|  16.0k|    {
 5335|  16.0k|        return m_args;
 5336|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5331|  16.0k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIcNS4_IcEENS2_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.0k|    {
 7932|  16.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  16.0k|    {
  627|  16.0k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 68, False: 15.9k]
  ------------------
  628|     68|            destroy_value();
  629|     68|        }
  630|  15.9k|        else {
  631|  15.9k|            destroy_unexpected();
  632|  15.9k|        }
  633|  16.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  16.0k|    {
  671|  16.0k|        return m_has_value;
  672|  16.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|     68|    {
  692|     68|        scn::detail::destroy_at(value_ptr());
  693|     68|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  393|     68|{
  394|     68|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|     68|        for (auto& elem : *p) {
  396|     68|            scn::detail::destroy_at(&elem);
  397|     68|        }
  398|     68|    }
  399|     68|    else {
  400|     68|        p->~T();
  401|     68|    }
  402|     68|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  15.9k|    {
  696|  15.9k|        scn::detail::destroy_at(unexpected_ptr());
  697|  15.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5356|  16.0k|{
 5357|  16.0k|    detail::check_scan_arg_types<Args...>();
 5358|  16.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5309|  16.0k|    {
 5310|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  16.0k|    {
 5321|  16.0k|        return {detail::make_arg<
 5322|  16.0k|            kind, Context,
 5323|  16.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5130|  16.0k|{
 5131|  16.0k|    return make_value<Context>(value).ref_value;
 5132|  16.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5080|  16.0k|{
 5081|  16.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.0k|                                  needs_context_tag>) {
 5085|  16.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.0k|    }
 5087|  16.0k|    else {
 5088|  16.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.0k|            value, context_tag<Context>{}));
 5090|  16.0k|    }
 5091|  16.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4919|  16.0k|    {                                                                        \
 4920|  16.0k|        return val;                                                          \
 4921|  16.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEcvS6_Ev:
 7935|  16.0k|    {
 7936|  16.0k|        return m_str;
 7937|  16.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.0k|    {
 5387|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5339|  16.0k|    {
 5340|  16.0k|        return m_argptrs;
 5341|  16.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8780|  16.0k|{
 8781|  16.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.9k, False: 68]
  |  |  ------------------
  ------------------
 8782|  15.9k|        return unexpected(result.error());
 8783|  15.9k|    }
 8784|     68|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     68|    static_cast<    \
  |  |  929|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     68|    static_cast<    \
  |  |  929|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1446|  15.9k|    {
 1447|  15.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  621|  15.9k|    {
  622|  15.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|  15.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  684|  15.9k|    {
  685|  15.9k|        scn::detail::construct_at(unexpected_ptr(),
  686|  15.9k|                                  std::forward<Args>(args)...);
  687|  15.9k|        m_has_value = false;
  688|  15.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|  31.9k|    {
  714|  31.9k|        return reinterpret_cast<unexpected<E>*>(
  715|  31.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  31.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|  31.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.0k|    {
 1148|  16.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5790|     68|    {
 5791|     68|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1400|     68|    {
 1401|     68|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  611|     68|    {
  612|     68|        construct(std::forward<Args>(args)...);
  613|     68|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  677|     68|    {
  678|     68|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  679|     68|        m_has_value = true;
  680|     68|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  387|     68|{
  388|     68|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  389|     68|        T(std::forward<Args>(args)...);
  390|     68|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5782|     68|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  701|    136|    {
  702|    136|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|    136|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  703|    136|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5786|    136|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5334|  16.0k|    {
 5335|  16.0k|        return m_args;
 5336|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5331|  16.0k|    ~scan_arg_store() = default;
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJNS2_12basic_stringIwS5_NS2_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.0k|    {
 7932|  16.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|  16.0k|    {
  627|  16.0k|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 68, False: 15.9k]
  ------------------
  628|     68|            destroy_value();
  629|     68|        }
  630|  15.9k|        else {
  631|  15.9k|            destroy_unexpected();
  632|  15.9k|        }
  633|  16.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|  16.0k|    {
  671|  16.0k|        return m_has_value;
  672|  16.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  691|     68|    {
  692|     68|        scn::detail::destroy_at(value_ptr());
  693|     68|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  393|     68|{
  394|     68|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (394:19): [Folded - Ignored]
  ------------------
  395|     68|        for (auto& elem : *p) {
  396|     68|            scn::detail::destroy_at(&elem);
  397|     68|        }
  398|     68|    }
  399|     68|    else {
  400|     68|        p->~T();
  401|     68|    }
  402|     68|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|  15.9k|    {
  696|  15.9k|        scn::detail::destroy_at(unexpected_ptr());
  697|  15.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5356|  16.0k|{
 5357|  16.0k|    detail::check_scan_arg_types<Args...>();
 5358|  16.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  16.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5095|  16.0k|{
 5096|  16.0k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  16.0k|                  "Scan argument types must be default constructible");
 5098|  16.0k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  16.0k|                  "Scan argument types must be Destructible");
 5100|  16.0k|    static_assert(
 5101|  16.0k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  16.0k|        "Scan argument types must not be references");
 5103|  16.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5309|  16.0k|    {
 5310|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5320|  16.0k|    {
 5321|  16.0k|        return {detail::make_arg<
 5322|  16.0k|            kind, Context,
 5323|  16.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  16.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  16.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5130|  16.0k|{
 5131|  16.0k|    return make_value<Context>(value).ref_value;
 5132|  16.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5080|  16.0k|{
 5081|  16.0k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  16.0k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  16.0k|                                  needs_context_tag>) {
 5085|  16.0k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  16.0k|    }
 5087|  16.0k|    else {
 5088|  16.0k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  16.0k|            value, context_tag<Context>{}));
 5090|  16.0k|    }
 5091|  16.0k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4919|  16.0k|    {                                                                        \
 4920|  16.0k|        return val;                                                          \
 4921|  16.0k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5049|  16.0k|{
 5050|  16.0k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  16.0k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  16.0k|    constexpr bool scannable_char =
 5054|  16.0k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  16.0k|    static_assert(scannable_char,
 5056|  16.0k|                  "Cannot scan an argument of an unsupported character "
 5057|  16.0k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  16.0k|    constexpr bool scannable_const =
 5060|  16.0k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  16.0k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  16.0k|    constexpr bool scannable_disabled =
 5064|  16.0k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  16.0k|    static_assert(scannable_disabled,
 5066|  16.0k|                  "Cannot scan an argument that has been disabled by "
 5067|  16.0k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  16.0k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  16.0k|    static_assert(
 5071|  16.0k|        scannable,
 5072|  16.0k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  16.0k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  16.0k|    return arg_value{arg};
 5076|  16.0k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4862|  16.0k|    {
 4863|  16.0k|    }
_ZNK3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEcvS6_Ev:
 7935|  16.0k|    {
 7936|  16.0k|        return m_str;
 7937|  16.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  16.0k|    {
 5387|  16.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5339|  16.0k|    {
 5340|  16.0k|        return m_argptrs;
 5341|  16.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8780|  16.0k|{
 8781|  16.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.9k, False: 68]
  |  |  ------------------
  ------------------
 8782|  15.9k|        return unexpected(result.error());
 8783|  15.9k|    }
 8784|     68|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     68|    static_cast<    \
  |  |  929|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|     68|    static_cast<    \
  |  |  929|     68|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  16.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|  15.9k|    {
 1447|  15.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  442|  15.9k|    {
  443|  15.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  16.0k|    {
 1148|  16.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5790|     68|    {
 5791|     68|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5576|     68|    {
 5577|     68|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1400|     68|    {
 1401|     68|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  432|     68|    {
  433|     68|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5334|  16.0k|    {
 5335|  16.0k|        return m_args;
 5336|  16.0k|    }
_ZN3scn2v324basic_scan_format_stringIwRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEJS6_EEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|  16.0k|    {
 7932|  16.0k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3538|   478k|    {
 3539|   478k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   478k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3540|   478k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3544|  3.51M|    {
 3545|  3.51M|        return m_code == good;
 3546|  3.51M|    }
_ZNK3scn2v310scan_error4codeEv:
 3555|  54.3k|    {
 3556|  54.3k|        return m_code;
 3557|  54.3k|    }
_ZNK3scn2v36detail9fill_type4sizeEv:
 6141|  3.45k|    {
 6142|  3.45k|        return m_size;
 6143|  3.45k|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6182|  4.22k|    {
 6183|  4.22k|        SCN_GCC_COMPAT_PUSH
 6184|  4.22k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6185|  4.22k|        switch (type) {
 6186|  1.85k|            case presentation_type::none:
  ------------------
  |  Branch (6186:13): [True: 1.85k, False: 2.37k]
  ------------------
 6187|  1.85k|                return 10;
 6188|     38|            case presentation_type::int_generic:
  ------------------
  |  Branch (6188:13): [True: 38, False: 4.19k]
  ------------------
 6189|     38|                return 0;
 6190|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6190:13): [True: 0, False: 4.22k]
  ------------------
 6191|      0|                return arbitrary_base;
 6192|       |
 6193|     30|            case presentation_type::int_binary:
  ------------------
  |  Branch (6193:13): [True: 30, False: 4.19k]
  ------------------
 6194|     30|                return 2;
 6195|     34|            case presentation_type::int_octal:
  ------------------
  |  Branch (6195:13): [True: 34, False: 4.19k]
  ------------------
 6196|     34|                return 8;
 6197|     44|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6197:13): [True: 44, False: 4.18k]
  ------------------
 6198|     80|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6198:13): [True: 36, False: 4.19k]
  ------------------
 6199|     80|                return 10;
 6200|  2.19k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6200:13): [True: 2.19k, False: 2.03k]
  ------------------
 6201|  2.19k|                return 16;
 6202|       |
 6203|      0|            default:
  ------------------
  |  Branch (6203:13): [True: 0, False: 4.22k]
  ------------------
 6204|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6205|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6206|  4.22k|        }
 6207|  4.22k|        SCN_GCC_COMPAT_POP
 6208|  4.22k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6220|  59.8k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_alignENS1_10align_typeE:
 6223|  8.15k|    {
 6224|  8.15k|        m_specs.align = align;
 6225|  8.15k|    }
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6232|    208|    {
 6233|    208|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|    208|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6233:23): [Folded - Ignored]
  ------------------
 6234|    208|            m_specs.localized = true;
 6235|    208|        }
 6236|      0|        else {
 6237|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6238|      0|        }
 6239|    208|    }
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6242|  8.52k|    {
 6243|  8.52k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6243:13): [True: 0, False: 8.52k]
  |  Branch (6243:39): [True: 0, False: 0]
  ------------------
 6244|       |            // clang-format off
 6245|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6246|       |            // clang-format on
 6247|      0|        }
 6248|       |
 6249|  8.52k|        m_specs.width = width;
 6250|  8.52k|    }
_ZN3scn2v36detail12specs_setter12on_precisionEi:
 6252|  7.09k|    {
 6253|  7.09k|        if (m_specs.width > prec) {
  ------------------
  |  Branch (6253:13): [True: 62, False: 7.03k]
  ------------------
 6254|       |            // clang-format off
 6255|     62|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6256|       |            // clang-format on
 6257|     62|        }
 6258|       |
 6259|  7.03k|        m_specs.precision = prec;
 6260|  7.03k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6263|  67.4k|    {
 6264|  67.4k|        m_specs.type = type;
 6265|  67.4k|    }
_ZN3scn2v36detail12specs_setter17on_charset_singleEDi:
 6268|  2.18M|    {
 6269|  2.18M|        const auto cp_value = static_cast<unsigned>(cp);
 6270|  2.18M|        if (SCN_LIKELY(cp_value <= 127)) {
  ------------------
  |  |  858|  2.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.93M, False: 247k]
  |  |  ------------------
  ------------------
 6271|  1.93M|            m_specs.charset_literals[cp_value / 8] |=
 6272|  1.93M|                static_cast<unsigned char>(1ul << (cp_value % 8));
 6273|  1.93M|        }
 6274|   247k|        else {
 6275|   247k|            m_specs.charset_has_nonascii = true;
 6276|   247k|        }
 6277|  2.18M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6280|  12.7k|    {
 6281|  12.7k|        const auto begin_value = static_cast<unsigned>(begin);
 6282|  12.7k|        const auto end_value = static_cast<unsigned>(end);
 6283|  12.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  12.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6284|       |
 6285|  12.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  12.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.49k, False: 6.20k]
  |  |  ------------------
  ------------------
 6286|       |            // No need to bit-twiddle with a mask, because with the
 6287|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6288|  6.49k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  6.49k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6289|   470k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6289:40): [True: 463k, False: 6.49k]
  ------------------
 6290|   463k|                m_specs.charset_literals[v / 8] |=
 6291|   463k|                    static_cast<unsigned char>(1ul << (v % 8));
 6292|   463k|            }
 6293|  6.49k|        }
 6294|  6.20k|        else {
 6295|  6.20k|            m_specs.charset_has_nonascii = true;
 6296|  6.20k|        }
 6297|  12.7k|    }
_ZN3scn2v36detail12specs_setter19on_charset_invertedEv:
 6300|  2.46k|    {
 6301|  2.46k|        m_specs.charset_is_inverted = true;
 6302|  2.46k|    }
_ZN3scn2v36detail12specs_setter14on_regex_flagsENS1_11regex_flagsE:
 6319|  29.3k|    {
 6320|  29.3k|        m_specs.regexp_flags = flags;
 6321|  29.3k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6325|  10.9k|    {
 6326|  10.9k|        SCN_UNLIKELY_ATTR
 6327|  10.9k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6328|  10.9k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6336|  2.26M|    {
 6337|  2.26M|        return static_cast<bool>(m_error);
 6338|  2.26M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3579|  54.3k|{
 3580|  54.3k|    return a.code() == b;
 3581|  54.3k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3583|  54.3k|{
 3584|  54.3k|    return !(a == b);
 3585|  54.3k|}
_ZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3878|   209k|{
 3879|   209k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3880|       |
 3881|   209k|    const auto is_trailing_code_unit = [](char ch) {
 3882|   209k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3883|   209k|    };
 3884|       |
 3885|   209k|    if (input.size() == 1) {
  ------------------
  |  Branch (3885:9): [True: 187k, False: 21.4k]
  ------------------
 3886|   187k|        SCN_EXPECT(static_cast<unsigned char>(input[0]) < 0x80);
  ------------------
  |  |  924|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3887|   187k|        return static_cast<char32_t>(input[0]);
 3888|   187k|    }
 3889|       |
 3890|  21.4k|    if (input.size() == 2) {
  ------------------
  |  Branch (3890:9): [True: 20.5k, False: 916]
  ------------------
 3891|  20.5k|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xe0) == 0xc0);
  ------------------
  |  |  924|  20.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3892|  20.5k|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|  20.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3893|       |
 3894|  20.5k|        char32_t cp{};
 3895|  20.5k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3896|  20.5k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3897|  20.5k|        return cp;
 3898|  20.5k|    }
 3899|       |
 3900|    916|    if (input.size() == 3) {
  ------------------
  |  Branch (3900:9): [True: 686, False: 230]
  ------------------
 3901|    686|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf0) == 0xe0);
  ------------------
  |  |  924|    686|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    686|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3902|    686|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    686|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    686|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3903|    686|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    686|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    686|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3904|       |
 3905|    686|        char32_t cp{};
 3906|    686|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3907|    686|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3908|    686|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3909|    686|        return cp;
 3910|    686|    }
 3911|       |
 3912|    230|    if (input.size() == 4) {
  ------------------
  |  Branch (3912:9): [True: 230, False: 0]
  ------------------
 3913|    230|        SCN_EXPECT((static_cast<unsigned char>(input[0]) & 0xf8) == 0xf0);
  ------------------
  |  |  924|    230|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    230|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3914|    230|        SCN_EXPECT(static_cast<unsigned char>(input[0]) <= 0xf4);
  ------------------
  |  |  924|    230|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    230|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3915|    230|        SCN_EXPECT(is_trailing_code_unit(input[1]));
  ------------------
  |  |  924|    230|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    230|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3916|    230|        SCN_EXPECT(is_trailing_code_unit(input[2]));
  ------------------
  |  |  924|    230|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    230|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3917|    230|        SCN_EXPECT(is_trailing_code_unit(input[3]));
  ------------------
  |  |  924|    230|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    230|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3918|       |
 3919|    230|        char32_t cp{};
 3920|    230|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3921|    230|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3922|    230|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3923|    230|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3924|    230|        return cp;
 3925|    230|    }
 3926|       |
 3927|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3928|       |    // gcc 7 thinks we'll get here, even when we won't
 3929|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3930|      0|#endif
 3931|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3932|      0|}
_ZN3scn2v36detailanENS1_11regex_flagsES2_:
 6071|  42.2k|{
 6072|  42.2k|    return static_cast<regex_flags>(static_cast<unsigned>(a) &
 6073|  42.2k|                                    static_cast<unsigned>(b));
 6074|  42.2k|}
_ZN3scn2v36detailorENS1_11regex_flagsES2_:
 6076|  4.12k|{
 6077|  4.12k|    return static_cast<regex_flags>(static_cast<unsigned>(a) |
 6078|  4.12k|                                    static_cast<unsigned>(b));
 6079|  4.12k|}
_ZN3scn2v36detailoRERNS1_11regex_flagsES2_:
 6091|  4.12k|{
 6092|  4.12k|    return a = a | b;
 6093|  4.12k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7023|    624|{
 7024|    624|    switch (type) {
 7025|    156|        case arg_type::none_type:
  ------------------
  |  Branch (7025:9): [True: 156, False: 468]
  ------------------
 7026|    156|            return arg_type_category::none;
 7027|       |
 7028|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7028:9): [True: 0, False: 624]
  ------------------
 7029|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7029:9): [True: 0, False: 624]
  ------------------
 7030|     52|        case arg_type::int_type:
  ------------------
  |  Branch (7030:9): [True: 52, False: 572]
  ------------------
 7031|     52|        case arg_type::long_type:
  ------------------
  |  Branch (7031:9): [True: 0, False: 624]
  ------------------
 7032|     52|        case arg_type::llong_type:
  ------------------
  |  Branch (7032:9): [True: 0, False: 624]
  ------------------
 7033|     52|            return arg_type_category::integer;
 7034|       |
 7035|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7035:9): [True: 0, False: 624]
  ------------------
 7036|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7036:9): [True: 0, False: 624]
  ------------------
 7037|     52|        case arg_type::uint_type:
  ------------------
  |  Branch (7037:9): [True: 52, False: 572]
  ------------------
 7038|     52|        case arg_type::ulong_type:
  ------------------
  |  Branch (7038:9): [True: 0, False: 624]
  ------------------
 7039|     52|        case arg_type::ullong_type:
  ------------------
  |  Branch (7039:9): [True: 0, False: 624]
  ------------------
 7040|     52|            return arg_type_category::unsigned_integer;
 7041|       |
 7042|     52|        case arg_type::pointer_type:
  ------------------
  |  Branch (7042:9): [True: 52, False: 572]
  ------------------
 7043|     52|            return arg_type_category::pointer;
 7044|     52|        case arg_type::bool_type:
  ------------------
  |  Branch (7044:9): [True: 52, False: 572]
  ------------------
 7045|     52|            return arg_type_category::boolean;
 7046|     40|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7046:9): [True: 40, False: 584]
  ------------------
 7047|     52|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7047:9): [True: 12, False: 612]
  ------------------
 7048|     52|        case arg_type::code_point_type:
  ------------------
  |  Branch (7048:9): [True: 0, False: 624]
  ------------------
 7049|     52|            return arg_type_category::character;
 7050|       |
 7051|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7051:9): [True: 0, False: 624]
  ------------------
 7052|     52|        case arg_type::double_type:
  ------------------
  |  Branch (7052:9): [True: 52, False: 572]
  ------------------
 7053|     52|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7053:9): [True: 0, False: 624]
  ------------------
 7054|     52|            return arg_type_category::floating;
 7055|       |
 7056|     40|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7056:9): [True: 40, False: 584]
  ------------------
 7057|     92|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7057:9): [True: 52, False: 572]
  ------------------
 7058|    104|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7058:9): [True: 12, False: 612]
  ------------------
 7059|    156|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7059:9): [True: 52, False: 572]
  ------------------
 7060|    156|            return arg_type_category::string;
 7061|       |
 7062|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7062:9): [True: 0, False: 624]
  ------------------
 7063|      0|            return arg_type_category::custom;
 7064|       |
 7065|      0|            SCN_CLANG_PUSH
 7066|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7067|      0|        default:
  ------------------
  |  Branch (7067:9): [True: 0, False: 624]
  ------------------
 7068|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7069|    624|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7070|    624|            SCN_CLANG_POP
 7071|    624|    }
 7072|       |
 7073|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7074|    624|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3624|    880|{
 3625|    880|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    880|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|    880|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7109|  11.8k|{
 7110|  11.8k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.81k, False: 2.00k]
  |  |  ------------------
  ------------------
 7111|  9.81k|        return handler.on_error("Invalid type specifier for integer type");
 7112|  9.81k|    }
 7113|  2.00k|    if (specs.localized) {
  ------------------
  |  Branch (7113:9): [True: 60, False: 1.94k]
  ------------------
 7114|     60|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|     60|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 52]
  |  |  ------------------
  ------------------
 7115|       |            // clang-format off
 7116|      8|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7117|       |            // clang-format on
 7118|      8|            return;
 7119|      8|        }
 7120|     52|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|     52|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 52]
  |  |  ------------------
  ------------------
 7121|       |            // clang-format off
 7122|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7123|       |            // clang-format on
 7124|      0|        }
 7125|     52|    }
 7126|  2.00k|}
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1919|     78|{
 1920|     78|    return SCN_FWD(t);
  ------------------
  |  |  930|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|     78|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3624|  2.18k|{
 3625|  2.18k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.18k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  2.18k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7153|  5.91k|{
 7154|  5.91k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7154:9): [True: 4.98k, False: 928]
  ------------------
 7155|  5.91k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7155:10): [True: 76, False: 4.90k]
  ------------------
 7156|  4.98k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7156:10): [True: 4.83k, False: 74]
  ------------------
 7157|  4.90k|        SCN_UNLIKELY_ATTR
 7158|  4.90k|        return handler.on_error("Invalid type specifier for float type");
 7159|  4.90k|    }
 7160|  5.91k|}
_ZNK3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9has_valueEv:
  480|  19.0k|    {
  481|  19.0k|        return m_has_value;
  482|  19.0k|    }
_ZNK3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEcvbEv:
 1568|  9.52k|    {
 1569|  9.52k|        return has_value();
 1570|  9.52k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EE9get_valueEv:
  446|  9.52k|    {
  447|  9.52k|        return m_value;
  448|  9.52k|    }
_ZNR3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEE5valueIS4_LPv0EEERT_v:
 1597|  9.52k|    {
 1598|  9.52k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  9.52k|        return this->get_value();
 1600|  9.52k|    }
_ZNO3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEdeIS4_LPv0EEEOT_v:
 1633|  9.52k|    {
 1634|  9.52k|        return std::move(value());
 1635|  9.52k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA14_KcEEEDaDpOT_:
 3624|  5.07k|{
 3625|  5.07k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.07k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  5.07k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA32_KcEEEDaDpOT_:
 3624|  2.68k|{
 3625|  2.68k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.68k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  2.68k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA36_KcEEEDaDpOT_:
 3624|    168|{
 3625|    168|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|    168|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA52_KcEEEDaDpOT_:
 3624|    216|{
 3625|    216|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    216|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|    216|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3624|  1.09k|{
 3625|  1.09k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  1.09k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7165|  17.6k|{
 7166|  17.6k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7166:9): [True: 2.71k, False: 14.8k]
  ------------------
 7167|  17.6k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7167:9): [True: 528, False: 14.3k]
  ------------------
 7168|  17.6k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7168:9): [True: 4.05k, False: 10.3k]
  ------------------
 7169|  17.6k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7169:9): [True: 8.83k, False: 1.47k]
  ------------------
 7170|  17.6k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7170:9): [True: 906, False: 564]
  ------------------
 7171|  17.0k|        return;
 7172|  17.0k|    }
 7173|    564|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7173:9): [True: 126, False: 438]
  ------------------
 7174|    126|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|    126|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 114]
  |  |  ------------------
  ------------------
 7175|       |            // clang-format off
 7176|     12|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7177|       |            // clang-format on
 7178|     12|        }
 7179|    114|        return;
 7180|    126|    }
 7181|    438|    SCN_UNLIKELY_ATTR
 7182|    438|    handler.on_error("Invalid type specifier for string");
 7183|    438|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA47_KcEEEDaDpOT_:
 3624|  4.60k|{
 3625|  4.60k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  4.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  4.60k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA23_KcEEEDaDpOT_:
 3624|     26|{
 3625|     26|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|     26|}
_ZN3scn2v36detail21check_bool_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7199|  5.91k|{
 7200|  5.91k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7200:9): [True: 4.98k, False: 928]
  ------------------
 7201|  5.91k|        specs.type != presentation_type::string &&
  ------------------
  |  Branch (7201:9): [True: 4.80k, False: 180]
  ------------------
 7202|  5.91k|        specs.type != presentation_type::int_generic &&
  ------------------
  |  Branch (7202:9): [True: 4.78k, False: 14]
  ------------------
 7203|  5.91k|        specs.type != presentation_type::int_hex &&
  ------------------
  |  Branch (7203:9): [True: 4.78k, False: 6]
  ------------------
 7204|  5.91k|        specs.type != presentation_type::int_binary &&
  ------------------
  |  Branch (7204:9): [True: 4.76k, False: 14]
  ------------------
 7205|  5.91k|        specs.type != presentation_type::int_unsigned_decimal &&
  ------------------
  |  Branch (7205:9): [True: 4.75k, False: 12]
  ------------------
 7206|  5.91k|        specs.type != presentation_type::int_octal &&
  ------------------
  |  Branch (7206:9): [True: 4.74k, False: 12]
  ------------------
 7207|  5.91k|        specs.type != presentation_type::int_decimal) {
  ------------------
  |  Branch (7207:9): [True: 4.72k, False: 18]
  ------------------
 7208|  4.72k|        SCN_UNLIKELY_ATTR
 7209|  4.72k|        return handler.on_error("Invalid type specifier for boolean");
 7210|  4.72k|    }
 7211|  5.91k|}
_ZN3scn2v36detail21check_char_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7131|  5.87k|{
 7132|  5.87k|    if (specs.type > presentation_type::int_hex ||
  ------------------
  |  Branch (7132:9): [True: 4.89k, False: 974]
  ------------------
 7133|  5.87k|        specs.type == presentation_type::int_arbitrary_base) {
  ------------------
  |  Branch (7133:9): [True: 0, False: 974]
  ------------------
 7134|  4.89k|        SCN_UNLIKELY_ATTR
 7135|  4.89k|        return handler.on_error("Invalid type specifier for character type");
 7136|  4.89k|    }
 7137|  5.87k|}
_ZN3scn2v36detail24check_pointer_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7188|  5.87k|{
 7189|  5.87k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7189:9): [True: 4.96k, False: 906]
  ------------------
 7190|  5.87k|        specs.type != presentation_type::pointer) {
  ------------------
  |  Branch (7190:9): [True: 4.95k, False: 10]
  ------------------
 7191|  4.95k|        SCN_UNLIKELY_ATTR
 7192|  4.95k|        return handler.on_error("Invalid type specifier for pointer");
 7193|  4.95k|    }
 7194|  5.87k|}
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|   162k|{
 3686|   162k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|   162k|                                          const CharT*, const CharT*>) {
 3688|   162k|        return {first, last};
 3689|   162k|    }
 3690|   162k|    else {
 3691|   162k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|   162k|    }
 3693|   162k|}
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|   296M|{
 3686|   296M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|   296M|                                          const CharT*, const CharT*>) {
 3688|   296M|        return {first, last};
 3689|   296M|    }
 3690|   296M|    else {
 3691|   296M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|   296M|    }
 3693|   296M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3300|  2.02M|    {
 3301|  2.02M|        return m_iterator;
 3302|  2.02M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3304|  2.44M|    {
 3305|  2.44M|        return m_sentinel;
 3306|  2.44M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3300|   423k|    {
 3301|   423k|        return m_iterator;
 3302|   423k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3304|   592M|    {
 3305|   592M|        return m_sentinel;
 3306|   592M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7951|   114k|    constexpr locale_ref() = default;
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|     40|{
 1182|     40|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|     40|}
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|    920|    {
  357|    920|        return m_unexpected;
  358|    920|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3624|  5.73k|{
 3625|  5.73k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  5.73k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|  24.5k|    {
  343|  24.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  24.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  24.5k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|  80.5k|    {
 1447|  80.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  81.5k|    {
  443|  81.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   112k|    {
 1148|   112k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  23.4k|    {
 1401|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  23.4k|    {
  433|  23.4k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1568|   113k|    {
 1569|   113k|        return has_value();
 1570|   113k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|   225k|    {
  481|   225k|        return m_has_value;
  482|   225k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1574|  80.6k|    {
 1575|  80.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  80.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  80.6k|        return this->get_unexpected().error();
 1577|  80.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  80.6k|    {
  464|  80.6k|        return m_unexpected;
  465|  80.6k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  20.6k|    {
 1634|  20.6k|        return std::move(value());
 1635|  20.6k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  30.4k|    {
 1598|  30.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  30.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  30.4k|        return this->get_value();
 1600|  30.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|  30.4k|    {
  447|  30.4k|        return m_value;
  448|  30.4k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|  15.1k|    {
 1447|  15.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  16.1k|    {
  443|  16.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  34.3k|    {
 1148|  34.3k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  17.2k|    {
 1401|  17.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  17.2k|    {
  433|  17.2k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1568|  35.3k|    {
 1569|  35.3k|        return has_value();
 1570|  35.3k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  67.8k|    {
  481|  67.8k|        return m_has_value;
  482|  67.8k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1574|  15.1k|    {
 1575|  15.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  15.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  15.1k|        return this->get_unexpected().error();
 1577|  15.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  15.1k|    {
  464|  15.1k|        return m_unexpected;
  465|  15.1k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  14.7k|    {
 1634|  14.7k|        return std::move(value());
 1635|  14.7k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  17.2k|    {
 1598|  17.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  17.2k|        return this->get_value();
 1600|  17.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|  17.2k|    {
  447|  17.2k|        return m_value;
  448|  17.2k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  8.96k|    {
 1808|  8.96k|        return detail::transform_error_impl(std::move(*this),
 1809|  8.96k|                                            std::forward<F>(f));
 1810|  8.96k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  8.96k|{
 1294|  8.96k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  8.96k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  8.96k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  8.96k|            return result(*std::forward<Exp>(exp));
 1298|  8.96k|        }
 1299|       |
 1300|  8.96k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  8.96k|        return result(unexpect, monostate{});
 1302|  8.96k|    }
 1303|  8.96k|    else {
 1304|  8.96k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  8.96k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  8.96k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.96k, False: 0]
  |  |  ------------------
  ------------------
 1306|  8.96k|                   ? result(*std::forward<Exp>(exp))
 1307|  8.96k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  8.96k|    }
 1311|  8.96k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|   111k|    {
  481|   111k|        return m_has_value;
  482|   111k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  10.9k|    {
 1634|  10.9k|        return std::move(value());
 1635|  10.9k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  52.7k|    {
 1598|  52.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  52.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  52.7k|        return this->get_value();
 1600|  52.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  52.7k|    {
  447|  52.7k|        return m_value;
  448|  52.7k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1584|    104|    {
 1585|    104|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    104|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    104|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|    104|        return std::move(this->get_unexpected().error());
 1587|    104|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    104|    {
  464|    104|        return m_unexpected;
  465|    104|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|    980|    {
 1457|    980|    }
_ZN3scn2v310scan_errorC2Ev:
 3533|   320k|    constexpr scan_error() noexcept = default;
_ZNK3scn2v36detail9fill_type13get_code_unitIcEET_v:
 6147|  2.68k|    {
 6148|  2.68k|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|  2.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6149|  2.68k|        CharT r{};
 6150|  2.68k|        std::memcpy(&r, m_data, m_size);
 6151|  2.68k|        return r;
 6152|  2.68k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|    484|    {
  343|    484|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    484|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|    484|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|    524|    {
  352|    524|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    524|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|    524|    }
_ZNK3scn2v36detail9fill_type14get_code_unitsIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6156|    428|    {
 6157|    428|        return {reinterpret_cast<const CharT*>(m_data), m_size};
 6158|    428|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSD_:
 2932|     78|    {
 2933|     78|        return fn::impl(std::forward<T>(t));
 2934|     78|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISD_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSM_E4typeE_EEOSD_:
 2923|     78|    {
 2924|     78|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2925|     78|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|     78|    {
 2901|     78|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|     78|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 2866|     78|    {
 2867|     78|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|     78|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|     78|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|     40|    {
  343|     40|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|     40|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|     40|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|      8|    {
  343|      8|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|      8|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|      8|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|  17.8k|    {
  357|  17.8k|        return m_unexpected;
  358|  17.8k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|  2.97k|    {
  352|  2.97k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.97k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  2.97k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  28.4k|    {
  343|  28.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  28.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  28.4k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  28.4k|    {
  357|  28.4k|        return m_unexpected;
  358|  28.4k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  28.4k|    {
  352|  28.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  28.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  28.4k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|    356|{
 1182|    356|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|    356|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|  2.61k|    {
  343|  2.61k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.61k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  2.61k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1181|    970|{
 1182|    970|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|    970|}
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  82.1k|{
  322|  82.1k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  82.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  82.1k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3316|   149k|    {
 3317|   149k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|   149k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|    196|    {
 1447|    196|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    196|    {
  443|    196|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  58.4k|    {
 1148|  58.4k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  58.2k|    {
 1401|  58.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  58.2k|    {
  433|  58.2k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1568|  47.4k|    {
 1569|  47.4k|        return has_value();
 1570|  47.4k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1623|  41.7k|    {
 1624|  41.7k|        return value();
 1625|  41.7k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS7_vEEOT_:
 1400|  6.94k|    {
 1401|  6.94k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  6.94k|    {
  433|  6.94k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  7.12k|    {
 1148|  7.12k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|    186|    {
 1447|    186|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    186|    {
  443|    186|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEcvbEv:
 1568|  2.14k|    {
 1569|  2.14k|        return has_value();
 1570|  2.14k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9has_valueEv:
  480|  12.2k|    {
  481|  12.2k|        return m_has_value;
  482|  12.2k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEERT_v:
 1623|    150|    {
 1624|    150|        return value();
 1625|    150|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5valueIS7_LPv0EEERT_v:
 1597|  4.98k|    {
 1598|  4.98k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  4.98k|        return this->get_value();
 1600|  4.98k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE9get_valueEv:
  446|  4.98k|    {
  447|  4.98k|        return m_value;
  448|  4.98k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1807|  3.03k|    {
 1808|  3.03k|        return detail::transform_error_impl(std::move(*this),
 1809|  3.03k|                                            std::forward<F>(f));
 1810|  3.03k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1293|  3.03k|{
 1294|  3.03k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  3.03k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  3.03k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  3.03k|            return result(*std::forward<Exp>(exp));
 1298|  3.03k|        }
 1299|       |
 1300|  3.03k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  3.03k|        return result(unexpect, monostate{});
 1302|  3.03k|    }
 1303|  3.03k|    else {
 1304|  3.03k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  3.03k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.03k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.99k, False: 40]
  |  |  ------------------
  ------------------
 1306|  3.03k|                   ? result(*std::forward<Exp>(exp))
 1307|  3.03k|                   : result(unexpect,
 1308|     40|                            trivial_invoke(std::forward<F>(f),
 1309|     40|                                           std::forward<Exp>(exp).error()));
 1310|  3.03k|    }
 1311|  3.03k|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEEdeIS7_LPv0EEEOT_v:
 1633|  4.83k|    {
 1634|  4.83k|        return std::move(value());
 1635|  4.83k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS7_vEEOT_:
 1400|  4.35k|    {
 1401|  4.35k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  4.35k|    {
  433|  4.35k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  10.9k|    {
 1148|  10.9k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE5errorEv:
 1584|    150|    {
 1585|    150|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    150|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    150|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|    150|        return std::move(this->get_unexpected().error());
 1587|    150|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_9eof_errorELb1EE14get_unexpectedEv:
  463|    150|    {
  464|    150|        return m_unexpected;
  465|    150|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1456|  1.64k|    {
 1457|  1.64k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|  5.80k|    {
  443|  5.80k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|     40|    {
 1447|     40|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|     40|    {
  443|     40|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  24.6k|    {
 1148|  24.6k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  24.5k|    {
 1401|  24.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  24.5k|    {
  433|  24.5k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1568|  24.6k|    {
 1569|  24.6k|        return has_value();
 1570|  24.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|  49.2k|    {
  481|  49.2k|        return m_has_value;
  482|  49.2k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1574|     40|    {
 1575|     40|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     40|        return this->get_unexpected().error();
 1577|     40|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|     40|    {
  464|     40|        return m_unexpected;
  465|     40|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  24.5k|    {
 1634|  24.5k|        return std::move(value());
 1635|  24.5k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  24.5k|    {
 1598|  24.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  24.5k|        return this->get_value();
 1600|  24.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|  24.5k|    {
  447|  24.5k|        return m_value;
  448|  24.5k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|  4.16k|    {
 1447|  4.16k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS8_LPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|    426|    {
 1447|    426|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    536|    {
  443|    536|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  7.49k|    {
 1148|  7.49k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2INS8_4codeELPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  5.12k|    {
 1447|  5.12k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJNS9_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  5.12k|    {
  443|  5.12k|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEcvbEv:
 1568|  6.83k|    {
 1569|  6.83k|        return has_value();
 1570|  6.83k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9has_valueEv:
  480|  13.5k|    {
  481|  13.5k|        return m_has_value;
  482|  13.5k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1574|  2.35k|    {
 1575|  2.35k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  2.35k|        return this->get_unexpected().error();
 1577|  2.35k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE14get_unexpectedEv:
  463|  3.32k|    {
  464|  3.32k|        return m_unexpected;
  465|  3.32k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEC2ISB_vEEOT_:
 1400|  1.29k|    {
 1401|  1.29k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|  1.29k|    {
  433|  1.29k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.29k|    {
 1148|  1.29k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5valueIS7_LPv0EEERT_v:
 1597|  1.83k|    {
 1598|  1.83k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  1.83k|        return this->get_value();
 1600|  1.83k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EE9get_valueEv:
  446|  1.83k|    {
  447|  1.83k|        return m_value;
  448|  1.83k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEcvbEv:
 1568|    982|    {
 1569|    982|        return has_value();
 1570|    982|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9has_valueEv:
  480|  2.59k|    {
  481|  2.59k|        return m_has_value;
  482|  2.59k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    982|    {
 1148|    982|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEEdeISB_LPv0EEEOT_v:
 1633|  1.29k|    {
 1634|  1.29k|        return std::move(value());
 1635|  1.29k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE5valueISB_LPv0EEERT_v:
 1597|  1.29k|    {
 1598|  1.29k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  1.29k|        return this->get_value();
 1600|  1.29k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS5_9eof_errorELb1EE9get_valueEv:
  446|  1.29k|    {
  447|  1.29k|        return m_value;
  448|  1.29k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE3endEv:
 3304|   373k|    {
 3305|   373k|        return m_sentinel;
 3306|   373k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_9eof_errorEE15transform_errorIRFNS2_11parse_errorES8_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1807|  1.94k|    {
 1808|  1.94k|        return detail::transform_error_impl(std::move(*this),
 1809|  1.94k|                                            std::forward<F>(f));
 1810|  1.94k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9eof_errorEEERFNS4_11parse_errorESA_ELPv0ESC_EEDaOT_OT0_:
 1293|  1.94k|{
 1294|  1.94k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  1.94k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  1.94k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  1.94k|            return result(*std::forward<Exp>(exp));
 1298|  1.94k|        }
 1299|       |
 1300|  1.94k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  1.94k|        return result(unexpect, monostate{});
 1302|  1.94k|    }
 1303|  1.94k|    else {
 1304|  1.94k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  1.94k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.94k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.83k, False: 110]
  |  |  ------------------
  ------------------
 1306|  1.94k|                   ? result(*std::forward<Exp>(exp))
 1307|  1.94k|                   : result(unexpect,
 1308|    110|                            trivial_invoke(std::forward<F>(f),
 1309|    110|                                           std::forward<Exp>(exp).error()));
 1310|  1.94k|    }
 1311|  1.94k|}
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IS7_vEEOT_:
 1400|  1.83k|    {
 1401|  1.83k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS3_11parse_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  432|  1.83k|    {
  433|  1.83k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
 1456|    110|    {
 1457|    110|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEEdeIS7_LPv0EEEOT_v:
 1633|  1.83k|    {
 1634|  1.83k|        return std::move(value());
 1635|  1.83k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEE5beginEv:
 3300|   552k|    {
 3301|   552k|        return m_iterator;
 3302|   552k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEC2IS9_vEEOT_:
 1400|    982|    {
 1401|    982|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    982|    {
  433|    982|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorESA_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSG_:
 1807|    982|    {
 1808|    982|        return detail::transform_error_impl(std::move(*this),
 1809|    982|                                            std::forward<F>(f));
 1810|    982|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS4_27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENS4_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1293|    982|{
 1294|    982|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    982|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    982|        if (SCN_LIKELY(exp.has_value())) {
 1297|    982|            return result(*std::forward<Exp>(exp));
 1298|    982|        }
 1299|       |
 1300|    982|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    982|        return result(unexpect, monostate{});
 1302|    982|    }
 1303|    982|    else {
 1304|    982|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    982|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    982|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 982, False: 0]
  |  |  ------------------
  ------------------
 1306|    982|                   ? result(*std::forward<Exp>(exp))
 1307|    982|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|    982|    }
 1311|    982|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9has_valueEv:
  480|  1.96k|    {
  481|  1.96k|        return m_has_value;
  482|  1.96k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEEdeIS9_LPv0EEEOT_v:
 1633|    982|    {
 1634|    982|        return std::move(value());
 1635|    982|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS2_9eof_errorEE5valueIS9_LPv0EEERT_v:
 1597|    982|    {
 1598|    982|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    982|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    982|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    982|        return this->get_value();
 1600|    982|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS3_9eof_errorELb1EE9get_valueEv:
  446|    982|    {
  447|    982|        return m_value;
  448|    982|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEC2IS9_vEEOT_:
 1400|    982|    {
 1401|    982|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  432|    982|    {
  433|    982|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    982|    {
 1148|    982|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEcvbEv:
 1568|    982|    {
 1569|    982|        return has_value();
 1570|    982|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.96k|    {
  481|  1.96k|        return m_has_value;
  482|  1.96k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1633|    982|    {
 1634|    982|        return std::move(value());
 1635|    982|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS2_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1597|    982|    {
 1598|    982|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    982|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    982|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    982|        return this->get_value();
 1600|    982|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS3_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    982|    {
  447|    982|        return m_value;
  448|    982|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1807|    970|    {
 1808|    970|        return detail::transform_error_impl(std::move(*this),
 1809|    970|                                            std::forward<F>(f));
 1810|    970|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESC_EEDaOT_OT0_:
 1293|    970|{
 1294|    970|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    970|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    970|        if (SCN_LIKELY(exp.has_value())) {
 1297|    970|            return result(*std::forward<Exp>(exp));
 1298|    970|        }
 1299|       |
 1300|    970|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    970|        return result(unexpect, monostate{});
 1302|    970|    }
 1303|    970|    else {
 1304|    970|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    970|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    970|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 970]
  |  |  ------------------
  ------------------
 1306|    970|                   ? result(*std::forward<Exp>(exp))
 1307|    970|                   : result(unexpect,
 1308|    970|                            trivial_invoke(std::forward<F>(f),
 1309|    970|                                           std::forward<Exp>(exp).error()));
 1310|    970|    }
 1311|    970|}
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE5errorEv:
 1584|    970|    {
 1585|    970|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    970|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    970|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|    970|        return std::move(this->get_unexpected().error());
 1587|    970|    }
_ZN3scn2v313scan_expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEEC2EONS0_8expectedIS7_NS0_10scan_errorEEE:
 3618|  1.60k|    {
 3619|  1.60k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS4_IS9_S9_EEE8sentinelILb1EEEEC2ISA_LPv0EEET_SF_:
 3286|   193k|    {
 3287|   193k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  1.80k|    {
 2695|  1.80k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  1.80k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESJ_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  1.80k|    {
 2676|  1.80k|        return decay_copy(t.begin());
 2677|  1.80k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EEEEu7__decayIT_EOSA_:
 1919|  3.91k|{
 1920|  3.91k|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.91k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  3.91k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E5beginEv:
 3300|  1.80k|    {
 3301|  1.80k|        return m_iterator;
 3302|  1.80k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  1.80k|    {
 2752|  1.80k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  1.80k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EESD_SD_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  1.80k|    {
 2734|  1.80k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  1.80k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_E3endEv:
 3304|  1.80k|    {
 3305|  1.80k|        return m_sentinel;
 3306|  1.80k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EESA_EC2ISA_LPv0EEET_SA_:
 3286|  1.80k|    {
 3287|  1.80k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|     12|    {
 1447|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  621|     12|    {
  622|     12|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  684|     12|    {
  685|     12|        scn::detail::construct_at(unexpected_ptr(),
  686|     12|                                  std::forward<Args>(args)...);
  687|     12|        m_has_value = false;
  688|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     36|    {
  714|     36|        return reinterpret_cast<unexpected<E>*>(
  715|     36|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     36|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     36|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|     12|    {
 1148|     12|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEEcvbEv:
 1568|     12|    {
 1569|     12|        return has_value();
 1570|     12|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|     36|    {
  671|     36|        return m_has_value;
  672|     36|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESF_EEENS0_10scan_errorEE5errorEv:
 1574|     12|    {
 1575|     12|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     12|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     12|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     12|        return this->get_unexpected().error();
 1577|     12|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     12|    {
  654|     12|        return *unexpected_ptr();
  655|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EED2Ev:
  626|     12|    {
  627|     12|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 12]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     12|        else {
  631|     12|            destroy_unexpected();
  632|     12|        }
  633|     12|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESG_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     12|    {
  696|     12|        scn::detail::destroy_at(unexpected_ptr());
  697|     12|    }
_ZNK3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEcvbEv:
 1568|  11.2k|    {
 1569|  11.2k|        return has_value();
 1570|  11.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  21.9k|    {
  481|  21.9k|        return m_has_value;
  482|  21.9k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5errorEv:
 1574|  5.48k|    {
 1575|  5.48k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  5.48k|        return this->get_unexpected().error();
 1577|  5.48k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  5.48k|    {
  464|  5.48k|        return m_unexpected;
  465|  5.48k|    }
_ZNO3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEEOT_v:
 1633|  4.35k|    {
 1634|  4.35k|        return std::move(value());
 1635|  4.35k|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEE5valueIS7_LPv0EEERT_v:
 1597|  5.16k|    {
 1598|  5.16k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  5.16k|        return this->get_value();
 1600|  5.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EE9get_valueEv:
  446|  5.16k|    {
  447|  5.16k|        return m_value;
  448|  5.16k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  1.06k|    {
 1447|  1.06k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.16k|    {
  443|  1.16k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.6k|    {
 1148|  14.6k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  11.4k|    {
 1447|  11.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  11.4k|    {
  443|  11.4k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1568|  15.5k|    {
 1569|  15.5k|        return has_value();
 1570|  15.5k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  24.3k|    {
  481|  24.3k|        return m_has_value;
  482|  24.3k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1574|  5.77k|    {
 1575|  5.77k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  5.77k|        return this->get_unexpected().error();
 1577|  5.77k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  5.77k|    {
  464|  5.77k|        return m_unexpected;
  465|  5.77k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|  3.74k|    {
 1401|  3.74k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  3.74k|    {
  433|  3.74k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  3.74k|    {
 1148|  3.74k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|  1.98k|    {
 1598|  1.98k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  1.98k|        return this->get_value();
 1600|  1.98k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  1.98k|    {
  447|  1.98k|        return m_value;
  448|  1.98k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|  2.79k|    {
 1569|  2.79k|        return has_value();
 1570|  2.79k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  7.48k|    {
  481|  7.48k|        return m_has_value;
  482|  7.48k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.79k|    {
 1148|  2.79k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|  3.74k|    {
 1634|  3.74k|        return std::move(value());
 1635|  3.74k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|  3.74k|    {
 1598|  3.74k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.74k|        return this->get_value();
 1600|  3.74k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  3.74k|    {
  447|  3.74k|        return m_value;
  448|  3.74k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3191|   112k|    {
 3192|   112k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 1.79k, False: 110k]
  ------------------
 3193|   112k|                   ? nullptr
 3194|   112k|                   : std::addressof(*ranges::begin(derived()));
 3195|   112k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   112k|    {
 2976|   112k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   112k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   112k|    {
 2949|   112k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   112k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3309|   112k|    {
 3310|   112k|        return m_iterator == m_sentinel;
 3311|   112k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3150|   222k|    {
 3151|   222k|        return static_cast<D&>(*this);
 3152|   222k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   110k|    {
 2695|   110k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   110k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   110k|    {
 2676|   110k|        return decay_copy(t.begin());
 2677|   110k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|  1.98k|    {
 1401|  1.98k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.98k|    {
  433|  1.98k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1400|  2.79k|    {
 1401|  2.79k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.79k|    {
  433|  2.79k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  2.79k|    {
 1808|  2.79k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.79k|                                            std::forward<F>(f));
 1810|  2.79k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1293|  2.79k|{
 1294|  2.79k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.79k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.79k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.79k|            return result(*std::forward<Exp>(exp));
 1298|  2.79k|        }
 1299|       |
 1300|  2.79k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.79k|        return result(unexpect, monostate{});
 1302|  2.79k|    }
 1303|  2.79k|    else {
 1304|  2.79k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.79k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.79k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.79k, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.79k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.79k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.79k|    }
 1311|  2.79k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  480|  5.58k|    {
  481|  5.58k|        return m_has_value;
  482|  5.58k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1633|  2.79k|    {
 1634|  2.79k|        return std::move(value());
 1635|  2.79k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1597|  2.79k|    {
 1598|  2.79k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.79k|        return this->get_value();
 1600|  2.79k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.79k|    {
  447|  2.79k|        return m_value;
  448|  2.79k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  2.79k|    {
 1401|  2.79k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.79k|    {
  433|  2.79k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.79k|    {
 1148|  2.79k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1568|  2.79k|    {
 1569|  2.79k|        return has_value();
 1570|  2.79k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.58k|    {
  481|  5.58k|        return m_has_value;
  482|  5.58k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  2.79k|    {
 1634|  2.79k|        return std::move(value());
 1635|  2.79k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  2.79k|    {
 1598|  2.79k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.79k|        return this->get_value();
 1600|  2.79k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.79k|    {
  447|  2.79k|        return m_value;
  448|  2.79k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1446|     20|    {
 1447|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  621|     20|    {
  622|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  684|     20|    {
  685|     20|        scn::detail::construct_at(unexpected_ptr(),
  686|     20|                                  std::forward<Args>(args)...);
  687|     20|        m_has_value = false;
  688|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     60|    {
  714|     60|        return reinterpret_cast<unexpected<E>*>(
  715|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     60|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|     20|    {
 1148|     20|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1568|     20|    {
 1569|     20|        return has_value();
 1570|     20|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  670|     60|    {
  671|     60|        return m_has_value;
  672|     60|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1574|     20|    {
 1575|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     20|        return this->get_unexpected().error();
 1577|     20|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     20|    {
  654|     20|        return *unexpected_ptr();
  655|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  626|     20|    {
  627|     20|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 20]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     20|        else {
  631|     20|            destroy_unexpected();
  632|     20|        }
  633|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     20|    {
  696|     20|        scn::detail::destroy_at(unexpected_ptr());
  697|     20|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  97.7k|    {
 2826|  97.7k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  97.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  97.7k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  97.7k|    {
 2807|  97.7k|        return t.data();
 2808|  97.7k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  5.57k|    {
 1401|  5.57k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.57k|    {
  433|  5.57k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1446|   217k|    {
 1447|   217k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|   217k|    {
  443|   217k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   220k|    {
 1148|   220k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1400|  2.77k|    {
 1401|  2.77k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|  2.77k|    {
  433|  2.77k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1181|  2.60k|{
 1182|  2.60k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|  2.60k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS4_9eof_errorEE15transform_errorIRFNS0_10scan_errorESC_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSI_:
 1807|    316|    {
 1808|    316|        return detail::transform_error_impl(std::move(*this),
 1809|    316|                                            std::forward<F>(f));
 1810|    316|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_9sign_typeEEENS6_9eof_errorEEERFNS0_10scan_errorESE_ELPv0ESG_EEDaOT_OT0_:
 1293|    316|{
 1294|    316|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    316|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    316|        if (SCN_LIKELY(exp.has_value())) {
 1297|    316|            return result(*std::forward<Exp>(exp));
 1298|    316|        }
 1299|       |
 1300|    316|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    316|        return result(unexpect, monostate{});
 1302|    316|    }
 1303|    316|    else {
 1304|    316|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    316|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    316|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 316, False: 0]
  |  |  ------------------
  ------------------
 1306|    316|                   ? result(*std::forward<Exp>(exp))
 1307|    316|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|    316|    }
 1311|    316|}
_ZN3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1400|    316|    {
 1401|    316|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS3_10in_place_tEDpOT_:
  432|    316|    {
  433|    316|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    316|    {
 1148|    316|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|    316|    {
 1569|    316|        return has_value();
 1570|    316|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    632|    {
  481|    632|        return m_has_value;
  482|    632|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEEdeISB_LPv0EEEOT_v:
 1633|    316|    {
 1634|    316|        return std::move(value());
 1635|    316|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_9sign_typeEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1597|    316|    {
 1598|    316|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    316|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    316|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    316|        return this->get_value();
 1600|    316|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    316|    {
  447|    316|        return m_value;
  448|    316|    }
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS2_11parse_errorEE15transform_errorIZNS2_29map_parse_error_to_scan_errorENS0_10scan_error4codeES6_EUlS8_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSE_:
 1793|    632|    {
 1794|    632|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|    632|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS4_11parse_errorEEEZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES8_EUlSA_E_LPv0ESD_EEDaOT_OT0_:
 1293|    632|{
 1294|    632|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    632|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    632|        if (SCN_LIKELY(exp.has_value())) {
 1297|    632|            return result(*std::forward<Exp>(exp));
 1298|    632|        }
 1299|       |
 1300|    632|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    632|        return result(unexpect, monostate{});
 1302|    632|    }
 1303|    632|    else {
 1304|    632|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    632|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    632|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 632]
  |  |  ------------------
  ------------------
 1306|    632|                   ? result(*std::forward<Exp>(exp))
 1307|    632|                   : result(unexpect,
 1308|    632|                            trivial_invoke(std::forward<F>(f),
 1309|    632|                                           std::forward<Exp>(exp).error()));
 1310|    632|    }
 1311|    632|}
_ZNR3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEdeIS7_LPv0EEERT_v:
 1623|    810|    {
 1624|    810|        return value();
 1625|    810|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E0_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3638|      2|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|    314|    {
 2695|    314|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|    314|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS8_15take_width_viewINS7_ISC_SC_EEE8sentinelILb1EEEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESO_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|    314|    {
 2676|    314|        return decay_copy(t.begin());
 2677|    314|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_ENKUlRKSH_E_clINS9_INS1_27counted_width_iterator_impl22counted_width_iteratorISB_SB_EENSD_8sentinelILb1EEEEEEEDaSO_:
 3638|    306|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|    950|    {
 1808|    950|        return detail::transform_error_impl(std::move(*this),
 1809|    950|                                            std::forward<F>(f));
 1810|    950|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|    950|{
 1294|    950|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    950|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    950|        if (SCN_LIKELY(exp.has_value())) {
 1297|    950|            return result(*std::forward<Exp>(exp));
 1298|    950|        }
 1299|       |
 1300|    950|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    950|        return result(unexpect, monostate{});
 1302|    950|    }
 1303|    950|    else {
 1304|    950|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    950|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    950|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 950, False: 0]
  |  |  ------------------
  ------------------
 1306|    950|                   ? result(*std::forward<Exp>(exp))
 1307|    950|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|    950|    }
 1311|    950|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|    950|    {
 1401|    950|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|    950|    {
  433|    950|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    950|    {
 1148|    950|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|    950|    {
 1569|    950|        return has_value();
 1570|    950|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.90k|    {
  481|  1.90k|        return m_has_value;
  482|  1.90k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|    950|    {
 1634|    950|        return std::move(value());
 1635|    950|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|    950|    {
 1598|    950|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    950|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    950|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    950|        return this->get_value();
 1600|    950|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    950|    {
  447|    950|        return m_value;
  448|    950|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1793|    980|    {
 1794|    980|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|    980|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|    980|{
 1294|    980|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    980|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    980|        if (SCN_LIKELY(exp.has_value())) {
 1297|    980|            return result(*std::forward<Exp>(exp));
 1298|    980|        }
 1299|       |
 1300|    980|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    980|        return result(unexpect, monostate{});
 1302|    980|    }
 1303|    980|    else {
 1304|    980|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    980|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    980|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 980]
  |  |  ------------------
  ------------------
 1306|    980|                   ? result(*std::forward<Exp>(exp))
 1307|    980|                   : result(unexpect,
 1308|    980|                            trivial_invoke(std::forward<F>(f),
 1309|    980|                                           std::forward<Exp>(exp).error()));
 1310|    980|    }
 1311|    980|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|    980|    {
 3619|    980|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  9.85k|    {
 1624|  9.85k|        return value();
 1625|  9.85k|    }
_ZN3scn2v36detail22parse_presentation_setIcRNS0_4impl22nonascii_specs_handlerEEENSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEERPKS8_SD_OT0_:
 6657|  3.45k|{
 6658|  3.45k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  3.45k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  3.45k|    auto start = begin;
 6662|  3.45k|    ++begin;
 6663|       |
 6664|  3.45k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.45k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|      0|        return {};
 6669|      0|    }
 6670|  3.45k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 348, False: 3.10k]
  ------------------
 6671|    348|        handler.on_charset_inverted();
 6672|    348|        ++begin;
 6673|    348|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    348|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 348]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|      0|            return {};
 6678|      0|        }
 6679|    348|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 6, False: 342]
  ------------------
 6680|      6|            handler.on_charset_single(char32_t{']'});
 6681|      6|            ++begin;
 6682|      6|        }
 6683|    348|    }
 6684|  3.10k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 0, False: 3.10k]
  ------------------
 6685|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|      0|    }
 6687|       |
 6688|   731k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 731k, False: 0]
  ------------------
 6689|   731k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   731k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 731k]
  |  |  ------------------
  ------------------
 6690|      0|            break;
 6691|      0|        }
 6692|       |
 6693|   731k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 3.45k, False: 727k]
  ------------------
 6694|  3.45k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  3.45k|        }
 6696|       |
 6697|   727k|        parse_presentation_set_literal(begin, end, handler);
 6698|   727k|    }
 6699|       |
 6700|      0|    SCN_UNLIKELY_ATTR
 6701|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6702|      0|    return {};
 6703|  3.45k|}
_ZN3scn2v36detail30parse_presentation_set_literalIcRNS0_4impl22nonascii_specs_handlerEEEvRPKT_S8_OT0_:
 6621|   727k|{
 6622|   727k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   727k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   727k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|   727k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|   727k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 727k]
  |  |  ------------------
  ------------------
 6626|      0|        return;
 6627|      0|    }
 6628|       |
 6629|   727k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 727k, False: 0]
  |  Branch (6629:25): [True: 3.93k, False: 723k]
  |  Branch (6629:49): [True: 3.93k, False: 0]
  ------------------
 6630|   727k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 3.86k, False: 72]
  ------------------
 6631|  3.86k|        ++begin;
 6632|       |
 6633|  3.86k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  3.86k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.86k]
  |  |  ------------------
  ------------------
 6635|      0|            return;
 6636|      0|        }
 6637|       |
 6638|  3.86k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  3.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.86k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|      0|            return;
 6643|      0|        }
 6644|       |
 6645|  3.86k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  3.86k|        return;
 6647|  3.86k|    }
 6648|       |
 6649|   723k|    handler.on_charset_single(cp_first);
 6650|   723k|}
_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS0_4impl22nonascii_specs_handlerEEEDiRPKT_S8_OT0_:
 6597|   731k|{
 6598|   731k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   731k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   731k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|   731k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|   731k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 731k]
  |  |  |  Branch (859:45): [True: 0, False: 731k]
  |  |  |  Branch (859:45): [True: 0, False: 731k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|   731k|    const auto cp =
 6607|   731k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|   731k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   731k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 731k]
  |  |  ------------------
  ------------------
 6609|      0|        handler.on_error("Invalid encoding in format string");
 6610|      0|        return invalid_code_point;
 6611|      0|    }
 6612|       |
 6613|   731k|    begin += len;
 6614|   731k|    return cp;
 6615|   731k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  9.52k|    {
 1148|  9.52k|    }
_ZN3scn2v38expectedINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorEEC2IS4_vEEOT_:
 1400|  9.52k|    {
 1401|  9.52k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__115regex_constants18syntax_option_typeENS0_10scan_errorELb1EEC2IJS5_EvEENS3_10in_place_tEDpOT_:
  432|  9.52k|    {
  433|  9.52k|    }
_ZNK3scn2v36detail12format_specs14charset_stringIcEENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEEv:
 6212|  13.2k|    {
 6213|  13.2k|        return {reinterpret_cast<const CharT*>(charset_string_data),
 6214|  13.2k|                charset_string_size};
 6215|  13.2k|    }
_ZN3scn2v38expectedINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS0_10scan_errorEEC2IRKS7_vEEOT_:
 1400|    810|    {
 1401|    810|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EENS0_10scan_errorELb1EEC2IJRKS8_EvEENSt3__110in_place_tEDpOT_:
  432|    810|    {
  433|    810|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1400|  2.41k|    {
 1401|  2.41k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  432|  2.41k|    {
  433|  2.41k|    }
_ZN3scn2v36detail34decode_code_point_exhaustive_validIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4003|   209k|{
 4004|   209k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4004:19): [Folded - Ignored]
  ------------------
 4005|   209k|        return decode_utf8_code_point_exhaustive_valid(input);
 4006|   209k|    }
 4007|   209k|    else if constexpr (sizeof(CharT) == 2) {
 4008|   209k|        return decode_utf16_code_point_exhaustive_valid(input);
 4009|   209k|    }
 4010|   209k|    else {
 4011|   209k|        SCN_EXPECT(input.size() == 1);
 4012|   209k|        return static_cast<char32_t>(input.front());
 4013|   209k|    }
 4014|   209k|}
_ZZN3scn2v36detail39decode_utf8_code_point_exhaustive_validENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3881|  22.5k|    const auto is_trailing_code_unit = [](char ch) {
 3882|  22.5k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3883|  22.5k|    };
_ZNK3scn2v36detail9fill_type13get_code_unitIwEET_v:
 6147|    348|    {
 6148|    348|        SCN_EXPECT(m_size <= sizeof(CharT));
  ------------------
  |  |  924|    348|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    348|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6149|    348|        CharT r{};
 6150|    348|        std::memcpy(&r, m_data, m_size);
 6151|    348|        return r;
 6152|    348|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3777|   296M|{
 3778|   296M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|   296M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|   296M|    }
 3781|   296M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3781:24): [Folded - Ignored]
  ------------------
 3782|   296M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|   296M|    }
 3784|   296M|    else {
 3785|       |        // utf-32
 3786|   296M|        static_assert(sizeof(U) == 4);
 3787|   296M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   296M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   296M|        return 1;
 3789|   296M|    }
 3790|   296M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|   296M|{
 3984|   296M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|   296M|        return decode_utf8_code_point_exhaustive(input);
 3986|   296M|    }
 3987|   296M|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (3987:24): [Folded - Ignored]
  ------------------
 3988|   296M|        return decode_utf16_code_point_exhaustive(input);
 3989|   296M|    }
 3990|   296M|    else {
 3991|   296M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   296M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   296M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3992|   296M|        auto cp = static_cast<char32_t>(input.front());
 3993|   296M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   296M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.5k, False: 296M]
  |  |  ------------------
  ------------------
 3994|  73.5k|            return invalid_code_point;
 3995|  73.5k|        }
 3996|   296M|        return cp;
 3997|   296M|    }
 3998|   296M|}
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|  38.9k|{
 3670|  38.9k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|  38.9k|                                          decltype(first), decltype(last)> &&
 3672|  38.9k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|  38.9k|        return {first, last};
 3674|  38.9k|    }
 3675|  38.9k|    else {
 3676|  38.9k|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|  38.9k|                                       to_address(first), to_address(last)))};
 3678|  38.9k|    }
 3679|  38.9k|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   116k|{
  322|   116k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   116k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  301|   118k|{
  302|   118k|    return p;
  303|   118k|}
_ZN3scn2v36detail25make_string_view_iteratorIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|  7.26k|{
 3701|  7.26k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  7.26k|                      typename std::basic_string_view<CharT>::iterator,
 3703|  7.26k|                      decltype(it)> &&
 3704|  7.26k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|  7.26k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.26k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|  7.26k|        return it;
 3707|  7.26k|    }
 3708|  7.26k|    else {
 3709|  7.26k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|  7.26k|    }
 3711|  7.26k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  2.02k|{
  322|  2.02k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  2.02k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3316|  16.7k|    {
 3317|  16.7k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  16.7k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|    142|    {
 1447|    142|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    142|    {
  443|    142|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  21.4k|    {
 1148|  21.4k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  21.2k|    {
 1401|  21.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  21.2k|    {
  433|  21.2k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1568|  5.97k|    {
 1569|  5.97k|        return has_value();
 1570|  5.97k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  36.8k|    {
  481|  36.8k|        return m_has_value;
  482|  36.8k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  15.3k|    {
 1598|  15.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  15.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  15.3k|        return this->get_value();
 1600|  15.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  15.3k|    {
  447|  15.3k|        return m_value;
  448|  15.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  4.24k|    {
 1148|  4.24k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  4.24k|    {
 1401|  4.24k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  4.24k|    {
  433|  4.24k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  9.44k|    {
 1808|  9.44k|        return detail::transform_error_impl(std::move(*this),
 1809|  9.44k|                                            std::forward<F>(f));
 1810|  9.44k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  9.44k|{
 1294|  9.44k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  9.44k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  9.44k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  9.44k|            return result(*std::forward<Exp>(exp));
 1298|  9.44k|        }
 1299|       |
 1300|  9.44k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  9.44k|        return result(unexpect, monostate{});
 1302|  9.44k|    }
 1303|  9.44k|    else {
 1304|  9.44k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  9.44k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  9.44k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.44k, False: 0]
  |  |  ------------------
  ------------------
 1306|  9.44k|                   ? result(*std::forward<Exp>(exp))
 1307|  9.44k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  9.44k|    }
 1311|  9.44k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  15.3k|    {
 1634|  15.3k|        return std::move(value());
 1635|  15.3k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1584|    142|    {
 1585|    142|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    142|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    142|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|    142|        return std::move(this->get_unexpected().error());
 1587|    142|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    142|    {
  464|    142|        return m_unexpected;
  465|    142|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|    996|    {
 1457|    996|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1568|  4.24k|    {
 1569|  4.24k|        return has_value();
 1570|  4.24k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|  8.48k|    {
  481|  8.48k|        return m_has_value;
  482|  8.48k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  4.24k|    {
 1634|  4.24k|        return std::move(value());
 1635|  4.24k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  4.24k|    {
 1598|  4.24k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  4.24k|        return this->get_value();
 1600|  4.24k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|  4.24k|    {
  447|  4.24k|        return m_value;
  448|  4.24k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  1.13k|    {
 1447|  1.13k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  1.27k|    {
  443|  1.27k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.9k|    {
 1148|  18.9k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  11.8k|    {
 1447|  11.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  11.8k|    {
  443|  11.8k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1568|  19.9k|    {
 1569|  19.9k|        return has_value();
 1570|  19.9k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  32.9k|    {
  481|  32.9k|        return m_has_value;
  482|  32.9k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1574|  6.09k|    {
 1575|  6.09k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  6.09k|        return this->get_unexpected().error();
 1577|  6.09k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  6.09k|    {
  464|  6.09k|        return m_unexpected;
  465|  6.09k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|  3.97k|    {
 1401|  3.97k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  3.97k|    {
  433|  3.97k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  3.97k|    {
 1148|  3.97k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|  5.85k|    {
 1598|  5.85k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  5.85k|        return this->get_value();
 1600|  5.85k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  5.85k|    {
  447|  5.85k|        return m_value;
  448|  5.85k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|  2.98k|    {
 1569|  2.98k|        return has_value();
 1570|  2.98k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  7.94k|    {
  481|  7.94k|        return m_has_value;
  482|  7.94k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.98k|    {
 1148|  2.98k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|  3.97k|    {
 1634|  3.97k|        return std::move(value());
 1635|  3.97k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|  3.97k|    {
 1598|  3.97k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.97k|        return this->get_value();
 1600|  3.97k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  3.97k|    {
  447|  3.97k|        return m_value;
  448|  3.97k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  5.99k|    {
 1808|  5.99k|        return detail::transform_error_impl(std::move(*this),
 1809|  5.99k|                                            std::forward<F>(f));
 1810|  5.99k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  5.99k|{
 1294|  5.99k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  5.99k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  5.99k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  5.99k|            return result(*std::forward<Exp>(exp));
 1298|  5.99k|        }
 1299|       |
 1300|  5.99k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  5.99k|        return result(unexpect, monostate{});
 1302|  5.99k|    }
 1303|  5.99k|    else {
 1304|  5.99k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  5.99k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.99k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.85k, False: 142]
  |  |  ------------------
  ------------------
 1306|  5.99k|                   ? result(*std::forward<Exp>(exp))
 1307|  5.99k|                   : result(unexpect,
 1308|    142|                            trivial_invoke(std::forward<F>(f),
 1309|    142|                                           std::forward<Exp>(exp).error()));
 1310|  5.99k|    }
 1311|  5.99k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|  5.85k|    {
 1401|  5.85k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.85k|    {
  433|  5.85k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1456|    142|    {
 1457|    142|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1633|  5.85k|    {
 1634|  5.85k|        return std::move(value());
 1635|  5.85k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1400|  2.98k|    {
 1401|  2.98k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.98k|    {
  433|  2.98k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  2.98k|    {
 1808|  2.98k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.98k|                                            std::forward<F>(f));
 1810|  2.98k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
 1293|  2.98k|{
 1294|  2.98k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.98k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.98k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.98k|            return result(*std::forward<Exp>(exp));
 1298|  2.98k|        }
 1299|       |
 1300|  2.98k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.98k|        return result(unexpect, monostate{});
 1302|  2.98k|    }
 1303|  2.98k|    else {
 1304|  2.98k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.98k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.98k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.98k, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.98k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.98k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.98k|    }
 1311|  2.98k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  480|  5.96k|    {
  481|  5.96k|        return m_has_value;
  482|  5.96k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1633|  2.98k|    {
 1634|  2.98k|        return std::move(value());
 1635|  2.98k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1597|  2.98k|    {
 1598|  2.98k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.98k|        return this->get_value();
 1600|  2.98k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  446|  2.98k|    {
  447|  2.98k|        return m_value;
  448|  2.98k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  2.98k|    {
 1401|  2.98k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  432|  2.98k|    {
  433|  2.98k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.98k|    {
 1148|  2.98k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1568|  2.98k|    {
 1569|  2.98k|        return has_value();
 1570|  2.98k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  480|  5.96k|    {
  481|  5.96k|        return m_has_value;
  482|  5.96k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  2.98k|    {
 1634|  2.98k|        return std::move(value());
 1635|  2.98k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  2.98k|    {
 1598|  2.98k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.98k|        return this->get_value();
 1600|  2.98k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.98k|    {
  447|  2.98k|        return m_value;
  448|  2.98k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1446|     20|    {
 1447|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  621|     20|    {
  622|     20|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  623|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  684|     20|    {
  685|     20|        scn::detail::construct_at(unexpected_ptr(),
  686|     20|                                  std::forward<Args>(args)...);
  687|     20|        m_has_value = false;
  688|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  713|     60|    {
  714|     60|        return reinterpret_cast<unexpected<E>*>(
  715|     60|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|     60|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  716|     60|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|     20|    {
 1148|     20|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1568|     20|    {
 1569|     20|        return has_value();
 1570|     20|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  670|     60|    {
  671|     60|        return m_has_value;
  672|     60|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1574|     20|    {
 1575|     20|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     20|        return this->get_unexpected().error();
 1577|     20|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  653|     20|    {
  654|     20|        return *unexpected_ptr();
  655|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  626|     20|    {
  627|     20|        if (has_value()) {
  ------------------
  |  Branch (627:13): [True: 0, False: 20]
  ------------------
  628|      0|            destroy_value();
  629|      0|        }
  630|     20|        else {
  631|     20|            destroy_unexpected();
  632|     20|        }
  633|     20|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  695|     20|    {
  696|     20|        scn::detail::destroy_at(unexpected_ptr());
  697|     20|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  10.7k|    {
 2826|  10.7k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  10.7k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  10.7k|    {
 2807|  10.7k|        return t.data();
 2808|  10.7k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3191|  10.7k|    {
 3192|  10.7k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 2.71k, False: 8.02k]
  ------------------
 3193|  10.7k|                   ? nullptr
 3194|  10.7k|                   : std::addressof(*ranges::begin(derived()));
 3195|  10.7k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  10.7k|    {
 2976|  10.7k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  10.7k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  10.7k|    {
 2949|  10.7k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  10.7k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3309|  10.7k|    {
 3310|  10.7k|        return m_iterator == m_sentinel;
 3311|  10.7k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3150|  18.7k|    {
 3151|  18.7k|        return static_cast<D&>(*this);
 3152|  18.7k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  8.03k|    {
 2695|  8.03k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  8.03k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  8.03k|    {
 2676|  8.03k|        return decay_copy(t.begin());
 2677|  8.03k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  1.01k|    {
 1401|  1.01k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  1.01k|    {
  433|  1.01k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|    990|    {
 1808|    990|        return detail::transform_error_impl(std::move(*this),
 1809|    990|                                            std::forward<F>(f));
 1810|    990|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|    990|{
 1294|    990|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    990|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    990|        if (SCN_LIKELY(exp.has_value())) {
 1297|    990|            return result(*std::forward<Exp>(exp));
 1298|    990|        }
 1299|       |
 1300|    990|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    990|        return result(unexpect, monostate{});
 1302|    990|    }
 1303|    990|    else {
 1304|    990|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    990|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    990|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 990, False: 0]
  |  |  ------------------
  ------------------
 1306|    990|                   ? result(*std::forward<Exp>(exp))
 1307|    990|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|    990|    }
 1311|    990|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|    990|    {
 1401|    990|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|    990|    {
  433|    990|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    990|    {
 1148|    990|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|    990|    {
 1569|    990|        return has_value();
 1570|    990|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.98k|    {
  481|  1.98k|        return m_has_value;
  482|  1.98k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|    990|    {
 1634|    990|        return std::move(value());
 1635|    990|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|    990|    {
 1598|    990|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    990|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    990|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|    990|        return this->get_value();
 1600|    990|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|    990|    {
  447|    990|        return m_value;
  448|    990|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1793|    996|    {
 1794|    996|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|    996|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|    996|{
 1294|    996|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|    996|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|    996|        if (SCN_LIKELY(exp.has_value())) {
 1297|    996|            return result(*std::forward<Exp>(exp));
 1298|    996|        }
 1299|       |
 1300|    996|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|    996|        return result(unexpect, monostate{});
 1302|    996|    }
 1303|    996|    else {
 1304|    996|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|    996|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|    996|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 996]
  |  |  ------------------
  ------------------
 1306|    996|                   ? result(*std::forward<Exp>(exp))
 1307|    996|                   : result(unexpect,
 1308|    996|                            trivial_invoke(std::forward<F>(f),
 1309|    996|                                           std::forward<Exp>(exp).error()));
 1310|    996|    }
 1311|    996|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|    996|    {
 3619|    996|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  2.52k|    {
 1624|  2.52k|        return value();
 1625|  2.52k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3624|  1.90k|{
 3625|  1.90k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.90k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  1.90k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5426|  72.2k|    {
 5427|  72.2k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  72.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72.2k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|  72.2k|        return static_cast<std::size_t>(m_desc &
 5432|  72.2k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|  72.2k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5451|   131k|    {
 5452|   131k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   131k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5394|  58.8k|    {
 5395|  58.8k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 58.8k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  58.8k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 104, False: 58.7k]
  |  |  ------------------
  ------------------
 5403|    104|            return {};
 5404|    104|        }
 5405|       |
 5406|  58.7k|        const auto t = type(id);
 5407|  58.7k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 57.2k]
  |  |  ------------------
  ------------------
 5408|  1.47k|            return {};
 5409|  1.47k|        }
 5410|       |
 5411|  57.2k|        basic_scan_arg<Context> arg;
 5412|  57.2k|        arg.m_type = t;
 5413|  57.2k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 57.2k, False: 0]
  ------------------
 5414|  57.2k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  57.2k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  57.2k|        return arg;
 5420|  58.7k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5201|  58.8k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4858|  71.5k|    arg_value() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5460|  58.7k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  58.7k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  58.7k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  58.7k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  58.7k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5455|  57.2k|    {
 5456|  57.2k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  57.2k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5207|   113k|    {
 5208|   113k|        return m_type != detail::arg_type::none_type;
 5209|   113k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  6.03k|{
 8378|  6.03k|#define SCN_VISIT(Type)                                         \
 8379|  6.03k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  6.03k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  6.03k|    }                                                           \
 8382|  6.03k|    else {                                                      \
 8383|  6.03k|        return vis(monostate_val);                              \
 8384|  6.03k|    }
 8385|       |
 8386|  6.03k|    monostate monostate_val{};
 8387|       |
 8388|  6.03k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 6.03k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 6.03k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|    670|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 670, False: 5.36k]
  ------------------
 8394|    670|            SCN_VISIT(int);
  ------------------
  |  | 8379|    670|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    670|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    670|    }                                                           \
  |  | 8382|    670|    else {                                                      \
  |  | 8383|    670|        return vis(monostate_val);                              \
  |  | 8384|    670|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 6.03k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 6.03k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 6.03k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 6.03k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|    670|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 670, False: 5.36k]
  ------------------
 8404|    670|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|    670|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    670|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    670|    }                                                           \
  |  | 8382|    670|    else {                                                      \
  |  | 8383|    670|        return vis(monostate_val);                              \
  |  | 8384|    670|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 6.03k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 6.03k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|    670|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 670, False: 5.36k]
  ------------------
 8410|    670|            SCN_VISIT(void*);
  ------------------
  |  | 8379|    670|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    670|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    670|    }                                                           \
  |  | 8382|    670|    else {                                                      \
  |  | 8383|    670|        return vis(monostate_val);                              \
  |  | 8384|    670|    }
  ------------------
 8411|    670|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 670, False: 5.36k]
  ------------------
 8412|    670|            SCN_VISIT(bool);
  ------------------
  |  | 8379|    670|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    670|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    670|    }                                                           \
  |  | 8382|    670|    else {                                                      \
  |  | 8383|    670|        return vis(monostate_val);                              \
  |  | 8384|    670|    }
  ------------------
 8413|    670|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 670, False: 5.36k]
  ------------------
 8414|    670|            SCN_VISIT(char);
  ------------------
  |  | 8379|    670|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    670|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    670|    }                                                           \
  |  | 8382|    670|    else {                                                      \
  |  | 8383|    670|        return vis(monostate_val);                              \
  |  | 8384|    670|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 6.03k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 6.03k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 6.03k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|    670|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 670, False: 5.36k]
  ------------------
 8422|    670|            SCN_VISIT(double);
  ------------------
  |  | 8379|    670|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    670|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    670|    }                                                           \
  |  | 8382|    670|    else {                                                      \
  |  | 8383|    670|        return vis(monostate_val);                              \
  |  | 8384|    670|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 6.03k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|    670|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 670, False: 5.36k]
  ------------------
 8426|    670|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|    670|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    670|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    670|    }                                                           \
  |  | 8382|    670|    else {                                                      \
  |  | 8383|    670|        return vis(monostate_val);                              \
  |  | 8384|    670|    }
  ------------------
 8427|    670|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 670, False: 5.36k]
  ------------------
 8428|    670|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|    670|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    670|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    670|    }                                                           \
  |  | 8382|    670|    else {                                                      \
  |  | 8383|    670|        return vis(monostate_val);                              \
  |  | 8384|    670|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 6.03k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|    670|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 670, False: 5.36k]
  ------------------
 8432|    670|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|    670|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    670|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    670|    }                                                           \
  |  | 8382|    670|    else {                                                      \
  |  | 8383|    670|        return vis(monostate_val);                              \
  |  | 8384|    670|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 6.03k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 6.03k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 6.03k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 6.03k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 6.03k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  6.03k|            SCN_CLANG_POP
 8456|  6.03k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  2.09k|    {
 1808|  2.09k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.09k|                                            std::forward<F>(f));
 1810|  2.09k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  2.09k|{
 1294|  2.09k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.09k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.09k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.09k|            return result(*std::forward<Exp>(exp));
 1298|  2.09k|        }
 1299|       |
 1300|  2.09k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.09k|        return result(unexpect, monostate{});
 1302|  2.09k|    }
 1303|  2.09k|    else {
 1304|  2.09k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.09k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.09k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.98k, False: 104]
  |  |  ------------------
  ------------------
 1306|  2.09k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.09k|                   : result(unexpect,
 1308|    104|                            trivial_invoke(std::forward<F>(f),
 1309|    104|                                           std::forward<Exp>(exp).error()));
 1310|  2.09k|    }
 1311|  2.09k|}
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1456|    104|    {
 1457|    104|    }
_ZNO3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1633|  1.98k|    {
 1634|  1.98k|        return std::move(value());
 1635|  1.98k|    }
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5505|  72.2k|    {
 5506|  72.2k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8016|  72.2k|    {
 8017|  72.2k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  72.2k|{
 7005|  72.2k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  72.2k|    handler.check_args_exhausted();
 7007|  72.2k|    return handler.get_error();
 7008|  72.2k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  72.2k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  72.2k|    auto begin = format.data();
 6974|  72.2k|    auto it = begin;
 6975|  72.2k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   286k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 279k, False: 6.76k]
  ------------------
 6978|   279k|        const auto ch = *it++;
 6979|   279k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 75.6k, False: 204k]
  ------------------
 6980|  75.6k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  75.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  75.6k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 64.1k, False: 11.5k]
  ------------------
 6984|  64.1k|                return;
 6985|  64.1k|            }
 6986|  75.6k|        }
 6987|   204k|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 2.74k, False: 201k]
  ------------------
 6988|  2.74k|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  5.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.39k, False: 1.35k]
  |  |  |  Branch (859:45): [True: 426, False: 2.31k]
  |  |  |  Branch (859:45): [True: 966, False: 1.35k]
  |  |  ------------------
  ------------------
 6989|  1.39k|                handler.on_error("Unmatched '}' in format string");
 6990|  1.39k|                return;
 6991|  1.39k|            }
 6992|       |
 6993|  1.35k|            handler.on_literal_text(begin, it);
 6994|  1.35k|            begin = ++it;
 6995|  1.35k|        }
 6996|   279k|    }
 6997|       |
 6998|  6.76k|    handler.on_literal_text(begin, end);
 6999|  6.76k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6902|  75.6k|{
 6903|  75.6k|    struct id_adapter {
 6904|  75.6k|        constexpr void operator()()
 6905|  75.6k|        {
 6906|  75.6k|            arg_id = handler.on_arg_id();
 6907|  75.6k|        }
 6908|  75.6k|        constexpr void operator()(std::size_t id)
 6909|  75.6k|        {
 6910|  75.6k|            arg_id = handler.on_arg_id(id);
 6911|  75.6k|        }
 6912|       |
 6913|  75.6k|        constexpr void on_error(const char* msg)
 6914|  75.6k|        {
 6915|  75.6k|            SCN_UNLIKELY_ATTR
 6916|  75.6k|            handler.on_error(msg);
 6917|  75.6k|        }
 6918|       |
 6919|  75.6k|        Handler& handler;
 6920|  75.6k|        std::size_t arg_id;
 6921|  75.6k|    };
 6922|       |
 6923|  75.6k|    ++begin;
 6924|  75.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68, False: 75.5k]
  |  |  ------------------
  ------------------
 6925|     68|        handler.on_error("Unexpected end of replacement field");
 6926|     68|        return begin;
 6927|     68|    }
 6928|       |
 6929|  75.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 6.05k, False: 69.4k]
  ------------------
 6930|  6.05k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|  6.05k|    }
 6932|  69.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 4.26k, False: 65.2k]
  ------------------
 6933|  4.26k|        handler.on_literal_text(begin, begin + 1);
 6934|  4.26k|    }
 6935|  65.2k|    else {
 6936|  65.2k|        auto adapter = id_adapter{handler, 0};
 6937|  65.2k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  65.2k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  65.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 65.1k]
  |  |  ------------------
  ------------------
 6940|    110|            handler.on_error("Missing '}' in format string");
 6941|    110|            return begin;
 6942|    110|        }
 6943|       |
 6944|  65.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 176, False: 64.9k]
  ------------------
 6945|    176|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|    176|        }
 6947|  64.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 52.6k, False: 12.3k]
  ------------------
 6948|  52.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 52.5k]
  |  |  ------------------
  ------------------
 6949|     74|                handler.on_error("Unexpected end of replacement field");
 6950|     74|                return begin;
 6951|     74|            }
 6952|  52.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  52.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.21k, False: 49.3k]
  |  |  |  Branch (859:45): [True: 0, False: 52.5k]
  |  |  |  Branch (859:45): [True: 3.21k, False: 49.3k]
  |  |  ------------------
  ------------------
 6954|  3.21k|                handler.on_error("Unknown format specifier");
 6955|  3.21k|                return begin;
 6956|  3.21k|            }
 6957|  52.5k|        }
 6958|  12.3k|        else {
 6959|  12.3k|            SCN_UNLIKELY_ATTR
 6960|  12.3k|            handler.on_error("Missing '}' in format string");
 6961|  12.3k|            return begin;
 6962|  12.3k|        }
 6963|  65.1k|    }
 6964|  59.8k|    return begin + 1;
 6965|  75.5k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 7999|  58.7k|    {
 8000|  58.7k|        return m_args.get(id);
 8001|  58.7k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE4argsEv:
 8004|  6.22k|    {
 8005|  6.22k|        return m_args;
 8006|  6.22k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8009|  55.2k|    {
 8010|  55.2k|        return m_locale;
 8011|  55.2k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5526|  55.7k|    {
 5527|  55.7k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 55.7k]
  |  |  ------------------
  ------------------
 5528|     42|            on_error(
 5529|     42|                "Cannot switch from manual to automatic argument indexing");
 5530|     42|            return 0;
 5531|     42|        }
 5532|       |
 5533|  55.7k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  55.7k|        do_check_arg_id(id);
 5535|  55.7k|        return id;
 5536|  55.7k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE8on_errorEPKc:
 5550|    112|    {
 5551|    112|        return detail::handle_error(
 5552|    112|            scan_error{scan_error::invalid_format_string, msg});
 5553|    112|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6014|  58.7k|{
 6015|  58.7k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  58.7k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  58.7k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  65.2k|{
 6404|  65.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  65.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  65.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  65.2k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 65.2k, False: 0]
  |  Branch (6405:26): [True: 15.4k, False: 49.7k]
  ------------------
 6406|  15.4k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|  15.4k|    }
 6408|       |
 6409|  49.7k|    handler();
 6410|  49.7k|    return begin;
 6411|  65.2k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6373|  15.4k|{
 6374|  15.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6375|       |
 6376|  15.4k|    CharT c = *begin;
 6377|  15.4k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6377:9): [True: 11.7k, False: 3.69k]
  |  Branch (6377:27): [True: 402, False: 3.29k]
  ------------------
 6378|  12.2k|        handler.on_error("Invalid argument ID");
 6379|  12.2k|        return begin;
 6380|  12.2k|    }
 6381|       |
 6382|  3.29k|    int idx = 0;
 6383|  3.29k|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6383:9): [True: 392, False: 2.89k]
  ------------------
 6384|    392|        idx = parse_simple_int(begin, end);
 6385|    392|    }
 6386|  2.89k|    else {
 6387|  2.89k|        ++begin;
 6388|  2.89k|    }
 6389|       |
 6390|  3.29k|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6390:9): [True: 110, False: 3.18k]
  |  Branch (6390:26): [True: 3.00k, False: 176]
  |  Branch (6390:50): [True: 104, False: 2.90k]
  ------------------
 6391|    214|        handler.on_error("Invalid argument ID");
 6392|    214|        return begin;
 6393|    214|    }
 6394|  3.07k|    handler(idx);
 6395|       |
 6396|  3.07k|    return begin;
 6397|  3.29k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6914|  12.4k|        {
 6915|  12.4k|            SCN_UNLIKELY_ATTR
 6916|  12.4k|            handler.on_error(msg);
 6917|  12.4k|        }
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6352|  12.6k|{
 6353|  12.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6354|  12.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6355|       |
 6356|  12.6k|    unsigned long long value = 0;
 6357|  78.6k|    do {
 6358|  78.6k|        value *= 10;
 6359|  78.6k|        value += static_cast<unsigned long long>(*begin - '0');
 6360|  78.6k|        if (value >
  ------------------
  |  Branch (6360:13): [True: 110, False: 78.5k]
  ------------------
 6361|  78.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6362|    110|            return -1;
 6363|    110|        }
 6364|  78.5k|        ++begin;
 6365|  78.5k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6365:14): [True: 78.2k, False: 280]
  |  Branch (6365:30): [True: 75.0k, False: 3.28k]
  |  Branch (6365:47): [True: 66.0k, False: 8.93k]
  ------------------
 6366|  12.4k|    return static_cast<int>(value);
 6367|  12.6k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6909|  3.07k|        {
 6910|  3.07k|            arg_id = handler.on_arg_id(id);
 6911|  3.07k|        }
_ZN3scn2v324basic_scan_parse_contextIcE12check_arg_idEm:
 5539|  3.07k|    {
 5540|  3.07k|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|  3.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 3.00k]
  |  |  ------------------
  ------------------
 5541|     70|            on_error(
 5542|     70|                "Cannot switch from manual to automatic argument indexing");
 5543|     70|            return;
 5544|     70|        }
 5545|  3.00k|        m_next_arg_id = -1;
 5546|  3.00k|        do_check_arg_id(id);
 5547|  3.00k|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  49.7k|        {
 6906|  49.7k|            arg_id = handler.on_arg_id();
 6907|  49.7k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5212|   105k|    {
 5213|   105k|        return m_type;
 5214|   105k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5521|  49.0k|    {
 5522|  49.0k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  49.0k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5510|   101k|    {
 5511|   101k|        return m_format.data();
 5512|   101k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  52.5k|    {
 7083|  52.5k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  52.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  52.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  52.5k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6818|  52.5k|{
 6819|  52.5k|    auto do_presentation = [&]() -> const CharT* {
 6820|  52.5k|        if (*begin == CharT{'['}) {
 6821|  52.5k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  52.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  52.5k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  52.5k|                return begin;
 6827|  52.5k|            }
 6828|  52.5k|            handler.on_character_set_string(set);
 6829|  52.5k|            return begin;
 6830|  52.5k|        }
 6831|  52.5k|        if (*begin == CharT{'/'}) {
 6832|  52.5k|            return parse_presentation_regex(begin, end, handler);
 6833|  52.5k|        }
 6834|  52.5k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  52.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  52.5k|            handler.on_error("Invalid type specifier in format string");
 6837|  52.5k|            return begin;
 6838|  52.5k|        }
 6839|  52.5k|        handler.on_type(type);
 6840|  52.5k|        return begin;
 6841|  52.5k|    };
 6842|       |
 6843|  52.5k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 51.4k, False: 1.12k]
  |  Branch (6843:28): [True: 2.22k, False: 49.2k]
  ------------------
 6844|  52.5k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 968, False: 1.26k]
  |  Branch (6844:36): [True: 916, False: 52]
  ------------------
 6845|    916|        return do_presentation();
 6846|    916|    }
 6847|       |
 6848|  51.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 51.6k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  51.6k|    begin = parse_align(begin, end, handler);
 6854|  51.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 118, False: 51.5k]
  |  |  ------------------
  ------------------
 6855|    118|        handler.on_error("Unexpected end of format string");
 6856|    118|        return begin;
 6857|    118|    }
 6858|       |
 6859|  51.5k|    begin = parse_width(begin, end, handler);
 6860|  51.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120, False: 51.4k]
  |  |  ------------------
  ------------------
 6861|    120|        handler.on_error("Unexpected end of format string");
 6862|    120|        return begin;
 6863|    120|    }
 6864|       |
 6865|  51.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 7.17k, False: 44.2k]
  ------------------
 6866|  7.17k|        ++begin;
 6867|  7.17k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 7.13k]
  |  |  ------------------
  ------------------
 6868|     34|            handler.on_error("Unexpected end of format string");
 6869|     34|            return begin;
 6870|     34|        }
 6871|  7.13k|        begin = parse_precision(begin, end, handler);
 6872|  7.13k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.13k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 7.05k]
  |  |  ------------------
  ------------------
 6873|     82|            handler.on_error("Unexpected end of format string");
 6874|     82|            return begin;
 6875|     82|        }
 6876|  7.13k|    }
 6877|       |
 6878|  51.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 410, False: 50.8k]
  ------------------
 6879|    410|        handler.on_localized();
 6880|    410|        ++begin;
 6881|    410|    }
 6882|  51.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 51.2k]
  |  |  ------------------
  ------------------
 6883|     52|        handler.on_error("Unexpected end of format string");
 6884|     52|        return begin;
 6885|     52|    }
 6886|       |
 6887|  51.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 51.2k, False: 0]
  |  Branch (6887:25): [True: 46.2k, False: 5.01k]
  ------------------
 6888|  46.2k|        do_presentation();
 6889|  46.2k|    }
 6890|  51.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  51.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 49.1k]
  |  |  ------------------
  ------------------
 6891|  2.09k|        handler.on_error("Unexpected end of format string");
 6892|  2.09k|        return begin;
 6893|  2.09k|    }
 6894|       |
 6895|  49.1k|    return begin;
 6896|  51.2k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6467|  2.22k|{
 6468|  2.22k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 914, False: 1.31k]
  |  Branch (6468:33): [True: 844, False: 70]
  ------------------
 6469|  2.22k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 196, False: 1.18k]
  |  Branch (6469:33): [True: 124, False: 72]
  ------------------
 6470|  2.22k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  47.1k|    auto do_presentation = [&]() -> const CharT* {
 6820|  47.1k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 13.0k, False: 34.0k]
  ------------------
 6821|  13.0k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  13.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 850, False: 12.2k]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|    850|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|    850|                return begin;
 6827|    850|            }
 6828|  12.2k|            handler.on_character_set_string(set);
 6829|  12.2k|            return begin;
 6830|  13.0k|        }
 6831|  34.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 29.8k, False: 4.23k]
  ------------------
 6832|  29.8k|            return parse_presentation_regex(begin, end, handler);
 6833|  29.8k|        }
 6834|  4.23k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  4.23k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 724, False: 3.50k]
  |  |  ------------------
  ------------------
 6836|    724|            handler.on_error("Invalid type specifier in format string");
 6837|    724|            return begin;
 6838|    724|        }
 6839|  3.50k|        handler.on_type(type);
 6840|  3.50k|        return begin;
 6841|  4.23k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6657|  13.0k|{
 6658|  13.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|  13.0k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  13.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|  13.0k|    auto start = begin;
 6662|  13.0k|    ++begin;
 6663|       |
 6664|  13.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 13.0k]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|     42|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|     42|        return {};
 6669|     42|    }
 6670|  13.0k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 2.15k, False: 10.8k]
  ------------------
 6671|  2.15k|        handler.on_charset_inverted();
 6672|  2.15k|        ++begin;
 6673|  2.15k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 2.12k]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     34|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|     34|            return {};
 6678|     34|        }
 6679|  2.12k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 54, False: 2.06k]
  ------------------
 6680|     54|            handler.on_charset_single(char32_t{']'});
 6681|     54|            ++begin;
 6682|     54|        }
 6683|  2.12k|    }
 6684|  10.8k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 34, False: 10.8k]
  ------------------
 6685|     34|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|     34|    }
 6687|       |
 6688|  2.20M|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 2.20M, False: 526]
  ------------------
 6689|  2.20M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 214, False: 2.20M]
  |  |  ------------------
  ------------------
 6690|    214|            break;
 6691|    214|        }
 6692|       |
 6693|  2.20M|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 12.2k, False: 2.19M]
  ------------------
 6694|  12.2k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|  12.2k|        }
 6696|       |
 6697|  2.19M|        parse_presentation_set_literal(begin, end, handler);
 6698|  2.19M|    }
 6699|       |
 6700|    740|    SCN_UNLIKELY_ATTR
 6701|    740|    handler.on_error("Invalid [character set] specifier in format string");
 6702|    740|    return {};
 6703|  12.9k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6621|  2.19M|{
 6622|  2.19M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  2.19M|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  2.19M|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  2.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 102, False: 2.19M]
  |  |  ------------------
  ------------------
 6626|    102|        return;
 6627|    102|    }
 6628|       |
 6629|  2.19M|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 2.19M, False: 230]
  |  Branch (6629:25): [True: 12.7k, False: 2.17M]
  |  Branch (6629:49): [True: 12.7k, False: 34]
  ------------------
 6630|  2.19M|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 12.4k, False: 250]
  ------------------
 6631|  12.4k|        ++begin;
 6632|       |
 6633|  12.4k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|  12.4k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 70, False: 12.3k]
  |  |  ------------------
  ------------------
 6635|     70|            return;
 6636|     70|        }
 6637|       |
 6638|  12.3k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 12.3k]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|     34|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|     34|            return;
 6643|     34|        }
 6644|       |
 6645|  12.3k|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|  12.3k|        return;
 6647|  12.3k|    }
 6648|       |
 6649|  2.18M|    handler.on_charset_single(cp_first);
 6650|  2.18M|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6597|  2.20M|{
 6598|  2.20M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  2.20M|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  2.20M|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  4.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 2.20M]
  |  |  |  Branch (859:45): [True: 72, False: 2.20M]
  |  |  |  Branch (859:45): [True: 26, False: 2.20M]
  |  |  ------------------
  ------------------
 6602|     98|        handler.on_error("Invalid encoding in format string");
 6603|     98|        return invalid_code_point;
 6604|     98|    }
 6605|       |
 6606|  2.20M|    const auto cp =
 6607|  2.20M|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  2.20M|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 2.20M]
  |  |  ------------------
  ------------------
 6609|     74|        handler.on_error("Invalid encoding in format string");
 6610|     74|        return invalid_code_point;
 6611|     74|    }
 6612|       |
 6613|  2.20M|    begin += len;
 6614|  2.20M|    return cp;
 6615|  2.20M|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6306|  12.2k|    {
 6307|  12.2k|        m_specs.charset_string_data = fmt.data();
 6308|  12.2k|        m_specs.charset_string_size = fmt.size();
 6309|  12.2k|        on_type(presentation_type::string_set);
 6310|  12.2k|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_RSE_SE_OT0_:
 6709|  29.8k|{
 6710|  29.8k|#if !SCN_DISABLE_REGEX
 6711|  29.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  29.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6712|  29.8k|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|  29.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6713|       |
 6714|  29.8k|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  59.7k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6714:19): [Folded - Ignored]
  |  Branch (6714:19): [Folded - Ignored]
  ------------------
 6715|  29.8k|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6715:19): [Folded - Ignored]
  ------------------
 6716|  29.8k|        handler.on_error("Regex backend doesn't support wide strings as input");
 6717|  29.8k|        return begin;
 6718|  29.8k|    }
 6719|       |
 6720|  29.8k|    auto start = begin;
 6721|  29.8k|    ++begin;
 6722|       |
 6723|  29.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 29.8k]
  |  |  ------------------
  ------------------
 6724|     34|        handler.on_error("Unexpected end of regex in format string");
 6725|     34|        return begin;
 6726|     34|    }
 6727|       |
 6728|  29.8k|    handler.on_type(presentation_type::regex);
 6729|  5.39M|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6729:12): [True: 5.39M, False: 244]
  ------------------
 6730|  5.39M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6730:13): [True: 49.4k, False: 5.34M]
  ------------------
 6731|  49.4k|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6731:17): [True: 29.5k, False: 19.8k]
  ------------------
 6732|  29.5k|                break;
 6733|  29.5k|            }
 6734|  19.8k|            else {
 6735|  19.8k|                handler.on_type(presentation_type::regex_escaped);
 6736|  19.8k|            }
 6737|  49.4k|        }
 6738|  5.39M|    }
 6739|  29.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  29.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 244, False: 29.5k]
  |  |  ------------------
  ------------------
 6740|    244|        handler.on_error("Unexpected end of regex in format string");
 6741|    244|        return begin;
 6742|    244|    }
 6743|       |
 6744|  29.5k|    auto regex_end = begin;
 6745|  29.5k|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6746|  29.5k|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 52, False: 29.5k]
  |  |  ------------------
  ------------------
 6747|     52|        handler.on_error("Invalid (empty) regex in format string");
 6748|     52|        return begin;
 6749|     52|    }
 6750|  29.5k|    handler.on_regex_pattern(regex_pattern);
 6751|  29.5k|    ++begin;
 6752|       |
 6753|  29.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 29.4k]
  |  |  ------------------
  ------------------
 6754|     34|        handler.on_error("Unexpected end of regex in format string");
 6755|     34|        return begin;
 6756|     34|    }
 6757|       |
 6758|  29.4k|    regex_flags flags{regex_flags::none};
 6759|  29.4k|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6760|  29.4k|        {{'m', regex_flags::multiline},
 6761|  29.4k|         {'s', regex_flags::singleline},
 6762|  29.4k|         {'i', regex_flags::nocase},
 6763|  29.4k|         {'n', regex_flags::nocapture}}};
 6764|  33.6k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 33.5k, False: 58]
  ------------------
 6765|  33.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6765:13): [True: 29.2k, False: 4.28k]
  ------------------
 6766|  29.2k|            break;
 6767|  29.2k|        }
 6768|  4.28k|        bool found_flag = false;
 6769|  11.2k|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6769:24): [True: 11.2k, False: 128]
  ------------------
 6770|  11.2k|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6770:17): [True: 7.09k, False: 4.16k]
  ------------------
 6771|  7.09k|                continue;
 6772|  7.09k|            }
 6773|  4.16k|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6773:17): [True: 34, False: 4.12k]
  ------------------
 6774|     34|                handler.on_error("Flag set multiple times in regex");
 6775|     34|                return begin;
 6776|     34|            }
 6777|  4.12k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6778|  4.12k|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6778:17): [True: 48, False: 4.07k]
  ------------------
 6779|       |                // clang-format off
 6780|     48|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6781|       |                // clang-format on
 6782|     48|            }
 6783|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6784|       |            if (*begin == CharT{'m'}) {
 6785|       |                // clang-format off
 6786|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6787|       |                // clang-format on
 6788|       |            }
 6789|       |#endif
 6790|  4.12k|#endif
 6791|  4.12k|            flags |= flag.second;
 6792|  4.12k|            found_flag = true;
 6793|  4.12k|            break;
 6794|  4.16k|        }
 6795|  4.25k|        if (!found_flag) {
  ------------------
  |  Branch (6795:13): [True: 128, False: 4.12k]
  ------------------
 6796|    128|            handler.on_error("Invalid flag in regex");
 6797|    128|            return begin;
 6798|    128|        }
 6799|  4.25k|    }
 6800|  29.3k|    handler.on_regex_flags(flags);
 6801|       |
 6802|  29.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 29.2k]
  |  |  ------------------
  ------------------
 6803|     58|        handler.on_error("Unexpected end of regex in format string");
 6804|     58|        return begin;
 6805|     58|    }
 6806|       |
 6807|  29.2k|    return begin;
 6808|       |#else
 6809|       |    handler.on_error("Regular expression support is disabled");
 6810|       |    return {};
 6811|       |#endif
 6812|  29.3k|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6314|  29.5k|    {
 6315|  29.5k|        m_specs.charset_string_data = pattern.data();
 6316|  29.5k|        m_specs.charset_string_size = pattern.size();
 6317|  29.5k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6415|  4.23k|{
 6416|  4.23k|    switch (type) {
 6417|    106|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 106, False: 4.12k]
  ------------------
 6418|    158|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 52, False: 4.17k]
  ------------------
 6419|    158|            return presentation_type::int_binary;
 6420|    162|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 162, False: 4.06k]
  ------------------
 6421|    162|            return presentation_type::int_decimal;
 6422|    144|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 144, False: 4.08k]
  ------------------
 6423|    144|            return presentation_type::int_generic;
 6424|     88|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 88, False: 4.14k]
  ------------------
 6425|     88|            return presentation_type::int_unsigned_decimal;
 6426|    124|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 124, False: 4.10k]
  ------------------
 6427|    124|            return presentation_type::int_octal;
 6428|     84|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 84, False: 4.14k]
  ------------------
 6429|    118|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 34, False: 4.19k]
  ------------------
 6430|    118|            return presentation_type::int_hex;
 6431|     34|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 34, False: 4.19k]
  ------------------
 6432|     68|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 34, False: 4.19k]
  ------------------
 6433|     68|            return presentation_type::int_arbitrary_base;
 6434|     88|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 88, False: 4.14k]
  ------------------
 6435|    194|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 106, False: 4.12k]
  ------------------
 6436|    194|            return presentation_type::float_hex;
 6437|     70|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 70, False: 4.16k]
  ------------------
 6438|    122|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 52, False: 4.17k]
  ------------------
 6439|    122|            return presentation_type::float_scientific;
 6440|    232|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 232, False: 3.99k]
  ------------------
 6441|    338|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 106, False: 4.12k]
  ------------------
 6442|    338|            return presentation_type::float_fixed;
 6443|     96|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 96, False: 4.13k]
  ------------------
 6444|    154|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 58, False: 4.17k]
  ------------------
 6445|    154|            return presentation_type::float_general;
 6446|  1.31k|        case 's':
  ------------------
  |  Branch (6446:9): [True: 1.31k, False: 2.91k]
  ------------------
 6447|  1.31k|            return presentation_type::string;
 6448|    394|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 394, False: 3.83k]
  ------------------
 6449|    394|            return presentation_type::character;
 6450|     34|        case '?':
  ------------------
  |  Branch (6450:9): [True: 34, False: 4.19k]
  ------------------
 6451|     34|            return presentation_type::escaped_character;
 6452|     96|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 96, False: 4.13k]
  ------------------
 6453|     96|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 4.23k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 4.23k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|    724|        default:
  ------------------
  |  Branch (6460:9): [True: 724, False: 3.50k]
  ------------------
 6461|    724|            return presentation_type::none;
 6462|  4.23k|    }
 6463|  4.23k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6492|  51.6k|{
 6493|  51.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  51.6k|    auto check_align = [](wchar_t ch) {
 6496|  51.6k|        switch (ch) {
 6497|  51.6k|            case L'<':
 6498|  51.6k|                return align_type::left;
 6499|  51.6k|            case L'>':
 6500|  51.6k|                return align_type::right;
 6501|  51.6k|            case L'^':
 6502|  51.6k|                return align_type::center;
 6503|  51.6k|            default:
 6504|  51.6k|                return align_type::none;
 6505|  51.6k|        }
 6506|  51.6k|    };
 6507|       |
 6508|  51.6k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  51.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 51.6k]
  |  |  |  Branch (859:45): [True: 38, False: 51.6k]
  |  |  |  Branch (859:45): [True: 4, False: 51.6k]
  |  |  ------------------
  ------------------
 6510|  51.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|     42|        handler.on_error("Invalid encoding in fill character");
 6512|     42|        return begin;
 6513|     42|    }
 6514|       |
 6515|  51.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  51.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  51.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  51.6k|    const auto begin_before_fill = begin;
 6520|  51.6k|    begin += potential_fill_len;
 6521|       |
 6522|  51.6k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 1.08k, False: 50.5k]
  ------------------
 6523|  1.08k|        return begin_before_fill;
 6524|  1.08k|    }
 6525|       |
 6526|  50.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  50.5k|    const auto begin_after_fill = begin;
 6528|  50.5k|    ++begin;
 6529|       |
 6530|  50.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 49.7k, False: 746]
  ------------------
 6531|  49.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 49.6k]
  |  |  ------------------
  ------------------
 6532|    108|            handler.on_error("Invalid fill character '{' in format string");
 6533|    108|            return begin;
 6534|    108|        }
 6535|  49.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 9.71k, False: 39.9k]
  ------------------
 6536|  9.71k|            return begin_before_fill;
 6537|  9.71k|        }
 6538|  49.6k|    }
 6539|       |
 6540|  40.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 36.7k, False: 3.97k]
  ------------------
 6541|  36.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 3.53k, False: 33.2k]
  ------------------
 6542|  3.53k|            handler.on_align(potential_align_on_fill);
 6543|  3.53k|            return begin_after_fill;
 6544|  3.53k|        }
 6545|  33.2k|        return begin_before_fill;
 6546|  36.7k|    }
 6547|       |
 6548|  3.97k|    handler.on_fill(potential_fill);
 6549|  3.97k|    handler.on_align(potential_align_after_fill);
 6550|  3.97k|    return begin;
 6551|  40.7k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6474|  51.6k|{
 6475|  51.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  51.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  51.6k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  51.6k|        return 1;
 6478|  51.6k|    }
 6479|  51.6k|    else {
 6480|  51.6k|        const auto lengths =
 6481|  51.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  51.6k|            "\3\4";
 6483|  51.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  51.6k|        return len;
 6485|  51.6k|    }
 6486|  51.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|   102k|    auto check_align = [](wchar_t ch) {
 6496|   102k|        switch (ch) {
 6497|    904|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 904, False: 101k]
  ------------------
 6498|    904|                return align_type::left;
 6499|  2.36k|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 2.36k, False: 99.7k]
  ------------------
 6500|  2.36k|                return align_type::right;
 6501|  5.59k|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 5.59k, False: 96.5k]
  ------------------
 6502|  5.59k|                return align_type::center;
 6503|  93.2k|            default:
  ------------------
  |  Branch (6503:13): [True: 93.2k, False: 8.86k]
  ------------------
 6504|  93.2k|                return align_type::none;
 6505|   102k|        }
 6506|   102k|    };
_ZN3scn2v36detail12specs_setter7on_fillIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6228|  3.97k|    {
 6229|  3.97k|        m_specs.fill = fill;
 6230|  3.97k|    }
_ZN3scn2v36detail9fill_typeaSIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6109|  3.97k|    {
 6110|  3.97k|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|  3.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6111|  3.97k|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|  3.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6112|  3.97k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6112:23): [Folded - Ignored]
  ------------------
 6113|  8.98k|            for (size_t i = 0; i < s.size(); ++i) {
  ------------------
  |  Branch (6113:32): [True: 5.01k, False: 3.97k]
  ------------------
 6114|  5.01k|                SCN_GCC_PUSH
 6115|  5.01k|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6116|  5.01k|                m_data[i] = s[i];
 6117|  5.01k|                SCN_GCC_POP
 6118|  5.01k|            }
 6119|  3.97k|            m_size = static_cast<unsigned char>(s.size());
 6120|  3.97k|        }
 6121|  3.97k|        else if constexpr (sizeof(CharT) == 2) {
 6122|  3.97k|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6123|  3.97k|            m_data[1] =
 6124|  3.97k|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6125|  3.97k|            if (s.size() == 1) {
 6126|  3.97k|                return;
 6127|  3.97k|            }
 6128|  3.97k|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6129|  3.97k|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6130|  3.97k|        }
 6131|  3.97k|        else {
 6132|  3.97k|            const auto front = static_cast<unsigned>(s.front());
 6133|  3.97k|            m_data[0] = static_cast<char>(front);
 6134|  3.97k|            m_data[1] = static_cast<char>(front >> 8);
 6135|  3.97k|            m_data[2] = static_cast<char>(front >> 16);
 6136|  3.97k|            m_data[3] = static_cast<char>(front >> 24);
 6137|  3.97k|        }
 6138|  3.97k|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6557|  51.5k|{
 6558|  51.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  51.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  51.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 17.2k, False: 34.2k]
  |  Branch (6560:33): [True: 5.15k, False: 12.1k]
  ------------------
 6561|  5.15k|        int width = parse_simple_int(begin, end);
 6562|  5.15k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  5.15k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.11k, False: 34]
  |  |  ------------------
  ------------------
 6563|  5.11k|            handler.on_width(width);
 6564|  5.11k|        }
 6565|     34|        else {
 6566|     34|            handler.on_error("Invalid field width");
 6567|     34|            return begin;
 6568|     34|        }
 6569|  5.15k|    }
 6570|  51.4k|    return begin;
 6571|  51.5k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6577|  7.13k|{
 6578|  7.13k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.13k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.13k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6579|       |
 6580|  7.13k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6580:9): [True: 7.10k, False: 36]
  |  Branch (6580:33): [True: 7.06k, False: 40]
  ------------------
 6581|  7.06k|        int prec = parse_simple_int(begin, end);
 6582|  7.06k|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|  7.06k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.02k, False: 42]
  |  |  ------------------
  ------------------
 6583|  7.02k|            handler.on_precision(prec);
 6584|  7.02k|        }
 6585|     42|        else {
 6586|     42|            handler.on_error("Invalid field precision");
 6587|     42|            return begin;
 6588|     42|        }
 6589|  7.06k|    }
 6590|  7.09k|    return begin;
 6591|  7.13k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7087|    410|    {
 7088|    410|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|    410|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 370, False: 40]
  ------------------
 7090|    410|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 330, False: 40]
  ------------------
 7091|    410|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 290, False: 40]
  ------------------
 7092|    410|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 250, False: 40]
  ------------------
 7093|    250|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|    250|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|    250|        }
 7098|       |
 7099|    160|        Handler::on_localized();
 7100|    160|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  48.8k|{
 8378|  48.8k|#define SCN_VISIT(Type)                                         \
 8379|  48.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  48.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  48.8k|    }                                                           \
 8382|  48.8k|    else {                                                      \
 8383|  48.8k|        return vis(monostate_val);                              \
 8384|  48.8k|    }
 8385|       |
 8386|  48.8k|    monostate monostate_val{};
 8387|       |
 8388|  48.8k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 48.8k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 48.8k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|  5.44k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 5.44k, False: 43.4k]
  ------------------
 8394|  5.44k|            SCN_VISIT(int);
  ------------------
  |  | 8379|  5.44k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.44k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.44k|    }                                                           \
  |  | 8382|  5.44k|    else {                                                      \
  |  | 8383|  5.44k|        return vis(monostate_val);                              \
  |  | 8384|  5.44k|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 48.8k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 48.8k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 48.8k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 48.8k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|  5.44k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 5.44k, False: 43.4k]
  ------------------
 8404|  5.44k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|  5.44k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.44k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.44k|    }                                                           \
  |  | 8382|  5.44k|    else {                                                      \
  |  | 8383|  5.44k|        return vis(monostate_val);                              \
  |  | 8384|  5.44k|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 48.8k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 48.8k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|  5.41k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 5.41k, False: 43.4k]
  ------------------
 8410|  5.41k|            SCN_VISIT(void*);
  ------------------
  |  | 8379|  5.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.41k|    }                                                           \
  |  | 8382|  5.41k|    else {                                                      \
  |  | 8383|  5.41k|        return vis(monostate_val);                              \
  |  | 8384|  5.41k|    }
  ------------------
 8411|  5.44k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 5.44k, False: 43.4k]
  ------------------
 8412|  5.44k|            SCN_VISIT(bool);
  ------------------
  |  | 8379|  5.44k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.44k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.44k|    }                                                           \
  |  | 8382|  5.44k|    else {                                                      \
  |  | 8383|  5.44k|        return vis(monostate_val);                              \
  |  | 8384|  5.44k|    }
  ------------------
 8413|  5.41k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 5.41k, False: 43.4k]
  ------------------
 8414|  5.41k|            SCN_VISIT(char);
  ------------------
  |  | 8379|  5.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.41k|    }                                                           \
  |  | 8382|  5.41k|    else {                                                      \
  |  | 8383|  5.41k|        return vis(monostate_val);                              \
  |  | 8384|  5.41k|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 48.8k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 48.8k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 48.8k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|  5.44k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 5.44k, False: 43.4k]
  ------------------
 8422|  5.44k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  5.44k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.44k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.44k|    }                                                           \
  |  | 8382|  5.44k|    else {                                                      \
  |  | 8383|  5.44k|        return vis(monostate_val);                              \
  |  | 8384|  5.44k|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 48.8k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|  5.41k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 5.41k, False: 43.4k]
  ------------------
 8426|  5.41k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|  5.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.41k|    }                                                           \
  |  | 8382|  5.41k|    else {                                                      \
  |  | 8383|  5.41k|        return vis(monostate_val);                              \
  |  | 8384|  5.41k|    }
  ------------------
 8427|  5.41k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 5.41k, False: 43.4k]
  ------------------
 8428|  5.41k|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|  5.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.41k|    }                                                           \
  |  | 8382|  5.41k|    else {                                                      \
  |  | 8383|  5.41k|        return vis(monostate_val);                              \
  |  | 8384|  5.41k|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 48.8k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|  5.41k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 5.41k, False: 43.4k]
  ------------------
 8432|  5.41k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|  5.41k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  5.41k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  5.41k|    }                                                           \
  |  | 8382|  5.41k|    else {                                                      \
  |  | 8383|  5.41k|        return vis(monostate_val);                              \
  |  | 8384|  5.41k|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 48.8k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 48.8k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 48.8k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 48.8k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 48.8k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  48.8k|            SCN_CLANG_POP
 8456|  48.8k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5426|   144k|    {
 5427|   144k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|   144k|        return static_cast<std::size_t>(m_desc &
 5432|   144k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|   144k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5451|   157k|    {
 5452|   157k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   157k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5394|  12.7k|    {
 5395|  12.7k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.7k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  12.7k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 110, False: 12.6k]
  |  |  ------------------
  ------------------
 5403|    110|            return {};
 5404|    110|        }
 5405|       |
 5406|  12.6k|        const auto t = type(id);
 5407|  12.6k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.26k, False: 11.3k]
  |  |  ------------------
  ------------------
 5408|  1.26k|            return {};
 5409|  1.26k|        }
 5410|       |
 5411|  11.3k|        basic_scan_arg<Context> arg;
 5412|  11.3k|        arg.m_type = t;
 5413|  11.3k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 11.3k, False: 0]
  ------------------
 5414|  11.3k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  11.3k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  11.3k|        return arg;
 5420|  12.6k|    }
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5201|  12.7k|    constexpr basic_scan_arg() = default;
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5460|  12.6k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  12.6k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  12.6k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  12.6k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  12.6k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5455|  11.3k|    {
 5456|  11.3k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  11.3k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5207|  22.1k|    {
 5208|  22.1k|        return m_type != detail::arg_type::none_type;
 5209|  22.1k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  5.32k|{
 8378|  5.32k|#define SCN_VISIT(Type)                                         \
 8379|  5.32k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  5.32k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  5.32k|    }                                                           \
 8382|  5.32k|    else {                                                      \
 8383|  5.32k|        return vis(monostate_val);                              \
 8384|  5.32k|    }
 8385|       |
 8386|  5.32k|    monostate monostate_val{};
 8387|       |
 8388|  5.32k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 5.32k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 5.32k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|    592|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 592, False: 4.73k]
  ------------------
 8394|    592|            SCN_VISIT(int);
  ------------------
  |  | 8379|    592|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    592|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    592|    }                                                           \
  |  | 8382|    592|    else {                                                      \
  |  | 8383|    592|        return vis(monostate_val);                              \
  |  | 8384|    592|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 5.32k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 5.32k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 5.32k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 5.32k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|    592|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 592, False: 4.73k]
  ------------------
 8404|    592|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|    592|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    592|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    592|    }                                                           \
  |  | 8382|    592|    else {                                                      \
  |  | 8383|    592|        return vis(monostate_val);                              \
  |  | 8384|    592|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 5.32k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 5.32k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|    592|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 592, False: 4.73k]
  ------------------
 8410|    592|            SCN_VISIT(void*);
  ------------------
  |  | 8379|    592|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    592|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    592|    }                                                           \
  |  | 8382|    592|    else {                                                      \
  |  | 8383|    592|        return vis(monostate_val);                              \
  |  | 8384|    592|    }
  ------------------
 8411|    592|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 592, False: 4.73k]
  ------------------
 8412|    592|            SCN_VISIT(bool);
  ------------------
  |  | 8379|    592|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    592|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    592|    }                                                           \
  |  | 8382|    592|    else {                                                      \
  |  | 8383|    592|        return vis(monostate_val);                              \
  |  | 8384|    592|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 5.32k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|    592|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 592, False: 4.73k]
  ------------------
 8416|    592|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|    592|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    592|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    592|    }                                                           \
  |  | 8382|    592|    else {                                                      \
  |  | 8383|    592|        return vis(monostate_val);                              \
  |  | 8384|    592|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 5.32k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 5.32k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|    592|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 592, False: 4.73k]
  ------------------
 8422|    592|            SCN_VISIT(double);
  ------------------
  |  | 8379|    592|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    592|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    592|    }                                                           \
  |  | 8382|    592|    else {                                                      \
  |  | 8383|    592|        return vis(monostate_val);                              \
  |  | 8384|    592|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 5.32k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 5.32k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|    592|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 592, False: 4.73k]
  ------------------
 8428|    592|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|    592|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    592|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    592|    }                                                           \
  |  | 8382|    592|    else {                                                      \
  |  | 8383|    592|        return vis(monostate_val);                              \
  |  | 8384|    592|    }
  ------------------
 8429|    592|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 592, False: 4.73k]
  ------------------
 8430|    592|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|    592|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    592|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    592|    }                                                           \
  |  | 8382|    592|    else {                                                      \
  |  | 8383|    592|        return vis(monostate_val);                              \
  |  | 8384|    592|    }
  ------------------
 8431|    592|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 592, False: 4.73k]
  ------------------
 8432|    592|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|    592|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    592|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    592|    }                                                           \
  |  | 8382|    592|    else {                                                      \
  |  | 8383|    592|        return vis(monostate_val);                              \
  |  | 8384|    592|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 5.32k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 5.32k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 5.32k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 5.32k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 5.32k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  5.32k|            SCN_CLANG_POP
 8456|  5.32k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5505|   144k|    {
 5506|   144k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8016|   144k|    {
 8017|   144k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|   144k|{
 7005|   144k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|   144k|    handler.check_args_exhausted();
 7007|   144k|    return handler.get_error();
 7008|   144k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|   144k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|   144k|    auto begin = format.data();
 6974|   144k|    auto it = begin;
 6975|   144k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   298M|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 298M, False: 60.8k]
  ------------------
 6978|   298M|        const auto ch = *it++;
 6979|   298M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 85.8k, False: 298M]
  ------------------
 6980|  85.8k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  85.8k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  85.8k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 83.1k, False: 2.70k]
  ------------------
 6984|  83.1k|                return;
 6985|  83.1k|            }
 6986|  85.8k|        }
 6987|   298M|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 852, False: 298M]
  ------------------
 6988|    852|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|  1.46k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 486, False: 366]
  |  |  |  Branch (859:45): [True: 242, False: 610]
  |  |  |  Branch (859:45): [True: 244, False: 366]
  |  |  ------------------
  ------------------
 6989|    486|                handler.on_error("Unmatched '}' in format string");
 6990|    486|                return;
 6991|    486|            }
 6992|       |
 6993|    366|            handler.on_literal_text(begin, it);
 6994|    366|            begin = ++it;
 6995|    366|        }
 6996|   298M|    }
 6997|       |
 6998|  60.8k|    handler.on_literal_text(begin, end);
 6999|  60.8k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6902|  85.8k|{
 6903|  85.8k|    struct id_adapter {
 6904|  85.8k|        constexpr void operator()()
 6905|  85.8k|        {
 6906|  85.8k|            arg_id = handler.on_arg_id();
 6907|  85.8k|        }
 6908|  85.8k|        constexpr void operator()(std::size_t id)
 6909|  85.8k|        {
 6910|  85.8k|            arg_id = handler.on_arg_id(id);
 6911|  85.8k|        }
 6912|       |
 6913|  85.8k|        constexpr void on_error(const char* msg)
 6914|  85.8k|        {
 6915|  85.8k|            SCN_UNLIKELY_ATTR
 6916|  85.8k|            handler.on_error(msg);
 6917|  85.8k|        }
 6918|       |
 6919|  85.8k|        Handler& handler;
 6920|  85.8k|        std::size_t arg_id;
 6921|  85.8k|    };
 6922|       |
 6923|  85.8k|    ++begin;
 6924|  85.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  85.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 94, False: 85.7k]
  |  |  ------------------
  ------------------
 6925|     94|        handler.on_error("Unexpected end of replacement field");
 6926|     94|        return begin;
 6927|     94|    }
 6928|       |
 6929|  85.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 5.35k, False: 80.3k]
  ------------------
 6930|  5.35k|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|  5.35k|    }
 6932|  80.3k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 240, False: 80.1k]
  ------------------
 6933|    240|        handler.on_literal_text(begin, begin + 1);
 6934|    240|    }
 6935|  80.1k|    else {
 6936|  80.1k|        auto adapter = id_adapter{handler, 0};
 6937|  80.1k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  80.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  80.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 130, False: 80.0k]
  |  |  ------------------
  ------------------
 6940|    130|            handler.on_error("Missing '}' in format string");
 6941|    130|            return begin;
 6942|    130|        }
 6943|       |
 6944|  80.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 120, False: 79.9k]
  ------------------
 6945|    120|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|    120|        }
 6947|  79.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 7.30k, False: 72.6k]
  ------------------
 6948|  7.30k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  7.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46, False: 7.25k]
  |  |  ------------------
  ------------------
 6949|     46|                handler.on_error("Unexpected end of replacement field");
 6950|     46|                return begin;
 6951|     46|            }
 6952|  7.25k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  7.25k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.53k, False: 4.72k]
  |  |  |  Branch (859:45): [True: 0, False: 7.25k]
  |  |  |  Branch (859:45): [True: 2.53k, False: 4.72k]
  |  |  ------------------
  ------------------
 6954|  2.53k|                handler.on_error("Unknown format specifier");
 6955|  2.53k|                return begin;
 6956|  2.53k|            }
 6957|  7.25k|        }
 6958|  72.6k|        else {
 6959|  72.6k|            SCN_UNLIKELY_ATTR
 6960|  72.6k|            handler.on_error("Missing '}' in format string");
 6961|  72.6k|            return begin;
 6962|  72.6k|        }
 6963|  80.0k|    }
 6964|  10.4k|    return begin + 1;
 6965|  85.7k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 7999|  12.7k|    {
 8000|  12.7k|        return m_args.get(id);
 8001|  12.7k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE4argsEv:
 8004|  5.47k|    {
 8005|  5.47k|        return m_args;
 8006|  5.47k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8009|  9.78k|    {
 8010|  9.78k|        return m_locale;
 8011|  9.78k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5526|  12.4k|    {
 5527|  12.4k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.4k]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|  12.4k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  12.4k|        do_check_arg_id(id);
 5535|  12.4k|        return id;
 5536|  12.4k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE8on_errorEPKc:
 5550|    198|    {
 5551|    198|        return detail::handle_error(
 5552|    198|            scan_error{scan_error::invalid_format_string, msg});
 5553|    198|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6014|  12.5k|{
 6015|  12.5k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  12.5k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  12.5k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  80.1k|{
 6404|  80.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  80.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  80.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  80.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 80.1k, False: 0]
  |  Branch (6405:26): [True: 73.0k, False: 7.13k]
  ------------------
 6406|  73.0k|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|  73.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|  73.0k|    }
 6408|       |
 6409|  7.13k|    handler();
 6410|  7.13k|    return begin;
 6411|  80.1k|}
impl.cpp:_ZN3scn2v36detail15do_parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6373|  73.0k|{
 6374|  73.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  73.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6375|       |
 6376|  73.0k|    CharT c = *begin;
 6377|  73.0k|    if (c < CharT{'0'} || c > CharT{'9'}) {
  ------------------
  |  Branch (6377:9): [True: 112, False: 72.9k]
  |  Branch (6377:27): [True: 72.3k, False: 564]
  ------------------
 6378|  72.4k|        handler.on_error("Invalid argument ID");
 6379|  72.4k|        return begin;
 6380|  72.4k|    }
 6381|       |
 6382|    564|    int idx = 0;
 6383|    564|    if (c != CharT{'0'}) {
  ------------------
  |  Branch (6383:9): [True: 326, False: 238]
  ------------------
 6384|    326|        idx = parse_simple_int(begin, end);
 6385|    326|    }
 6386|    238|    else {
 6387|    238|        ++begin;
 6388|    238|    }
 6389|       |
 6390|    564|    if (begin == end || (*begin != CharT{'}'} && *begin != CharT{':'})) {
  ------------------
  |  Branch (6390:9): [True: 130, False: 434]
  |  Branch (6390:26): [True: 314, False: 120]
  |  Branch (6390:50): [True: 146, False: 168]
  ------------------
 6391|    276|        handler.on_error("Invalid argument ID");
 6392|    276|        return begin;
 6393|    276|    }
 6394|    288|    handler(idx);
 6395|       |
 6396|    288|    return begin;
 6397|    564|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapter8on_errorEPKc:
 6914|  72.7k|        {
 6915|  72.7k|            SCN_UNLIKELY_ATTR
 6916|  72.7k|            handler.on_error(msg);
 6917|  72.7k|        }
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6352|  3.81k|{
 6353|  3.81k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6354|  3.81k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  3.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6355|       |
 6356|  3.81k|    unsigned long long value = 0;
 6357|  4.16k|    do {
 6358|  4.16k|        value *= 10;
 6359|  4.16k|        value += static_cast<unsigned long long>(*begin - '0');
 6360|  4.16k|        if (value >
  ------------------
  |  Branch (6360:13): [True: 0, False: 4.16k]
  ------------------
 6361|  4.16k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6362|      0|            return -1;
 6363|      0|        }
 6364|  4.16k|        ++begin;
 6365|  4.16k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6365:14): [True: 3.95k, False: 210]
  |  Branch (6365:30): [True: 3.79k, False: 162]
  |  Branch (6365:47): [True: 354, False: 3.44k]
  ------------------
 6366|  3.81k|    return static_cast<int>(value);
 6367|  3.81k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEm:
 6909|    288|        {
 6910|    288|            arg_id = handler.on_arg_id(id);
 6911|    288|        }
_ZN3scn2v324basic_scan_parse_contextIwE12check_arg_idEm:
 5539|    288|    {
 5540|    288|        if (SCN_UNLIKELY(m_next_arg_id > 0)) {
  ------------------
  |  |  859|    288|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 198, False: 90]
  |  |  ------------------
  ------------------
 5541|    198|            on_error(
 5542|    198|                "Cannot switch from manual to automatic argument indexing");
 5543|    198|            return;
 5544|    198|        }
 5545|     90|        m_next_arg_id = -1;
 5546|     90|        do_check_arg_id(id);
 5547|     90|    }
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  7.13k|        {
 6906|  7.13k|            arg_id = handler.on_arg_id();
 6907|  7.13k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5212|  14.5k|    {
 5213|  14.5k|        return m_type;
 5214|  14.5k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5521|  4.31k|    {
 5522|  4.31k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  4.31k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5510|  11.5k|    {
 5511|  11.5k|        return m_format.data();
 5512|  11.5k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  7.25k|    {
 7083|  7.25k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  7.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  7.25k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6818|  7.25k|{
 6819|  7.25k|    auto do_presentation = [&]() -> const CharT* {
 6820|  7.25k|        if (*begin == CharT{'['}) {
 6821|  7.25k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  7.25k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  7.25k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  7.25k|                return begin;
 6827|  7.25k|            }
 6828|  7.25k|            handler.on_character_set_string(set);
 6829|  7.25k|            return begin;
 6830|  7.25k|        }
 6831|  7.25k|        if (*begin == CharT{'/'}) {
 6832|  7.25k|            return parse_presentation_regex(begin, end, handler);
 6833|  7.25k|        }
 6834|  7.25k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  7.25k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  7.25k|            handler.on_error("Invalid type specifier in format string");
 6837|  7.25k|            return begin;
 6838|  7.25k|        }
 6839|  7.25k|        handler.on_type(type);
 6840|  7.25k|        return begin;
 6841|  7.25k|    };
 6842|       |
 6843|  7.25k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 6.41k, False: 838]
  |  Branch (6843:28): [True: 3.57k, False: 2.84k]
  ------------------
 6844|  7.25k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 430, False: 3.14k]
  |  Branch (6844:36): [True: 318, False: 112]
  ------------------
 6845|    318|        return do_presentation();
 6846|    318|    }
 6847|       |
 6848|  6.93k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.93k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  6.93k|    begin = parse_align(begin, end, handler);
 6854|  6.93k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 130, False: 6.80k]
  |  |  ------------------
  ------------------
 6855|    130|        handler.on_error("Unexpected end of format string");
 6856|    130|        return begin;
 6857|    130|    }
 6858|       |
 6859|  6.80k|    begin = parse_width(begin, end, handler);
 6860|  6.80k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82, False: 6.72k]
  |  |  ------------------
  ------------------
 6861|     82|        handler.on_error("Unexpected end of format string");
 6862|     82|        return begin;
 6863|     82|    }
 6864|       |
 6865|  6.72k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 204, False: 6.52k]
  ------------------
 6866|    204|        ++begin;
 6867|    204|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    204|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34, False: 170]
  |  |  ------------------
  ------------------
 6868|     34|            handler.on_error("Unexpected end of format string");
 6869|     34|            return begin;
 6870|     34|        }
 6871|    170|        begin = parse_precision(begin, end, handler);
 6872|    170|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    170|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 146]
  |  |  ------------------
  ------------------
 6873|     24|            handler.on_error("Unexpected end of format string");
 6874|     24|            return begin;
 6875|     24|        }
 6876|    170|    }
 6877|       |
 6878|  6.66k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 214, False: 6.45k]
  ------------------
 6879|    214|        handler.on_localized();
 6880|    214|        ++begin;
 6881|    214|    }
 6882|  6.66k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 6.63k]
  |  |  ------------------
  ------------------
 6883|     36|        handler.on_error("Unexpected end of format string");
 6884|     36|        return begin;
 6885|     36|    }
 6886|       |
 6887|  6.63k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 6.63k, False: 0]
  |  Branch (6887:25): [True: 3.05k, False: 3.58k]
  ------------------
 6888|  3.05k|        do_presentation();
 6889|  3.05k|    }
 6890|  6.63k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.61k, False: 5.02k]
  |  |  ------------------
  ------------------
 6891|  1.61k|        handler.on_error("Unexpected end of format string");
 6892|  1.61k|        return begin;
 6893|  1.61k|    }
 6894|       |
 6895|  5.02k|    return begin;
 6896|  6.63k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6467|  3.57k|{
 6468|  3.57k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 314, False: 3.25k]
  |  Branch (6468:33): [True: 264, False: 50]
  ------------------
 6469|  3.57k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 342, False: 2.96k]
  |  Branch (6469:33): [True: 166, False: 176]
  ------------------
 6470|  3.57k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  3.37k|    auto do_presentation = [&]() -> const CharT* {
 6820|  3.37k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 934, False: 2.43k]
  ------------------
 6821|    934|            auto set = parse_presentation_set(begin, end, handler);
 6822|    934|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|    934|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 778, False: 156]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|    778|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|    778|                return begin;
 6827|    778|            }
 6828|    156|            handler.on_character_set_string(set);
 6829|    156|            return begin;
 6830|    934|        }
 6831|  2.43k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 296, False: 2.14k]
  ------------------
 6832|    296|            return parse_presentation_regex(begin, end, handler);
 6833|    296|        }
 6834|  2.14k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  2.14k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  2.14k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 480, False: 1.66k]
  |  |  ------------------
  ------------------
 6836|    480|            handler.on_error("Invalid type specifier in format string");
 6837|    480|            return begin;
 6838|    480|        }
 6839|  1.66k|        handler.on_type(type);
 6840|  1.66k|        return begin;
 6841|  2.14k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6657|    934|{
 6658|    934|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6659|    934|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6660|       |
 6661|    934|    auto start = begin;
 6662|    934|    ++begin;
 6663|       |
 6664|    934|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    934|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 906]
  |  |  ------------------
  ------------------
 6665|       |        // clang-format off
 6666|     28|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6667|       |        // clang-format on
 6668|     28|        return {};
 6669|     28|    }
 6670|    906|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6670:9): [True: 306, False: 600]
  ------------------
 6671|    306|        handler.on_charset_inverted();
 6672|    306|        ++begin;
 6673|    306|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 278]
  |  |  ------------------
  ------------------
 6674|       |            // clang-format off
 6675|     28|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6676|       |            // clang-format on
 6677|     28|            return {};
 6678|     28|        }
 6679|    278|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6679:13): [True: 104, False: 174]
  ------------------
 6680|    104|            handler.on_charset_single(char32_t{']'});
 6681|    104|            ++begin;
 6682|    104|        }
 6683|    278|    }
 6684|    600|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6684:14): [True: 84, False: 516]
  ------------------
 6685|     84|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6686|     84|    }
 6687|       |
 6688|  4.21k|    while (begin != end) {
  ------------------
  |  Branch (6688:12): [True: 3.87k, False: 340]
  ------------------
 6689|  3.87k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  3.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 298, False: 3.57k]
  |  |  ------------------
  ------------------
 6690|    298|            break;
 6691|    298|        }
 6692|       |
 6693|  3.57k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6693:13): [True: 156, False: 3.41k]
  ------------------
 6694|    156|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6695|    156|        }
 6696|       |
 6697|  3.41k|        parse_presentation_set_literal(begin, end, handler);
 6698|  3.41k|    }
 6699|       |
 6700|    638|    SCN_UNLIKELY_ATTR
 6701|    638|    handler.on_error("Invalid [character set] specifier in format string");
 6702|    638|    return {};
 6703|    794|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6621|  3.41k|{
 6622|  3.41k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6623|       |
 6624|  3.41k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6625|  3.41k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  3.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 260, False: 3.15k]
  |  |  ------------------
  ------------------
 6626|    260|        return;
 6627|    260|    }
 6628|       |
 6629|  3.15k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6629:9): [True: 2.95k, False: 200]
  |  Branch (6629:25): [True: 536, False: 2.42k]
  |  Branch (6629:49): [True: 508, False: 28]
  ------------------
 6630|  3.15k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6630:9): [True: 424, False: 84]
  ------------------
 6631|    424|        ++begin;
 6632|       |
 6633|    424|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6634|    424|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|    424|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30, False: 394]
  |  |  ------------------
  ------------------
 6635|     30|            return;
 6636|     30|        }
 6637|       |
 6638|    394|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 352]
  |  |  ------------------
  ------------------
 6639|       |            // clang-format off
 6640|     42|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6641|       |            // clang-format on
 6642|     42|            return;
 6643|     42|        }
 6644|       |
 6645|    352|        handler.on_charset_range(cp_first, cp_second + 1);
 6646|    352|        return;
 6647|    394|    }
 6648|       |
 6649|  2.73k|    handler.on_charset_single(cp_first);
 6650|  2.73k|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6597|  3.84k|{
 6598|  3.84k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6599|       |
 6600|  3.84k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6601|  3.84k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  7.68k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.84k]
  |  |  |  Branch (859:45): [True: 0, False: 3.84k]
  |  |  |  Branch (859:45): [True: 0, False: 3.84k]
  |  |  ------------------
  ------------------
 6602|      0|        handler.on_error("Invalid encoding in format string");
 6603|      0|        return invalid_code_point;
 6604|      0|    }
 6605|       |
 6606|  3.84k|    const auto cp =
 6607|  3.84k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6608|  3.84k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  3.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 290, False: 3.55k]
  |  |  ------------------
  ------------------
 6609|    290|        handler.on_error("Invalid encoding in format string");
 6610|    290|        return invalid_code_point;
 6611|    290|    }
 6612|       |
 6613|  3.55k|    begin += len;
 6614|  3.55k|    return cp;
 6615|  3.84k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6306|    156|    {
 6307|    156|        m_specs.charset_string_data = fmt.data();
 6308|    156|        m_specs.charset_string_size = fmt.size();
 6309|    156|        on_type(presentation_type::string_set);
 6310|    156|    }
impl.cpp:_ZN3scn2v36detail24parse_presentation_regexIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_RSE_SE_OT0_:
 6709|    296|{
 6710|    296|#if !SCN_DISABLE_REGEX
 6711|    296|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    296|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    296|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6712|    296|    SCN_EXPECT(*begin == CharT{'/'});
  ------------------
  |  |  924|    296|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    296|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6713|       |
 6714|    296|    if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    592|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (6714:19): [Folded - Ignored]
  |  Branch (6714:19): [Folded - Ignored]
  ------------------
 6715|    296|                  std::is_same_v<CharT, wchar_t>) {
  ------------------
  |  Branch (6715:19): [Folded - Ignored]
  ------------------
 6716|    296|        handler.on_error("Regex backend doesn't support wide strings as input");
 6717|    296|        return begin;
 6718|    296|    }
 6719|       |
 6720|    296|    auto start = begin;
 6721|    296|    ++begin;
 6722|       |
 6723|    296|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36, False: 260]
  |  |  ------------------
  ------------------
 6724|     36|        handler.on_error("Unexpected end of regex in format string");
 6725|     36|        return begin;
 6726|     36|    }
 6727|       |
 6728|    260|    handler.on_type(presentation_type::regex);
 6729|  1.82k|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6729:12): [True: 1.75k, False: 76]
  ------------------
 6730|  1.75k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6730:13): [True: 184, False: 1.56k]
  ------------------
 6731|    184|            if (*(begin - 1) != CharT{'\\'}) {
  ------------------
  |  Branch (6731:17): [True: 184, False: 0]
  ------------------
 6732|    184|                break;
 6733|    184|            }
 6734|      0|            else {
 6735|      0|                handler.on_type(presentation_type::regex_escaped);
 6736|      0|            }
 6737|    184|        }
 6738|  1.75k|    }
 6739|    260|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    260|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76, False: 184]
  |  |  ------------------
  ------------------
 6740|     76|        handler.on_error("Unexpected end of regex in format string");
 6741|     76|        return begin;
 6742|     76|    }
 6743|       |
 6744|    184|    auto regex_end = begin;
 6745|    184|    auto regex_pattern = make_string_view_from_pointers(start + 1, regex_end);
 6746|    184|    if (SCN_UNLIKELY(regex_pattern.empty())) {
  ------------------
  |  |  859|    184|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28, False: 156]
  |  |  ------------------
  ------------------
 6747|     28|        handler.on_error("Invalid (empty) regex in format string");
 6748|     28|        return begin;
 6749|     28|    }
 6750|    156|    handler.on_regex_pattern(regex_pattern);
 6751|    156|    ++begin;
 6752|       |
 6753|    156|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    156|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32, False: 124]
  |  |  ------------------
  ------------------
 6754|     32|        handler.on_error("Unexpected end of regex in format string");
 6755|     32|        return begin;
 6756|     32|    }
 6757|       |
 6758|    124|    regex_flags flags{regex_flags::none};
 6759|    124|    constexpr std::array<std::pair<char, regex_flags>, 4> flag_map{
 6760|    124|        {{'m', regex_flags::multiline},
 6761|    124|         {'s', regex_flags::singleline},
 6762|    124|         {'i', regex_flags::nocase},
 6763|    124|         {'n', regex_flags::nocapture}}};
 6764|    124|    for (; begin != end; ++begin) {
  ------------------
  |  Branch (6764:12): [True: 124, False: 0]
  ------------------
 6765|    124|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6765:13): [True: 54, False: 70]
  ------------------
 6766|     54|            break;
 6767|     54|        }
 6768|     70|        bool found_flag = false;
 6769|    280|        for (auto flag : flag_map) {
  ------------------
  |  Branch (6769:24): [True: 280, False: 70]
  ------------------
 6770|    280|            if (static_cast<CharT>(flag.first) != *begin) {
  ------------------
  |  Branch (6770:17): [True: 280, False: 0]
  ------------------
 6771|    280|                continue;
 6772|    280|            }
 6773|      0|            if ((flags & flag.second) != regex_flags::none) {
  ------------------
  |  Branch (6773:17): [True: 0, False: 0]
  ------------------
 6774|      0|                handler.on_error("Flag set multiple times in regex");
 6775|      0|                return begin;
 6776|      0|            }
 6777|      0|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 6778|      0|            if (*begin == CharT{'s'}) {
  ------------------
  |  Branch (6778:17): [True: 0, False: 0]
  ------------------
 6779|       |                // clang-format off
 6780|      0|                handler.on_error("/s flag for regex isn't supported by regex backend");
 6781|       |                // clang-format on
 6782|      0|            }
 6783|       |#if !SCN_HAS_STD_REGEX_MULTILINE
 6784|       |            if (*begin == CharT{'m'}) {
 6785|       |                // clang-format off
 6786|       |                handler.on_error("/m flag for regex isn't supported by regex backend");
 6787|       |                // clang-format on
 6788|       |            }
 6789|       |#endif
 6790|      0|#endif
 6791|      0|            flags |= flag.second;
 6792|      0|            found_flag = true;
 6793|      0|            break;
 6794|      0|        }
 6795|     70|        if (!found_flag) {
  ------------------
  |  Branch (6795:13): [True: 70, False: 0]
  ------------------
 6796|     70|            handler.on_error("Invalid flag in regex");
 6797|     70|            return begin;
 6798|     70|        }
 6799|     70|    }
 6800|     54|    handler.on_regex_flags(flags);
 6801|       |
 6802|     54|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|     54|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54]
  |  |  ------------------
  ------------------
 6803|      0|        handler.on_error("Unexpected end of regex in format string");
 6804|      0|        return begin;
 6805|      0|    }
 6806|       |
 6807|     54|    return begin;
 6808|       |#else
 6809|       |    handler.on_error("Regular expression support is disabled");
 6810|       |    return {};
 6811|       |#endif
 6812|     54|}
_ZN3scn2v36detail12specs_setter16on_regex_patternIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6314|    156|    {
 6315|    156|        m_specs.charset_string_data = pattern.data();
 6316|    156|        m_specs.charset_string_size = pattern.size();
 6317|    156|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6415|  2.14k|{
 6416|  2.14k|    switch (type) {
 6417|    108|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 108, False: 2.03k]
  ------------------
 6418|    144|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 36, False: 2.10k]
  ------------------
 6419|    144|            return presentation_type::int_binary;
 6420|     76|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 76, False: 2.06k]
  ------------------
 6421|     76|            return presentation_type::int_decimal;
 6422|     54|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 54, False: 2.08k]
  ------------------
 6423|     54|            return presentation_type::int_generic;
 6424|    134|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 134, False: 2.00k]
  ------------------
 6425|    134|            return presentation_type::int_unsigned_decimal;
 6426|     46|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 46, False: 2.09k]
  ------------------
 6427|     46|            return presentation_type::int_octal;
 6428|     34|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 34, False: 2.10k]
  ------------------
 6429|     56|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 22, False: 2.11k]
  ------------------
 6430|     56|            return presentation_type::int_hex;
 6431|     36|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 36, False: 2.10k]
  ------------------
 6432|     80|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 44, False: 2.09k]
  ------------------
 6433|     80|            return presentation_type::int_arbitrary_base;
 6434|    128|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 128, False: 2.01k]
  ------------------
 6435|    182|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 54, False: 2.08k]
  ------------------
 6436|    182|            return presentation_type::float_hex;
 6437|     82|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 82, False: 2.05k]
  ------------------
 6438|    112|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 30, False: 2.11k]
  ------------------
 6439|    112|            return presentation_type::float_scientific;
 6440|     46|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 46, False: 2.09k]
  ------------------
 6441|    160|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 114, False: 2.02k]
  ------------------
 6442|    160|            return presentation_type::float_fixed;
 6443|     36|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 36, False: 2.10k]
  ------------------
 6444|     66|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 30, False: 2.11k]
  ------------------
 6445|     66|            return presentation_type::float_general;
 6446|    364|        case 's':
  ------------------
  |  Branch (6446:9): [True: 364, False: 1.77k]
  ------------------
 6447|    364|            return presentation_type::string;
 6448|     60|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 60, False: 2.08k]
  ------------------
 6449|     60|            return presentation_type::character;
 6450|     66|        case '?':
  ------------------
  |  Branch (6450:9): [True: 66, False: 2.07k]
  ------------------
 6451|     66|            return presentation_type::escaped_character;
 6452|     60|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 60, False: 2.08k]
  ------------------
 6453|     60|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 2.14k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 2.14k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|    480|        default:
  ------------------
  |  Branch (6460:9): [True: 480, False: 1.66k]
  ------------------
 6461|    480|            return presentation_type::none;
 6462|  2.14k|    }
 6463|  2.14k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6492|  6.93k|{
 6493|  6.93k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  6.93k|    auto check_align = [](wchar_t ch) {
 6496|  6.93k|        switch (ch) {
 6497|  6.93k|            case L'<':
 6498|  6.93k|                return align_type::left;
 6499|  6.93k|            case L'>':
 6500|  6.93k|                return align_type::right;
 6501|  6.93k|            case L'^':
 6502|  6.93k|                return align_type::center;
 6503|  6.93k|            default:
 6504|  6.93k|                return align_type::none;
 6505|  6.93k|        }
 6506|  6.93k|    };
 6507|       |
 6508|  6.93k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  6.93k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.93k]
  |  |  |  Branch (859:45): [True: 0, False: 6.93k]
  |  |  |  Branch (859:45): [True: 0, False: 6.93k]
  |  |  ------------------
  ------------------
 6510|  6.93k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  6.93k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  6.93k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  6.93k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  6.93k|    const auto begin_before_fill = begin;
 6520|  6.93k|    begin += potential_fill_len;
 6521|       |
 6522|  6.93k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 838, False: 6.10k]
  ------------------
 6523|    838|        return begin_before_fill;
 6524|    838|    }
 6525|       |
 6526|  6.10k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  6.10k|    const auto begin_after_fill = begin;
 6528|  6.10k|    ++begin;
 6529|       |
 6530|  6.10k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 6.10k, False: 0]
  ------------------
 6531|  6.10k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  6.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74, False: 6.02k]
  |  |  ------------------
  ------------------
 6532|     74|            handler.on_error("Invalid fill character '{' in format string");
 6533|     74|            return begin;
 6534|     74|        }
 6535|  6.02k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 906, False: 5.12k]
  ------------------
 6536|    906|            return begin_before_fill;
 6537|    906|        }
 6538|  6.02k|    }
 6539|       |
 6540|  5.12k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 4.89k, False: 222]
  ------------------
 6541|  4.89k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 430, False: 4.46k]
  ------------------
 6542|    430|            handler.on_align(potential_align_on_fill);
 6543|    430|            return begin_after_fill;
 6544|    430|        }
 6545|  4.46k|        return begin_before_fill;
 6546|  4.89k|    }
 6547|       |
 6548|    222|    handler.on_fill(potential_fill);
 6549|    222|    handler.on_align(potential_align_after_fill);
 6550|    222|    return begin;
 6551|  5.12k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6474|  6.93k|{
 6475|  6.93k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  6.93k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  6.93k|        return 1;
 6478|  6.93k|    }
 6479|  6.93k|    else {
 6480|  6.93k|        const auto lengths =
 6481|  6.93k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  6.93k|            "\3\4";
 6483|  6.93k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  6.93k|        return len;
 6485|  6.93k|    }
 6486|  6.93k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|  13.0k|    auto check_align = [](wchar_t ch) {
 6496|  13.0k|        switch (ch) {
 6497|    224|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 224, False: 12.8k]
  ------------------
 6498|    224|                return align_type::left;
 6499|    162|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 162, False: 12.8k]
  ------------------
 6500|    162|                return align_type::right;
 6501|    630|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 630, False: 12.4k]
  ------------------
 6502|    630|                return align_type::center;
 6503|  12.0k|            default:
  ------------------
  |  Branch (6503:13): [True: 12.0k, False: 1.01k]
  ------------------
 6504|  12.0k|                return align_type::none;
 6505|  13.0k|        }
 6506|  13.0k|    };
_ZN3scn2v36detail12specs_setter7on_fillIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6228|    222|    {
 6229|    222|        m_specs.fill = fill;
 6230|    222|    }
_ZN3scn2v36detail9fill_typeaSIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6109|    222|    {
 6110|    222|        SCN_EXPECT(!s.empty());
  ------------------
  |  |  924|    222|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    222|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6111|    222|        SCN_EXPECT(s.size() * sizeof(CharT) <= max_size);
  ------------------
  |  |  924|    222|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    222|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6112|    222|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (6112:23): [Folded - Ignored]
  ------------------
 6113|    222|            for (size_t i = 0; i < s.size(); ++i) {
 6114|    222|                SCN_GCC_PUSH
 6115|    222|                SCN_GCC_IGNORE("-Wstringop-overflow")  // false positive
 6116|    222|                m_data[i] = s[i];
 6117|    222|                SCN_GCC_POP
 6118|    222|            }
 6119|    222|            m_size = static_cast<unsigned char>(s.size());
 6120|    222|        }
 6121|    222|        else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (6121:28): [Folded - Ignored]
  ------------------
 6122|    222|            m_data[0] = static_cast<char>(static_cast<unsigned>(s.front()));
 6123|    222|            m_data[1] =
 6124|    222|                static_cast<char>(static_cast<unsigned>(s.front()) >> 8);
 6125|    222|            if (s.size() == 1) {
 6126|    222|                return;
 6127|    222|            }
 6128|    222|            m_data[2] = static_cast<char>(static_cast<unsigned>(s[1]));
 6129|    222|            m_data[3] = static_cast<char>(static_cast<unsigned>(s[1]) >> 8);
 6130|    222|        }
 6131|    222|        else {
 6132|    222|            const auto front = static_cast<unsigned>(s.front());
 6133|    222|            m_data[0] = static_cast<char>(front);
 6134|    222|            m_data[1] = static_cast<char>(front >> 8);
 6135|    222|            m_data[2] = static_cast<char>(front >> 16);
 6136|    222|            m_data[3] = static_cast<char>(front >> 24);
 6137|    222|        }
 6138|    222|    }
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6557|  6.80k|{
 6558|  6.80k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  6.80k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 6.28k, False: 526]
  |  Branch (6560:33): [True: 3.41k, False: 2.87k]
  ------------------
 6561|  3.41k|        int width = parse_simple_int(begin, end);
 6562|  3.41k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  3.41k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.41k, False: 0]
  |  |  ------------------
  ------------------
 6563|  3.41k|            handler.on_width(width);
 6564|  3.41k|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|  3.41k|    }
 6570|  6.80k|    return begin;
 6571|  6.80k|}
impl.cpp:_ZN3scn2v36detail15parse_precisionIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6577|    170|{
 6578|    170|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    170|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    170|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6579|       |
 6580|    170|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6580:9): [True: 124, False: 46]
  |  Branch (6580:33): [True: 78, False: 46]
  ------------------
 6581|     78|        int prec = parse_simple_int(begin, end);
 6582|     78|        if (SCN_LIKELY(prec != -1)) {
  ------------------
  |  |  858|     78|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 78, False: 0]
  |  |  ------------------
  ------------------
 6583|     78|            handler.on_precision(prec);
 6584|     78|        }
 6585|      0|        else {
 6586|      0|            handler.on_error("Invalid field precision");
 6587|      0|            return begin;
 6588|      0|        }
 6589|     78|    }
 6590|    170|    return begin;
 6591|    170|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7087|    214|    {
 7088|    214|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|    214|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 202, False: 12]
  ------------------
 7090|    214|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 190, False: 12]
  ------------------
 7091|    214|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 178, False: 12]
  ------------------
 7092|    214|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 166, False: 12]
  ------------------
 7093|    166|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|    166|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|    166|        }
 7098|       |
 7099|     48|        Handler::on_localized();
 7100|     48|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  4.10k|{
 8378|  4.10k|#define SCN_VISIT(Type)                                         \
 8379|  4.10k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  4.10k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  4.10k|    }                                                           \
 8382|  4.10k|    else {                                                      \
 8383|  4.10k|        return vis(monostate_val);                              \
 8384|  4.10k|    }
 8385|       |
 8386|  4.10k|    monostate monostate_val{};
 8387|       |
 8388|  4.10k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 4.10k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 4.10k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|    462|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 462, False: 3.64k]
  ------------------
 8394|    462|            SCN_VISIT(int);
  ------------------
  |  | 8379|    462|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    462|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    462|    }                                                           \
  |  | 8382|    462|    else {                                                      \
  |  | 8383|    462|        return vis(monostate_val);                              \
  |  | 8384|    462|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 4.10k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 4.10k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 4.10k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 4.10k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|    462|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 462, False: 3.64k]
  ------------------
 8404|    462|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|    462|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    462|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    462|    }                                                           \
  |  | 8382|    462|    else {                                                      \
  |  | 8383|    462|        return vis(monostate_val);                              \
  |  | 8384|    462|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 4.10k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 4.10k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|    452|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 452, False: 3.65k]
  ------------------
 8410|    452|            SCN_VISIT(void*);
  ------------------
  |  | 8379|    452|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    452|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    452|    }                                                           \
  |  | 8382|    452|    else {                                                      \
  |  | 8383|    452|        return vis(monostate_val);                              \
  |  | 8384|    452|    }
  ------------------
 8411|    462|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 462, False: 3.64k]
  ------------------
 8412|    462|            SCN_VISIT(bool);
  ------------------
  |  | 8379|    462|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    462|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    462|    }                                                           \
  |  | 8382|    462|    else {                                                      \
  |  | 8383|    462|        return vis(monostate_val);                              \
  |  | 8384|    462|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 4.10k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|    452|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 452, False: 3.65k]
  ------------------
 8416|    452|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|    452|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    452|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    452|    }                                                           \
  |  | 8382|    452|    else {                                                      \
  |  | 8383|    452|        return vis(monostate_val);                              \
  |  | 8384|    452|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 4.10k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 0, False: 4.10k]
  ------------------
 8420|      0|            SCN_VISIT(float);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8421|    462|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 462, False: 3.64k]
  ------------------
 8422|    462|            SCN_VISIT(double);
  ------------------
  |  | 8379|    462|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    462|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    462|    }                                                           \
  |  | 8382|    462|    else {                                                      \
  |  | 8383|    462|        return vis(monostate_val);                              \
  |  | 8384|    462|    }
  ------------------
 8423|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 0, False: 4.10k]
  ------------------
 8424|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 4.10k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|    452|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 452, False: 3.65k]
  ------------------
 8428|    452|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|    452|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    452|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    452|    }                                                           \
  |  | 8382|    452|    else {                                                      \
  |  | 8383|    452|        return vis(monostate_val);                              \
  |  | 8384|    452|    }
  ------------------
 8429|    452|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 452, False: 3.65k]
  ------------------
 8430|    452|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|    452|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    452|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    452|    }                                                           \
  |  | 8382|    452|    else {                                                      \
  |  | 8383|    452|        return vis(monostate_val);                              \
  |  | 8384|    452|    }
  ------------------
 8431|    452|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 452, False: 3.65k]
  ------------------
 8432|    452|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|    452|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    452|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    452|    }                                                           \
  |  | 8382|    452|    else {                                                      \
  |  | 8383|    452|        return vis(monostate_val);                              \
  |  | 8384|    452|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 4.10k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 4.10k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 4.10k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 4.10k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 4.10k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  4.10k|            SCN_CLANG_POP
 8456|  4.10k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}

_ZN3scn2v34scanIJwERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.03k|{
   89|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.03k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.03k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESE_NS0_6detail22borrowed_tail_subrangeISA_Xsr6rangesE14borrowed_rangeISA_EEE4typeEE4typeEEEOSA_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  72.2k|{
   44|  72.2k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  72.2k|}
_ZN3scn2v34scanIJwENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.03k|{
  127|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.03k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.03k|}
_ZN3scn2v35vscanIRNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS2_6localeELPv0EEENS0_13scan_expectedINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEERKT0_OSC_S6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  72.2k|{
   60|  72.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  72.2k|}
_ZN3scn2v34scanIJiERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.03k|{
   89|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.03k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.03k|}
_ZN3scn2v34scanIJiENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.03k|{
  127|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.03k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.03k|}
_ZN3scn2v34scanIJjERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.03k|{
   89|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.03k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.03k|}
_ZN3scn2v34scanIJjENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.03k|{
  127|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.03k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.03k|}
_ZN3scn2v34scanIJdERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.03k|{
   89|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.03k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.03k|}
_ZN3scn2v34scanIJdENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.03k|{
  127|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.03k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.03k|}
_ZN3scn2v34scanIJbERNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.03k|{
   89|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.03k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.03k|}
_ZN3scn2v34scanIJbENSt3__16localeERNS2_17basic_string_viewIwNS2_11char_traitsIwEEEELPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.03k|{
  127|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.03k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.03k|}
_ZN3scn2v34scanIJPvERNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.03k|{
   89|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.03k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.03k|}
_ZN3scn2v34scanIJPvENSt3__16localeERNS3_17basic_string_viewIwNS3_11char_traitsIwEEEELS2_0ELS2_0EEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.03k|{
  127|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.03k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.03k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEERNS2_17basic_string_viewIwNS4_IwEEEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
   88|  8.03k|{
   89|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.03k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.03k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeERNS2_17basic_string_viewIwNS4_IwEEEELPv0ELSE_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
  126|  8.03k|{
  127|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.03k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.03k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEERNS2_17basic_string_viewIwS5_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESK_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSL_13type_identityISG_E4typeEJDpNSX_ISR_E4typeEEEE:
   88|  8.03k|{
   89|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.03k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.03k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeERNS2_17basic_string_viewIwS5_EELPv0ELSD_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSM_13type_identityISH_E4typeEJDpNS11_ISS_E4typeEEEE:
  126|  8.03k|{
  127|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.03k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.03k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEERS6_LPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEEOSC_NS0_24basic_scan_format_stringIwNSH_13type_identityISC_E4typeEJDpNST_ISN_E4typeEEEE:
   88|  8.03k|{
   89|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  8.03k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  8.03k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeERS6_LPv0ELS9_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEERKT0_OSD_NS0_24basic_scan_format_stringIwNSI_13type_identityISD_E4typeEJDpNSX_ISO_E4typeEEEE:
  126|  8.03k|{
  127|  8.03k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  8.03k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  8.03k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  8.03k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  8.03k|    static_cast<    \
  |  |  929|  8.03k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  8.03k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   108k|{
  653|   108k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   108k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|    106|{
  659|    106|    static_assert(std::is_same_v<Locale, std::locale>);
  660|    106|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 53, False: 53]
  ------------------
  661|    106|                    : std::locale{};
  662|    106|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    920|{
 1221|    920|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    920|                                  m_nan_payload_buffer, value);
 1223|    920|    value = this->setsign(value);
 1224|    920|    return n;
 1225|    920|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    984|{
 1221|    984|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    984|                                  m_nan_payload_buffer, value);
 1223|    984|    value = this->setsign(value);
 1224|    984|    return n;
 1225|    984|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|     20|{
 1461|     20|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|     20|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|     20|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|     20|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|     20|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     20|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|     20|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 20, False: 0]
  ------------------
 1467|     20|        SCN_UNLIKELY_ATTR
 1468|     20|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|     20|                                     "Invalid integer value");
 1470|     20|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    922|{
 1461|    922|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    922|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    922|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    922|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    922|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 922, False: 0]
  ------------------
 1467|    922|        SCN_UNLIKELY_ATTR
 1468|    922|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    922|                                     "Invalid integer value");
 1470|    922|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  1.00k|{
 1461|  1.00k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  1.00k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  1.00k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  1.00k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  1.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  1.00k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 1.00k, False: 0]
  ------------------
 1467|  1.00k|        SCN_UNLIKELY_ATTR
 1468|  1.00k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  1.00k|                                     "Invalid integer value");
 1470|  1.00k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    922|{
 1461|    922|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    922|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    922|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    922|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    922|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    922|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    922|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 922, False: 0]
  ------------------
 1467|    922|        SCN_UNLIKELY_ATTR
 1468|    922|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    922|                                     "Invalid integer value");
 1470|    922|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    986|{
 1461|    986|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    986|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    986|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    986|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    986|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    986|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    986|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    986|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    986|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    986|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    986|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    986|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    986|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 986, False: 0]
  ------------------
 1467|    986|        SCN_UNLIKELY_ATTR
 1468|    986|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    986|                                     "Invalid integer value");
 1470|    986|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    906|{
 1461|    906|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    906|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    906|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    906|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    906|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    906|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    906|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 906, False: 0]
  ------------------
 1467|    906|        SCN_UNLIKELY_ATTR
 1468|    906|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    906|                                     "Invalid integer value");
 1470|    906|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 0, False: 0]
  ------------------
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v34impl19parse_integer_valueIwmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|    966|{
 1461|    966|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|    966|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    966|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|    966|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|    966|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    966|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|    966|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|    966|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    966|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|    966|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|    966|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    966|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|    966|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 966, False: 0]
  ------------------
 1467|    966|        SCN_UNLIKELY_ATTR
 1468|    966|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|    966|                                     "Invalid integer value");
 1470|    966|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|      0|    auto start = source.data();
 1474|      0|    const auto end = source.data() + source.size();
 1475|      0|    {
 1476|      0|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 0, False: 0]
  ------------------
 1477|      0|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 0, False: 0]
  ------------------
 1478|      0|                break;
 1479|      0|            }
 1480|      0|        }
 1481|      0|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1482|      0|            value = 0;
 1483|      0|            return ranges::next(source.begin(),
 1484|      0|                                ranges::distance(source.data(), start));
 1485|      0|        }
 1486|      0|    }
 1487|       |
 1488|      0|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (1488:19): [Folded - Ignored]
  ------------------
 1489|      0|        if (base == 10) {
 1490|      0|            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|      0|                             detail::make_string_view_from_pointers(start, end),
 1492|      0|                             value, sign == sign_type::minus_sign));
 1493|      0|            return ranges::next(source.begin(),
 1494|      0|                                ranges::distance(source.data(), ptr));
 1495|      0|        }
 1496|      0|    }
 1497|       |
 1498|      0|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|      0|                     detail::make_string_view_from_pointers(start, end), value,
 1500|      0|                     base, sign == sign_type::minus_sign));
 1501|      0|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|      0|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  36.1k|{
 2176|  36.1k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  36.1k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|  72.2k|{
 2200|  72.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|  72.2k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  3.81k|{
  194|  3.81k|    return find_classic_impl(
  195|  3.81k|        source, [](char ch) { return is_ascii_space(ch); },
  196|  3.81k|        [](char32_t cp) { return is_cp_space(cp); });
  197|  3.81k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  81.8k|{
  202|  81.8k|    return find_classic_impl(
  203|  81.8k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  81.8k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  81.8k|}
_ZN3scn2v36detail12handle_errorENS0_10scan_errorE:
  672|    310|{
  673|    310|    return e;
  674|    310|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  36.1k|{
 2133|  36.1k|    return vscan_internal(source, format, args);
 2134|  36.1k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|  72.2k|{
 2153|  72.2k|    return vscan_internal(source, format, args);
 2154|  72.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  3.81k|{
  118|  3.81k|    auto it = source.begin();
  119|       |
  120|  17.9k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 14.9k, False: 3.04k]
  ------------------
  121|  14.9k|        auto sv =
  122|  14.9k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  14.9k|                .substr(0, 8);
  124|       |
  125|  14.9k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 5.95k, False: 9.00k]
  ------------------
  126|  5.95k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  5.95k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  5.95k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 450, False: 5.50k]
  ------------------
  129|    450|                break;
  130|    450|            }
  131|  5.50k|            continue;
  132|  5.95k|        }
  133|       |
  134|  37.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 29.0k, False: 8.68k]
  ------------------
  135|  29.0k|            auto tmp =
  136|  29.0k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  29.0k|            auto res = get_next_code_point(tmp);
  138|  29.0k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 318, False: 28.7k]
  ------------------
  139|    318|                return it;
  140|    318|            }
  141|  28.7k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  28.7k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  28.7k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  28.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  28.7k|        }
  145|  9.00k|    }
  146|       |
  147|  3.49k|    return detail::make_string_view_iterator(source, it);
  148|  3.81k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  95.5k|{
  105|  95.5k|    static_assert(sizeof(*source.data()) == 1);
  106|  95.5k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  95.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  95.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  95.5k|    uint64_t word{};
  108|  95.5k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  95.5k|    return has_byte_greater(word, 127) != 0;
  111|  95.5k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  40.7k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  29.0k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  81.8k|{
  118|  81.8k|    auto it = source.begin();
  119|       |
  120|  83.8k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 80.6k, False: 3.25k]
  ------------------
  121|  80.6k|        auto sv =
  122|  80.6k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  80.6k|                .substr(0, 8);
  124|       |
  125|  80.6k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 65.4k, False: 15.1k]
  ------------------
  126|  65.4k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  65.4k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  65.4k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 64.7k, False: 754]
  ------------------
  129|  64.7k|                break;
  130|  64.7k|            }
  131|    754|            continue;
  132|  65.4k|        }
  133|       |
  134|  19.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 17.8k, False: 1.25k]
  ------------------
  135|  17.8k|            auto tmp =
  136|  17.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  17.8k|            auto res = get_next_code_point(tmp);
  138|  17.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 13.9k, False: 3.97k]
  ------------------
  139|  13.9k|                return it;
  140|  13.9k|            }
  141|  3.97k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  3.97k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  3.97k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  3.97k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  3.97k|        }
  145|  15.1k|    }
  146|       |
  147|  67.9k|    return detail::make_string_view_iterator(source, it);
  148|  81.8k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  70.7k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  17.8k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    920|{
 1138|    920|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 920]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    920|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 920]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    920|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 920]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    920|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 920]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    920|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    920|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    920|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    920|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 12, False: 908]
  ------------------
 1185|     12|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 1186|     12|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     12|                                         "Invalid floating-point digit");
 1188|     12|        }
 1189|     12|    }
 1190|    908|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 908, False: 0]
  |  |  ------------------
  ------------------
 1191|    908|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    908|                                     "Invalid floating-point digit");
 1193|    908|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    984|{
 1138|    984|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 984]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    984|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 984]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    984|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 984]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    984|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 984]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    984|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    984|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    984|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    984|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 10, False: 974]
  ------------------
 1185|     10|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 1186|     10|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     10|                                         "Invalid floating-point digit");
 1188|     10|        }
 1189|     10|    }
 1190|    974|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    974|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 974, False: 0]
  |  |  ------------------
  ------------------
 1191|    974|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    974|                                     "Invalid floating-point digit");
 1193|    974|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  72.2k|{
 1625|  72.2k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 71.9k, False: 360]
  ------------------
 1626|  71.9k|        return false;
 1627|  71.9k|    }
 1628|    360|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 234]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|  72.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  72.2k|    {
 1903|  72.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   216k|    {
 1722|   216k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 216k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   216k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  72.2k|    {
 1853|  72.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  72.2k|{
 2030|  72.2k|    const auto beg = handler.get_ctx().begin();
 2031|  72.2k|    detail::parse_format_string<false>(format, handler);
 2032|  72.2k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  72.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.7k, False: 2.50k]
  |  |  ------------------
  ------------------
 2033|  69.7k|        return unexpected(handler.error);
 2034|  69.7k|    }
 2035|  2.50k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  72.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|   778k|    {
 2014|   778k|        return ctx.get();
 2015|   778k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   778k|    {
 1857|   778k|        return contiguous_ctx;
 1858|   778k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  87.9k|    {
 1907|   216k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 134k, False: 82.6k]
  ------------------
 1908|   134k|            auto it = get_ctx().begin();
 1909|   134k|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 1.06k, False: 132k]
  ------------------
 1910|  1.06k|                SCN_UNLIKELY_ATTR
 1911|  1.06k|                return on_error("Unexpected end of source");
 1912|  1.06k|            }
 1913|       |
 1914|   132k|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   132k|                    detail::make_string_view_from_pointers(begin, end));
 1916|   132k|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 2.49k, False: 130k]
  ------------------
 1917|  2.49k|                return on_error("Invalid encoding in format string");
 1918|  2.49k|            }
 1919|   130k|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 71.7k, False: 58.7k]
  ------------------
 1920|  71.7k|                get_ctx().advance_to(
 1921|  71.7k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|  71.7k|                begin = detail::to_address(std::prev(after_space_it));
 1923|  71.7k|                continue;
 1924|  71.7k|            }
 1925|       |
 1926|  58.7k|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 1.80k, False: 56.9k]
  ------------------
 1927|  1.80k|                SCN_UNLIKELY_ATTR
 1928|  1.80k|                return on_error("Unexpected literal character in source");
 1929|  1.80k|            }
 1930|  56.9k|            get_ctx().advance_to(ranges::next(it));
 1931|  56.9k|        }
 1932|  87.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE20on_replacement_fieldEmPKc:
 1963|  6.22k|    {
 1964|  6.22k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  6.22k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  6.22k|        on_visit_scan_arg(
 1968|  6.22k|            impl::default_arg_reader<context_type>{
 1969|  6.22k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  6.22k|            arg);
 1971|  6.22k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  58.7k|{
 1681|  58.7k|    auto arg = ctx.arg(id);
 1682|  58.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.57k, False: 57.2k]
  |  |  ------------------
  ------------------
 1683|  1.57k|        handler.on_error("Failed to find argument with ID");
 1684|  1.57k|    }
 1685|  58.7k|    return arg;
 1686|  58.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  71.5k|    {
 1797|  71.5k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  71.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.95k, False: 68.5k]
  |  |  ------------------
  ------------------
 1798|  2.95k|            on_error("Invalid out-of-range argument ID");
 1799|  2.95k|            return;
 1800|  2.95k|        }
 1801|       |
 1802|  68.5k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  68.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 170, False: 68.4k]
  |  |  ------------------
  ------------------
 1803|    170|            return on_error("Argument with this ID has already been scanned");
 1804|    170|        }
 1805|       |
 1806|  68.4k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  68.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 68.4k, False: 0]
  |  |  ------------------
  ------------------
 1807|  68.4k|            visited_args_lower64 |= (1ull << id);
 1808|  68.4k|            return;
 1809|  68.4k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  68.5k|    {
 1782|  68.5k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  68.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 68.5k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  68.5k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  68.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 68.5k, False: 0]
  |  |  ------------------
  ------------------
 1788|  68.5k|            return (visited_args_lower64 >> id) & 1ull;
 1789|  68.5k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  68.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  6.22k|    {
 1948|  6.22k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 216, False: 6.01k]
  |  Branch (1948:23): [True: 0, False: 6.01k]
  ------------------
 1949|    216|            SCN_UNLIKELY_ATTR
 1950|    216|            return;
 1951|    216|        }
 1952|       |
 1953|  6.01k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  6.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  6.01k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  6.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.15k, False: 1.86k]
  |  |  ------------------
  ------------------
 1955|  4.15k|            on_error(r.error());
 1956|  4.15k|        }
 1957|  1.86k|        else {
 1958|  1.86k|            get_ctx().advance_to(*r);
 1959|  1.86k|        }
 1960|  6.01k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  54.3k|    {
 1766|  54.3k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54.3k, False: 0]
  |  |  ------------------
  ------------------
 1767|  54.3k|            error = err;
 1768|  54.3k|        }
 1769|  54.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  55.7k|    {
 1936|  55.7k|        return parse_ctx.next_arg_id();
 1937|  55.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEm:
 1939|  3.07k|    {
 1940|  3.07k|        parse_ctx.check_arg_id(id);
 1941|  3.07k|        return id;
 1942|  3.07k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  52.5k|    {
 1977|  52.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  52.5k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  52.5k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 52.5k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  52.5k|        auto specs = detail::format_specs{};
 1990|  52.5k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  52.5k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  52.5k|            arg.type()};
 1993|       |
 1994|  52.5k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  52.5k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 2.49k, False: 50.0k]
  |  Branch (1995:29): [True: 858, False: 49.2k]
  ------------------
 1996|  3.35k|            SCN_UNLIKELY_ATTR
 1997|  3.35k|            on_error("Missing '}' in format string");
 1998|  3.35k|            return parse_ctx.begin();
 1999|  3.35k|        }
 2000|  49.2k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 196, False: 49.0k]
  |  |  ------------------
  ------------------
 2001|    196|            return parse_ctx.begin();
 2002|    196|        }
 2003|  49.0k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  49.0k|        on_visit_scan_arg(
 2006|  49.0k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  49.0k|                                           get_ctx().locale()},
 2008|  49.0k|            arg);
 2009|  49.0k|        return parse_ctx.begin();
 2010|  49.2k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  52.5k|    {
 1701|  52.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  49.0k|    {
 1948|  49.0k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 134, False: 48.8k]
  |  Branch (1948:23): [True: 0, False: 48.8k]
  ------------------
 1949|    134|            SCN_UNLIKELY_ATTR
 1950|    134|            return;
 1951|    134|        }
 1952|       |
 1953|  48.8k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  48.8k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  48.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.3k, False: 5.57k]
  |  |  ------------------
  ------------------
 1955|  43.3k|            on_error(r.error());
 1956|  43.3k|        }
 1957|  5.57k|        else {
 1958|  5.57k|            get_ctx().advance_to(*r);
 1959|  5.57k|        }
 1960|  48.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   405k|    {
 1761|   405k|        SCN_UNLIKELY_ATTR
 1762|   405k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   405k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   216k|    {
 1729|   216k|        {
 1730|   216k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 216k]
  ------------------
 1731|   216k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 216k]
  ------------------
 1732|   216k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   216k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   216k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 148k, False: 68.4k]
  ------------------
 1736|   148k|                return on_error("Argument list not exhausted");
 1737|   148k|            }
 1738|   216k|        }
 1739|       |
 1740|  68.4k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 68.4k, False: 0]
  ------------------
 1741|  68.4k|            return;
 1742|  68.4k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   216k|    {
 1777|   216k|        return error;
 1778|   216k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   443k|    {
 1773|   443k|        return static_cast<bool>(error);
 1774|   443k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  72.2k|{
 2045|  72.2k|    const auto argcount = args.size();
 2046|  72.2k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 72.2k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|  72.2k|    auto handler = format_handler<true, CharT>{
 2052|  72.2k|        ranges::subrange<const CharT*>{source.data(),
 2053|  72.2k|                                       source.data() + source.size()},
 2054|  72.2k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  72.2k|    static_cast<    \
  |  |  929|  72.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  72.2k|    static_cast<    \
  |  |  929|  72.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  72.2k|    return vscan_parse_format_string(format, handler);
 2056|  72.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   144k|{
 2045|   144k|    const auto argcount = args.size();
 2046|   144k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 18, False: 144k]
  |  Branch (2046:60): [True: 18, False: 0]
  ------------------
 2047|     18|        auto arg = args.get(0);
 2048|     18|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|     18|    }
 2050|       |
 2051|   144k|    auto handler = format_handler<true, CharT>{
 2052|   144k|        ranges::subrange<const CharT*>{source.data(),
 2053|   144k|                                       source.data() + source.size()},
 2054|   144k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   144k|    static_cast<    \
  |  |  929|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   144k|    static_cast<    \
  |  |  929|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|   144k|    return vscan_parse_format_string(format, handler);
 2056|   144k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   144k|{
 1625|   144k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 134k, False: 10.4k]
  ------------------
 1626|   134k|        return false;
 1627|   134k|    }
 1628|  10.4k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 126, False: 10.3k]
  |  Branch (1628:39): [True: 18, False: 108]
  ------------------
 1629|   144k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|     18|{
 1638|     18|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|     18|    auto reader =
 1644|     18|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|     18|            ranges::subrange<const CharT*>{source.data(),
 1646|     18|                                           source.data() + source.size()},
 1647|     18|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|     18|    static_cast<    \
  |  |  929|     18|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|     18|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|     18|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     18|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     18|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     18|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      8|    return ranges::distance(source.data(), it);
 1650|     18|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|   144k|    {
 1903|   144k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   144k|    {
 1853|   144k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|   144k|{
 2030|   144k|    const auto beg = handler.get_ctx().begin();
 2031|   144k|    detail::parse_format_string<false>(format, handler);
 2032|   144k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 144k, False: 258]
  |  |  ------------------
  ------------------
 2033|   144k|        return unexpected(handler.error);
 2034|   144k|    }
 2035|    258|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|   144k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|   888M|    {
 2014|   888M|        return ctx.get();
 2015|   888M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   888M|    {
 1857|   888M|        return contiguous_ctx;
 1858|   888M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   147k|    {
 1907|   296M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 296M, False: 85.6k]
  ------------------
 1908|   296M|            auto it = get_ctx().begin();
 1909|   296M|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 750, False: 296M]
  ------------------
 1910|    750|                SCN_UNLIKELY_ATTR
 1911|    750|                return on_error("Unexpected end of source");
 1912|    750|            }
 1913|       |
 1914|   296M|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|   296M|                    detail::make_string_view_from_pointers(begin, end));
 1916|   296M|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 60.3k, False: 296M]
  ------------------
 1917|  60.3k|                return on_error("Invalid encoding in format string");
 1918|  60.3k|            }
 1919|   296M|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 2.02k, False: 296M]
  ------------------
 1920|  2.02k|                get_ctx().advance_to(
 1921|  2.02k|                    impl::read_while_classic_space(get_ctx().range()));
 1922|  2.02k|                begin = detail::to_address(std::prev(after_space_it));
 1923|  2.02k|                continue;
 1924|  2.02k|            }
 1925|       |
 1926|   296M|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 538, False: 296M]
  ------------------
 1927|    538|                SCN_UNLIKELY_ATTR
 1928|    538|                return on_error("Unexpected literal character in source");
 1929|    538|            }
 1930|   296M|            get_ctx().advance_to(ranges::next(it));
 1931|   296M|        }
 1932|   147k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE20on_replacement_fieldEmPKw:
 1963|  5.47k|    {
 1964|  5.47k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1965|  5.47k|        set_arg_as_visited(arg_id);
 1966|       |
 1967|  5.47k|        on_visit_scan_arg(
 1968|  5.47k|            impl::default_arg_reader<context_type>{
 1969|  5.47k|                get_ctx().range(), get_ctx().args(), get_ctx().locale()},
 1970|  5.47k|            arg);
 1971|  5.47k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  12.7k|{
 1681|  12.7k|    auto arg = ctx.arg(id);
 1682|  12.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.37k, False: 11.3k]
  |  |  ------------------
  ------------------
 1683|  1.37k|        handler.on_error("Failed to find argument with ID");
 1684|  1.37k|    }
 1685|  12.7k|    return arg;
 1686|  12.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl18default_arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  5.47k|    {
 1948|  5.47k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 160, False: 5.31k]
  |  Branch (1948:23): [True: 0, False: 5.31k]
  ------------------
 1949|    160|            SCN_UNLIKELY_ATTR
 1950|    160|            return;
 1951|    160|        }
 1952|       |
 1953|  5.31k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  5.31k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  5.31k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  5.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.80k, False: 1.50k]
  |  |  ------------------
  ------------------
 1955|  3.80k|            on_error(r.error());
 1956|  3.80k|        }
 1957|  1.50k|        else {
 1958|  1.50k|            get_ctx().advance_to(*r);
 1959|  1.50k|        }
 1960|  5.31k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|  12.4k|    {
 1936|  12.4k|        return parse_ctx.next_arg_id();
 1937|  12.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEm:
 1939|    288|    {
 1940|    288|        parse_ctx.check_arg_id(id);
 1941|    288|        return id;
 1942|    288|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|  7.25k|    {
 1977|  7.25k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  7.25k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  7.25k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 7.25k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  7.25k|        auto specs = detail::format_specs{};
 1990|  7.25k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  7.25k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  7.25k|            arg.type()};
 1993|       |
 1994|  7.25k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  7.25k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 1.91k, False: 5.34k]
  |  Branch (1995:29): [True: 930, False: 4.41k]
  ------------------
 1996|  2.84k|            SCN_UNLIKELY_ATTR
 1997|  2.84k|            on_error("Missing '}' in format string");
 1998|  2.84k|            return parse_ctx.begin();
 1999|  2.84k|        }
 2000|  4.41k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  4.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98, False: 4.31k]
  |  |  ------------------
  ------------------
 2001|     98|            return parse_ctx.begin();
 2002|     98|        }
 2003|  4.31k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  4.31k|        on_visit_scan_arg(
 2006|  4.31k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  4.31k|                                           get_ctx().locale()},
 2008|  4.31k|            arg);
 2009|  4.31k|        return parse_ctx.begin();
 2010|  4.41k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  7.25k|    {
 1701|  7.25k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  4.31k|    {
 1948|  4.31k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 204, False: 4.10k]
  |  Branch (1948:23): [True: 0, False: 4.10k]
  ------------------
 1949|    204|            SCN_UNLIKELY_ATTR
 1950|    204|            return;
 1951|    204|        }
 1952|       |
 1953|  4.10k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  4.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  4.10k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  4.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.09k, False: 1.01k]
  |  |  ------------------
  ------------------
 1955|  3.09k|            on_error(r.error());
 1956|  3.09k|        }
 1957|  1.01k|        else {
 1958|  1.01k|            get_ctx().advance_to(*r);
 1959|  1.01k|        }
 1960|  4.10k|    }

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  4.01k|{
 1363|  4.01k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  4.01k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|  4.01k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|  4.01k|            std::u32string tmp;
 1368|  4.01k|            transcode_to_string_impl_to32(src, tmp);
 1369|  4.01k|            return transcode_to_string_impl_32to16<false>(
 1370|  4.01k|                std::u32string_view{tmp}, dest);
 1371|  4.01k|        }
 1372|  4.01k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|  4.01k|            return transcode_to_string_impl_to32(src, dest);
 1374|  4.01k|        }
 1375|  4.01k|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  4.01k|{
 1256|  4.01k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  4.01k|    auto it = src.begin();
 1259|   523k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 519k, False: 4.01k]
  ------------------
 1260|   519k|        auto res = get_next_code_point(
 1261|   519k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   519k|                                                                 src.end()));
 1263|   519k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   519k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.57k, False: 512k]
  |  |  ------------------
  ------------------
 1264|  6.57k|            dest.push_back(DestCharT{0xfffd});
 1265|  6.57k|        }
 1266|   512k|        else {
 1267|   512k|            dest.push_back(res.value);
 1268|   512k|        }
 1269|   519k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   519k|    }
 1271|  4.01k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   750k|{
 1169|   750k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   750k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   750k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.17k, False: 741k]
  |  |  ------------------
  ------------------
 1173|  9.17k|        return {get_start_for_next_code_point(input),
 1174|  9.17k|                detail::invalid_code_point};
 1175|  9.17k|    }
 1176|   741k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   741k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.13k, False: 739k]
  |  |  ------------------
  ------------------
 1177|  2.13k|        return {input.end(), detail::invalid_code_point};
 1178|  2.13k|    }
 1179|       |
 1180|   739k|    return {input.begin() + len,
 1181|   739k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   741k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  9.17k|{
 1155|  9.17k|    auto it = input.begin();
 1156|  34.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 32.1k, False: 2.20k]
  ------------------
 1157|  32.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 6.97k, False: 25.2k]
  ------------------
 1158|  6.97k|            break;
 1159|  6.97k|        }
 1160|  32.1k|    }
 1161|  9.17k|    return it;
 1162|  9.17k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  44.9k|    {
  809|  44.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  44.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  44.9k|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  16.1k|    {
  823|  16.1k|        return a.m_code == b.m_code;
  824|  16.1k|    }
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  29.7k|    {
 2931|  29.7k|        SCN_UNLIKELY_ATTR
 2932|  29.7k|        m_msg = msg;
 2933|  29.7k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  52.9k|    {
 2936|  52.9k|        return m_msg == nullptr;
 2937|  52.9k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3645|    994|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl22nonascii_specs_handler17on_charset_singleEDi:
 4990|   723k|    {
 4991|   723k|        on_charset_range(cp, cp + 1);
 4992|   723k|    }
_ZN3scn2v34impl22nonascii_specs_handler16on_charset_rangeEDiDi:
 4995|   727k|    {
 4996|   727k|        if (end <= 127) {
  ------------------
  |  Branch (4996:13): [True: 419k, False: 307k]
  ------------------
 4997|   419k|            return;
 4998|   419k|        }
 4999|       |
 5000|  56.9M|        for (auto& elem : extra_ranges) {
  ------------------
  |  Branch (5000:25): [True: 56.9M, False: 307k]
  ------------------
 5001|       |            // TODO: check for overlap
 5002|  56.9M|            if (elem.first == end) {
  ------------------
  |  Branch (5002:17): [True: 114, False: 56.9M]
  ------------------
 5003|    114|                elem.first = begin;
 5004|    114|                return;
 5005|    114|            }
 5006|       |
 5007|  56.9M|            if (elem.second == begin) {
  ------------------
  |  Branch (5007:17): [True: 402, False: 56.9M]
  ------------------
 5008|    402|                elem.second = end;
 5009|    402|                return;
 5010|    402|            }
 5011|  56.9M|        }
 5012|       |
 5013|   307k|        extra_ranges.push_back(std::make_pair(begin, end));
 5014|   307k|    }
_ZNK3scn2v34impl22nonascii_specs_handler19on_charset_invertedEv:
 5017|    348|    {
 5018|       |        // no-op
 5019|    348|    }
_ZNK3scn2v34impl22nonascii_specs_handlercvbEv:
 5032|   734k|    {
 5033|   734k|        return static_cast<bool>(err);
 5034|   734k|    }
_ZN3scn2v34impl16bool_reader_baseC2Ej:
 5350|  1.17k|    constexpr bool_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|   111k|{
  458|   111k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   111k|        static_cast<unsigned char>(ch))];
  460|   111k|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   592k|{
  469|   592k|    return static_cast<unsigned char>(ch) <= 127;
  470|   592k|}
_ZN3scn2v34impl13is_ascii_charEDi:
  482|   647k|{
  483|   647k|    return cp <= 127;
  484|   647k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  95.5k|{
  539|  95.5k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  95.5k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  49.9k|{
  784|  49.9k|    return e != eof_error::good;
  785|  49.9k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|     40|{
  798|     40|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|     40|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     40|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|     40|    return scan_error{scan_error::end_of_range, "EOF"};
  800|     40|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    364|{
  845|    364|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    364|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    364|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    364|    return parse_error::eof;
  847|    364|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.57k|{
  854|  3.57k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.57k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.57k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 22, False: 3.55k]
  ------------------
  859|     22|        return scan_error{scan_error::end_of_range, "EOF"};
  860|     22|    }
  861|       |
  862|  3.55k|    return scan_error{code, msg};
  863|  3.57k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.57k|{
  868|  3.57k|    return [code, msg](parse_error err) {
  869|  3.57k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.57k|    };
  871|  3.57k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   296M|{
 1200|       |    // Pattern_White_Space property
 1201|   296M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 279k, False: 296M]
  |  Branch (1201:27): [True: 69.1k, False: 210k]
  ------------------
 1202|   296M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 4.25k, False: 296M]
  ------------------
 1203|   296M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 8.75k, False: 296M]
  ------------------
 1204|   296M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 768, False: 296M]
  ------------------
 1205|   296M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 1.46k, False: 296M]
  ------------------
 1206|   296M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 698, False: 296M]
  ------------------
 1207|   296M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 20, False: 296M]
  ------------------
 1208|   296M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.79k|{
 2220|  3.79k|    unsigned char running_diff{0};
 2221|  13.2k|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 9.48k, False: 3.79k]
  ------------------
 2222|  9.48k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  9.48k|    }
 2224|  3.79k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 0, False: 3.79k]
  |  Branch (2224:33): [True: 0, False: 3.79k]
  ------------------
 2225|  3.79k|}
_ZN3scn2v34impl32calculate_text_width_for_fmt_v10EDi:
 2302|   249k|{
 2303|   249k|    if (cp >= 0x1100 &&
  ------------------
  |  Branch (2303:9): [True: 7.12k, False: 242k]
  ------------------
 2304|   249k|        (cp <= 0x115f ||  // Hangul Jamo init. consonants
  ------------------
  |  Branch (2304:10): [True: 90, False: 7.03k]
  ------------------
 2305|  7.12k|         cp == 0x2329 ||  // LEFT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2305:10): [True: 72, False: 6.95k]
  ------------------
 2306|  7.12k|         cp == 0x232a ||  // RIGHT-POINTING ANGLE BRACKET
  ------------------
  |  Branch (2306:10): [True: 168, False: 6.79k]
  ------------------
 2307|       |         // CJK ... Yi except IDEOGRAPHIC HALF FILL SPACE:
 2308|  7.12k|         (cp >= 0x2e80 && cp <= 0xa4cf && cp != 0x303f) ||
  ------------------
  |  Branch (2308:11): [True: 4.59k, False: 2.20k]
  |  Branch (2308:27): [True: 860, False: 3.73k]
  |  Branch (2308:43): [True: 776, False: 84]
  ------------------
 2309|  7.12k|         (cp >= 0xac00 && cp <= 0xd7a3) ||    // Hangul Syllables
  ------------------
  |  Branch (2309:11): [True: 3.73k, False: 2.28k]
  |  Branch (2309:27): [True: 72, False: 3.65k]
  ------------------
 2310|  7.12k|         (cp >= 0xf900 && cp <= 0xfaff) ||    // CJK Compatibility Ideographs
  ------------------
  |  Branch (2310:11): [True: 3.65k, False: 2.28k]
  |  Branch (2310:27): [True: 88, False: 3.57k]
  ------------------
 2311|  7.12k|         (cp >= 0xfe10 && cp <= 0xfe19) ||    // Vertical Forms
  ------------------
  |  Branch (2311:11): [True: 3.57k, False: 2.28k]
  |  Branch (2311:27): [True: 72, False: 3.49k]
  ------------------
 2312|  7.12k|         (cp >= 0xfe30 && cp <= 0xfe6f) ||    // CJK Compatibility Forms
  ------------------
  |  Branch (2312:11): [True: 3.49k, False: 2.28k]
  |  Branch (2312:27): [True: 498, False: 3.00k]
  ------------------
 2313|  7.12k|         (cp >= 0xff00 && cp <= 0xff60) ||    // Fullwidth Forms
  ------------------
  |  Branch (2313:11): [True: 3.00k, False: 2.28k]
  |  Branch (2313:27): [True: 54, False: 2.94k]
  ------------------
 2314|  7.12k|         (cp >= 0xffe0 && cp <= 0xffe6) ||    // Fullwidth Forms
  ------------------
  |  Branch (2314:11): [True: 2.94k, False: 2.28k]
  |  Branch (2314:27): [True: 90, False: 2.85k]
  ------------------
 2315|  7.12k|         (cp >= 0x20000 && cp <= 0x2fffd) ||  // CJK
  ------------------
  |  Branch (2315:11): [True: 2.67k, False: 2.46k]
  |  Branch (2315:28): [True: 162, False: 2.51k]
  ------------------
 2316|  7.12k|         (cp >= 0x30000 && cp <= 0x3fffd) ||
  ------------------
  |  Branch (2316:11): [True: 2.51k, False: 2.46k]
  |  Branch (2316:28): [True: 306, False: 2.20k]
  ------------------
 2317|       |         // Miscellaneous Symbols and Pictographs + Emoticons:
 2318|  7.12k|         (cp >= 0x1f300 && cp <= 0x1f64f) ||
  ------------------
  |  Branch (2318:11): [True: 2.38k, False: 2.29k]
  |  Branch (2318:28): [True: 126, False: 2.25k]
  ------------------
 2319|       |         // Supplemental Symbols and Pictographs:
 2320|  7.12k|         (cp >= 0x1f900 && cp <= 0x1f9ff))) {
  ------------------
  |  Branch (2320:11): [True: 2.25k, False: 2.29k]
  |  Branch (2320:28): [True: 48, False: 2.20k]
  ------------------
 2321|  2.62k|        return 2;
 2322|  2.62k|    }
 2323|   246k|    return 1;
 2324|   249k|}
_ZN3scn2v34impl26calculate_valid_text_widthEDi:
 2327|   191k|{
 2328|   191k|    return calculate_text_width_for_fmt_v10(cp);
 2329|   191k|}
_ZN3scn2v34impl20calculate_text_widthEDi:
 2342|    122|{
 2343|    122|    return calculate_text_width_for_fmt_v10(cp);
 2344|    122|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  15.7k|{
 3123|  15.7k|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  15.7k|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  6.95k|{
 3127|  6.95k|#if WCHAR_MIN < 0
 3128|  6.95k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 6.95k, False: 0]
  |  Branch (3128:20): [True: 6.95k, False: 0]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  6.95k|        return char_to_int(static_cast<char>(ch));
 3133|  6.95k|    }
 3134|      0|    return 255;
 3135|  6.95k|}
_ZN3scn2v34impl16make_regex_flagsENS0_6detail11regex_flagsE:
 4271|  9.52k|{
 4272|  9.52k|    std::regex_constants::syntax_option_type result{};
 4273|  9.52k|    if ((flags & detail::regex_flags::multiline) != detail::regex_flags::none) {
  ------------------
  |  Branch (4273:9): [True: 282, False: 9.24k]
  ------------------
 4274|    282|#if SCN_HAS_STD_REGEX_MULTILINE
 4275|    282|        result |= std::regex_constants::multiline;
 4276|       |#else
 4277|       |        return unexpected_scan_error(
 4278|       |            scan_error::invalid_format_string,
 4279|       |            "/m flag for regex isn't supported by regex backend");
 4280|       |#endif
 4281|    282|    }
 4282|  9.52k|    if ((flags & detail::regex_flags::singleline) !=
  ------------------
  |  Branch (4282:9): [True: 0, False: 9.52k]
  ------------------
 4283|  9.52k|        detail::regex_flags::none) {
 4284|      0|        return unexpected_scan_error(
 4285|      0|            scan_error::invalid_format_string,
 4286|      0|            "/s flag for regex isn't supported by regex backend");
 4287|      0|    }
 4288|  9.52k|    if ((flags & detail::regex_flags::nocase) != detail::regex_flags::none) {
  ------------------
  |  Branch (4288:9): [True: 1.03k, False: 8.49k]
  ------------------
 4289|  1.03k|        result |= std::regex_constants::icase;
 4290|  1.03k|    }
 4291|  9.52k|    if ((flags & detail::regex_flags::nocapture) != detail::regex_flags::none) {
  ------------------
  |  Branch (4291:9): [True: 6, False: 9.52k]
  ------------------
 4292|      6|        result |= std::regex_constants::nosubs;
 4293|      6|    }
 4294|  9.52k|    return result;
 4295|  9.52k|}
_ZN3scn2v34impl27get_unescaped_regex_patternENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4638|    906|{
 4639|    906|    std::string result{pattern};
 4640|  7.46k|    for (size_t n = 0; (n = result.find("\\/", n)) != std::string::npos;) {
  ------------------
  |  Branch (4640:24): [True: 6.55k, False: 906]
  ------------------
 4641|  6.55k|        result.replace(n, 2, "/");
 4642|  6.55k|        ++n;
 4643|  6.55k|    }
 4644|    906|    return result;
 4645|    906|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6008|  7.47k|{
 6009|  7.47k|    if (specs.width != 0) {
  ------------------
  |  Branch (6009:9): [True: 1.93k, False: 5.53k]
  ------------------
 6010|  1.93k|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6010:13): [True: 860, False: 1.07k]
  ------------------
 6011|    860|            return {scan_error::invalid_scanned_value,
 6012|    860|                    "Scanned value too narrow, width did not exceed what "
 6013|    860|                    "was specified in the format string"};
 6014|    860|        }
 6015|  1.93k|    }
 6016|  6.61k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6016:9): [True: 1.35k, False: 5.25k]
  ------------------
 6017|  1.35k|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6017:13): [True: 24, False: 1.32k]
  ------------------
 6018|     24|            return {scan_error::invalid_scanned_value,
 6019|     24|                    "Scanned value too wide, width exceeded the specified "
 6020|     24|                    "precision"};
 6021|     24|        }
 6022|  1.35k|    }
 6023|  6.58k|    return {};
 6024|  6.61k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   127k|    {
  304|   127k|        ranges::advance(x, n);
  305|   127k|        return x;
  306|   127k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   127k|    {
  268|   127k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   127k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   184k|    {
  151|   184k|        i += n;
  152|   184k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   120k|    {
  108|   120k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   120k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   120k|    {
   87|   120k|        return s - i;
   88|   120k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  5.85k|    {
  304|  5.85k|        ranges::advance(x, n);
  305|  5.85k|        return x;
  306|  5.85k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  5.85k|    {
  268|  5.85k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.85k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  5.85k|    {
  151|  5.85k|        i += n;
  152|  5.85k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|    266|    {
  108|    266|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|    266|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|    266|    {
   87|    266|        return s - i;
   88|    266|    }
_ZN3scn2v34impl16char_reader_baseIcE11check_specsERKNS0_6detail12format_specsE:
 5624|  5.41k|    {
 5625|  5.41k|        reader_error_handler eh{};
 5626|  5.41k|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5626:23): [Folded - Ignored]
  ------------------
 5627|  5.41k|            detail::check_code_point_type_specs(specs, eh);
 5628|  5.41k|        }
 5629|  5.41k|        else {
 5630|  5.41k|            detail::check_char_type_specs(specs, eh);
 5631|  5.41k|        }
 5632|  5.41k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.83k, False: 580]
  |  |  ------------------
  ------------------
 5633|  4.83k|            return {scan_error::invalid_format_string, eh.m_msg};
 5634|  4.83k|        }
 5635|    580|        return {};
 5636|  5.41k|    }
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  20.4k|    {
  763|  20.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  20.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  20.4k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  4.12k|    {
  754|  4.12k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  6.69k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.69k|              cvref<T> obj = *get<T>(fn);
  745|  6.69k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.69k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.69k|              }
  748|  6.69k|              else {
  749|  6.69k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.69k|              }
  751|  6.69k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.69k|    {
  684|  6.69k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.69k|            return static_cast<T*>(s.m_cp);
  686|  6.69k|        }
  687|  6.69k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.69k|            return static_cast<T*>(s.m_p);
  689|  6.69k|        }
  690|  6.69k|        else {
  691|  6.69k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.69k|        }
  693|  6.69k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  4.12k|        {
  662|  4.12k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  1.42M|    {
  763|  1.42M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.42M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  15.7k|    {
  754|  15.7k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   655k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   655k|              cvref<T> obj = *get<T>(fn);
  745|   655k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   655k|                  obj(static_cast<decltype(args)>(args)...);
  747|   655k|              }
  748|   655k|              else {
  749|   655k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   655k|              }
  751|   655k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   655k|    {
  684|   655k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   655k|            return static_cast<T*>(s.m_cp);
  686|   655k|        }
  687|   655k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   655k|            return static_cast<T*>(s.m_p);
  689|   655k|        }
  690|   655k|        else {
  691|   655k|            return reinterpret_cast<T*>(s.m_fp);
  692|   655k|        }
  693|   655k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  15.7k|        {
  662|  15.7k|        }
_ZNK3scn2v34impl16char_reader_baseIcE19skip_ws_before_readEv:
 5619|  1.78k|    {
 5620|  1.78k|        return false;
 5621|  1.78k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.57k|    return [code, msg](parse_error err) {
  869|  3.57k|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.57k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|     50|    {
 1780|     50|        auto stdloc = loc.get<std::locale>();
 1781|     50|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     50|        grouping = numpunct.grouping();
 1783|     50|        thousands_sep =
 1784|     50|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 50]
  ------------------
 1785|     50|        decimal_point = numpunct.decimal_point();
 1786|     50|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|     66|{
 1717|     66|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 66, False: 0]
  ------------------
 1718|     66|        return std::use_facet<Facet>(stdloc);
 1719|     66|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     66|}
_ZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  43.7k|{
 2349|  43.7k|    size_t count{0};
 2350|  43.7k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  43.7k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  43.7k|    });
 2353|  43.7k|    return count;
 2354|  43.7k|}
_ZN3scn2v34impl19for_each_code_pointIcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  43.7k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  43.7k|    auto it = input.begin();
 1448|  94.7k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 50.9k, False: 43.7k]
  ------------------
 1449|  50.9k|        auto res = get_next_code_point(
 1450|  50.9k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  50.9k|        cb(res.value);
 1452|  50.9k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  50.9k|    }
 1454|  43.7k|}
_ZNK3scn2v34impl12function_refIFvDiES3_EclEDi:
  762|  58.2k|    {
  763|  58.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  58.2k|    }
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  43.7k|    {
  754|  43.7k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  50.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  50.9k|              cvref<T> obj = *get<T>(fn);
  745|  50.9k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  50.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  50.9k|              }
  748|  50.9k|              else {
  749|  50.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  50.9k|              }
  751|  50.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  50.9k|    {
  684|  50.9k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  50.9k|            return static_cast<T*>(s.m_cp);
  686|  50.9k|        }
  687|  50.9k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  50.9k|            return static_cast<T*>(s.m_p);
  689|  50.9k|        }
  690|  50.9k|        else {
  691|  50.9k|            return reinterpret_cast<T*>(s.m_fp);
  692|  50.9k|        }
  693|  50.9k|    }
_ZZN3scn2v34impl20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  50.9k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  50.9k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  50.9k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIcEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  43.7k|        {
  662|  43.7k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  3.99k|    {
 1582|  3.99k|        return m_view;
 1583|  3.99k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  4.33k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EC2ES5_S5_l:
 2381|  21.6k|    {
 2382|  21.6k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E14multibyte_leftEv:
 2420|    690|    {
 2421|    690|        return m_multibyte_left;
 2422|    690|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EdeEv:
 2425|   586k|    {
 2426|   586k|        return *m_current;
 2427|   586k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EppEv:
 2434|   468k|    {
 2435|   468k|        SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   468k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   468k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2436|   468k|        _increment_current();
 2437|   468k|        return *this;
 2438|   468k|    }
_ZN3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E18_increment_currentEv:
 2667|   468k|    {
 2668|   468k|        if (m_multibyte_left == 0) {
  ------------------
  |  Branch (2668:13): [True: 233k, False: 234k]
  ------------------
 2669|   233k|            auto cplen = _get_cp_length_at_current();
 2670|   233k|            m_multibyte_left = cplen - 1;
 2671|   233k|            m_count -= _get_width_at_current_cp_start(cplen);
 2672|   233k|        }
 2673|   234k|        else {
 2674|   234k|            --m_multibyte_left;
 2675|   234k|        }
 2676|       |
 2677|   468k|        ++m_current;
 2678|   468k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E25_get_cp_length_at_currentEv:
 2638|   233k|    {
 2639|   233k|        return static_cast<difference_type>(
 2640|   233k|            detail::code_point_length_by_starting_code_unit(*m_current));
 2641|   233k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E30_get_width_at_current_cp_startEl:
 2644|   233k|    {
 2645|   233k|        if (SCN_UNLIKELY(cplen == 0)) {
  ------------------
  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.14k, False: 232k]
  |  |  ------------------
  ------------------
 2646|  1.14k|            return 0;
 2647|  1.14k|        }
 2648|       |
 2649|   232k|        if (cplen == 1) {
  ------------------
  |  Branch (2649:13): [True: 191k, False: 41.5k]
  ------------------
 2650|   191k|            SCN_EXPECT(m_current != m_end);
  ------------------
  |  |  924|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2651|   191k|            auto cp = static_cast<char32_t>(*m_current);
 2652|   191k|            return static_cast<difference_type>(calculate_valid_text_width(cp));
 2653|   191k|        }
 2654|       |
 2655|  41.5k|        auto r = read_exactly_n_code_units(ranges::subrange{m_current, m_end},
 2656|  41.5k|                                           cplen);
 2657|  41.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 86, False: 41.4k]
  |  |  ------------------
  ------------------
 2658|     86|            return 0;
 2659|     86|        }
 2660|       |
 2661|  41.4k|        auto cp_str = std::basic_string<value_type>{m_current, *r};
 2662|  41.4k|        return static_cast<difference_type>(
 2663|  41.4k|            calculate_text_width(std::basic_string_view<value_type>{cp_str}));
 2664|  41.5k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  43.8k|{
 1857|  43.8k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  43.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  43.8k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  43.8k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  43.8k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 196, False: 43.6k]
  ------------------
 1862|    196|            return unexpected(eof_error::eof);
 1863|    196|        }
 1864|       |
 1865|  43.6k|        return ranges::next(range.begin(), count);
 1866|  43.8k|    }
 1867|  43.8k|    else {
 1868|  43.8k|        auto it = range.begin();
 1869|  43.8k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  43.8k|            return ranges::next(it, count);
 1871|  43.8k|        }
 1872|       |
 1873|  43.8k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  43.8k|            if (it == range.end()) {
 1875|  43.8k|                return unexpected(eof_error::eof);
 1876|  43.8k|            }
 1877|  43.8k|        }
 1878|       |
 1879|  43.8k|        return it;
 1880|  43.8k|    }
 1881|  43.8k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeE:
  267|  3.64k|    {
  268|  3.64k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.64k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent22random_access_iteratorISE_EEvE4typeERSE_NS1_20incrementable_traitsISE_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  160|  3.64k|    {
  161|  3.64k|        constexpr auto zero = iter_difference_t<I>{0};
  162|       |
  163|  3.64k|        if (n > zero) {
  ------------------
  |  Branch (163:13): [True: 0, False: 3.64k]
  ------------------
  164|      0|            while (n-- > zero) {
  ------------------
  |  Branch (164:20): [True: 0, False: 0]
  ------------------
  165|      0|                ++i;
  166|      0|            }
  167|      0|        }
  168|  3.64k|        else {
  169|  3.64k|            while (n++ < zero) {
  ------------------
  |  Branch (169:20): [True: 0, False: 3.64k]
  ------------------
  170|      0|                --i;
  171|      0|            }
  172|  3.64k|        }
  173|  3.64k|    }
_ZN3scn2v34impl27counted_width_iterator_implneIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2530|   248k|    {
 2531|   248k|        return !(a == b);
 2532|   248k|    }
_ZN3scn2v34impl27counted_width_iterator_impleqIPKcS5_EEDTeqclscPFRKS5_vELDnEEclscPFRKT_vELDnEEERKNS2_22counted_width_iteratorIS5_S5_EERKNSG_ISA_T0_EE:
 2522|   250k|    {
 2523|   250k|        return a.m_current == b.m_current;
 2524|   250k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EEcE8is_validEv:
 1889|   180k|    {
 1890|   180k|        return !codepoint.empty();
 1891|   180k|    }
_ZNK3scn2v34impl14_take_width_fnclINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEDTtlNS1_15take_width_viewEfp_fp0_EERKT_l:
 2831|  7.81k|    {
 2832|  7.81k|        return take_width_view{r, n};
 2833|  7.81k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2ERKS9_l:
 2800|  7.81k|    {
 2801|  7.81k|    }
_ZN3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvEC2ERKS9_:
 2713|  7.81k|    take_width_view_storage(const View& v) : view(v) {}
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERcNSN_10locale_refE:
 5663|    328|    {
 5664|    328|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5664:13): [True: 302, False: 26]
  ------------------
 5665|    328|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5665:13): [True: 0, False: 26]
  ------------------
 5666|    302|            return read_default(range, value, loc);
 5667|    302|        }
 5668|       |
 5669|     26|        reader_impl_for_int<CharT> reader{};
 5670|     26|        signed char tmp_value{};
 5671|     26|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5672|     26|        value = static_cast<signed char>(value);
 5673|     26|        return ret;
 5674|    328|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RcNS0_6detail10locale_refE:
 5645|    302|    {
 5646|    302|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    302|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5647|    302|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5647:23): [Folded - Ignored]
  ------------------
 5648|    302|            return code_unit_reader<char>{}.read(range, value);
 5649|    302|        }
 5650|    302|        else {
 5651|    302|            SCN_UNUSED(range);
 5652|    302|            SCN_EXPECT(false);
 5653|    302|            SCN_UNREACHABLE;
 5654|    302|        }
 5655|    302|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSH_Rc:
 5564|    302|    {
 5565|    302|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3643|    302|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    302|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    302|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    302|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    302|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5566|    302|        ch = *range.begin();
 5567|    302|        return it;
 5568|    302|    }
_ZN3scn2v34impl14read_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 1845|  2.25k|{
 1846|  2.25k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.25k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  2.25k|    return ranges::next(range.begin());
 1851|  2.25k|}
_ZN3scn2v34impl9eof_checkINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_9eof_errorET_:
  949|  2.25k|{
  950|  2.25k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.25k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  2.25k|    return eof_error::good;
  954|  2.25k|}
_ZN3scn2v34impl12is_range_eofINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  943|  2.25k|{
  944|  2.25k|    return is_range_eof(r.begin(), r.end());
  945|  2.25k|}
_ZN3scn2v34impl12is_range_eofINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS6_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS6_S6_EEE8sentinelILb1EEEEEbT_T0_:
  927|   185k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   185k|    {
  937|   185k|        return begin == end;
  938|   185k|    }
  939|   185k|}
_ZN3scn2v34impleqERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2769|   459k|        {
 2770|   459k|            return (y.count() == 0 && y.multibyte_left() == 0) ||
  ------------------
  |  Branch (2770:21): [True: 690, False: 458k]
  |  Branch (2770:39): [True: 484, False: 206]
  ------------------
 2771|   459k|                   y.base() == x.m_end;
  ------------------
  |  Branch (2771:20): [True: 1.01k, False: 457k]
  ------------------
 2772|   459k|        }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE3endEv:
 2815|   260k|    {
 2816|   260k|        return sentinel<true>{m_base.get().end()};
 2817|   260k|    }
_ZNK3scn2v34impl23take_width_view_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEvE3getEv:
 2716|   303k|    {
 2717|   303k|        return view;
 2718|   303k|    }
_ZN3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE8sentinelILb1EEC2ES8_:
 2750|   260k|        constexpr explicit sentinel(underlying s) : m_end(SCN_MOVE(s)) {}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
  295|  2.28k|    {
  296|  2.28k|        ++x;
  297|  2.28k|        return x;
  298|  2.28k|    }
_ZNK3scn2v34impl15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 2809|  21.6k|    {
 2810|  21.6k|        return counted_width_iterator{m_base.get().begin(), m_base.get().end(),
 2811|  21.6k|                                      m_count};
 2812|  21.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEaEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3539|     26|    {
 3540|     26|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     26|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|     26|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|     26|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 26]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|     26|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 26]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|     26|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     26|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 3566|     26|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|     26|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     26|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     26|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     26|    }                                                  \
  |  |  |  | 3642|     26|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|      0|                    parse_integer_digits_without_thsep(
 3568|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|      0|                        prefix_result.parsed_base));
 3570|       |
 3571|      0|            auto buf = make_contiguous_buffer(
 3572|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|      0|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESG_i:
 3325|    982|{
 3326|    982|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3643|    982|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    982|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    982|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    982|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 982]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    982|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    982|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|    982|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|    982|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|    982|        parse_integer_base_prefix(
 3331|    982|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|    982|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 982]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it =
 3337|      0|                ranges::prev_backtrack(digits_begin_it, range.begin());
 3338|      0|        }
 3339|      0|        else {
 3340|      0|            parsed_zero = false;
 3341|      0|        }
 3342|      0|    }
 3343|    982|    else {
 3344|    982|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3344:13): [True: 0, False: 982]
  |  Branch (3344:13): [True: 982, False: 0]
  ------------------
 3345|    982|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3345:13): [True: 982, False: 0]
  ------------------
 3346|    982|            digits_begin_it = base_prefix_begin_it;
 3347|    982|        }
 3348|    982|    }
 3349|       |
 3350|    982|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3350:9): [True: 982, False: 0]
  ------------------
 3351|    982|        sign = sign_type::plus_sign;
 3352|    982|    }
 3353|    982|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3354|    982|        digits_begin_it, parsed_base, sign, parsed_zero};
 3355|    982|}
_ZN3scn2v34impl18parse_numeric_signINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESG_:
 3140|  1.29k|{
 3141|  1.29k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.29k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.29k, False: 0]
  ------------------
 3143|  1.29k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.29k, False: 0]
  ------------------
 3144|  1.29k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.29k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  1.29k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2271|  1.29k|{
 2272|  1.29k|    auto it = read_code_unit(range);
 2273|  1.29k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.29k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  2.59k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.59k, False: 1.29k]
  ------------------
 2278|  2.59k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 2.59k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  2.59k|    }
 2282|       |
 2283|  1.29k|    return unexpected(parse_error::error);
 2284|  1.29k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_i:
 3292|    982|{
 3293|    982|    switch (base) {
 3294|      6|        case 2:
  ------------------
  |  Branch (3294:9): [True: 6, False: 976]
  ------------------
 3295|       |            // allow 0b/0B
 3296|      6|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|      6|                    false};
 3298|       |
 3299|      6|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 6, False: 976]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|      6|            bool zero_parsed = false;
 3302|      6|            auto it = apply_opt(
 3303|      6|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|      6|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    310|        case 16:
  ------------------
  |  Branch (3307:9): [True: 310, False: 672]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    310|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    310|                    false};
 3311|       |
 3312|     20|        case 0:
  ------------------
  |  Branch (3312:9): [True: 20, False: 962]
  ------------------
 3313|       |            // detect base
 3314|     20|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|    640|        default:
  ------------------
  |  Branch (3316:9): [True: 640, False: 342]
  ------------------
 3317|       |            // no base prefix allowed
 3318|    640|            return {range.begin(), base, false};
 3319|    982|    }
 3320|    982|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEENS1_14parse_expectedESB_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEEE4typeEOSN_SP_:
 2290|    322|{
 2291|    322|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 322, False: 0]
  ------------------
 2292|    322|        return range.begin();
 2293|    322|    }
 2294|      0|    return *result;
 2295|    322|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3243|     26|{
 3244|     26|    return read_matching_string_classic_nocase(range, "0b");
 3245|     26|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEE:
 2230|  1.32k|{
 2231|  1.32k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  1.32k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  1.32k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  1.32k|        if (range.size() < str.size()) {
 2236|  1.32k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  1.32k|        }
 2238|  1.32k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  1.32k|            return unexpected(parse_error::error);
 2240|  1.32k|        }
 2241|  1.32k|        return ranges::next(range.begin(), str.size());
 2242|  1.32k|    }
 2243|  1.32k|    else {
 2244|  1.32k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.32k|            if (ch < 'A' || ch > 'Z') {
 2246|  1.32k|                return ch;
 2247|  1.32k|            }
 2248|  1.32k|            return static_cast<char_type>(ch +
 2249|  1.32k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.32k|        };
 2251|       |
 2252|  1.32k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  1.32k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.32k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.32k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 1.25k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     72|    }                                                  \
  |  |  |  | 3642|  1.32k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.25k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.25k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.25k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.25k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.25k, False: 0]
  |  |  ------------------
  ------------------
 2257|  1.25k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.25k|                    return ascii_tolower(a) ==
 2259|  1.25k|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.25k|                }))) {
 2261|  1.25k|            return unexpected(parse_error::error);
 2262|  1.25k|        }
 2263|       |
 2264|      0|        return it;
 2265|  1.25k|    }
 2266|  1.32k|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_l:
 1856|  1.49k|{
 1857|  1.49k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.49k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  1.49k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.49k|        if (sz < count) {
 1862|  1.49k|            return unexpected(eof_error::eof);
 1863|  1.49k|        }
 1864|       |
 1865|  1.49k|        return ranges::next(range.begin(), count);
 1866|  1.49k|    }
 1867|  1.49k|    else {
 1868|  1.49k|        auto it = range.begin();
 1869|  1.49k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 1.49k]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  5.07k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 3.69k, False: 1.38k]
  ------------------
 1874|  3.69k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 108, False: 3.58k]
  ------------------
 1875|    108|                return unexpected(eof_error::eof);
 1876|    108|            }
 1877|  3.69k|        }
 1878|       |
 1879|  1.38k|        return it;
 1880|  1.49k|    }
 1881|  1.49k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEmT_:
 1094|  1.49k|{
 1095|  1.49k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  1.49k|        return r.size();
 1097|  1.49k|    }
 1098|  1.49k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  1.49k|                           ranges::const_iterator_t<Range>,
 1100|  1.49k|                           typename detail::basic_scan_buffer<
 1101|  1.49k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  1.49k|        if constexpr (ranges::common_range<Range>) {
 1103|  1.49k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  1.49k|        }
 1105|  1.49k|        else {
 1106|  1.49k|            if (r.begin().stores_parent()) {
 1107|  1.49k|                return static_cast<size_t>(
 1108|  1.49k|                    r.begin().parent()->chars_available() -
 1109|  1.49k|                    r.begin().position());
 1110|  1.49k|            }
 1111|  1.49k|            return r.begin().contiguous_segment().size();
 1112|  1.49k|        }
 1113|  1.49k|    }
 1114|  1.49k|    else {
 1115|  1.49k|        return 0;
 1116|  1.49k|    }
 1117|  1.49k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  1.25k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.25k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 18, False: 1.23k]
  |  Branch (2245:29): [True: 1.23k, False: 0]
  ------------------
 2246|  1.25k|                return ch;
 2247|  1.25k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.25k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_Rb:
 3257|     26|{
 3258|     26|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 26]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     26|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 26]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     26|    return unexpected(parse_error::error);
 3268|     26|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NDTcl4implISL_EEE4typeE:
 2145|     26|{
 2146|     26|    auto it = read_code_unit(range);
 2147|     26|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|     26|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26, False: 0]
  |  |  ------------------
  ------------------
 2152|     26|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|     26|        return unexpected(parse_error::error);
 2154|     26|    }
 2155|       |
 2156|      0|    return *it;
 2157|     26|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 1845|     26|{
 1846|     26|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     26|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 26]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|     26|    return ranges::next(range.begin());
 1851|     26|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_9eof_errorET_:
  949|  2.39k|{
  950|  2.39k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 2.35k]
  |  |  ------------------
  ------------------
  951|     40|        return eof_error::eof;
  952|     40|    }
  953|  2.35k|    return eof_error::good;
  954|  2.39k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEbT_:
  943|   182k|{
  944|   182k|    return is_range_eof(r.begin(), r.end());
  945|   182k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_:
 3250|    330|{
 3251|    330|    return read_matching_string_classic_nocase(range, "0x");
 3252|    330|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSI_9add_constIT_E4typeEEEEEibEEESL_:
 3273|     20|{
 3274|     20|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 20]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     20|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 20]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     20|    {
 3281|     20|        bool zero_parsed{false};
 3282|     20|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 20]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     20|    }
 3286|     20|    return {range.begin(), 10, false};
 3287|     20|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_i:
 3360|    970|{
 3361|    970|    using char_type = detail::char_t<Range>;
 3362|       |
 3363|    970|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3363:19): [Folded - Ignored]
  ------------------
 3364|    970|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3365|    970|            return unexpected_scan_error(
 3366|    970|                scan_error::invalid_scanned_value,
 3367|    970|                "Failed to parse integer: No digits found");
 3368|    970|        }
 3369|    970|        return range.end();
 3370|    970|    }
 3371|    970|    else {
 3372|    970|        return read_while1_code_unit(range,
 3373|    970|                                     [&](char_type ch) noexcept {
 3374|    970|                                         return char_to_int(ch) < base;
 3375|    970|                                     })
 3376|    970|            .transform_error(map_parse_error_to_scan_error(
 3377|    970|                scan_error::invalid_scanned_value,
 3378|    970|                "Failed to parse integer: No digits found"));
 3379|    970|    }
 3380|    970|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS1_12function_refIFbNDTcl4implISL_EEE4typeEENS1_12fnref_detail11qual_fn_sigISU_E8functionEEE:
 1995|  1.28k|{
 1996|  1.28k|    auto it = read_while_code_unit(range, pred);
 1997|  1.28k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.28k, False: 0]
  ------------------
 1998|  1.28k|        return unexpected(parse_error::error);
 1999|  1.28k|    }
 2000|      0|    return it;
 2001|  1.28k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1975|  1.28k|{
 1976|  1.28k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.28k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbNDTcl4implISK_EEE4typeEENS1_12fnref_detail11qual_fn_sigISS_E8functionEEE:
 1956|  1.28k|{
 1957|  1.28k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.28k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.28k|    }
 1960|  1.28k|    else {
 1961|  1.28k|        auto first = range.begin();
 1962|  1.28k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.28k, False: 0]
  ------------------
 1963|  1.28k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.28k, False: 0]
  ------------------
 1964|  1.28k|                return first;
 1965|  1.28k|            }
 1966|  1.28k|        }
 1967|      0|        return first;
 1968|  1.28k|    }
 1969|  1.28k|}
_ZN3scn2v34implneERKNS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS5_EERKNS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS5_S5_EEE8sentinelILb1EEE:
 2780|   266k|        {
 2781|   266k|            return !(y == x);
 2782|   266k|        }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_:
  753|    970|    {
  754|    970|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_SV_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|    970|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    970|              cvref<T> obj = *get<T>(fn);
  745|    970|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    970|                  obj(static_cast<decltype(args)>(args)...);
  747|    970|              }
  748|    970|              else {
  749|    970|                  return obj(static_cast<decltype(args)>(args)...);
  750|    970|              }
  751|    970|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSD_EENS1_15take_width_viewINS9_ISD_SD_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_iEUlcE_EEDaNS3_7storageE:
  683|    970|    {
  684|    970|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    970|            return static_cast<T*>(s.m_cp);
  686|    970|        }
  687|    970|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    970|            return static_cast<T*>(s.m_p);
  689|    970|        }
  690|    970|        else {
  691|    970|            return reinterpret_cast<T*>(s.m_fp);
  692|    970|        }
  693|    970|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_iENKUlcE_clEc:
 3373|    970|                                     [&](char_type ch) noexcept {
 3374|    970|                                         return char_to_int(ch) < base;
 3375|    970|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSE_EENS1_15take_width_viewINSA_ISE_SE_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_iEUlcE_LPv0EEEPSP_:
  661|    970|        {
  662|    970|        }
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EESB_EEEEDaOT_:
 1682|  1.80k|{
 1683|  1.80k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  1.80k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  1.80k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  1.80k|        return string_view_wrapper{SCN_FWD(range)};
 1687|  1.80k|    }
 1688|  1.80k|    else {
 1689|  1.80k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.80k|    }
 1691|  1.80k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EELPv0EEEOT_:
 1536|  1.80k|    {
 1537|  1.80k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.80k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EESD_EEEEvOT_:
 1620|  1.80k|    {
 1621|  1.80k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.80k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.80k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.80k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.80k|            m_storage.reset();
 1627|  1.80k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.80k|        }
 1629|  1.80k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  1.80k|                                          std::basic_string<CharT>>) {
 1631|  1.80k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.80k|            m_view = string_view_type{*m_storage};
 1633|  1.80k|        }
 1634|  1.80k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  1.80k|                                          typename detail::basic_scan_buffer<
 1636|  1.80k|                                              value_t>::forward_iterator> &&
 1637|  1.80k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  1.80k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.80k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.80k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.80k|                             detail::to_address(end_seg.end()))) {
 1642|  1.80k|                auto& str = m_storage.emplace();
 1643|  1.80k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.80k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.80k|                m_view = string_view_type{str};
 1646|  1.80k|                return;
 1647|  1.80k|            }
 1648|       |
 1649|  1.80k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.80k|                                                            end_seg.data());
 1651|  1.80k|            m_storage.reset();
 1652|  1.80k|        }
 1653|  1.80k|        else {
 1654|  1.80k|            auto& str = m_storage.emplace();
 1655|  1.80k|            if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1655:27): [Folded - Ignored]
  ------------------
 1656|  1.80k|                str.reserve(range.size());
 1657|  1.80k|            }
 1658|  1.80k|            if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1658:27): [Folded - Ignored]
  ------------------
 1659|  1.80k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.80k|                          std::back_inserter(str));
 1661|  1.80k|            }
 1662|  1.80k|            else {
 1663|  1.80k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.80k|                     ++it) {
 1665|  1.80k|                    str.push_back(*it);
 1666|  1.80k|                }
 1667|  1.80k|            }
 1668|  1.80k|            m_view = string_view_type{str};
 1669|  1.80k|        }
 1670|  1.80k|    }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSJ_9add_constIT_E4typeEEEEENSJ_12basic_stringIT0_NSJ_11char_traitsISS_EENSJ_9allocatorISS_EEEENSR_IcNST_IcEENSV_IcEEEEEEEEESM_iRKNS1_35localized_number_formatting_optionsISS_EE:
 3390|     12|{
 3391|     12|    std::basic_string<CharT> output;
 3392|     12|    std::string thsep_indices;
 3393|     12|    auto it = range.begin();
 3394|     12|    bool digit_matched = false;
 3395|     12|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3395:12): [True: 12, False: 0]
  ------------------
 3396|     12|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3396:13): [True: 0, False: 12]
  ------------------
 3397|      0|            thsep_indices.push_back(
 3398|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3399|      0|        }
 3400|     12|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3400:18): [True: 12, False: 0]
  ------------------
 3401|     12|            break;
 3402|     12|        }
 3403|      0|        else {
 3404|      0|            output.push_back(*it);
 3405|      0|            digit_matched = true;
 3406|      0|        }
 3407|     12|    }
 3408|     12|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     12|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 0]
  |  |  ------------------
  ------------------
 3409|     12|        return unexpected_scan_error(
 3410|     12|            scan_error::invalid_scanned_value,
 3411|     12|            "Failed to parse integer: No digits found");
 3412|     12|    }
 3413|      0|    return std::tuple{it, output, thsep_indices};
 3414|     12|}
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E4baseEv:
 2412|   464k|    {
 2413|   464k|        return m_current;
 2414|   464k|    }
_ZNK3scn2v34impl27counted_width_iterator_impl22counted_width_iteratorIPKcS5_E5countEv:
 2416|   464k|    {
 2417|   464k|        return m_count;
 2418|   464k|    }
_ZN3scn2v34impl20reader_impl_for_charIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERcNSL_10locale_refE:
 5663|    252|    {
 5664|    252|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5664:13): [True: 232, False: 20]
  ------------------
 5665|    252|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5665:13): [True: 0, False: 20]
  ------------------
 5666|    232|            return read_default(range, value, loc);
 5667|    232|        }
 5668|       |
 5669|     20|        reader_impl_for_int<CharT> reader{};
 5670|     20|        signed char tmp_value{};
 5671|     20|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5672|     20|        value = static_cast<signed char>(value);
 5673|     20|        return ret;
 5674|    252|    }
_ZN3scn2v34impl20reader_impl_for_charIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RcNS0_6detail10locale_refE:
 5645|    902|    {
 5646|    902|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    902|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5647|    902|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5647:23): [Folded - Ignored]
  ------------------
 5648|    902|            return code_unit_reader<char>{}.read(range, value);
 5649|    902|        }
 5650|    902|        else {
 5651|    902|            SCN_UNUSED(range);
 5652|    902|            SCN_EXPECT(false);
 5653|    902|            SCN_UNREACHABLE;
 5654|    902|        }
 5655|    902|    }
_ZN3scn2v34impl16code_unit_readerIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rc:
 5564|    902|    {
 5565|    902|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3643|    902|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    902|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    902|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    902|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 902]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    902|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    902|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5566|    902|        ch = *range.begin();
 5567|    902|        return it;
 5568|    902|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.54k|{
 1846|  6.54k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.54k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.54k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.54k|    return ranges::next(range.begin());
 1851|  6.54k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  22.5k|{
  950|  22.5k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  22.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.5k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  22.5k|    return eof_error::good;
  954|  22.5k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   558k|{
  944|   558k|    return is_range_eof(r.begin(), r.end());
  945|   558k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   692k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   692k|    {
  937|   692k|        return begin == end;
  938|   692k|    }
  939|   692k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  63.4k|    {
  296|  63.4k|        ++x;
  297|  63.4k|        return x;
  298|  63.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|     20|    {
 3540|     20|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|     20|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|     20|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 20]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|     20|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 20]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|     20|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|     20|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3566|     20|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 20]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     20|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|     20|                    parse_integer_digits_without_thsep(
 3568|     20|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|     20|                        prefix_result.parsed_base));
 3570|       |
 3571|     20|            auto buf = make_contiguous_buffer(
 3572|     20|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|     20|            SCN_TRY(result_it,
  ------------------
  |  | 3643|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     20|    }                                                  \
  |  |  |  | 3642|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|     20|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.79k|{
 3326|  2.79k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3643|  2.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.79k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.79k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.79k|        parse_integer_base_prefix(
 3331|  2.79k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.79k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.79k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it =
 3337|      0|                ranges::prev_backtrack(digits_begin_it, range.begin());
 3338|      0|        }
 3339|      0|        else {
 3340|      0|            parsed_zero = false;
 3341|      0|        }
 3342|      0|    }
 3343|  2.79k|    else {
 3344|  2.79k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3344:13): [True: 0, False: 2.79k]
  ------------------
 3345|  2.79k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3345:13): [True: 2.79k, False: 0]
  ------------------
 3346|  2.79k|            digits_begin_it = base_prefix_begin_it;
 3347|  2.79k|        }
 3348|  2.79k|    }
 3349|       |
 3350|  2.79k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3350:9): [True: 2.79k, False: 0]
  ------------------
 3351|  2.79k|        sign = sign_type::plus_sign;
 3352|  2.79k|    }
 3353|  2.79k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3354|  2.79k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3355|  2.79k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.74k|{
 3141|  3.74k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.74k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.74k, False: 0]
  ------------------
 3143|  3.74k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.74k, False: 0]
  ------------------
 3144|  3.74k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.74k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.74k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.74k|{
 2272|  3.74k|    auto it = read_code_unit(range);
 2273|  3.74k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.74k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.74k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.48k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.48k, False: 3.74k]
  ------------------
 2278|  7.48k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.48k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.48k|    }
 2282|       |
 2283|  3.74k|    return unexpected(parse_error::error);
 2284|  3.74k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.79k|{
 3293|  2.79k|    switch (base) {
 3294|     12|        case 2:
  ------------------
  |  Branch (3294:9): [True: 12, False: 2.77k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     12|                    false};
 3298|       |
 3299|     22|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 22, False: 2.76k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|     22|            bool zero_parsed = false;
 3302|     22|            auto it = apply_opt(
 3303|     22|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|     22|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    912|        case 16:
  ------------------
  |  Branch (3307:9): [True: 912, False: 1.87k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    912|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    912|                    false};
 3311|       |
 3312|     12|        case 0:
  ------------------
  |  Branch (3312:9): [True: 12, False: 2.77k]
  ------------------
 3313|       |            // detect base
 3314|     12|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.83k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.83k, False: 958]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.83k|            return {range.begin(), base, false};
 3319|  2.79k|    }
 3320|  2.79k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    946|{
 2291|    946|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 946, False: 0]
  ------------------
 2292|    946|        return range.begin();
 2293|    946|    }
 2294|      0|    return *result;
 2295|    946|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     24|{
 3244|     24|    return read_matching_string_classic_nocase(range, "0b");
 3245|     24|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.80k|{
 2231|  3.80k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.80k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.80k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.80k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 8, False: 3.79k]
  ------------------
 2236|      8|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|      8|        }
 2238|  3.79k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.79k, False: 0]
  ------------------
 2239|  3.79k|            return unexpected(parse_error::error);
 2240|  3.79k|        }
 2241|      0|        return ranges::next(range.begin(), str.size());
 2242|  3.79k|    }
 2243|  3.80k|    else {
 2244|  3.80k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.80k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.80k|                return ch;
 2247|  3.80k|            }
 2248|  3.80k|            return static_cast<char_type>(ch +
 2249|  3.80k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.80k|        };
 2251|       |
 2252|  3.80k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|  3.80k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.80k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.80k|        if (SCN_UNLIKELY(!std::equal(
 2257|  3.80k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.80k|                    return ascii_tolower(a) ==
 2259|  3.80k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.80k|                }))) {
 2261|  3.80k|            return unexpected(parse_error::error);
 2262|  3.80k|        }
 2263|       |
 2264|  3.80k|        return it;
 2265|  3.80k|    }
 2266|  3.80k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     34|{
 3258|     34|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 34]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     34|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 34]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     34|    return unexpected(parse_error::error);
 3268|     34|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  1.90k|{
 2146|  1.90k|    auto it = read_code_unit(range);
 2147|  1.90k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.90k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  1.90k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.90k, False: 0]
  |  |  ------------------
  ------------------
 2152|  1.90k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.90k|        return unexpected(parse_error::error);
 2154|  1.90k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  1.90k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    924|{
 3251|    924|    return read_matching_string_classic_nocase(range, "0x");
 3252|    924|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|     12|{
 3274|     12|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 12]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|     12|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 12]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|     12|    {
 3281|     12|        bool zero_parsed{false};
 3282|     12|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 12]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|     12|    }
 3286|     12|    return {range.begin(), 10, false};
 3287|     12|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3360|  2.77k|{
 3361|  2.77k|    using char_type = detail::char_t<Range>;
 3362|       |
 3363|  2.77k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3363:19): [Folded - Ignored]
  ------------------
 3364|  2.77k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.77k]
  |  |  ------------------
  ------------------
 3365|      0|            return unexpected_scan_error(
 3366|      0|                scan_error::invalid_scanned_value,
 3367|      0|                "Failed to parse integer: No digits found");
 3368|      0|        }
 3369|  2.77k|        return range.end();
 3370|  2.77k|    }
 3371|  2.77k|    else {
 3372|  2.77k|        return read_while1_code_unit(range,
 3373|  2.77k|                                     [&](char_type ch) noexcept {
 3374|  2.77k|                                         return char_to_int(ch) < base;
 3375|  2.77k|                                     })
 3376|  2.77k|            .transform_error(map_parse_error_to_scan_error(
 3377|  2.77k|                scan_error::invalid_scanned_value,
 3378|  2.77k|                "Failed to parse integer: No digits found"));
 3379|  2.77k|    }
 3380|  2.77k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3390|     20|{
 3391|     20|    std::basic_string<CharT> output;
 3392|     20|    std::string thsep_indices;
 3393|     20|    auto it = range.begin();
 3394|     20|    bool digit_matched = false;
 3395|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3395:12): [True: 20, False: 0]
  ------------------
 3396|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3396:13): [True: 0, False: 20]
  ------------------
 3397|      0|            thsep_indices.push_back(
 3398|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3399|      0|        }
 3400|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3400:18): [True: 20, False: 0]
  ------------------
 3401|     20|            break;
 3402|     20|        }
 3403|      0|        else {
 3404|      0|            output.push_back(*it);
 3405|      0|            digit_matched = true;
 3406|      0|        }
 3407|     20|    }
 3408|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3409|     20|        return unexpected_scan_error(
 3410|     20|            scan_error::invalid_scanned_value,
 3411|     20|            "Failed to parse integer: No digits found");
 3412|     20|    }
 3413|      0|    return std::tuple{it, output, thsep_indices};
 3414|     20|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  14.7k|{
 1683|  14.7k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  14.7k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  14.7k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  14.7k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  14.7k|    }
 1688|  14.7k|    else {
 1689|  14.7k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  14.7k|    }
 1691|  14.7k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  14.7k|    {
 1490|  14.7k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|   182k|    {
 1503|   182k|        return sv;
 1504|   182k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5951|  2.90k|{
 5952|  2.90k|    using char_type = detail::char_t<Range>;
 5953|  2.90k|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5954|       |
 5955|  2.90k|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5955:9): [True: 2.55k, False: 350]
  ------------------
 5956|  2.55k|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5957|  2.55k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5958|       |
 5959|  2.55k|        if (max_width == 0) {
  ------------------
  |  Branch (5959:13): [True: 1.63k, False: 914]
  ------------------
 5960|  1.63k|            auto it = read_while_code_unit(range, pred);
 5961|       |
 5962|  1.63k|            if (want_skipped_width) {
  ------------------
  |  Branch (5962:17): [True: 122, False: 1.51k]
  ------------------
 5963|    122|                auto prefix_width =
 5964|    122|                    static_cast<std::ptrdiff_t>(
 5965|    122|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5966|    122|                    ranges::distance(range.begin(), it);
 5967|    122|                return result_type{it, prefix_width};
 5968|    122|            }
 5969|  1.51k|            return result_type{it, 0};
 5970|  1.63k|        }
 5971|       |
 5972|    914|        auto max_width_view = take_width(range, max_width);
 5973|    914|        auto w_it = read_while_code_unit(max_width_view, pred);
 5974|       |
 5975|    914|        if (want_skipped_width) {
  ------------------
  |  Branch (5975:13): [True: 914, False: 0]
  ------------------
 5976|    914|            return result_type{w_it.base(), max_width - w_it.count()};
 5977|    914|        }
 5978|      0|        return result_type{w_it.base(), 0};
 5979|    914|    }
 5980|       |
 5981|    350|    const auto fill_chars = fill.template get_code_units<char_type>();
 5982|    350|    if (max_width == 0) {
  ------------------
  |  Branch (5982:9): [True: 194, False: 156]
  ------------------
 5983|    194|        auto it = read_while_code_units(range, fill_chars);
 5984|       |
 5985|    194|        if (want_skipped_width) {
  ------------------
  |  Branch (5985:13): [True: 78, False: 116]
  ------------------
 5986|     78|            auto prefix_width =
 5987|     78|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5988|     78|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5989|     78|            return result_type{it, prefix_width};
 5990|     78|        }
 5991|    116|        return result_type{it, 0};
 5992|    194|    }
 5993|       |
 5994|    156|    auto max_width_view = take_width(range, max_width);
 5995|    156|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5996|       |
 5997|    156|    if (want_skipped_width) {
  ------------------
  |  Branch (5997:9): [True: 156, False: 0]
  ------------------
 5998|    156|        return result_type{w_it.base(), max_width - w_it.count()};
 5999|    156|    }
 6000|      0|    return result_type{w_it.base(), 0};
 6001|    156|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.87k|{
 1976|  1.87k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.87k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  2.18k|{
 1957|  2.18k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.18k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.18k|    }
 1960|  2.18k|    else {
 1961|  2.18k|        auto first = range.begin();
 1962|  2.18k|        for (; first != range.end(); ++first) {
 1963|  2.18k|            if (pred(*first)) {
 1964|  2.18k|                return first;
 1965|  2.18k|            }
 1966|  2.18k|        }
 1967|  2.18k|        return first;
 1968|  2.18k|    }
 1969|  2.18k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_:
  753|  2.55k|    {
  754|  2.55k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  2.91k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.91k|              cvref<T> obj = *get<T>(fn);
  745|  2.91k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.91k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.91k|              }
  748|  2.91k|              else {
  749|  2.91k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.91k|              }
  751|  2.91k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlcE_EEDaNS3_7storageE:
  683|  2.91k|    {
  684|  2.91k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.91k|            return static_cast<T*>(s.m_cp);
  686|  2.91k|        }
  687|  2.91k|        else if constexpr (std::is_object_v<T>) {
  688|  2.91k|            return static_cast<T*>(s.m_p);
  689|  2.91k|        }
  690|  2.91k|        else {
  691|  2.91k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.91k|        }
  693|  2.91k|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlcE_clEc:
 5957|  2.91k|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlcE_LPv0EEEPKSH_:
  666|  2.55k|        {
  667|  2.55k|        }
_ZN3scn2v34impl20read_while_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1975|    962|{
 1976|    962|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    962|}
_ZN3scn2v34impl20read_until_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbNDTcl4implISE_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1956|  1.12k|{
 1957|  1.12k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.12k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.12k|    }
 1960|  1.12k|    else {
 1961|  1.12k|        auto first = range.begin();
 1962|  3.22k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 3.18k, False: 42]
  ------------------
 1963|  3.18k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.08k, False: 2.10k]
  ------------------
 1964|  1.08k|                return first;
 1965|  1.08k|            }
 1966|  3.18k|        }
 1967|     42|        return first;
 1968|  1.12k|    }
 1969|  1.12k|}
_ZN3scn2v34impl21read_while_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2036|    194|{
 2037|    194|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    194|    auto it = range.begin();
 2040|    266|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 266, False: 0]
  ------------------
 2041|    266|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    266|                                           needle.size());
 2043|    266|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 6, False: 260]
  ------------------
 2044|      6|            return it;
 2045|      6|        }
 2046|    260|        static_assert(
 2047|    260|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    260|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 188, False: 72]
  ------------------
 2049|    188|            return it;
 2050|    188|        }
 2051|     72|        it = *r;
 2052|     72|    }
 2053|      0|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      0|    return it;
 2055|      0|}
_ZN3scn2v34impl21read_while_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEESI_RKT0_:
 2036|    156|{
 2037|    156|    static_assert(ranges::common_range<CodeUnits>);
 2038|       |
 2039|    156|    auto it = range.begin();
 2040|    174|    while (it != range.end()) {
  ------------------
  |  Branch (2040:12): [True: 168, False: 6]
  ------------------
 2041|    168|        auto r = read_exactly_n_code_units(ranges::subrange{it, range.end()},
 2042|    168|                                           needle.size());
 2043|    168|        if (!r) {
  ------------------
  |  Branch (2043:13): [True: 36, False: 132]
  ------------------
 2044|     36|            return it;
 2045|     36|        }
 2046|    132|        static_assert(
 2047|    132|            std::is_same_v<decltype(it), detail::remove_cvref_t<decltype(*r)>>);
 2048|    132|        if (!std::equal(it, *r, needle.begin())) {
  ------------------
  |  Branch (2048:13): [True: 114, False: 18]
  ------------------
 2049|    114|            return it;
 2050|    114|        }
 2051|     18|        it = *r;
 2052|     18|    }
 2053|      6|    SCN_ENSURE(it == range.end());
  ------------------
  |  |  925|      6|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      6|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2054|      6|    return it;
 2055|      6|}
_ZN3scn2v34impl23skip_classic_whitespaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_b:
 2950|  2.73k|{
 2951|  2.73k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.37k, False: 364]
  ------------------
 2952|  2.37k|        auto it = read_while_classic_space(range);
 2953|  2.37k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.37k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 40, False: 2.33k]
  |  |  ------------------
  ------------------
 2955|     40|            return unexpected(e);
 2956|     40|        }
 2957|       |
 2958|  2.33k|        return it;
 2959|  2.37k|    }
 2960|       |
 2961|    364|    return read_while_classic_space(range);
 2962|  2.73k|}
_ZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2116|  2.73k|{
 2117|  2.73k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.73k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.73k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.73k|        auto buf = make_contiguous_buffer(range);
 2121|  2.73k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.73k|        return ranges::next(range.begin(),
 2123|  2.73k|                            ranges::distance(buf.view().begin(), it));
 2124|  2.73k|    }
 2125|  2.73k|    else {
 2126|  2.73k|        auto it = range.begin();
 2127|       |
 2128|  2.73k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.73k|            auto seg = get_contiguous_beginning(range);
 2130|  2.73k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.73k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 0, False: 2.73k]
  ------------------
 2132|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|      0|            }
 2134|  2.73k|            ranges::advance(it, seg.size());
 2135|  2.73k|        }
 2136|       |
 2137|  2.73k|        return read_while_code_point(
 2138|  2.73k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.73k|    }
 2140|  2.73k|}
_ZN3scn2v34impl24get_contiguous_beginningINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDaT_:
 1038|  3.64k|{
 1039|  3.64k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|  3.64k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|  3.64k|        return r;
 1042|  3.64k|    }
 1043|  3.64k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|  3.64k|                           ranges::const_iterator_t<Range>,
 1045|  3.64k|                           typename detail::basic_scan_buffer<
 1046|  3.64k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|  3.64k|        if constexpr (ranges::common_range<Range>) {
 1048|  3.64k|            auto seg = r.begin().contiguous_segment();
 1049|  3.64k|            auto dist =
 1050|  3.64k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|  3.64k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|  3.64k|        }
 1053|  3.64k|        else {
 1054|  3.64k|            return r.begin().contiguous_segment();
 1055|  3.64k|        }
 1056|  3.64k|    }
 1057|  3.64k|    else {
 1058|  3.64k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|  3.64k|    }
 1060|  3.64k|}
_ZN3scn2v34impl21read_while_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2081|  3.30k|{
 2082|  3.30k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  3.30k|}
_ZN3scn2v34impl21read_until_code_pointINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NS1_12function_refIFbDiESK_EE:
 2060|  3.36k|{
 2061|  3.36k|    auto it = range.begin();
 2062|   122k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 122k, False: 238]
  ------------------
 2063|   122k|        const auto val =
 2064|   122k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   122k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   122k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 122k, False: 516]
  |  |  ------------------
  ------------------
 2066|   122k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   122k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   122k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 3.12k, False: 118k]
  ------------------
 2069|  3.12k|                return it;
 2070|  3.12k|            }
 2071|   122k|        }
 2072|   119k|        it = val.iterator;
 2073|   119k|    }
 2074|       |
 2075|    238|    return it;
 2076|  3.36k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISL_EEE4typeEEESL_:
 1898|   180k|{
 1899|   180k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   180k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   180k|    auto it = range.begin();
 1903|   180k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   180k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.60k, False: 173k]
  |  |  ------------------
  ------------------
 1906|  6.60k|        ++it;
 1907|  6.60k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  6.60k|        return {it, {}};
 1909|  6.60k|    }
 1910|       |
 1911|   173k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 159k, False: 13.9k]
  ------------------
 1912|   159k|        ++it;
 1913|   159k|        return {it, string_type(1, *range.begin())};
 1914|   159k|    }
 1915|       |
 1916|  13.9k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  13.9k|    return {it, string_type{range.begin(), it}};
 1918|   173k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_:
 1154|  6.60k|{
 1155|  6.60k|    auto it = input.begin();
 1156|  47.7k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 47.5k, False: 204]
  ------------------
 1157|  47.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 6.39k, False: 41.1k]
  ------------------
 1158|  6.39k|            break;
 1159|  6.39k|        }
 1160|  47.5k|    }
 1161|  6.60k|    return it;
 1162|  6.60k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  282|  13.9k|    {
  283|  13.9k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  13.9k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SL_EENS1_20incrementable_traitsISL_E15difference_typeEE4typeERSL_SP_SM_:
  226|  13.9k|    {
  227|  13.9k|        constexpr iter_difference_t<I> zero{0};
  228|  13.9k|        iter_difference_t<I> counter{0};
  229|       |
  230|  13.9k|        if (n < zero) {
  ------------------
  |  Branch (230:13): [True: 0, False: 13.9k]
  ------------------
  231|      0|            do {
  232|      0|                --i;
  233|      0|                --counter;  // Yes, really
  234|      0|            } while (++n < zero && i != bound);
  ------------------
  |  Branch (234:22): [True: 0, False: 0]
  |  Branch (234:36): [True: 0, False: 0]
  ------------------
  235|      0|        }
  236|  13.9k|        else {
  237|  43.3k|            while (n-- > zero && i != bound) {
  ------------------
  |  Branch (237:20): [True: 29.4k, False: 13.8k]
  |  Branch (237:34): [True: 29.4k, False: 48]
  ------------------
  238|  29.4k|                ++i;
  239|  29.4k|                ++counter;
  240|  29.4k|            }
  241|  13.9k|        }
  242|       |
  243|  13.9k|        return counter;
  244|  13.9k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|  2.73k|    {
  754|  2.73k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  6.81k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.81k|              cvref<T> obj = *get<T>(fn);
  745|  6.81k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.81k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.81k|              }
  748|  6.81k|              else {
  749|  6.81k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.81k|              }
  751|  6.81k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  6.81k|    {
  684|  6.81k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.81k|            return static_cast<T*>(s.m_cp);
  686|  6.81k|        }
  687|  6.81k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.81k|            return static_cast<T*>(s.m_p);
  689|  6.81k|        }
  690|  6.81k|        else {
  691|  6.81k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.81k|        }
  693|  6.81k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2138|  6.81k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|  2.73k|        {
  662|  2.73k|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.39k|{
 2951|  7.39k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.15k, False: 232]
  ------------------
 2952|  7.15k|        auto it = read_while_classic_space(range);
 2953|  7.15k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.15k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.15k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.15k|        return it;
 2959|  7.15k|    }
 2960|       |
 2961|    232|    return read_while_classic_space(range);
 2962|  7.39k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  79.1k|{
 2117|  79.1k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  79.1k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  79.1k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  79.1k|        auto buf = make_contiguous_buffer(range);
 2121|  79.1k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  79.1k|        return ranges::next(range.begin(),
 2123|  79.1k|                            ranges::distance(buf.view().begin(), it));
 2124|  79.1k|    }
 2125|  79.1k|    else {
 2126|  79.1k|        auto it = range.begin();
 2127|       |
 2128|  79.1k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  79.1k|            auto seg = get_contiguous_beginning(range);
 2130|  79.1k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  79.1k|                seg_it != seg.end()) {
 2132|  79.1k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  79.1k|            }
 2134|  79.1k|            ranges::advance(it, seg.size());
 2135|  79.1k|        }
 2136|       |
 2137|  79.1k|        return read_while_code_point(
 2138|  79.1k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  79.1k|    }
 2140|  79.1k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  82.0k|{
 1683|  82.0k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  82.0k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  82.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  82.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  82.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  82.0k|    }
 1688|  82.0k|    else {
 1689|  82.0k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  82.0k|    }
 1691|  82.0k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|  82.0k|    {
 1490|  82.0k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  10.8k|    {
 3040|  10.8k|        reader_error_handler eh{};
 3041|  10.8k|        get_derived().check_specs_impl(specs, eh);
 3042|  10.8k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.70k, False: 1.19k]
  |  |  ------------------
  ------------------
 3043|  9.70k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  9.70k|        }
 3045|  1.19k|        return {};
 3046|  10.8k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3050|  10.8k|    {
 3051|  10.8k|        return static_cast<Derived&>(*this);
 3052|  10.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3485|  10.8k|    {
 3486|  10.8k|        detail::check_int_type_specs(specs, eh);
 3487|  10.8k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3034|  2.53k|    {
 3035|  2.53k|        return true;
 3036|  2.53k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEiEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3539|    326|    {
 3540|    326|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 326]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    326|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    326|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 326]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    326|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 326]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    326|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    326|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 320, False: 6]
  |  |  ------------------
  ------------------
 3566|    320|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    320|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 320, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    320|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    320|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    320|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    320|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    320|    }                                                  \
  |  |  |  | 3642|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|      0|                    parse_integer_digits_without_thsep(
 3568|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|      0|                        prefix_result.parsed_base));
 3570|       |
 3571|      0|            auto buf = make_contiguous_buffer(
 3572|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|      0|        }
 3581|       |
 3582|      6|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      6|            localized_number_formatting_options<CharT>{loc};
 3587|      6|#endif
 3588|       |
 3589|      6|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      6|    }                                                  \
  |  |  |  | 3642|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    262|    {
 3540|    262|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    262|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    262|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 262]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    262|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 262]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    262|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    262|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 252, False: 10]
  |  |  ------------------
  ------------------
 3566|    252|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    252|                    parse_integer_digits_without_thsep(
 3568|    252|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    252|                        prefix_result.parsed_base));
 3570|       |
 3571|    252|            auto buf = make_contiguous_buffer(
 3572|    252|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    252|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    252|    }                                                  \
  |  |  |  | 3642|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    252|        }
 3581|       |
 3582|     10|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     10|            localized_number_formatting_options<CharT>{loc};
 3587|     10|#endif
 3588|       |
 3589|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEjEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3539|    326|    {
 3540|    326|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 326]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    326|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    326|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    326|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 326]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    326|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 326]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    326|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    326|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 320, False: 6]
  |  |  ------------------
  ------------------
 3566|    320|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    320|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    320|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    320|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 320, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    320|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    320|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    320|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    320|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    320|    }                                                  \
  |  |  |  | 3642|    320|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|      0|                    parse_integer_digits_without_thsep(
 3568|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|      0|                        prefix_result.parsed_base));
 3570|       |
 3571|      0|            auto buf = make_contiguous_buffer(
 3572|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|      0|        }
 3581|       |
 3582|      6|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      6|            localized_number_formatting_options<CharT>{loc};
 3587|      6|#endif
 3588|       |
 3589|      6|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      6|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      6|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      6|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      6|    }                                                  \
  |  |  |  | 3642|      6|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    262|    {
 3540|    262|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    262|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 262]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    262|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    262|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 262]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    262|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 262]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    262|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    262|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 252, False: 10]
  |  |  ------------------
  ------------------
 3566|    252|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    252|                    parse_integer_digits_without_thsep(
 3568|    252|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    252|                        prefix_result.parsed_base));
 3570|       |
 3571|    252|            auto buf = make_contiguous_buffer(
 3572|    252|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    252|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    252|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 252, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    252|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    252|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    252|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    252|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    252|    }                                                  \
  |  |  |  | 3642|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    252|        }
 3581|       |
 3582|     10|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     10|            localized_number_formatting_options<CharT>{loc};
 3587|     10|#endif
 3588|       |
 3589|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEmEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 3539|    304|    {
 3540|    304|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 304]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    304|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    304|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    304|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 304]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    304|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 304]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    304|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    304|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 304, False: 0]
  |  |  ------------------
  ------------------
 3566|    304|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 304, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    304|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    304|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    304|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    304|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    304|    }                                                  \
  |  |  |  | 3642|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|      0|                    parse_integer_digits_without_thsep(
 3568|      0|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|      0|                        prefix_result.parsed_base));
 3570|       |
 3571|      0|            auto buf = make_contiguous_buffer(
 3572|      0|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|      0|            SCN_TRY(result_it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|      0|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    906|    {
 3540|    906|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 906]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    906|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    906|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 906]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    906|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 906]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    906|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    906|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 906, False: 0]
  |  |  ------------------
  ------------------
 3566|    906|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 906]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    906|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    906|                    parse_integer_digits_without_thsep(
 3568|    906|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    906|                        prefix_result.parsed_base));
 3570|       |
 3571|    906|            auto buf = make_contiguous_buffer(
 3572|    906|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    906|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 906, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    906|    }                                                  \
  |  |  |  | 3642|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    906|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.44k|    {
 3040|  5.44k|        reader_error_handler eh{};
 3041|  5.44k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.44k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.84k, False: 604]
  |  |  ------------------
  ------------------
 3043|  4.84k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.84k|        }
 3045|    604|        return {};
 3046|  5.44k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  5.44k|    {
 3051|  5.44k|        return static_cast<Derived&>(*this);
 3052|  5.44k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4145|  5.44k|    {
 4146|  5.44k|        detail::check_float_type_specs(specs, eh);
 4147|  5.44k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  1.27k|    {
 3035|  1.27k|        return true;
 3036|  1.27k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4217|    596|    {
 4218|    596|        unsigned options{};
 4219|    596|        if (specs.localized) {
  ------------------
  |  Branch (4219:13): [True: 18, False: 578]
  ------------------
 4220|     18|            options |= float_reader_base::allow_thsep;
 4221|     18|        }
 4222|       |
 4223|    596|        SCN_GCC_COMPAT_PUSH
 4224|    596|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4225|       |
 4226|    596|        switch (specs.type) {
 4227|     30|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4227:13): [True: 30, False: 566]
  ------------------
 4228|     30|                return options | float_reader_base::allow_fixed;
 4229|       |
 4230|      6|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4230:13): [True: 6, False: 590]
  ------------------
 4231|      6|                return options | float_reader_base::allow_scientific;
 4232|       |
 4233|     14|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4233:13): [True: 14, False: 582]
  ------------------
 4234|     14|                return options | float_reader_base::allow_hex;
 4235|       |
 4236|      2|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4236:13): [True: 2, False: 594]
  ------------------
 4237|      2|                return options | float_reader_base::allow_scientific |
 4238|      2|                       float_reader_base::allow_fixed;
 4239|       |
 4240|    544|            case detail::presentation_type::none:
  ------------------
  |  Branch (4240:13): [True: 544, False: 52]
  ------------------
 4241|    544|                return options | float_reader_base::allow_scientific |
 4242|    544|                       float_reader_base::allow_fixed |
 4243|    544|                       float_reader_base::allow_hex;
 4244|       |
 4245|      0|            default:
  ------------------
  |  Branch (4245:13): [True: 0, False: 596]
  ------------------
 4246|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4247|    596|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4248|    596|        }
 4249|       |
 4250|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4251|    596|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3660|    596|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  1.26k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  2.53k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4057|    920|    {
 4058|    920|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 920, False: 0]
  ------------------
 4059|    920|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 920, False: 0]
  ------------------
 4060|    920|            return;
 4061|    920|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|    700|    {
 1587|    700|        return m_storage.has_value();
 1588|    700|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|    350|    {
 1592|    350|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|    350|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    350|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|    350|        return *m_storage;
 1594|    350|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EclESC_SJ_SL_:
  762|    316|    {
  763|    316|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    316|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3679|      6|    {
 3680|      6|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|      6|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|      6|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|      6|        return read_source_impl(range);
 3686|      6|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_:
 3705|    316|    {
 3706|    316|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 316]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|    316|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|    316|        auto it = sign_result.first;
 3709|    316|        m_sign = sign_result.second;
 3710|       |
 3711|    316|        auto digits_begin = it;
 3712|    316|        auto r = ranges::subrange{it, range.end()};
 3713|    316|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    316|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|    316|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3716|    316|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|    316|                SCN_TRY_ASSIGN(
 3718|    316|                    it,
 3719|    316|                    do_read_source_impl(
 3720|    316|                        r,
 3721|    316|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|    316|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|    316|            }
 3724|    316|            else {
 3725|    316|                auto cb = [&](const auto& rr)
 3726|    316|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|    316|                    auto res = read_all(rr);
 3728|    316|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|    316|                        return unexpected_scan_error(
 3730|    316|                            scan_error::invalid_scanned_value,
 3731|    316|                            "Invalid float value");
 3732|    316|                    }
 3733|    316|                    return res;
 3734|    316|                };
 3735|    316|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3736|    316|            }
 3737|    316|        }
 3738|    316|        else {
 3739|    316|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 316, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    316|    }                                                  \
  |  | 3642|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    316|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3740|      0|                it,
 3741|      0|                do_read_source_impl(
 3742|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|      0|        }
 3745|       |
 3746|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  |  Branch (3748:48): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 0, False: 0]
  ------------------
 3751|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|      0|        }
 3753|       |
 3754|      0|        handle_separators();
 3755|       |
 3756|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 0]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|      0|        return it;
 3769|      0|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEZNS3_16read_source_implISG_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESO_EUlRKSO_E_ZNSK_ISG_EEST_SO_EUlSV_E0_EEST_SO_OT0_OT1_:
 4000|    316|    {
 4001|    316|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|    316|        const bool allowed_nonhex =
 4003|    316|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|    316|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|    316|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 316, False: 0]
  |  Branch (4006:45): [True: 0, False: 316]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|    316|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 316]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|    316|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 316, False: 0]
  |  Branch (4015:45): [True: 0, False: 316]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|    316|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 316]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|    316|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 308, False: 8]
  |  Branch (4022:28): [True: 2, False: 306]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|      2|            auto it = range.begin();
 4026|       |
 4027|      2|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 2]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|      2|            else {
 4032|      2|                m_kind = float_kind::hex_without_prefix;
 4033|      2|            }
 4034|       |
 4035|      2|            return read_hex(ranges::subrange{it, range.end()});
 4036|      2|        }
 4037|    314|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 8, False: 306]
  |  Branch (4037:29): [True: 8, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|      8|            m_kind = float_kind::generic;
 4041|      8|            return read_regular_float(range);
 4042|      8|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|    306|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    306|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 306]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|    306|        m_kind = float_kind::generic;
 4053|    306|        return read_regular(range);
 4054|    306|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3811|    316|    {
 3812|    316|        auto it = range.begin();
 3813|    316|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 316, False: 0]
  ------------------
 3814|    316|            return unexpected(r.error());
 3815|    316|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3834|    316|    {
 3835|    316|        auto it = range.begin();
 3836|    316|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 316, False: 0]
  ------------------
 3837|    316|            return r.transform_error(map_parse_error_to_scan_error(
 3838|    316|                scan_error::invalid_scanned_value,
 3839|    316|                "Invalid floating-point NaN value"));
 3840|    316|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3804|    308|    {
 3805|    308|        return read_matching_string_classic_nocase(range, "0x");
 3806|    308|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3904|      2|    {
 3905|      2|        auto it = range.begin();
 3906|       |
 3907|      2|        std::ptrdiff_t digits_count = 0;
 3908|      2|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3909|      2|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2, False: 0]
  |  |  ------------------
  ------------------
 3910|      2|            return r.transform_error(map_parse_error_to_scan_error(
 3911|      2|                scan_error::invalid_scanned_value,
 3912|      2|                "Invalid hexadecimal floating-point value"));
 3913|      2|        }
 3914|      0|        else {
 3915|      0|            digits_count += ranges::distance(it, *r);
 3916|      0|            it = *r;
 3917|      0|        }
 3918|       |
 3919|      0|        m_integral_part_length = digits_count;
 3920|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3920:18): [True: 0, False: 0]
  ------------------
 3921|      0|                                             m_locale_options.decimal_point)) {
 3922|      0|            it = *r;
 3923|      0|        }
 3924|       |
 3925|      0|        if (auto r =
  ------------------
  |  Branch (3925:18): [True: 0, False: 0]
  ------------------
 3926|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3927|      0|            digits_count += ranges::distance(it, *r);
 3928|      0|            it = *r;
 3929|      0|        }
 3930|       |
 3931|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3932|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3933|      0|                                         "No significand digits in hexfloat");
 3934|      0|        }
 3935|       |
 3936|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3937|       |
 3938|      0|        return it;
 3939|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3789|      2|    {
 3790|      2|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      2|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2]
  |  |  |  Branch (859:45): [True: 0, False: 2]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3791|      2|                         thsep_allowed)) {
 3792|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3793|      0|                return char_to_int(ch) < 16 ||
 3794|      0|                       ch == m_locale_options.thousands_sep;
 3795|      0|            });
 3796|      0|        }
 3797|       |
 3798|      2|        return read_while1_code_unit(
 3799|      2|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3800|      2|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|      2|    {
  754|      2|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|      2|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      2|              cvref<T> obj = *get<T>(fn);
  745|      2|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      2|                  obj(static_cast<decltype(args)>(args)...);
  747|      2|              }
  748|      2|              else {
  749|      2|                  return obj(static_cast<decltype(args)>(args)...);
  750|      2|              }
  751|      2|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|      2|    {
  684|      2|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      2|            return static_cast<T*>(s.m_cp);
  686|      2|        }
  687|      2|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      2|            return static_cast<T*>(s.m_p);
  689|      2|        }
  690|      2|        else {
  691|      2|            return reinterpret_cast<T*>(s.m_fp);
  692|      2|        }
  693|      2|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3799|      2|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|      2|        {
  662|      2|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_:
 3944|    314|    {
 3945|    314|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|    314|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 306, False: 8]
  |  Branch (3946:50): [True: 0, False: 306]
  ------------------
 3947|       |
 3948|    314|        auto it = ranges::begin(range);
 3949|    314|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|    314|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|    314|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 314, False: 0]
  |  |  ------------------
  ------------------
 3953|    314|            return r.transform_error(
 3954|    314|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|    314|                                              "Invalid floating-point value"));
 3956|    314|        }
 3957|      0|        else {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        m_integral_part_length = digits_count;
 3963|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 0]
  ------------------
 3964|      0|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|      0|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|      0|        auto beg_exp_it = it;
 3980|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 0, False: 0]
  ------------------
 3981|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|      0|        }
 3983|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 0, False: 0]
  |  Branch (3983:29): [True: 0, False: 0]
  ------------------
 3984|      0|            return unexpected_scan_error(
 3985|      0|                scan_error::invalid_scanned_value,
 3986|      0|                "No exponent given to scientific float");
 3987|      0|        }
 3988|       |
 3989|      0|        m_kind =
 3990|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|       |
 3992|      0|        return it;
 3993|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_b:
 3774|    314|    {
 3775|    314|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    314|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314]
  |  |  |  Branch (859:45): [True: 0, False: 314]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|    314|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|    314|        return read_while1_code_unit(
 3784|    314|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|    314|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_:
  753|    314|    {
  754|    314|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_SX_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|    314|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    314|              cvref<T> obj = *get<T>(fn);
  745|    314|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    314|                  obj(static_cast<decltype(args)>(args)...);
  747|    314|              }
  748|    314|              else {
  749|    314|                  return obj(static_cast<decltype(args)>(args)...);
  750|    314|              }
  751|    314|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSF_EENS1_15take_width_viewINSB_ISF_SF_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESQ_bEUlcE0_EEDaNS3_7storageE:
  683|    314|    {
  684|    314|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    314|            return static_cast<T*>(s.m_cp);
  686|    314|        }
  687|    314|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    314|            return static_cast<T*>(s.m_p);
  689|    314|        }
  690|    314|        else {
  691|    314|            return reinterpret_cast<T*>(s.m_fp);
  692|    314|        }
  693|    314|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSC_EENS1_15take_width_viewINS8_ISC_SC_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESN_bENKUlcE0_clEc:
 3784|    314|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSG_EENS1_15take_width_viewINSC_ISG_SG_EEE8sentinelILb1EEEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_bEUlcE0_LPv0EEEPSR_:
  661|    314|        {
  662|    314|        }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refE:
 3665|    310|    {
 3666|    310|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    310|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 310]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|    310|        return read_source_impl(range);
 3672|    310|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    950|    {
  763|    950|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    950|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    950|    }
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|     12|    {
 3680|     12|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|     12|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     12|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 12]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|     12|        return read_source_impl(range);
 3686|     12|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|    950|    {
 3706|    950|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|    950|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    950|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    950|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    950|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 950]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    950|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    950|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|    950|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|    950|        auto it = sign_result.first;
 3709|    950|        m_sign = sign_result.second;
 3710|       |
 3711|    950|        auto digits_begin = it;
 3712|    950|        auto r = ranges::subrange{it, range.end()};
 3713|    950|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    950|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|    950|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 950]
  |  |  |  Branch (859:45): [True: 0, False: 950]
  |  |  |  Branch (859:45): [True: 0, False: 950]
  |  |  ------------------
  ------------------
 3716|    950|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|    950|            else {
 3725|    950|                auto cb = [&](const auto& rr)
 3726|    950|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|    950|                    auto res = read_all(rr);
 3728|    950|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|    950|                        return unexpected_scan_error(
 3730|    950|                            scan_error::invalid_scanned_value,
 3731|    950|                            "Invalid float value");
 3732|    950|                    }
 3733|    950|                    return res;
 3734|    950|                };
 3735|    950|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|    950|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    950|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    950|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 30, False: 920]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     30|    }                                                  \
  |  | 3642|    950|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    950|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|    920|            }
 3737|    950|        }
 3738|    920|        else {
 3739|    920|            SCN_TRY_ASSIGN(
 3740|    920|                it,
 3741|    920|                do_read_source_impl(
 3742|    920|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|    920|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|    920|        }
 3745|       |
 3746|    920|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    920|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    920|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|    920|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 920, False: 0]
  |  Branch (3748:48): [True: 920, False: 0]
  ------------------
 3749|    920|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 920, False: 0]
  ------------------
 3750|    920|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 920, False: 0]
  ------------------
 3751|    920|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|    920|        }
 3753|       |
 3754|    920|        handle_separators();
 3755|       |
 3756|    920|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 920]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|    920|        return it;
 3769|    920|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|    950|    {
 3812|    950|        auto it = range.begin();
 3813|    950|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 950, False: 0]
  ------------------
 3814|    950|            return unexpected(r.error());
 3815|    950|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|    950|    {
 3835|    950|        auto it = range.begin();
 3836|    950|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 950, False: 0]
  ------------------
 3837|    950|            return r.transform_error(map_parse_error_to_scan_error(
 3838|    950|                scan_error::invalid_scanned_value,
 3839|    950|                "Invalid floating-point NaN value"));
 3840|    950|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|    920|    {
 3805|    920|        return read_matching_string_classic_nocase(range, "0x");
 3806|    920|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|     30|{
 1996|     30|    auto it = read_while_code_unit(range, pred);
 1997|     30|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 30, False: 0]
  ------------------
 1998|     30|        return unexpected(parse_error::error);
 1999|     30|    }
 2000|      0|    return it;
 2001|     30|}
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|     30|    {
 3945|     30|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|     30|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 8, False: 22]
  |  Branch (3946:50): [True: 6, False: 2]
  ------------------
 3947|       |
 3948|     30|        auto it = ranges::begin(range);
 3949|     30|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|     30|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|     30|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30, False: 0]
  |  |  ------------------
  ------------------
 3953|     30|            return r.transform_error(
 3954|     30|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|     30|                                              "Invalid floating-point value"));
 3956|     30|        }
 3957|      0|        else {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        m_integral_part_length = digits_count;
 3963|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 0]
  ------------------
 3964|      0|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|      0|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|      0|        auto beg_exp_it = it;
 3980|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 0, False: 0]
  ------------------
 3981|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|      0|        }
 3983|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 0, False: 0]
  |  Branch (3983:29): [True: 0, False: 0]
  ------------------
 3984|      0|            return unexpected_scan_error(
 3985|      0|                scan_error::invalid_scanned_value,
 3986|      0|                "No exponent given to scientific float");
 3987|      0|        }
 3988|       |
 3989|      0|        m_kind =
 3990|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|       |
 3992|      0|        return it;
 3993|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|     30|    {
 3775|     30|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|     30|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30]
  |  |  |  Branch (859:45): [True: 0, False: 30]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|     30|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|     30|        return read_while1_code_unit(
 3784|     30|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|     30|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|     30|    {
  754|     30|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|     30|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     30|              cvref<T> obj = *get<T>(fn);
  745|     30|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     30|                  obj(static_cast<decltype(args)>(args)...);
  747|     30|              }
  748|     30|              else {
  749|     30|                  return obj(static_cast<decltype(args)>(args)...);
  750|     30|              }
  751|     30|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|     30|    {
  684|     30|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     30|            return static_cast<T*>(s.m_cp);
  686|     30|        }
  687|     30|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     30|            return static_cast<T*>(s.m_p);
  689|     30|        }
  690|     30|        else {
  691|     30|            return reinterpret_cast<T*>(s.m_fp);
  692|     30|        }
  693|     30|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3784|     30|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|     30|        {
  662|     30|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|    950|    {
 4001|    950|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|    950|        const bool allowed_nonhex =
 4003|    950|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|    950|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|    950|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 950, False: 0]
  |  Branch (4006:45): [True: 0, False: 950]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|    950|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 950]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|    950|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 950, False: 0]
  |  Branch (4015:45): [True: 0, False: 950]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|    950|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 950]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|    950|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 920, False: 30]
  |  Branch (4022:28): [True: 12, False: 908]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|     12|            auto it = range.begin();
 4026|       |
 4027|     12|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 12]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|     12|            else {
 4032|     12|                m_kind = float_kind::hex_without_prefix;
 4033|     12|            }
 4034|       |
 4035|     12|            return read_hex(ranges::subrange{it, range.end()});
 4036|     12|        }
 4037|    938|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 30, False: 908]
  |  Branch (4037:29): [True: 30, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|     30|            m_kind = float_kind::generic;
 4041|     30|            return read_regular_float(range);
 4042|     30|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|    908|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 908]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|    908|        m_kind = float_kind::generic;
 4053|    908|        return read_regular(range);
 4054|    908|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|    920|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|    920|                    auto res = read_all(rr);
 3728|    920|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    920|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 920]
  |  |  ------------------
  ------------------
 3729|      0|                        return unexpected_scan_error(
 3730|      0|                            scan_error::invalid_scanned_value,
 3731|      0|                            "Invalid float value");
 3732|      0|                    }
 3733|    920|                    return res;
 3734|    920|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    920|{
 1839|    920|    return ranges::next(range.begin(), range.end());
 1840|    920|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    920|    {
  313|    920|        ranges::advance(x, bound);
  314|    920|        return x;
  315|    920|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    920|    {
  275|    920|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    920|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    962|    {
  190|    962|        i = std::move(bound);
  191|    962|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|    920|    {
 1577|    920|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    920|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    920|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|    920|    {
 1621|    920|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    920|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    920|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    920|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    920|            m_storage.reset();
 1627|    920|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    920|        }
 1629|    920|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    920|                                          std::basic_string<CharT>>) {
 1631|    920|            m_storage.emplace(SCN_FWD(range));
 1632|    920|            m_view = string_view_type{*m_storage};
 1633|    920|        }
 1634|    920|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    920|                                          typename detail::basic_scan_buffer<
 1636|    920|                                              value_t>::forward_iterator> &&
 1637|    920|                           ranges::common_range<Range>) {
 1638|    920|            auto beg_seg = range.begin().contiguous_segment();
 1639|    920|            auto end_seg = range.end().contiguous_segment();
 1640|    920|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    920|                             detail::to_address(end_seg.end()))) {
 1642|    920|                auto& str = m_storage.emplace();
 1643|    920|                str.reserve(range.end().position() - range.begin().position());
 1644|    920|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    920|                m_view = string_view_type{str};
 1646|    920|                return;
 1647|    920|            }
 1648|       |
 1649|    920|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    920|                                                            end_seg.data());
 1651|    920|            m_storage.reset();
 1652|    920|        }
 1653|    920|        else {
 1654|    920|            auto& str = m_storage.emplace();
 1655|    920|            if constexpr (ranges::sized_range<Range>) {
 1656|    920|                str.reserve(range.size());
 1657|    920|            }
 1658|    920|            if constexpr (ranges::common_range<Range>) {
 1659|    920|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    920|                          std::back_inserter(str));
 1661|    920|            }
 1662|    920|            else {
 1663|    920|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    920|                     ++it) {
 1665|    920|                    str.push_back(*it);
 1666|    920|                }
 1667|    920|            }
 1668|    920|            m_view = string_view_type{str};
 1669|    920|        }
 1670|    920|    }
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|    938|    {
 3666|    938|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    938|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 938]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|    938|        return read_source_impl(range);
 3672|    938|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|    920|    {
 3692|    920|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    920|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    920|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|    920|        const std::ptrdiff_t sign_len =
 3695|    920|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 0, False: 920]
  ------------------
 3696|       |
 3697|    920|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|    920|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    920|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    920|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    920|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 920, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    920|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    920|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    920|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    920|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    920|    }                                                  \
  |  |  |  | 3642|    920|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|    920|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refE:
 4170|    316|    {
 4171|    316|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|    316|#if !SCN_DISABLE_LOCALE
 4174|    316|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 6, False: 310]
  ------------------
 4175|      6|            return read_impl<Range>(
 4176|      6|                range, rd,
 4177|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4178|      6|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|      6|                },
 4180|      6|                value, loc);
 4181|      6|        }
 4182|    310|#endif
 4183|       |
 4184|    310|        return read_impl<Range>(
 4185|    310|            range, rd,
 4186|    310|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    310|                return r.read_source(SCN_FWD(args)...);
 4188|    310|            },
 4189|    310|            value);
 4190|    316|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNS1_12float_readerIcEENS1_12function_refIFSM_SP_SH_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4206|    316|    {
 4207|    316|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|    316|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 316, False: 0]
  |  |  ------------------
  ------------------
 4209|    316|            return unexpected(r.error());
 4210|    316|        }
 4211|       |
 4212|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|      0|        return ranges::next(range.begin(), n);
 4214|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSD_ST_EEEDaSW_SZ_:
 4177|      6|                [](float_reader<CharT>& r, auto&&... args) {
 4178|      6|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|      6|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSL_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_:
  753|    310|    {
  754|    310|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS7_EEEERNS1_12float_readerIcEENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS7_S7_EEEENS0_6detail10locale_refEESM_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISJ_dEENS3_IDTclL_ZNSE_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESU_RKNSK_12format_specsERT0_SL_EUlSC_DpOT_E0_S18_LPv0EEEOSU_ENKUlNS1_12fnref_detail4base7storageESC_SJ_SL_E_clES1D_SC_SJ_SL_:
  743|    310|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    310|              cvref<T> obj = *get<T>(fn);
  745|    310|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    310|                  obj(static_cast<decltype(args)>(args)...);
  747|    310|              }
  748|    310|              else {
  749|    310|                  return obj(static_cast<decltype(args)>(args)...);
  750|    310|              }
  751|    310|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_RKNS0_6detail12format_specsERT0_NSQ_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    310|    {
  684|    310|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    310|            return static_cast<T*>(s.m_cp);
  686|    310|        }
  687|    310|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    310|            return static_cast<T*>(s.m_p);
  689|    310|        }
  690|    310|        else {
  691|    310|            return reinterpret_cast<T*>(s.m_fp);
  692|    310|        }
  693|    310|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEdEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERT0_NSN_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSD_ST_EEEDaSW_SZ_:
 4186|    310|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    310|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    310|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|    310|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEdEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSL_:
  661|    310|        {
  662|    310|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|    280|    {
 4171|    280|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|    280|#if !SCN_DISABLE_LOCALE
 4174|    280|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 12, False: 268]
  ------------------
 4175|     12|            return read_impl<Range>(
 4176|     12|                range, rd,
 4177|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4178|     12|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|     12|                },
 4180|     12|                value, loc);
 4181|     12|        }
 4182|    268|#endif
 4183|       |
 4184|    268|        return read_impl<Range>(
 4185|    268|            range, rd,
 4186|    268|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    268|                return r.read_source(SCN_FWD(args)...);
 4188|    268|            },
 4189|    268|            value);
 4190|    280|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|    950|    {
 4207|    950|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|    950|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    950|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30, False: 920]
  |  |  ------------------
  ------------------
 4209|     30|            return unexpected(r.error());
 4210|     30|        }
 4211|       |
 4212|    920|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|    920|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    920|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    920|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    920|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 920, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    920|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    920|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    920|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    920|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    920|    }                                                  \
  |  |  |  | 3642|    920|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|      0|        return ranges::next(range.begin(), n);
 4214|    920|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     12|    {
  754|     12|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     12|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     12|              cvref<T> obj = *get<T>(fn);
  745|     12|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     12|                  obj(static_cast<decltype(args)>(args)...);
  747|     12|              }
  748|     12|              else {
  749|     12|                  return obj(static_cast<decltype(args)>(args)...);
  750|     12|              }
  751|     12|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|     12|    {
  684|     12|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     12|            return static_cast<T*>(s.m_cp);
  686|     12|        }
  687|     12|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     12|            return static_cast<T*>(s.m_p);
  689|     12|        }
  690|     12|        else {
  691|     12|            return reinterpret_cast<T*>(s.m_fp);
  692|     12|        }
  693|     12|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|     12|                [](float_reader<CharT>& r, auto&&... args) {
 4178|     12|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     12|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|     12|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|     12|        {
  662|     12|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    268|    {
  754|    268|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    268|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    268|              cvref<T> obj = *get<T>(fn);
  745|    268|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    268|                  obj(static_cast<decltype(args)>(args)...);
  747|    268|              }
  748|    268|              else {
  749|    268|                  return obj(static_cast<decltype(args)>(args)...);
  750|    268|              }
  751|    268|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|    268|    {
  684|    268|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    268|            return static_cast<T*>(s.m_cp);
  686|    268|        }
  687|    268|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    268|            return static_cast<T*>(s.m_p);
  689|    268|        }
  690|    268|        else {
  691|    268|            return reinterpret_cast<T*>(s.m_fp);
  692|    268|        }
  693|    268|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|    268|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    268|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    268|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|    268|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|    268|        {
  662|    268|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5809|  6.08k|{
 5810|  6.08k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  6.08k|        return reader_impl_for_bool<CharT>{};
 5812|  6.08k|    }
 5813|  6.08k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  6.08k|        return reader_impl_for_char<CharT>{};
 5815|  6.08k|    }
 5816|  6.08k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  6.08k|        return reader_impl_for_wchar<CharT>{};
 5818|  6.08k|    }
 5819|  6.08k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  6.08k|        return reader_impl_for_code_point<CharT>{};
 5821|  6.08k|    }
 5822|  6.08k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.08k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  6.08k|        return reader_impl_for_string<CharT>{};
 5825|  6.08k|    }
 5826|  6.08k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  6.08k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  6.08k|        return reader_impl_for_string<CharT>{};
 5829|  6.08k|    }
 5830|  6.08k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  6.08k|                       std::is_same_v<T, wregex_matches>) {
 5832|  6.08k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  6.08k|    }
 5834|  6.08k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  6.08k|        return reader_impl_for_voidptr<CharT>{};
 5836|  6.08k|    }
 5837|  6.08k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  6.08k|        return reader_impl_for_float<CharT>{};
 5839|  6.08k|    }
 5840|  6.08k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  6.08k|                       !std::is_same_v<T, wchar_t> &&
 5842|  6.08k|                       !std::is_same_v<T, char32_t> &&
 5843|  6.08k|                       !std::is_same_v<T, bool>) {
 5844|  6.08k|        return reader_impl_for_int<CharT>{};
 5845|  6.08k|    }
 5846|  6.08k|    else {
 5847|  6.08k|        return reader_impl_for_monostate<CharT>{};
 5848|  6.08k|    }
 5849|  6.08k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5206|  18.2k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  16.2k|    {
 3040|  16.2k|        reader_error_handler eh{};
 3041|  16.2k|        get_derived().check_specs_impl(specs, eh);
 3042|  16.2k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 324, False: 15.9k]
  |  |  ------------------
  ------------------
 3043|    324|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    324|        }
 3045|  15.9k|        return {};
 3046|  16.2k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|  16.2k|    {
 3051|  16.2k|        return static_cast<Derived&>(*this);
 3052|  16.2k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5210|  16.2k|    {
 5211|  16.2k|        detail::check_string_type_specs(specs, eh);
 5212|       |
 5213|  16.2k|        SCN_GCC_PUSH
 5214|  16.2k|        SCN_GCC_IGNORE("-Wswitch")
 5215|  16.2k|        SCN_GCC_IGNORE("-Wswitch-default")
 5216|       |
 5217|  16.2k|        SCN_CLANG_PUSH
 5218|  16.2k|        SCN_CLANG_IGNORE("-Wswitch")
 5219|  16.2k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5220|       |
 5221|  16.2k|        switch (specs.type) {
  ------------------
  |  Branch (5221:17): [True: 318, False: 15.9k]
  ------------------
 5222|  1.60k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5222:13): [True: 1.60k, False: 14.6k]
  ------------------
 5223|  1.60k|                m_type = reader_type::word;
 5224|  1.60k|                break;
 5225|       |
 5226|    414|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5226:13): [True: 414, False: 15.8k]
  ------------------
 5227|    414|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5227:21): [True: 102, False: 312]
  ------------------
 5228|    414|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5228:21): [True: 108, False: 204]
  ------------------
 5229|    210|                    m_type = reader_type::custom_word;
 5230|    210|                }
 5231|    204|                else {
 5232|    204|                    m_type = reader_type::word;
 5233|    204|                }
 5234|    414|                break;
 5235|      0|            }
 5236|       |
 5237|    120|            case detail::presentation_type::character:
  ------------------
  |  Branch (5237:13): [True: 120, False: 16.1k]
  ------------------
 5238|    120|                m_type = reader_type::character;
 5239|    120|                break;
 5240|       |
 5241|  4.05k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5241:13): [True: 4.05k, False: 12.1k]
  ------------------
 5242|  4.05k|                m_type = reader_type::character_set;
 5243|  4.05k|                break;
 5244|       |
 5245|  8.83k|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5245:13): [True: 8.83k, False: 7.41k]
  ------------------
 5246|  8.83k|                m_type = reader_type::regex;
 5247|  8.83k|                break;
 5248|       |
 5249|    906|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5249:13): [True: 906, False: 15.3k]
  ------------------
 5250|    906|                m_type = reader_type::regex_escaped;
 5251|    906|                break;
 5252|  16.2k|        }
 5253|       |
 5254|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5255|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5256|  16.2k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5259|  22.4k|    {
 5260|  22.4k|        return m_type == reader_type::word;
 5261|  22.4k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  11.2k|{
 1132|  11.2k|    auto it = src.begin();
 1133|   924k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 915k, False: 9.04k]
  ------------------
 1134|   915k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   915k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 1.53k, False: 914k]
  ------------------
 1136|  1.53k|            return false;
 1137|  1.53k|        }
 1138|   914k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 216, False: 914k]
  ------------------
 1139|    216|            return false;
 1140|    216|        }
 1141|   914k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   914k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   914k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 432, False: 913k]
  ------------------
 1144|    432|            return false;
 1145|    432|        }
 1146|   913k|        it += len;
 1147|   913k|    }
 1148|  9.04k|    return true;
 1149|  11.2k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    350|{
 2993|    350|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    350|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 350, False: 0]
  ------------------
 2995|    350|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|    350|    static_cast<    \
  |  |  929|    350|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|    350|        }
 2997|      0|        else {
 2998|      0|            dest.assign(source.view());
 2999|      0|        }
 3000|    350|    }
 3001|    350|    else {
 3002|    350|        return transcode_impl(source.view(), dest);
 3003|    350|    }
 3004|       |
 3005|    350|    return {};
 3006|    350|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5103|  4.05k|        {
 5104|  4.05k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5104:17): [True: 600, False: 3.45k]
  ------------------
 5105|    600|                return {};
 5106|    600|            }
 5107|       |
 5108|  3.45k|            auto charset_string = specs.charset_string<SourceCharT>();
 5109|  3.45k|            auto it = detail::to_address(charset_string.begin());
 5110|  3.45k|            auto set = detail::parse_presentation_set(
 5111|  3.45k|                it, detail::to_address(charset_string.end()), nonascii);
 5112|  3.45k|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|  3.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.45k]
  |  |  ------------------
  ------------------
 5113|      0|                return nonascii.err;
 5114|      0|            }
 5115|  3.45k|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|  3.45k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|  3.45k|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|  3.45k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5117|       |
 5118|  3.45k|            std::sort(nonascii.extra_ranges.begin(),
 5119|  3.45k|                      nonascii.extra_ranges.end());
 5120|  3.45k|            return {};
 5121|  3.45k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback28on_classic_with_extra_rangesEDi:
 5138|   647k|        {
 5139|   647k|            if (!is_ascii_char(cp)) {
  ------------------
  |  Branch (5139:17): [True: 67.5k, False: 580k]
  ------------------
 5140|  67.5k|                return helper.is_char_set_in_extra_literals(cp);
 5141|  67.5k|            }
 5142|       |
 5143|   580k|            return helper.is_char_set_in_literals(static_cast<char>(cp));
 5144|   647k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDi:
 5086|  67.5k|        {
 5087|       |            // TODO: binary search?
 5088|  67.5k|            if (nonascii.extra_ranges.empty()) {
  ------------------
  |  Branch (5088:17): [True: 0, False: 67.5k]
  ------------------
 5089|      0|                return false;
 5090|      0|            }
 5091|       |
 5092|  67.5k|            const auto cp_val = static_cast<uint32_t>(cp);
 5093|  67.5k|            return std::find_if(
 5094|  67.5k|                       nonascii.extra_ranges.begin(),
 5095|  67.5k|                       nonascii.extra_ranges.end(),
 5096|  67.5k|                       [cp_val](const auto& pair) noexcept {
 5097|  67.5k|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
 5098|  67.5k|                                  static_cast<uint32_t>(pair.second) > cp_val;
 5099|  67.5k|                       }) != nonascii.extra_ranges.end();
 5100|  67.5k|        }
_ZZNK3scn2v34impl25character_set_reader_implIcE12specs_helper29is_char_set_in_extra_literalsEDiENKUlRKT_E_clINSt3__14pairIDiDiEEEEDaS7_:
 5096|  17.5M|                       [cp_val](const auto& pair) noexcept {
 5097|  17.5M|                           return static_cast<uint32_t>(pair.first) <= cp_val &&
  ------------------
  |  Branch (5097:35): [True: 17.5M, False: 6.87k]
  ------------------
 5098|  17.5M|                                  static_cast<uint32_t>(pair.second) > cp_val;
  ------------------
  |  Branch (5098:35): [True: 66.4k, False: 17.4M]
  ------------------
 5099|  17.5M|                       }) != nonascii.extra_ranges.end();
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5076|   586k|        {
 5077|   586k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|   586k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   586k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5078|   586k|            const auto val =
 5079|   586k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5080|   586k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5081|   586k|                    (val % 8)) &
 5082|   586k|                   1u;
 5083|   586k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5129|  6.55k|        {
 5130|  6.55k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5130:17): [True: 816, False: 5.74k]
  ------------------
 5131|    816|                return false;
 5132|    816|            }
 5133|       |
 5134|  5.74k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5135|  6.55k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5073|  4.05k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5277|    692|    {
 5278|    692|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    692|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    692|        return read_impl(range, specs, value);
 5280|    692|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5295|    692|    {
 5296|    692|        SCN_CLANG_PUSH
 5297|    692|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    692|        switch (m_type) {
 5300|    302|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 302, False: 390]
  ------------------
 5301|    302|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 692]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|     38|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 38, False: 654]
  ------------------
 5308|     38|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|    280|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 280, False: 412]
  ------------------
 5311|    280|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|    280|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      2|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 2, False: 690]
  ------------------
 5316|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      2|                    range, specs.charset_string<SourceCharT>(),
 5318|      2|                    specs.regexp_flags, value);
 5319|       |
 5320|     70|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 70, False: 622]
  ------------------
 5321|     70|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|     70|                    range,
 5323|     70|                    get_unescaped_regex_pattern(
 5324|     70|                        specs.charset_string<SourceCharT>()),
 5325|     70|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 692]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    692|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    692|        }
 5332|       |
 5333|    692|        SCN_CLANG_POP
 5334|    692|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4820|    302|    {
 4821|    302|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|    302|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4752|    340|{
 4753|    340|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    340|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    340|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 190, False: 150]
  ------------------
 4757|    190|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    190|                                     "Invalid encoding in scanned string");
 4759|    190|    }
 4760|    150|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    150|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 150]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    150|    return SCN_MOVE(result);
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    150|}
_ZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 2087|    906|{
 2088|    906|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|    906|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|    906|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|    906|        auto buf = make_contiguous_buffer(range);
 2092|    906|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|    906|        return ranges::next(range.begin(),
 2094|    906|                            ranges::distance(buf.view().begin(), it));
 2095|    906|    }
 2096|    906|    else {
 2097|    906|        auto it = range.begin();
 2098|       |
 2099|    906|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|    906|            auto seg = get_contiguous_beginning(range);
 2101|    906|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|    906|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 906]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|    906|            ranges::advance(it, seg.size());
 2106|    906|        }
 2107|       |
 2108|    906|        return read_until_code_point(
 2109|    906|            ranges::subrange{it, range.end()},
 2110|    906|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|    906|    }
 2112|    906|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS1_15take_width_viewINS6_ISA_SA_EEE8sentinelILb1EEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NS1_12function_refIFbDiESQ_EE:
 2060|    906|{
 2061|    906|    auto it = range.begin();
 2062|  58.6k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 57.9k, False: 654]
  ------------------
 2063|  57.9k|        const auto val =
 2064|  57.9k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  57.9k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  57.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 51.8k, False: 6.08k]
  |  |  ------------------
  ------------------
 2066|  51.8k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  51.8k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  51.8k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 252, False: 51.6k]
  ------------------
 2069|    252|                return it;
 2070|    252|            }
 2071|  51.8k|        }
 2072|  57.6k|        it = val.iterator;
 2073|  57.6k|    }
 2074|       |
 2075|    654|    return it;
 2076|    906|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_:
  753|    906|    {
  754|    906|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_SN_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEDiE_clESS_Di:
  743|  51.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.8k|              cvref<T> obj = *get<T>(fn);
  745|  51.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  51.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  51.8k|              }
  748|  51.8k|              else {
  749|  51.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.8k|              }
  751|  51.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_EUlDiE_EEDaNS3_7storageE:
  683|  51.8k|    {
  684|  51.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  51.8k|            return static_cast<T*>(s.m_cp);
  686|  51.8k|        }
  687|  51.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  51.8k|            return static_cast<T*>(s.m_p);
  689|  51.8k|        }
  690|  51.8k|        else {
  691|  51.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  51.8k|        }
  693|  51.8k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_ENKUlDiE_clEDi:
 2110|  51.8k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_LPv0EEEPSI_:
  661|    906|        {
  662|    906|        }
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4947|     38|    {
 4948|     38|        return read_impl(
 4949|     38|            range,
 4950|     38|            [&](const auto& rng) {
 4951|     38|                return read_string_impl(rng, read_all(rng), value);
 4952|     38|            },
 4953|     38|            detail::priority_tag<1>{});
 4954|     38|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4974|     38|    {
 4975|     38|        return read_cb(range);
 4976|     38|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4950|     38|            [&](const auto& rng) {
 4951|     38|                return read_string_impl(rng, read_all(rng), value);
 4952|     38|            },
_ZN3scn2v34impl8read_allINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_:
 1838|    114|{
 1839|    114|    return ranges::next(range.begin(), range.end());
 1840|    114|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcS9_EENS5_15take_width_viewINS1_6detail9subrange_8subrangeIS9_S9_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EESL_E4typeESL_SM_:
  312|    114|    {
  313|    114|        ranges::advance(x, bound);
  314|    114|        return x;
  315|    114|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SL_EEvE4typeERSL_SM_:
  274|    114|    {
  275|    114|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    114|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sINS0_4impl27counted_width_iterator_impl22counted_width_iteratorIPKcSA_EENS6_15take_width_viewINS2_9subrange_8subrangeISA_SA_EEE8sentinelILb1EEEEEvRT_T0_NS0_6detail12priority_tagILm0EEE:
  202|    114|    {
  203|  3.28k|        while (i != bound) {
  ------------------
  |  Branch (203:16): [True: 3.16k, False: 114]
  ------------------
  204|  3.16k|            ++i;
  205|  3.16k|        }
  206|    114|    }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5048|    280|    {
 5049|    280|        auto it = read_source_impl(range, {specs});
 5050|    280|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 270]
  |  |  ------------------
  ------------------
 5051|     10|            return unexpected(it.error());
 5052|     10|        }
 5053|       |
 5054|    270|        return read_string_impl(range, *it, value);
 5055|    280|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperE:
 5153|    840|    {
 5154|    840|        const bool is_inverted = helper.specs.charset_is_inverted;
 5155|    840|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5156|       |
 5157|    840|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    840|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 840]
  |  |  ------------------
  ------------------
 5158|      0|            return unexpected(e);
 5159|      0|        }
 5160|       |
 5161|    840|        read_source_callback cb_wrapper{helper};
 5162|       |
 5163|    840|        if (accepts_nonascii) {
  ------------------
  |  Branch (5163:13): [True: 630, False: 210]
  ------------------
 5164|    630|            const auto cb = [&](char32_t cp) {
 5165|    630|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|    630|            };
 5167|       |
 5168|    630|            if (is_inverted) {
  ------------------
  |  Branch (5168:17): [True: 66, False: 564]
  ------------------
 5169|     66|                auto it = read_until_code_point(range, cb);
 5170|     66|                return check_nonempty(it, range);
 5171|     66|            }
 5172|    564|            auto it = read_while_code_point(range, cb);
 5173|    564|            return check_nonempty(it, range);
 5174|    630|        }
 5175|       |
 5176|    210|        const auto cb = [&](SourceCharT ch) {
 5177|    210|            return cb_wrapper.on_ascii_only(ch);
 5178|    210|        };
 5179|       |
 5180|    210|        if (is_inverted) {
  ------------------
  |  Branch (5180:13): [True: 162, False: 48]
  ------------------
 5181|    162|            auto it = read_until_code_unit(range, cb);
 5182|    162|            return check_nonempty(it, range);
 5183|    162|        }
 5184|     48|        auto it = read_while_code_unit(range, cb);
 5185|     48|        return check_nonempty(it, range);
 5186|    210|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_:
  753|    630|    {
  754|    630|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   115k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   115k|              cvref<T> obj = *get<T>(fn);
  745|   115k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   115k|                  obj(static_cast<decltype(args)>(args)...);
  747|   115k|              }
  748|   115k|              else {
  749|   115k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   115k|              }
  751|   115k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   115k|    {
  684|   115k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   115k|            return static_cast<T*>(s.m_cp);
  686|   115k|        }
  687|   115k|        else if constexpr (std::is_object_v<T>) {
  688|   115k|            return static_cast<T*>(s.m_p);
  689|   115k|        }
  690|   115k|        else {
  691|   115k|            return reinterpret_cast<T*>(s.m_fp);
  692|   115k|        }
  693|   115k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlDiE_clEDi:
 5164|   115k|            const auto cb = [&](char32_t cp) {
 5165|   115k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|   115k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlDiE_LPv0EEEPKSL_:
  666|    630|        {
  667|    630|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS1_27counted_width_iterator_impl22counted_width_iteratorIPKcS8_EENS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIS8_S8_EEEEEENS0_13scan_expectedIT_EERKSI_T0_:
 5191|    840|    {
 5192|    840|        if (it == range.begin()) {
  ------------------
  |  Branch (5192:13): [True: 30, False: 810]
  ------------------
 5193|     30|            return unexpected_scan_error(
 5194|     30|                scan_error::invalid_scanned_value,
 5195|     30|                "No characters matched in [character set]");
 5196|     30|        }
 5197|       |
 5198|    810|        return it;
 5199|    840|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_:
  753|    210|    {
  754|    210|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_ST_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  2.16k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.16k|              cvref<T> obj = *get<T>(fn);
  745|  2.16k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.16k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.16k|              }
  748|  2.16k|              else {
  749|  2.16k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.16k|              }
  751|  2.16k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  2.16k|    {
  684|  2.16k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.16k|            return static_cast<T*>(s.m_cp);
  686|  2.16k|        }
  687|  2.16k|        else if constexpr (std::is_object_v<T>) {
  688|  2.16k|            return static_cast<T*>(s.m_p);
  689|  2.16k|        }
  690|  2.16k|        else {
  691|  2.16k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.16k|        }
  693|  2.16k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS3_12specs_helperEENKUlcE_clEc:
 5176|  2.16k|        const auto cb = [&](SourceCharT ch) {
 5177|  2.16k|            return cb_wrapper.on_ascii_only(ch);
 5178|  2.16k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSF_EEEEEENS0_13scan_expectedIDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS7_12specs_helperEEUlcE_LPv0EEEPKSL_:
  666|    210|        {
  667|    210|        }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4752|    270|{
 4753|    270|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    270|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    270|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 70, False: 200]
  ------------------
 4757|     70|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|     70|                                     "Invalid encoding in scanned string");
 4759|     70|    }
 4760|    200|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    200|    static_cast<    \
  |  |  929|    200|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    200|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    200|    return SCN_MOVE(result);
  ------------------
  |  |  928|    200|    static_cast<    \
  |  |  929|    200|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    200|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4891|     72|    {
 4892|     72|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     72|    }                                                  \
  |  |  |  | 3642|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4893|      0|        return read_string_impl(range, it, value);
 4894|     72|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4913|    216|    {
 4914|    216|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|    432|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|    216|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4915:23): [Folded - Ignored]
  ------------------
 4916|    216|            return unexpected_scan_error(
 4917|    216|                scan_error::invalid_scanned_value,
 4918|    216|                "Regex backend doesn't support wide strings as input");
 4919|    216|        }
 4920|    216|        else {
 4921|    216|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4921:17): [True: 216, False: 0]
  ------------------
 4922|    216|                return unexpected_scan_error(
 4923|    216|                    scan_error::invalid_scanned_value,
 4924|    216|                    "Cannot use regex with a non-contiguous source "
 4925|    216|                    "range");
 4926|    216|            }
 4927|       |
 4928|      0|            auto input = get_as_contiguous(range);
 4929|      0|            SCN_TRY(it,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4930|      0|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4931|      0|            return ranges::next(range.begin(),
 4932|      0|                                ranges::distance(input.begin(), it));
 4933|      0|        }
 4934|    216|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEbT_:
  958|    216|{
  959|    216|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|    216|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|    216|        return true;
  962|    216|    }
  963|    216|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (963:24): [Folded - Ignored]
  ------------------
  964|    216|                           ranges::const_iterator_t<Range>,
  965|    216|                           typename detail::basic_scan_buffer<
  966|    216|                               detail::char_t<Range>>::forward_iterator>) {
  967|    216|        auto beg = r.begin();
  968|    216|        if (!beg.stores_parent()) {
  969|    216|            return true;
  970|    216|        }
  971|    216|        return beg.parent()->is_contiguous();
  972|    216|    }
  973|    216|    else {
  974|    216|        return false;
  975|    216|    }
  976|    216|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|  4.61k|    {
 5278|  4.61k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.61k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  4.61k|        return read_impl(range, specs, value);
 5280|  4.61k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|  4.61k|    {
 5296|  4.61k|        SCN_CLANG_PUSH
 5297|  4.61k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  4.61k|        switch (m_type) {
 5300|    298|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 298, False: 4.31k]
  ------------------
 5301|    298|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|     70|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 70, False: 4.54k]
  ------------------
 5304|     70|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|     70|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 4.61k]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  1.07k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 1.07k, False: 3.54k]
  ------------------
 5311|  1.07k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  1.07k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|  2.94k|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 2.94k, False: 1.67k]
  ------------------
 5316|  2.94k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|  2.94k|                    range, specs.charset_string<SourceCharT>(),
 5318|  2.94k|                    specs.regexp_flags, value);
 5319|       |
 5320|    232|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 232, False: 4.38k]
  ------------------
 5321|    232|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|    232|                    range,
 5323|    232|                    get_unescaped_regex_pattern(
 5324|    232|                        specs.charset_string<SourceCharT>()),
 5325|    232|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 4.61k]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  4.61k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  4.61k|        }
 5332|       |
 5333|  4.61k|        SCN_CLANG_POP
 5334|  4.61k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|    968|    {
 4821|    968|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|    968|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|  1.03k|{
 4753|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  1.03k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  1.03k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 340, False: 698]
  ------------------
 4757|    340|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    340|                                     "Invalid encoding in scanned string");
 4759|    340|    }
 4760|    698|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    698|    static_cast<    \
  |  |  929|    698|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    698|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    698|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 698]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    698|    return SCN_MOVE(result);
  ------------------
  |  |  928|    698|    static_cast<    \
  |  |  929|    698|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    698|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.91k|{
 3012|  1.91k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.91k|        dest.assign(source.view());
 3014|  1.91k|    }
 3015|  1.91k|    else {
 3016|  1.91k|        return transcode_impl(source.view(), dest);
 3017|  1.91k|    }
 3018|       |
 3019|  1.91k|    return {};
 3020|  1.91k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.90k|{
 2088|  2.90k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  2.90k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  2.90k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  2.90k|        auto buf = make_contiguous_buffer(range);
 2092|  2.90k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  2.90k|        return ranges::next(range.begin(),
 2094|  2.90k|                            ranges::distance(buf.view().begin(), it));
 2095|  2.90k|    }
 2096|  2.90k|    else {
 2097|  2.90k|        auto it = range.begin();
 2098|       |
 2099|  2.90k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|  2.90k|            auto seg = get_contiguous_beginning(range);
 2101|  2.90k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  2.90k|                seg_it != seg.end()) {
 2103|  2.90k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  2.90k|            }
 2105|  2.90k|            ranges::advance(it, seg.size());
 2106|  2.90k|        }
 2107|       |
 2108|  2.90k|        return read_until_code_point(
 2109|  2.90k|            ranges::subrange{it, range.end()},
 2110|  2.90k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.90k|    }
 2112|  2.90k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4841|     70|    {
 4842|     70|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4842:13): [True: 44, False: 26]
  ------------------
 4843|     44|            return read_string_impl(
 4844|     44|                range,
 4845|     44|                read_until_code_unit(
 4846|     44|                    range,
 4847|     44|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4848|     44|                        SourceCharT ch) { return ch == until; }),
 4849|     44|                value);
 4850|     44|        }
 4851|     26|        return read_string_impl(
 4852|     26|            range,
 4853|     26|            read_until_code_units(
 4854|     26|                range, specs.fill.template get_code_units<SourceCharT>()),
 4855|     26|            value);
 4856|     70|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     44|    {
  754|     44|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    994|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    994|              cvref<T> obj = *get<T>(fn);
  745|    994|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    994|                  obj(static_cast<decltype(args)>(args)...);
  747|    994|              }
  748|    994|              else {
  749|    994|                  return obj(static_cast<decltype(args)>(args)...);
  750|    994|              }
  751|    994|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    994|    {
  684|    994|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    994|            return static_cast<T*>(s.m_cp);
  686|    994|        }
  687|    994|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    994|            return static_cast<T*>(s.m_p);
  689|    994|        }
  690|    994|        else {
  691|    994|            return reinterpret_cast<T*>(s.m_fp);
  692|    994|        }
  693|    994|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4848|    994|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     44|        {
  662|     44|        }
_ZN3scn2v34impl21read_until_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEESG_RKT0_:
 2006|     78|{
 2007|     78|    static_assert(ranges::common_range<CodeUnits>);
 2008|       |
 2009|     78|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (2009:19): [Folded - Ignored]
  ------------------
 2010|     78|        return std::search(range.begin(), range.end(), needle.begin(),
 2011|     78|                           needle.end());
 2012|     78|    }
 2013|     78|    else {
 2014|     78|        auto first = range.begin();
 2015|     78|        while (true) {
 2016|     78|            auto it = first;
 2017|     78|            for (auto needle_it = needle.begin();; ++it, (void)++needle_it) {
 2018|     78|                if (needle_it == needle.end()) {
 2019|     78|                    return first;
 2020|     78|                }
 2021|     78|                if (it == range.end()) {
 2022|     78|                    return it;
 2023|     78|                }
 2024|     78|                if (*it != *needle_it) {
 2025|     78|                    break;
 2026|     78|                }
 2027|     78|            }
 2028|     78|            ++first;
 2029|     78|        }
 2030|     78|    }
 2031|     78|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5048|  1.07k|    {
 5049|  1.07k|        auto it = read_source_impl(range, {specs});
 5050|  1.07k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266, False: 806]
  |  |  ------------------
  ------------------
 5051|    266|            return unexpected(it.error());
 5052|    266|        }
 5053|       |
 5054|    806|        return read_string_impl(range, *it, value);
 5055|  1.07k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5153|  3.21k|    {
 5154|  3.21k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5155|  3.21k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5156|       |
 5157|  3.21k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.21k]
  |  |  ------------------
  ------------------
 5158|      0|            return unexpected(e);
 5159|      0|        }
 5160|       |
 5161|  3.21k|        read_source_callback cb_wrapper{helper};
 5162|       |
 5163|  3.21k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5163:13): [True: 2.82k, False: 390]
  ------------------
 5164|  2.82k|            const auto cb = [&](char32_t cp) {
 5165|  2.82k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|  2.82k|            };
 5167|       |
 5168|  2.82k|            if (is_inverted) {
  ------------------
  |  Branch (5168:17): [True: 282, False: 2.54k]
  ------------------
 5169|    282|                auto it = read_until_code_point(range, cb);
 5170|    282|                return check_nonempty(it, range);
 5171|    282|            }
 5172|  2.54k|            auto it = read_while_code_point(range, cb);
 5173|  2.54k|            return check_nonempty(it, range);
 5174|  2.82k|        }
 5175|       |
 5176|    390|        const auto cb = [&](SourceCharT ch) {
 5177|    390|            return cb_wrapper.on_ascii_only(ch);
 5178|    390|        };
 5179|       |
 5180|    390|        if (is_inverted) {
  ------------------
  |  Branch (5180:13): [True: 180, False: 210]
  ------------------
 5181|    180|            auto it = read_until_code_unit(range, cb);
 5182|    180|            return check_nonempty(it, range);
 5183|    180|        }
 5184|    210|        auto it = read_while_code_unit(range, cb);
 5185|    210|        return check_nonempty(it, range);
 5186|    390|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  2.82k|{
 2061|  2.82k|    auto it = range.begin();
 2062|   536k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 535k, False: 276]
  ------------------
 2063|   535k|        const auto val =
 2064|   535k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   535k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   535k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 532k, False: 3.16k]
  |  |  ------------------
  ------------------
 2066|   532k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   532k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   532k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.55k, False: 530k]
  ------------------
 2069|  2.55k|                return it;
 2070|  2.55k|            }
 2071|   532k|        }
 2072|   533k|        it = val.iterator;
 2073|   533k|    }
 2074|       |
 2075|    276|    return it;
 2076|  2.82k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   535k|{
 1899|   535k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   535k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   535k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   535k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   535k|    auto it = range.begin();
 1903|   535k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   535k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.16k, False: 532k]
  |  |  ------------------
  ------------------
 1906|  3.16k|        ++it;
 1907|  3.16k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  3.16k|        return {it, {}};
 1909|  3.16k|    }
 1910|       |
 1911|   532k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 475k, False: 57.4k]
  ------------------
 1912|   475k|        ++it;
 1913|   475k|        return {it, string_type(1, *range.begin())};
 1914|   475k|    }
 1915|       |
 1916|  57.4k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  57.4k|    return {it, string_type{range.begin(), it}};
 1918|   532k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1154|  3.16k|{
 1155|  3.16k|    auto it = input.begin();
 1156|  12.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 12.2k, False: 102]
  ------------------
 1157|  12.2k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 3.06k, False: 9.16k]
  ------------------
 1158|  3.06k|            break;
 1159|  3.06k|        }
 1160|  12.2k|    }
 1161|  3.16k|    return it;
 1162|  3.16k|}
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeERSA_SE_SB_:
  282|  57.4k|    {
  283|  57.4k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  57.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeERSB_SE_SA_:
  211|  57.4k|    {
  212|  57.4k|        if (fn::abs(n) >= fn::abs(bound - i)) {
  ------------------
  |  Branch (212:13): [True: 42, False: 57.4k]
  ------------------
  213|     42|            auto dist = bound - i;
  214|     42|            fn::impl_i_s(i, bound, priority_tag<2>{});
  215|     42|            return dist;
  216|     42|        }
  217|  57.4k|        fn::impl_i_n(i, n, priority_tag<1>{});
  218|  57.4k|        return n;
  219|  57.4k|    }
_ZN3scn2v36ranges6detail8advance_2fn3absIlEET_S6_:
  131|   114k|    {
  132|   114k|        if (t < T{0}) {
  ------------------
  |  Branch (132:13): [True: 0, False: 114k]
  ------------------
  133|      0|            return -t;
  134|      0|        }
  135|   114k|        return t;
  136|   114k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKccE8is_validEv:
 1889|   535k|    {
 1890|   535k|        return !codepoint.empty();
 1891|   535k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_:
  753|  2.82k|    {
  754|  2.82k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESX_Di:
  743|   532k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   532k|              cvref<T> obj = *get<T>(fn);
  745|   532k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   532k|                  obj(static_cast<decltype(args)>(args)...);
  747|   532k|              }
  748|   532k|              else {
  749|   532k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   532k|              }
  751|   532k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlDiE_EEDaNS3_7storageE:
  683|   532k|    {
  684|   532k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   532k|            return static_cast<T*>(s.m_cp);
  686|   532k|        }
  687|   532k|        else if constexpr (std::is_object_v<T>) {
  688|   532k|            return static_cast<T*>(s.m_p);
  689|   532k|        }
  690|   532k|        else {
  691|   532k|            return reinterpret_cast<T*>(s.m_fp);
  692|   532k|        }
  693|   532k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlDiE_clEDi:
 5164|   532k|            const auto cb = [&](char32_t cp) {
 5165|   532k|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5166|   532k|            };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlDiE_LPv0EEEPKSJ_:
  666|  2.82k|        {
  667|  2.82k|        }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5191|  3.21k|    {
 5192|  3.21k|        if (it == range.begin()) {
  ------------------
  |  Branch (5192:13): [True: 798, False: 2.41k]
  ------------------
 5193|    798|            return unexpected_scan_error(
 5194|    798|                scan_error::invalid_scanned_value,
 5195|    798|                "No characters matched in [character set]");
 5196|    798|        }
 5197|       |
 5198|  2.41k|        return it;
 5199|  3.21k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.54k|{
 2082|  2.54k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.54k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|    390|    {
  754|    390|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  4.39k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.39k|              cvref<T> obj = *get<T>(fn);
  745|  4.39k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  4.39k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.39k|              }
  748|  4.39k|              else {
  749|  4.39k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.39k|              }
  751|  4.39k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.39k|    {
  684|  4.39k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  4.39k|            return static_cast<T*>(s.m_cp);
  686|  4.39k|        }
  687|  4.39k|        else if constexpr (std::is_object_v<T>) {
  688|  4.39k|            return static_cast<T*>(s.m_p);
  689|  4.39k|        }
  690|  4.39k|        else {
  691|  4.39k|            return reinterpret_cast<T*>(s.m_fp);
  692|  4.39k|        }
  693|  4.39k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5176|  4.39k|        const auto cb = [&](SourceCharT ch) {
 5177|  4.39k|            return cb_wrapper.on_ascii_only(ch);
 5178|  4.39k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|    390|        {
  667|    390|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4752|  1.34k|{
 4753|  1.34k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  1.34k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  1.34k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 126, False: 1.21k]
  ------------------
 4757|    126|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    126|                                     "Invalid encoding in scanned string");
 4759|    126|    }
 4760|  1.21k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|  1.21k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.21k]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|  1.21k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|  1.21k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4891|  3.17k|    {
 4892|  3.17k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|  3.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.64k, False: 534]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.64k|    }                                                  \
  |  |  |  | 3642|  3.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    534|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4893|    534|        return read_string_impl(range, it, value);
 4894|  3.17k|    }
_ZN3scn2v34impl24regex_string_reader_implIcE4implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsE:
 4913|  9.52k|    {
 4914|  9.52k|        if constexpr (!SCN_REGEX_SUPPORTS_WIDE_STRINGS &&
  ------------------
  |  |   89|  19.0k|#define SCN_REGEX_SUPPORTS_WIDE_STRINGS 1
  ------------------
  |  Branch (4914:23): [Folded - Ignored]
  |  Branch (4914:23): [Folded - Ignored]
  ------------------
 4915|  9.52k|                      !std::is_same_v<SourceCharT, char>) {
  ------------------
  |  Branch (4915:23): [Folded - Ignored]
  ------------------
 4916|  9.52k|            return unexpected_scan_error(
 4917|  9.52k|                scan_error::invalid_scanned_value,
 4918|  9.52k|                "Regex backend doesn't support wide strings as input");
 4919|  9.52k|        }
 4920|  9.52k|        else {
 4921|  9.52k|            if (!is_entire_source_contiguous(range)) {
  ------------------
  |  Branch (4921:17): [True: 0, False: 9.52k]
  ------------------
 4922|      0|                return unexpected_scan_error(
 4923|      0|                    scan_error::invalid_scanned_value,
 4924|      0|                    "Cannot use regex with a non-contiguous source "
 4925|      0|                    "range");
 4926|      0|            }
 4927|       |
 4928|  9.52k|            auto input = get_as_contiguous(range);
 4929|  9.52k|            SCN_TRY(it,
  ------------------
  |  | 3643|  9.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  9.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  9.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.92k, False: 1.60k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  7.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  7.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  7.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  7.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  7.92k|    }                                                  \
  |  |  |  | 3642|  9.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.60k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4930|  1.60k|                    read_regex_string_impl<SourceCharT>(pattern, flags, input));
 4931|  1.60k|            return ranges::next(range.begin(),
 4932|  1.60k|                                ranges::distance(input.begin(), it));
 4933|  9.52k|        }
 4934|  9.52k|    }
_ZN3scn2v34impl27is_entire_source_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  958|  9.52k|{
  959|  9.52k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (959:19): [Folded - Ignored]
  |  Branch (959:19): [Folded - Ignored]
  ------------------
  960|  9.52k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (960:19): [Folded - Ignored]
  ------------------
  961|  9.52k|        return true;
  962|  9.52k|    }
  963|  9.52k|    else if constexpr (std::is_same_v<
  964|  9.52k|                           ranges::const_iterator_t<Range>,
  965|  9.52k|                           typename detail::basic_scan_buffer<
  966|  9.52k|                               detail::char_t<Range>>::forward_iterator>) {
  967|  9.52k|        auto beg = r.begin();
  968|  9.52k|        if (!beg.stores_parent()) {
  969|  9.52k|            return true;
  970|  9.52k|        }
  971|  9.52k|        return beg.parent()->is_contiguous();
  972|  9.52k|    }
  973|  9.52k|    else {
  974|  9.52k|        return false;
  975|  9.52k|    }
  976|  9.52k|}
_ZN3scn2v34impl17get_as_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaT_:
 1064|  9.52k|{
 1065|  9.52k|    SCN_EXPECT(is_segment_contiguous(r));
  ------------------
  |  |  924|  9.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1066|       |
 1067|  9.52k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1067:19): [Folded - Ignored]
  |  Branch (1067:19): [Folded - Ignored]
  ------------------
 1068|  9.52k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1068:19): [Folded - Ignored]
  ------------------
 1069|  9.52k|        return r;
 1070|  9.52k|    }
 1071|  9.52k|    else if constexpr (std::is_same_v<
 1072|  9.52k|                           ranges::const_iterator_t<Range>,
 1073|  9.52k|                           typename detail::basic_scan_buffer<
 1074|  9.52k|                               detail::char_t<Range>>::forward_iterator>) {
 1075|  9.52k|        if constexpr (ranges::common_range<Range>) {
 1076|  9.52k|            return detail::make_string_view_from_pointers(
 1077|  9.52k|                r.begin().to_contiguous_segment_iterator(),
 1078|  9.52k|                r.end().to_contiguous_segment_iterator());
 1079|  9.52k|        }
 1080|  9.52k|        else {
 1081|  9.52k|            return r.begin().contiguous_segment();
 1082|  9.52k|        }
 1083|  9.52k|    }
 1084|  9.52k|    else {
 1085|  9.52k|        SCN_EXPECT(false);
 1086|  9.52k|        SCN_UNREACHABLE;
 1087|       |        // for return type deduction
 1088|  9.52k|        return std::basic_string_view<detail::char_t<Range>>{};
 1089|  9.52k|    }
 1090|  9.52k|}
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  980|  9.52k|{
  981|  9.52k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  9.52k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  9.52k|        return true;
  984|  9.52k|    }
  985|  9.52k|    else if constexpr (std::is_same_v<
  986|  9.52k|                           ranges::const_iterator_t<Range>,
  987|  9.52k|                           typename detail::basic_scan_buffer<
  988|  9.52k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  9.52k|        auto beg = r.begin();
  990|  9.52k|        if (beg.contiguous_segment().empty()) {
  991|  9.52k|            return false;
  992|  9.52k|        }
  993|  9.52k|        if constexpr (ranges::common_range<Range>) {
  994|  9.52k|            return beg.contiguous_segment().end() ==
  995|  9.52k|                   ranges::end(r).contiguous_segment().end();
  996|  9.52k|        }
  997|  9.52k|        else {
  998|  9.52k|            if (beg.stores_parent()) {
  999|  9.52k|                return beg.contiguous_segment().end() ==
 1000|  9.52k|                       beg.parent()->current_view().end();
 1001|  9.52k|            }
 1002|  9.52k|            return true;
 1003|  9.52k|        }
 1004|  9.52k|    }
 1005|  9.52k|    else {
 1006|  9.52k|        return false;
 1007|  9.52k|    }
 1008|  9.52k|}
_ZN3scn2v34impl22read_regex_string_implIcNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT0_EEEEEENSt3__117basic_string_viewIT_NSF_11char_traitsISH_EEEENS0_6detail11regex_flagsESB_:
 4346|  9.52k|{
 4347|  9.52k|    static_assert(ranges::contiguous_range<Input> &&
 4348|  9.52k|                  ranges::borrowed_range<Input> &&
 4349|  9.52k|                  std::is_same_v<ranges::range_value_t<Input>, CharT>);
 4350|       |
 4351|  9.52k|#if SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_STD
 4352|  9.52k|    std::basic_regex<CharT> re{};
 4353|  9.52k|    try {
 4354|  9.52k|        SCN_TRY(re_flags, make_regex_flags(flags));
  ------------------
  |  | 3643|  9.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  9.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  9.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.52k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  9.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4355|  9.52k|        re = std::basic_regex<CharT>{pattern.data(), pattern.size(),
 4356|  9.52k|                                     re_flags | std::regex_constants::nosubs};
 4357|  9.52k|    }
 4358|  9.52k|    catch (const std::regex_error& err) {
 4359|  5.07k|        return unexpected_scan_error(scan_error::invalid_format_string,
 4360|  5.07k|                                     "Invalid regex");
 4361|  5.07k|    }
 4362|       |
 4363|  4.45k|    std::match_results<const CharT*> matches{};
 4364|  4.45k|    try {
 4365|  4.45k|        bool found = std::regex_search(input.data(),
 4366|  4.45k|                                       input.data() + input.size(), matches, re,
 4367|  4.45k|                                       std::regex_constants::match_continuous);
 4368|  4.45k|        if (!found || matches.prefix().matched) {
  ------------------
  |  Branch (4368:13): [True: 2.85k, False: 1.60k]
  |  Branch (4368:23): [True: 0, False: 1.60k]
  ------------------
 4369|  2.68k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4370|  2.68k|                                         "Regular expression didn't match");
 4371|  2.68k|        }
 4372|  4.45k|    }
 4373|  4.45k|    catch (const std::regex_error& err) {
 4374|    168|        return unexpected_scan_error(scan_error::invalid_format_string,
 4375|    168|                                     "Regex matching failed with an error");
 4376|    168|    }
 4377|       |
 4378|  1.60k|    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4379|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_BOOST
 4380|       |    auto re =
 4381|       |#if SCN_REGEX_BOOST_USE_ICU
 4382|       |        boost::make_u32regex(pattern.data(), pattern.data() + pattern.size(),
 4383|       |                             make_regex_flags(flags) |
 4384|       |                                 boost::regex_constants::no_except |
 4385|       |                                 boost::regex_constants::nosubs);
 4386|       |#else
 4387|       |        boost::basic_regex<CharT>{pattern.data(), pattern.size(),
 4388|       |                                  make_regex_flags(flags) |
 4389|       |                                      boost::regex_constants::no_except |
 4390|       |                                      boost::regex_constants::nosubs};
 4391|       |#endif
 4392|       |    if (re.status() != 0) {
 4393|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4394|       |                                     "Invalid regex");
 4395|       |    }
 4396|       |
 4397|       |    boost::match_results<const CharT*> matches{};
 4398|       |    try {
 4399|       |        bool found =
 4400|       |#if SCN_REGEX_BOOST_USE_ICU
 4401|       |            boost::u32regex_search(input.data(), input.data() + input.size(),
 4402|       |                                   matches, re,
 4403|       |                                   boost::regex_constants::match_continuous);
 4404|       |#else
 4405|       |            boost::regex_search(input.data(), input.data() + input.size(),
 4406|       |                                matches, re,
 4407|       |                                boost::regex_constants::match_continuous);
 4408|       |#endif
 4409|       |        if (!found || matches.prefix().matched) {
 4410|       |            return unexpected_scan_error(scan_error::invalid_scanned_value,
 4411|       |                                         "Regular expression didn't match");
 4412|       |        }
 4413|       |    }
 4414|       |    catch (const std::runtime_error& err) {
 4415|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4416|       |                                     "Regex matching failed with an error");
 4417|       |    }
 4418|       |
 4419|       |    return input.begin() + ranges::distance(input.data(), matches[0].second);
 4420|       |#elif SCN_REGEX_BACKEND == SCN_REGEX_BACKEND_RE2
 4421|       |    static_assert(std::is_same_v<CharT, char>);
 4422|       |    std::string flagged_pattern{};
 4423|       |    auto re = [&]() {
 4424|       |        auto [opts, flagstr] = make_regex_flags(flags);
 4425|       |        opts.set_never_capture(true);
 4426|       |        if (flagstr.empty()) {
 4427|       |            return re2::RE2{pattern, opts};
 4428|       |        }
 4429|       |        flagged_pattern.reserve(flagstr.size() + pattern.size());
 4430|       |        flagged_pattern.append(flagstr);
 4431|       |        flagged_pattern.append(pattern);
 4432|       |        return re2::RE2{flagged_pattern, opts};
 4433|       |    }();
 4434|       |    if (!re.ok()) {
 4435|       |        return unexpected_scan_error(scan_error::invalid_format_string,
 4436|       |                                     "Failed to parse regular expression");
 4437|       |    }
 4438|       |
 4439|       |    auto new_input = detail::make_string_view_from_pointers(
 4440|       |        detail::to_address(input.begin()), detail::to_address(input.end()));
 4441|       |    bool found = re2::RE2::Consume(&new_input, re);
 4442|       |    if (!found) {
 4443|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4444|       |                                     "Regular expression didn't match");
 4445|       |    }
 4446|       |    return input.begin() + ranges::distance(input.data(), new_input.data());
 4447|       |#endif  // SCN_REGEX_BACKEND == ...
 4448|  4.45k|}
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEcEEDav:
 5809|  6.08k|{
 5810|  6.08k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  6.08k|        return reader_impl_for_bool<CharT>{};
 5812|  6.08k|    }
 5813|  6.08k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  6.08k|        return reader_impl_for_char<CharT>{};
 5815|  6.08k|    }
 5816|  6.08k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  6.08k|        return reader_impl_for_wchar<CharT>{};
 5818|  6.08k|    }
 5819|  6.08k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  6.08k|        return reader_impl_for_code_point<CharT>{};
 5821|  6.08k|    }
 5822|  6.08k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.08k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  6.08k|        return reader_impl_for_string<CharT>{};
 5825|  6.08k|    }
 5826|  6.08k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  6.08k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  6.08k|        return reader_impl_for_string<CharT>{};
 5829|  6.08k|    }
 5830|  6.08k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  6.08k|                       std::is_same_v<T, wregex_matches>) {
 5832|  6.08k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  6.08k|    }
 5834|  6.08k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  6.08k|        return reader_impl_for_voidptr<CharT>{};
 5836|  6.08k|    }
 5837|  6.08k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  6.08k|        return reader_impl_for_float<CharT>{};
 5839|  6.08k|    }
 5840|  6.08k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  6.08k|                       !std::is_same_v<T, wchar_t> &&
 5842|  6.08k|                       !std::is_same_v<T, char32_t> &&
 5843|  6.08k|                       !std::is_same_v<T, bool>) {
 5844|  6.08k|        return reader_impl_for_int<CharT>{};
 5845|  6.08k|    }
 5846|  6.08k|    else {
 5847|  6.08k|        return reader_impl_for_monostate<CharT>{};
 5848|  6.08k|    }
 5849|  6.08k|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|    350|{
 2993|    350|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|    350|        if (source.stores_allocated_string()) {
 2995|    350|            dest.assign(SCN_MOVE(source.get_allocated_string()));
 2996|    350|        }
 2997|    350|        else {
 2998|    350|            dest.assign(source.view());
 2999|    350|        }
 3000|    350|    }
 3001|    350|    else {
 3002|    350|        return transcode_impl(source.view(), dest);
 3003|    350|    }
 3004|       |
 3005|      0|    return {};
 3006|    350|}
_ZN3scn2v34impl14transcode_implIcwEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|  2.26k|{
 2968|  2.26k|    dst.clear();
 2969|  2.26k|    transcode_valid_to_string(src, dst);
 2970|  2.26k|    return {};
 2971|  2.26k|}
_ZN3scn2v34impl25transcode_valid_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|  2.26k|{
 1403|  2.26k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|  2.26k|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|  2.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|  2.26k|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|  2.26k|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1407:23): [Folded - Ignored]
  ------------------
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|  2.26k|            std::u32string tmp;
 1410|  2.26k|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|  2.26k|            return transcode_to_string_impl_32to16<true>(
 1412|  2.26k|                std::u32string_view{tmp}, dest);
 1413|  2.26k|        }
 1414|  2.26k|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1414:28): [Folded - Ignored]
  ------------------
 1415|  2.26k|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|  2.26k|        }
 1417|  2.26k|    }
 1418|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1419|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1420|      0|            std::u32string tmp;
 1421|      0|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|      0|            return transcode_to_string_impl_32to8<true>(
 1423|      0|                std::u32string_view{tmp}, dest);
 1424|      0|        }
 1425|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|      0|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|      0|        }
 1428|      0|    }
 1429|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1430|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1431|      0|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|      0|        }
 1433|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|      0|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|      0|        }
 1436|      0|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl35transcode_valid_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1276|  2.26k|{
 1277|  2.26k|    static_assert(sizeof(DestCharT) == 4);
 1278|       |
 1279|  2.26k|    auto it = src.begin();
 1280|   211k|    while (it != src.end()) {
  ------------------
  |  Branch (1280:12): [True: 209k, False: 2.26k]
  ------------------
 1281|   209k|        auto res = get_next_code_point_valid(
 1282|   209k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1283|   209k|                                                                 src.end()));
 1284|   209k|        SCN_EXPECT(res.value < detail::invalid_code_point);
  ------------------
  |  |  924|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1285|   209k|        dest.push_back(res.value);
 1286|   209k|        it = detail::make_string_view_iterator(src, res.iterator);
 1287|   209k|    }
 1288|  2.26k|}
_ZN3scn2v34impl25get_next_code_point_validIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1188|   209k|{
 1189|   209k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1190|       |
 1191|   209k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1192|   209k|    SCN_EXPECT(len <= input.size());
  ------------------
  |  |  924|   209k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   209k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1193|       |
 1194|   209k|    return {input.begin() + len,
 1195|   209k|            detail::decode_code_point_exhaustive_valid(input.substr(0, len))};
 1196|   209k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_NST_10locale_refE:
 5277|    692|    {
 5278|    692|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    692|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    692|        return read_impl(range, specs, value);
 5280|    692|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESN_RKNS0_6detail12format_specsERT0_:
 5295|    692|    {
 5296|    692|        SCN_CLANG_PUSH
 5297|    692|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    692|        switch (m_type) {
 5300|    302|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 302, False: 390]
  ------------------
 5301|    302|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 692]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|     38|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 38, False: 654]
  ------------------
 5308|     38|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|    280|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 280, False: 412]
  ------------------
 5311|    280|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|    280|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      2|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 2, False: 690]
  ------------------
 5316|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      2|                    range, specs.charset_string<SourceCharT>(),
 5318|      2|                    specs.regexp_flags, value);
 5319|       |
 5320|     70|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 70, False: 622]
  ------------------
 5321|     70|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|     70|                    range,
 5323|     70|                    get_unescaped_regex_pattern(
 5324|     70|                        specs.charset_string<SourceCharT>()),
 5325|     70|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 692]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    692|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    692|        }
 5332|       |
 5333|    692|        SCN_CLANG_POP
 5334|    692|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4820|    302|    {
 4821|    302|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|    302|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_12basic_stringIT1_NSG_11char_traitsISR_EENSG_9allocatorISR_EEEE:
 4752|    340|{
 4753|    340|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    340|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    340|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 190, False: 150]
  ------------------
 4757|    190|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    190|                                     "Invalid encoding in scanned string");
 4759|    190|    }
 4760|    150|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    150|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    150|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 150]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    150|    return SCN_MOVE(result);
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    150|}
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEE:
 4947|     38|    {
 4948|     38|        return read_impl(
 4949|     38|            range,
 4950|     38|            [&](const auto& rng) {
 4951|     38|                return read_string_impl(rng, read_all(rng), value);
 4952|     38|            },
 4953|     38|            detail::priority_tag<1>{});
 4954|     38|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSZ_OSP_NS0_6detail12priority_tagILm1EEE:
 4974|     38|    {
 4975|     38|        return read_cb(range);
 4976|     38|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_12basic_stringIT0_NSF_11char_traitsISO_EENSF_9allocatorISO_EEEEENKUlRKSH_E_clISD_EEDaSW_:
 4950|     38|            [&](const auto& rng) {
 4951|     38|                return read_string_impl(rng, read_all(rng), value);
 4952|     38|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_12basic_stringIT0_NSF_11char_traitsISS_EENSF_9allocatorISS_EEEE:
 5048|    280|    {
 5049|    280|        auto it = read_source_impl(range, {specs});
 5050|    280|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 270]
  |  |  ------------------
  ------------------
 5051|     10|            return unexpected(it.error());
 5052|     10|        }
 5053|       |
 5054|    270|        return read_string_impl(range, *it, value);
 5055|    280|    }
_ZN3scn2v34impl16read_string_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEwEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_12basic_stringIT1_NSH_11char_traitsISS_EENSH_9allocatorISS_EEEE:
 4752|    270|{
 4753|    270|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|    270|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|    270|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 70, False: 200]
  ------------------
 4757|     70|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|     70|                                     "Invalid encoding in scanned string");
 4759|     70|    }
 4760|    200|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    200|    static_cast<    \
  |  |  929|    200|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    200|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    200|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    200|    return SCN_MOVE(result);
  ------------------
  |  |  928|    200|    static_cast<    \
  |  |  929|    200|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    200|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEwEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSF_12basic_stringIT0_NSO_ISU_EENSF_9allocatorISU_EEEE:
 4891|     72|    {
 4892|     72|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     72|    }                                                  \
  |  |  |  | 3642|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4893|      0|        return read_string_impl(range, it, value);
 4894|     72|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|  4.61k|    {
 5278|  4.61k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.61k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  4.61k|        return read_impl(range, specs, value);
 5280|  4.61k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|  4.61k|    {
 5296|  4.61k|        SCN_CLANG_PUSH
 5297|  4.61k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  4.61k|        switch (m_type) {
 5300|    298|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 298, False: 4.31k]
  ------------------
 5301|    298|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|     70|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 70, False: 4.54k]
  ------------------
 5304|     70|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|     70|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 4.61k]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  1.07k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 1.07k, False: 3.54k]
  ------------------
 5311|  1.07k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  1.07k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|  2.94k|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 2.94k, False: 1.67k]
  ------------------
 5316|  2.94k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|  2.94k|                    range, specs.charset_string<SourceCharT>(),
 5318|  2.94k|                    specs.regexp_flags, value);
 5319|       |
 5320|    232|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 232, False: 4.38k]
  ------------------
 5321|    232|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|    232|                    range,
 5323|    232|                    get_unescaped_regex_pattern(
 5324|    232|                        specs.charset_string<SourceCharT>()),
 5325|    232|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 4.61k]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  4.61k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  4.61k|        }
 5332|       |
 5333|  4.61k|        SCN_CLANG_POP
 5334|  4.61k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|    968|    {
 4821|    968|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|    968|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|  1.03k|{
 4753|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  1.03k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  1.03k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 340, False: 698]
  ------------------
 4757|    340|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    340|                                     "Invalid encoding in scanned string");
 4759|    340|    }
 4760|    698|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    698|    static_cast<    \
  |  |  929|    698|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    698|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    698|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 698]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    698|    return SCN_MOVE(result);
  ------------------
  |  |  928|    698|    static_cast<    \
  |  |  929|    698|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    698|}
_ZN3scn2v34impl22transcode_if_necessaryIcwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.91k|{
 3012|  1.91k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  1.91k|        dest.assign(source.view());
 3014|  1.91k|    }
 3015|  1.91k|    else {
 3016|  1.91k|        return transcode_impl(source.view(), dest);
 3017|  1.91k|    }
 3018|       |
 3019|      0|    return {};
 3020|  1.91k|}
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 4841|     70|    {
 4842|     70|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4842:13): [True: 44, False: 26]
  ------------------
 4843|     44|            return read_string_impl(
 4844|     44|                range,
 4845|     44|                read_until_code_unit(
 4846|     44|                    range,
 4847|     44|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4848|     44|                        SourceCharT ch) { return ch == until; }),
 4849|     44|                value);
 4850|     44|        }
 4851|     26|        return read_string_impl(
 4852|     26|            range,
 4853|     26|            read_until_code_units(
 4854|     26|                range, specs.fill.template get_code_units<SourceCharT>()),
 4855|     26|            value);
 4856|     70|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_:
  753|     44|    {
  754|     44|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_S11_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|    994|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    994|              cvref<T> obj = *get<T>(fn);
  745|    994|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    994|                  obj(static_cast<decltype(args)>(args)...);
  747|    994|              }
  748|    994|              else {
  749|    994|                  return obj(static_cast<decltype(args)>(args)...);
  750|    994|              }
  751|    994|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEwEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsIST_EENSG_9allocatorIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    994|    {
  684|    994|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    994|            return static_cast<T*>(s.m_cp);
  686|    994|        }
  687|    994|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    994|            return static_cast<T*>(s.m_p);
  689|    994|        }
  690|    994|        else {
  691|    994|            return reinterpret_cast<T*>(s.m_fp);
  692|    994|        }
  693|    994|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEEENKUlcE_clEc:
 4848|    994|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_12basic_stringIT0_NSH_11char_traitsISU_EENSH_9allocatorISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     44|        {
  662|     44|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5048|  1.07k|    {
 5049|  1.07k|        auto it = read_source_impl(range, {specs});
 5050|  1.07k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266, False: 806]
  |  |  ------------------
  ------------------
 5051|    266|            return unexpected(it.error());
 5052|    266|        }
 5053|       |
 5054|    806|        return read_string_impl(range, *it, value);
 5055|  1.07k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4752|  1.34k|{
 4753|  1.34k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  1.34k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  1.34k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 126, False: 1.21k]
  ------------------
 4757|    126|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    126|                                     "Invalid encoding in scanned string");
 4759|    126|    }
 4760|  1.21k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|  1.21k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.21k]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|  1.21k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|  1.21k|}
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSD_12basic_stringIT0_NSM_ISS_EENSD_9allocatorISS_EEEE:
 4891|  3.17k|    {
 4892|  3.17k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|  3.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.64k, False: 534]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.64k|    }                                                  \
  |  |  |  | 3642|  3.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    534|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4893|    534|        return read_string_impl(range, it, value);
 4894|  3.17k|    }
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5809|  6.08k|{
 5810|  6.08k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  6.08k|        return reader_impl_for_bool<CharT>{};
 5812|  6.08k|    }
 5813|  6.08k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  6.08k|        return reader_impl_for_char<CharT>{};
 5815|  6.08k|    }
 5816|  6.08k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  6.08k|        return reader_impl_for_wchar<CharT>{};
 5818|  6.08k|    }
 5819|  6.08k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  6.08k|        return reader_impl_for_code_point<CharT>{};
 5821|  6.08k|    }
 5822|  6.08k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  6.08k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  6.08k|        return reader_impl_for_string<CharT>{};
 5825|  6.08k|    }
 5826|  6.08k|    else if constexpr (std::is_same_v<T, std::string> ||
 5827|  6.08k|                       std::is_same_v<T, std::wstring>) {
 5828|  6.08k|        return reader_impl_for_string<CharT>{};
 5829|  6.08k|    }
 5830|  6.08k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  6.08k|                       std::is_same_v<T, wregex_matches>) {
 5832|  6.08k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  6.08k|    }
 5834|  6.08k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  6.08k|        return reader_impl_for_voidptr<CharT>{};
 5836|  6.08k|    }
 5837|  6.08k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  6.08k|        return reader_impl_for_float<CharT>{};
 5839|  6.08k|    }
 5840|  6.08k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  6.08k|                       !std::is_same_v<T, wchar_t> &&
 5842|  6.08k|                       !std::is_same_v<T, char32_t> &&
 5843|  6.08k|                       !std::is_same_v<T, bool>) {
 5844|  6.08k|        return reader_impl_for_int<CharT>{};
 5845|  6.08k|    }
 5846|  6.08k|    else {
 5847|  6.08k|        return reader_impl_for_monostate<CharT>{};
 5848|  6.08k|    }
 5849|  6.08k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|    692|    {
 5278|    692|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    692|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    692|        return read_impl(range, specs, value);
 5280|    692|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEENSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|    692|    {
 5296|    692|        SCN_CLANG_PUSH
 5297|    692|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    692|        switch (m_type) {
 5300|    302|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 302, False: 390]
  ------------------
 5301|    302|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 692]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|     38|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 38, False: 654]
  ------------------
 5308|     38|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|    280|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 280, False: 412]
  ------------------
 5311|    280|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|    280|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      2|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 2, False: 690]
  ------------------
 5316|      2|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      2|                    range, specs.charset_string<SourceCharT>(),
 5318|      2|                    specs.regexp_flags, value);
 5319|       |
 5320|     70|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 70, False: 622]
  ------------------
 5321|     70|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|     70|                    range,
 5323|     70|                    get_unescaped_regex_pattern(
 5324|     70|                        specs.charset_string<SourceCharT>()),
 5325|     70|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 692]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    692|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    692|        }
 5332|       |
 5333|    692|        SCN_CLANG_POP
 5334|    692|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4827|    302|    {
 4828|    302|        return read_string_view_impl(range, read_until_classic_space(range),
 4829|    302|                                     value);
 4830|    302|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEE:
 4773|    340|{
 4774|    340|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|    340|    auto src = [&]() {
 4777|    340|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|    340|            return make_contiguous_buffer(
 4779|    340|                ranges::subrange{range.begin().base(), result.base()});
 4780|    340|        }
 4781|    340|        else {
 4782|    340|            return make_contiguous_buffer(
 4783|    340|                ranges::subrange{range.begin(), result});
 4784|    340|        }
 4785|    340|    }();
 4786|    340|    using src_type = decltype(src);
 4787|       |
 4788|    340|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|    340|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|    340|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|    340|                                     "Cannot read a string_view from "
 4797|    340|                                     "this source range (would require "
 4798|    340|                                     "transcoding)");
 4799|    340|    }
 4800|    340|    else {
 4801|    340|        const auto view = src.view();
 4802|    340|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|    340|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 190, False: 150]
  ------------------
 4805|    190|            return unexpected_scan_error(
 4806|    190|                scan_error::invalid_scanned_value,
 4807|    190|                "Invalid encoding in scanned string_view");
 4808|    190|        }
 4809|       |
 4810|    150|        return SCN_MOVE(result);
  ------------------
  |  |  928|    150|    static_cast<    \
  |  |  929|    150|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|    340|    }
 4812|    340|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_OT0_RNSG_17basic_string_viewIT1_NSG_11char_traitsISR_EEEEENKUlvE_clEv:
 4776|    340|    auto src = [&]() {
 4777|    340|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|    340|            return make_contiguous_buffer(
 4779|    340|                ranges::subrange{range.begin().base(), result.base()});
 4780|    340|        }
 4781|    340|        else {
 4782|    340|            return make_contiguous_buffer(
 4783|    340|                ranges::subrange{range.begin(), result});
 4784|    340|        }
 4785|    340|    }();
_ZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEE:
 4959|     38|    {
 4960|     38|        return read_impl(
 4961|     38|            range,
 4962|     38|            [&](const auto& rng) {
 4963|     38|                return read_string_view_impl(rng, read_all(rng), value);
 4964|     38|            },
 4965|     38|            detail::priority_tag<1>{});
 4966|     38|    }
_ZN3scn2v34impl21character_reader_implIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEZNS3_4readINS1_15take_width_viewISB_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_17basic_string_viewIT0_NSG_11char_traitsISP_EEEEEUlRKSI_E_EENSF_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSH_IRNSD_ISI_EEE4typeEEEEEEERKSX_OSP_NS0_6detail12priority_tagILm1EEE:
 4974|     38|    {
 4975|     38|        return read_cb(range);
 4976|     38|    }
_ZZN3scn2v34impl21character_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RNSF_17basic_string_viewIT0_NSF_11char_traitsISO_EEEEENKUlRKSH_E_clISD_EEDaSU_:
 4962|     38|            [&](const auto& rng) {
 4963|     38|                return read_string_view_impl(rng, read_all(rng), value);
 4964|     38|            },
_ZN3scn2v34impl25character_set_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERNSF_17basic_string_viewIT0_NSF_11char_traitsISS_EEEE:
 5062|    280|    {
 5063|    280|        auto it = read_source_impl(range, {specs});
 5064|    280|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10, False: 270]
  |  |  ------------------
  ------------------
 5065|     10|            return unexpected(it.error());
 5066|     10|        }
 5067|       |
 5068|    270|        return read_string_view_impl(range, *it, value);
 5069|    280|    }
_ZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEE:
 4773|    270|{
 4774|    270|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|    270|    auto src = [&]() {
 4777|    270|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|    270|            return make_contiguous_buffer(
 4779|    270|                ranges::subrange{range.begin().base(), result.base()});
 4780|    270|        }
 4781|    270|        else {
 4782|    270|            return make_contiguous_buffer(
 4783|    270|                ranges::subrange{range.begin(), result});
 4784|    270|        }
 4785|    270|    }();
 4786|    270|    using src_type = decltype(src);
 4787|       |
 4788|    270|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|    270|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|    270|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|    270|                                     "Cannot read a string_view from "
 4797|    270|                                     "this source range (would require "
 4798|    270|                                     "transcoding)");
 4799|    270|    }
 4800|    270|    else {
 4801|    270|        const auto view = src.view();
 4802|    270|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|    270|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 70, False: 200]
  ------------------
 4805|     70|            return unexpected_scan_error(
 4806|     70|                scan_error::invalid_scanned_value,
 4807|     70|                "Invalid encoding in scanned string_view");
 4808|     70|        }
 4809|       |
 4810|    200|        return SCN_MOVE(result);
  ------------------
  |  |  928|    200|    static_cast<    \
  |  |  929|    200|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|    270|    }
 4812|    270|}
_ZZN3scn2v34impl21read_string_view_implINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEERNS1_27counted_width_iterator_impl22counted_width_iteratorIS9_S9_EEcEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_OT0_RNSH_17basic_string_viewIT1_NSH_11char_traitsISS_EEEEENKUlvE_clEv:
 4776|    270|    auto src = [&]() {
 4777|    270|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|    270|            return make_contiguous_buffer(
 4779|    270|                ranges::subrange{range.begin().base(), result.base()});
 4780|    270|        }
 4781|    270|        else {
 4782|    270|            return make_contiguous_buffer(
 4783|    270|                ranges::subrange{range.begin(), result});
 4784|    270|        }
 4785|    270|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEcEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEENS0_6detail11regex_flagsERNSN_IT0_NSO_IST_EEEE:
 4902|     72|    {
 4903|     72|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|     72|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     72|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     72|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     72|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     72|    }                                                  \
  |  |  |  | 3642|     72|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4904|      0|        return read_string_view_impl(range, it, value);
 4905|     72|    }
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5277|  4.61k|    {
 5278|  4.61k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.61k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|  4.61k|        return read_impl(range, specs, value);
 5280|  4.61k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5295|  4.61k|    {
 5296|  4.61k|        SCN_CLANG_PUSH
 5297|  4.61k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|  4.61k|        switch (m_type) {
 5300|    298|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 298, False: 4.31k]
  ------------------
 5301|    298|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|     70|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 70, False: 4.54k]
  ------------------
 5304|     70|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|     70|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 4.61k]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|  1.07k|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 1.07k, False: 3.54k]
  ------------------
 5311|  1.07k|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|  1.07k|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|  2.94k|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 2.94k, False: 1.67k]
  ------------------
 5316|  2.94k|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|  2.94k|                    range, specs.charset_string<SourceCharT>(),
 5318|  2.94k|                    specs.regexp_flags, value);
 5319|       |
 5320|    232|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 232, False: 4.38k]
  ------------------
 5321|    232|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|    232|                    range,
 5323|    232|                    get_unescaped_regex_pattern(
 5324|    232|                        specs.charset_string<SourceCharT>()),
 5325|    232|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 4.61k]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|  4.61k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|  4.61k|        }
 5332|       |
 5333|  4.61k|        SCN_CLANG_POP
 5334|  4.61k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4827|    968|    {
 4828|    968|        return read_string_view_impl(range, read_until_classic_space(range),
 4829|    968|                                     value);
 4830|    968|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4773|  1.03k|{
 4774|  1.03k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|  1.03k|    auto src = [&]() {
 4777|  1.03k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|  1.03k|            return make_contiguous_buffer(
 4779|  1.03k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  1.03k|        }
 4781|  1.03k|        else {
 4782|  1.03k|            return make_contiguous_buffer(
 4783|  1.03k|                ranges::subrange{range.begin(), result});
 4784|  1.03k|        }
 4785|  1.03k|    }();
 4786|  1.03k|    using src_type = decltype(src);
 4787|       |
 4788|  1.03k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|  1.03k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|  1.03k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|  1.03k|                                     "Cannot read a string_view from "
 4797|  1.03k|                                     "this source range (would require "
 4798|  1.03k|                                     "transcoding)");
 4799|  1.03k|    }
 4800|  1.03k|    else {
 4801|  1.03k|        const auto view = src.view();
 4802|  1.03k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|  1.03k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 340, False: 698]
  ------------------
 4805|    340|            return unexpected_scan_error(
 4806|    340|                scan_error::invalid_scanned_value,
 4807|    340|                "Invalid encoding in scanned string_view");
 4808|    340|        }
 4809|       |
 4810|    698|        return SCN_MOVE(result);
  ------------------
  |  |  928|    698|    static_cast<    \
  |  |  929|    698|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|  1.03k|    }
 4812|  1.03k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4776|  1.03k|    auto src = [&]() {
 4777|  1.03k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|  1.03k|            return make_contiguous_buffer(
 4779|  1.03k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  1.03k|        }
 4781|  1.03k|        else {
 4782|  1.03k|            return make_contiguous_buffer(
 4783|  1.03k|                ranges::subrange{range.begin(), result});
 4784|  1.03k|        }
 4785|  1.03k|    }();
_ZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 4863|     70|    {
 4864|     70|        if (specs.fill.size() <= sizeof(SourceCharT)) {
  ------------------
  |  Branch (4864:13): [True: 44, False: 26]
  ------------------
 4865|     44|            return read_string_view_impl(
 4866|     44|                range,
 4867|     44|                read_until_code_unit(
 4868|     44|                    range,
 4869|     44|                    [until = specs.fill.template get_code_unit<SourceCharT>()](
 4870|     44|                        SourceCharT ch) { return ch == until; }),
 4871|     44|                value);
 4872|     44|        }
 4873|     26|        return read_string_view_impl(
 4874|     26|            range,
 4875|     26|            read_until_code_units(
 4876|     26|                range, specs.fill.template get_code_units<SourceCharT>()),
 4877|     26|            value);
 4878|     70|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_:
  753|     44|    {
  754|     44|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_SZ_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES14_c:
  743|    994|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    994|              cvref<T> obj = *get<T>(fn);
  745|    994|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    994|                  obj(static_cast<decltype(args)>(args)...);
  747|    994|              }
  748|    994|              else {
  749|    994|                  return obj(static_cast<decltype(args)>(args)...);
  750|    994|              }
  751|    994|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERNSG_17basic_string_viewIT0_NSG_11char_traitsIST_EEEEEUlcE_EEDaNS3_7storageE:
  683|    994|    {
  684|    994|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    994|            return static_cast<T*>(s.m_cp);
  686|    994|        }
  687|    994|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    994|            return static_cast<T*>(s.m_p);
  689|    994|        }
  690|    994|        else {
  691|    994|            return reinterpret_cast<T*>(s.m_fp);
  692|    994|        }
  693|    994|    }
_ZZN3scn2v34impl23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEEENKUlcE_clEc:
 4870|    994|                        SourceCharT ch) { return ch == until; }),
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_23custom_word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERNSH_17basic_string_viewIT0_NSH_11char_traitsISU_EEEEEUlcE_LPv0EEEPSJ_:
  661|     44|        {
  662|     44|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5062|  1.07k|    {
 5063|  1.07k|        auto it = read_source_impl(range, {specs});
 5064|  1.07k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266, False: 806]
  |  |  ------------------
  ------------------
 5065|    266|            return unexpected(it.error());
 5066|    266|        }
 5067|       |
 5068|    806|        return read_string_view_impl(range, *it, value);
 5069|  1.07k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4773|  1.34k|{
 4774|  1.34k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|  1.34k|    auto src = [&]() {
 4777|  1.34k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|  1.34k|            return make_contiguous_buffer(
 4779|  1.34k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  1.34k|        }
 4781|  1.34k|        else {
 4782|  1.34k|            return make_contiguous_buffer(
 4783|  1.34k|                ranges::subrange{range.begin(), result});
 4784|  1.34k|        }
 4785|  1.34k|    }();
 4786|  1.34k|    using src_type = decltype(src);
 4787|       |
 4788|  1.34k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|  1.34k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|  1.34k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|  1.34k|                                     "Cannot read a string_view from "
 4797|  1.34k|                                     "this source range (would require "
 4798|  1.34k|                                     "transcoding)");
 4799|  1.34k|    }
 4800|  1.34k|    else {
 4801|  1.34k|        const auto view = src.view();
 4802|  1.34k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|  1.34k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 126, False: 1.21k]
  ------------------
 4805|    126|            return unexpected_scan_error(
 4806|    126|                scan_error::invalid_scanned_value,
 4807|    126|                "Invalid encoding in scanned string_view");
 4808|    126|        }
 4809|       |
 4810|  1.21k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.21k|    static_cast<    \
  |  |  929|  1.21k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|  1.34k|    }
 4812|  1.34k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4776|  1.34k|    auto src = [&]() {
 4777|  1.34k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|  1.34k|            return make_contiguous_buffer(
 4779|  1.34k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  1.34k|        }
 4781|  1.34k|        else {
 4782|  1.34k|            return make_contiguous_buffer(
 4783|  1.34k|                ranges::subrange{range.begin(), result});
 4784|  1.34k|        }
 4785|  1.34k|    }();
_ZN3scn2v34impl24regex_string_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEENS0_6detail11regex_flagsERNSL_IT0_NSM_ISR_EEEE:
 4902|  3.17k|    {
 4903|  3.17k|        SCN_TRY(it, impl(range, pattern, flags));
  ------------------
  |  | 3643|  3.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.64k, False: 534]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|  2.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|  2.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|  2.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|  2.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|  2.64k|    }                                                  \
  |  |  |  | 3642|  3.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    534|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4904|    534|        return read_string_view_impl(range, it, value);
 4905|  3.17k|    }
_ZN3scn2v34impl16char_reader_baseIwE11check_specsERKNS0_6detail12format_specsE:
 5624|    452|    {
 5625|    452|        reader_error_handler eh{};
 5626|    452|        if constexpr (std::is_same_v<ValueCharT, char32_t>) {
  ------------------
  |  Branch (5626:23): [Folded - Ignored]
  ------------------
 5627|    452|            detail::check_code_point_type_specs(specs, eh);
 5628|    452|        }
 5629|    452|        else {
 5630|    452|            detail::check_char_type_specs(specs, eh);
 5631|    452|        }
 5632|    452|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 394]
  |  |  ------------------
  ------------------
 5633|     58|            return {scan_error::invalid_format_string, eh.m_msg};
 5634|     58|        }
 5635|    394|        return {};
 5636|    452|    }
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|    772|    {
  763|    772|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    772|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    772|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|    354|    {
  754|    354|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|    386|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    386|              cvref<T> obj = *get<T>(fn);
  745|    386|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    386|                  obj(static_cast<decltype(args)>(args)...);
  747|    386|              }
  748|    386|              else {
  749|    386|                  return obj(static_cast<decltype(args)>(args)...);
  750|    386|              }
  751|    386|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|    386|    {
  684|    386|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    386|            return static_cast<T*>(s.m_cp);
  686|    386|        }
  687|    386|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    386|            return static_cast<T*>(s.m_p);
  689|    386|        }
  690|    386|        else {
  691|    386|            return reinterpret_cast<T*>(s.m_fp);
  692|    386|        }
  693|    386|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|    354|        {
  662|    354|        }
_ZNK3scn2v34impl16char_reader_baseIwE19skip_ws_before_readEv:
 5619|  1.35k|    {
 5620|  1.35k|        return false;
 5621|  1.35k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|     30|    {
 1780|     30|        auto stdloc = loc.get<std::locale>();
 1781|     30|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|     30|        grouping = numpunct.grouping();
 1783|     30|        thousands_sep =
 1784|     30|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 30]
  ------------------
 1785|     30|        decimal_point = numpunct.decimal_point();
 1786|     30|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|     40|{
 1717|     40|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 40, False: 0]
  ------------------
 1718|     40|        return std::use_facet<Facet>(stdloc);
 1719|     40|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|     40|}
_ZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2348|  3.77k|{
 2349|  3.77k|    size_t count{0};
 2350|  3.77k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  3.77k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  3.77k|    });
 2353|  3.77k|    return count;
 2354|  3.77k|}
_ZN3scn2v34impl19for_each_code_pointIwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS1_12function_refIFvDiESA_EE:
 1445|  3.77k|{
 1446|       |    // TODO: Could be optimized by being eager
 1447|  3.77k|    auto it = input.begin();
 1448|  11.0k|    while (it != input.end()) {
  ------------------
  |  Branch (1448:12): [True: 7.26k, False: 3.77k]
  ------------------
 1449|  7.26k|        auto res = get_next_code_point(
 1450|  7.26k|            detail::make_string_view_from_iterators<CharT>(it, input.end()));
 1451|  7.26k|        cb(res.value);
 1452|  7.26k|        it = detail::make_string_view_iterator(input, res.iterator);
 1453|  7.26k|    }
 1454|  3.77k|}
_ZN3scn2v34impl19get_next_code_pointIwEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   296M|{
 1169|   296M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   296M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   296M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   296M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   296M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   296M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 296M]
  |  |  ------------------
  ------------------
 1173|      0|        return {get_start_for_next_code_point(input),
 1174|      0|                detail::invalid_code_point};
 1175|      0|    }
 1176|   296M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   296M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 296M]
  |  |  ------------------
  ------------------
 1177|      0|        return {input.end(), detail::invalid_code_point};
 1178|      0|    }
 1179|       |
 1180|   296M|    return {input.begin() + len,
 1181|   296M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   296M|}
_ZN3scn2v34impl12function_refIFvDiES3_EC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_:
  753|  3.77k|    {
  754|  3.77k|    }
_ZZN3scn2v34impl12function_refIFvDiES3_EC1IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_SD_LPv0EEEOS9_ENKUlNS1_12fnref_detail4base7storageEDiE_clESI_Di:
  743|  7.26k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.26k|              cvref<T> obj = *get<T>(fn);
  745|  7.26k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.26k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.26k|              }
  748|  7.26k|              else {
  749|  7.26k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.26k|              }
  751|  7.26k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEUlDiE_EEDaNS3_7storageE:
  683|  7.26k|    {
  684|  7.26k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.26k|            return static_cast<T*>(s.m_cp);
  686|  7.26k|        }
  687|  7.26k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.26k|            return static_cast<T*>(s.m_p);
  689|  7.26k|        }
  690|  7.26k|        else {
  691|  7.26k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.26k|        }
  693|  7.26k|    }
_ZZN3scn2v34impl20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEENKUlDiE_clEDi:
 2350|  7.26k|    for_each_code_point(input, [&count](char32_t cp) {
 2351|  7.26k|        count += calculate_text_width_for_fmt_v10(cp);
 2352|  7.26k|    });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_20calculate_text_widthIwEEmNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEUlDiE_LPv0EEEPS9_:
  661|  3.77k|        {
  662|  3.77k|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  1.96k|    {
 1582|  1.96k|        return m_view;
 1583|  1.96k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.98k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  5.99k|{
 1857|  5.99k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  5.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  5.99k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  5.99k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  5.99k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 142, False: 5.85k]
  ------------------
 1862|    142|            return unexpected(eof_error::eof);
 1863|    142|        }
 1864|       |
 1865|  5.85k|        return ranges::next(range.begin(), count);
 1866|  5.99k|    }
 1867|  5.99k|    else {
 1868|  5.99k|        auto it = range.begin();
 1869|  5.99k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  5.99k|            return ranges::next(it, count);
 1871|  5.99k|        }
 1872|       |
 1873|  5.99k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  5.99k|            if (it == range.end()) {
 1875|  5.99k|                return unexpected(eof_error::eof);
 1876|  5.99k|            }
 1877|  5.99k|        }
 1878|       |
 1879|  5.99k|        return it;
 1880|  5.99k|    }
 1881|  5.99k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  58.1k|{
 1899|  58.1k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  58.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  58.1k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  58.1k|    auto it = range.begin();
 1903|  58.1k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  58.1k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  58.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 58.1k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  58.1k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 58.1k, False: 0]
  ------------------
 1912|  58.1k|        ++it;
 1913|  58.1k|        return {it, string_type(1, *range.begin())};
 1914|  58.1k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  58.1k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  80.9k|{
  944|  80.9k|    return is_range_eof(r.begin(), r.end());
  945|  80.9k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   296M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   296M|    {
  937|   296M|        return begin == end;
  938|   296M|    }
  939|   296M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|    984|    {
  190|    984|        i = std::move(bound);
  191|    984|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  58.1k|    {
 1890|  58.1k|        return !codepoint.empty();
 1891|  58.1k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  22.8k|{
  950|  22.8k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  22.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.8k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  22.8k|    return eof_error::good;
  954|  22.8k|}
_ZN3scn2v34impl21reader_impl_for_wcharIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERwNSL_10locale_refE:
 5699|    394|    {
 5700|    394|        if (specs.type == detail::presentation_type::none ||
  ------------------
  |  Branch (5700:13): [True: 372, False: 22]
  ------------------
 5701|    394|            specs.type == detail::presentation_type::character) {
  ------------------
  |  Branch (5701:13): [True: 0, False: 22]
  ------------------
 5702|    372|            return read_default(range, value, loc);
 5703|    372|        }
 5704|       |
 5705|     22|        reader_impl_for_int<CharT> reader{};
 5706|     22|        using integer_type =
 5707|     22|            std::conditional_t<sizeof(wchar_t) == 2, int16_t, int32_t>;
 5708|     22|        integer_type tmp_value{};
 5709|     22|        auto ret = reader.read_specs(range, specs, tmp_value, loc);
 5710|     22|        value = static_cast<integer_type>(value);
 5711|     22|        return ret;
 5712|    394|    }
_ZN3scn2v34impl21reader_impl_for_wcharIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RwNS0_6detail10locale_refE:
 5683|    964|    {
 5684|    964|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    964|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5685|    964|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (5685:23): [Folded - Ignored]
  ------------------
 5686|    964|            return code_point_reader<wchar_t>{}.read(range, value);
 5687|    964|        }
 5688|    964|        else {
 5689|    964|            return code_unit_reader<wchar_t>{}.read(range, value);
 5690|    964|        }
 5691|    964|    }
_ZN3scn2v34impl16code_unit_readerIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSF_Rw:
 5564|    964|    {
 5565|    964|        SCN_TRY(it, read_code_unit(range).transform_error(make_eof_scan_error));
  ------------------
  |  | 3643|    964|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    964|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    964|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    964|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 964]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    964|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    964|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5566|    964|        ch = *range.begin();
 5567|    964|        return it;
 5568|    964|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  6.93k|{
 1846|  6.93k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.93k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.93k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  6.93k|    return ranges::next(range.begin());
 1851|  6.93k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   296M|    {
  296|   296M|        ++x;
  297|   296M|        return x;
  298|   296M|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    426|    {
 3540|    426|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    426|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    426|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    426|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    426|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 426]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    426|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    426|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    426|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    426|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 426]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
  ------------------
  |  Branch (3551:21): [True: 0, False: 0]
  ------------------
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    426|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 426]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    426|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    426|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 416, False: 10]
  |  |  ------------------
  ------------------
 3566|    416|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    416|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    416|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    416|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    416|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 416]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    416|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    416|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    416|                    parse_integer_digits_without_thsep(
 3568|    416|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    416|                        prefix_result.parsed_base));
 3570|       |
 3571|    416|            auto buf = make_contiguous_buffer(
 3572|    416|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    416|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    416|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    416|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    416|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    416|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 416, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    416|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    416|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    416|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    416|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    416|    }                                                  \
  |  |  |  | 3642|    416|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    416|        }
 3581|       |
 3582|     10|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     10|            localized_number_formatting_options<CharT>{loc};
 3587|     10|#endif
 3588|       |
 3589|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3325|  2.98k|{
 3326|  2.98k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3643|  2.98k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.98k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.98k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.98k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.98k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3327|  2.98k|    auto [base_prefix_begin_it, sign] = sign_result;
 3328|       |
 3329|  2.98k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3330|  2.98k|        parse_integer_base_prefix(
 3331|  2.98k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3332|       |
 3333|  2.98k|    if (parsed_zero) {
  ------------------
  |  Branch (3333:9): [True: 0, False: 2.98k]
  ------------------
 3334|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3334:13): [True: 0, False: 0]
  ------------------
 3335|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3335:13): [True: 0, False: 0]
  ------------------
 3336|      0|            digits_begin_it =
 3337|      0|                ranges::prev_backtrack(digits_begin_it, range.begin());
 3338|      0|        }
 3339|      0|        else {
 3340|      0|            parsed_zero = false;
 3341|      0|        }
 3342|      0|    }
 3343|  2.98k|    else {
 3344|  2.98k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3344:13): [True: 0, False: 2.98k]
  ------------------
 3345|  2.98k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3345:13): [True: 2.98k, False: 0]
  ------------------
 3346|  2.98k|            digits_begin_it = base_prefix_begin_it;
 3347|  2.98k|        }
 3348|  2.98k|    }
 3349|       |
 3350|  2.98k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3350:9): [True: 2.98k, False: 0]
  ------------------
 3351|  2.98k|        sign = sign_type::plus_sign;
 3352|  2.98k|    }
 3353|  2.98k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3354|  2.98k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3355|  2.98k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  3.97k|{
 3141|  3.97k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  3.97k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 3.97k, False: 0]
  ------------------
 3143|  3.97k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 3.97k, False: 0]
  ------------------
 3144|  3.97k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  3.97k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  3.97k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  3.97k|{
 2272|  3.97k|    auto it = read_code_unit(range);
 2273|  3.97k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.97k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  7.94k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 7.94k, False: 3.97k]
  ------------------
 2278|  7.94k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 7.94k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  7.94k|    }
 2282|       |
 2283|  3.97k|    return unexpected(parse_error::error);
 2284|  3.97k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3292|  2.98k|{
 3293|  2.98k|    switch (base) {
 3294|     12|        case 2:
  ------------------
  |  Branch (3294:9): [True: 12, False: 2.96k]
  ------------------
 3295|       |            // allow 0b/0B
 3296|     12|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3297|     12|                    false};
 3298|       |
 3299|      6|        case 8: {
  ------------------
  |  Branch (3299:9): [True: 6, False: 2.97k]
  ------------------
 3300|       |            // allow 0o/0O/0
 3301|      6|            bool zero_parsed = false;
 3302|      6|            auto it = apply_opt(
 3303|      6|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3304|      6|            return {it, 8, zero_parsed};
 3305|      0|        }
 3306|       |
 3307|    972|        case 16:
  ------------------
  |  Branch (3307:9): [True: 972, False: 2.00k]
  ------------------
 3308|       |            // allow 0x/0X
 3309|    972|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3310|    972|                    false};
 3311|       |
 3312|      6|        case 0:
  ------------------
  |  Branch (3312:9): [True: 6, False: 2.97k]
  ------------------
 3313|       |            // detect base
 3314|      6|            return parse_integer_base_prefix_for_detection(range);
 3315|       |
 3316|  1.98k|        default:
  ------------------
  |  Branch (3316:9): [True: 1.98k, False: 996]
  ------------------
 3317|       |            // no base prefix allowed
 3318|  1.98k|            return {range.begin(), base, false};
 3319|  2.98k|    }
 3320|  2.98k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2290|    990|{
 2291|    990|    if (!result) {
  ------------------
  |  Branch (2291:9): [True: 990, False: 0]
  ------------------
 2292|    990|        return range.begin();
 2293|    990|    }
 2294|      0|    return *result;
 2295|    990|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3243|     18|{
 3244|     18|    return read_matching_string_classic_nocase(range, "0b");
 3245|     18|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.97k|{
 2231|  3.97k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  3.97k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  3.97k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  3.97k|        if (range.size() < str.size()) {
 2236|  3.97k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  3.97k|        }
 2238|  3.97k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  3.97k|            return unexpected(parse_error::error);
 2240|  3.97k|        }
 2241|  3.97k|        return ranges::next(range.begin(), str.size());
 2242|  3.97k|    }
 2243|  3.97k|    else {
 2244|  3.97k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.97k|            if (ch < 'A' || ch > 'Z') {
 2246|  3.97k|                return ch;
 2247|  3.97k|            }
 2248|  3.97k|            return static_cast<char_type>(ch +
 2249|  3.97k|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.97k|        };
 2251|       |
 2252|  3.97k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  3.97k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.97k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.97k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 3.96k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      4|    }                                                  \
  |  |  |  | 3642|  3.97k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.96k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  3.96k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  3.96k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  3.96k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.96k, False: 0]
  |  |  ------------------
  ------------------
 2257|  3.96k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  3.96k|                    return ascii_tolower(a) ==
 2259|  3.96k|                           static_cast<detail::char_t<Range>>(b);
 2260|  3.96k|                }))) {
 2261|  3.96k|            return unexpected(parse_error::error);
 2262|  3.96k|        }
 2263|       |
 2264|      0|        return it;
 2265|  3.96k|    }
 2266|  3.97k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  3.96k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  3.96k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 8, False: 3.96k]
  |  Branch (2245:29): [True: 3.96k, False: 0]
  ------------------
 2246|  3.96k|                return ch;
 2247|  3.96k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  3.96k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3257|     12|{
 3258|     12|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3258:14): [True: 0, False: 12]
  ------------------
 3259|      0|        return *r;
 3260|      0|    }
 3261|       |
 3262|     12|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3262:14): [True: 0, False: 12]
  ------------------
 3263|      0|        zero_parsed = true;
 3264|      0|        return *r;
 3265|      0|    }
 3266|       |
 3267|     12|    return unexpected(parse_error::error);
 3268|     12|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  2.00k|{
 2146|  2.00k|    auto it = read_code_unit(range);
 2147|  2.00k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.00k]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|  2.00k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  2.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 0]
  |  |  ------------------
  ------------------
 2152|  2.00k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  2.00k|        return unexpected(parse_error::error);
 2154|  2.00k|    }
 2155|       |
 2156|      0|    return *it;
 2157|  2.00k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3250|    978|{
 3251|    978|    return read_matching_string_classic_nocase(range, "0x");
 3252|    978|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3273|      6|{
 3274|      6|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3274:14): [True: 0, False: 6]
  ------------------
 3275|      0|        return {*r, 16, false};
 3276|      0|    }
 3277|      6|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3277:14): [True: 0, False: 6]
  ------------------
 3278|      0|        return {*r, 2, false};
 3279|      0|    }
 3280|      6|    {
 3281|      6|        bool zero_parsed{false};
 3282|      6|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3282:18): [True: 0, False: 6]
  ------------------
 3283|      0|            return {*r, 8, zero_parsed};
 3284|      0|        }
 3285|      6|    }
 3286|      6|    return {range.begin(), 10, false};
 3287|      6|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3360|  2.96k|{
 3361|  2.96k|    using char_type = detail::char_t<Range>;
 3362|       |
 3363|  2.96k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (3363:19): [Folded - Ignored]
  ------------------
 3364|  2.96k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.96k]
  |  |  ------------------
  ------------------
 3365|      0|            return unexpected_scan_error(
 3366|      0|                scan_error::invalid_scanned_value,
 3367|      0|                "Failed to parse integer: No digits found");
 3368|      0|        }
 3369|  2.96k|        return range.end();
 3370|  2.96k|    }
 3371|  2.96k|    else {
 3372|  2.96k|        return read_while1_code_unit(range,
 3373|  2.96k|                                     [&](char_type ch) noexcept {
 3374|  2.96k|                                         return char_to_int(ch) < base;
 3375|  2.96k|                                     })
 3376|  2.96k|            .transform_error(map_parse_error_to_scan_error(
 3377|  2.96k|                scan_error::invalid_scanned_value,
 3378|  2.96k|                "Failed to parse integer: No digits found"));
 3379|  2.96k|    }
 3380|  2.96k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3390|     20|{
 3391|     20|    std::basic_string<CharT> output;
 3392|     20|    std::string thsep_indices;
 3393|     20|    auto it = range.begin();
 3394|     20|    bool digit_matched = false;
 3395|     20|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3395:12): [True: 20, False: 0]
  ------------------
 3396|     20|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3396:13): [True: 0, False: 20]
  ------------------
 3397|      0|            thsep_indices.push_back(
 3398|      0|                static_cast<char>(ranges::distance(range.begin(), it)));
 3399|      0|        }
 3400|     20|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3400:18): [True: 20, False: 0]
  ------------------
 3401|     20|            break;
 3402|     20|        }
 3403|      0|        else {
 3404|      0|            output.push_back(*it);
 3405|      0|            digit_matched = true;
 3406|      0|        }
 3407|     20|    }
 3408|     20|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
 3409|     20|        return unexpected_scan_error(
 3410|     20|            scan_error::invalid_scanned_value,
 3411|     20|            "Failed to parse integer: No digits found");
 3412|     20|    }
 3413|      0|    return std::tuple{it, output, thsep_indices};
 3414|     20|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  9.75k|{
 1683|  9.75k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  9.75k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  9.75k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  9.75k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  9.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  9.75k|    }
 1688|  9.75k|    else {
 1689|  9.75k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  9.75k|    }
 1691|  9.75k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  9.75k|    {
 1490|  9.75k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  11.0k|    {
 1503|  11.0k|        return sv;
 1504|  11.0k|    }
_ZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEb:
 5951|    348|{
 5952|    348|    using char_type = detail::char_t<Range>;
 5953|    348|    using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 5954|       |
 5955|    348|    if (fill.size() <= sizeof(char_type)) {
  ------------------
  |  Branch (5955:9): [True: 348, False: 0]
  ------------------
 5956|    348|        const auto fill_ch = fill.template get_code_unit<char_type>();
 5957|    348|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
 5958|       |
 5959|    348|        if (max_width == 0) {
  ------------------
  |  Branch (5959:13): [True: 348, False: 0]
  ------------------
 5960|    348|            auto it = read_while_code_unit(range, pred);
 5961|       |
 5962|    348|            if (want_skipped_width) {
  ------------------
  |  Branch (5962:17): [True: 0, False: 348]
  ------------------
 5963|      0|                auto prefix_width =
 5964|      0|                    static_cast<std::ptrdiff_t>(
 5965|      0|                        calculate_text_width(static_cast<char32_t>(fill_ch))) *
 5966|      0|                    ranges::distance(range.begin(), it);
 5967|      0|                return result_type{it, prefix_width};
 5968|      0|            }
 5969|    348|            return result_type{it, 0};
 5970|    348|        }
 5971|       |
 5972|      0|        auto max_width_view = take_width(range, max_width);
 5973|      0|        auto w_it = read_while_code_unit(max_width_view, pred);
 5974|       |
 5975|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5975:13): [True: 0, False: 0]
  ------------------
 5976|      0|            return result_type{w_it.base(), max_width - w_it.count()};
 5977|      0|        }
 5978|      0|        return result_type{w_it.base(), 0};
 5979|      0|    }
 5980|       |
 5981|      0|    const auto fill_chars = fill.template get_code_units<char_type>();
 5982|      0|    if (max_width == 0) {
  ------------------
  |  Branch (5982:9): [True: 0, False: 0]
  ------------------
 5983|      0|        auto it = read_while_code_units(range, fill_chars);
 5984|       |
 5985|      0|        if (want_skipped_width) {
  ------------------
  |  Branch (5985:13): [True: 0, False: 0]
  ------------------
 5986|      0|            auto prefix_width =
 5987|      0|                static_cast<std::ptrdiff_t>(calculate_text_width(fill_chars)) *
 5988|      0|                ranges::distance(range.begin(), it) / ranges::ssize(fill_chars);
 5989|      0|            return result_type{it, prefix_width};
 5990|      0|        }
 5991|      0|        return result_type{it, 0};
 5992|      0|    }
 5993|       |
 5994|      0|    auto max_width_view = take_width(range, max_width);
 5995|      0|    auto w_it = read_while_code_units(max_width_view, fill_chars);
 5996|       |
 5997|      0|    if (want_skipped_width) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 0]
  ------------------
 5998|      0|        return result_type{w_it.base(), max_width - w_it.count()};
 5999|      0|    }
 6000|      0|    return result_type{w_it.base(), 0};
 6001|      0|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|    354|{
 1976|    354|    return read_until_code_unit(range, std::not_fn(pred));
 1977|    354|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|    354|{
 1957|    354|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|    354|        return std::find_if(range.begin(), range.end(), pred);
 1959|    354|    }
 1960|    354|    else {
 1961|    354|        auto first = range.begin();
 1962|    354|        for (; first != range.end(); ++first) {
 1963|    354|            if (pred(*first)) {
 1964|    354|                return first;
 1965|    354|            }
 1966|    354|        }
 1967|    354|        return first;
 1968|    354|    }
 1969|    354|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_:
  753|    348|    {
  754|    348|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_SR_LPv0EEEOSH_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    380|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    380|              cvref<T> obj = *get<T>(fn);
  745|    380|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    380|                  obj(static_cast<decltype(args)>(args)...);
  747|    380|              }
  748|    380|              else {
  749|    380|                  return obj(static_cast<decltype(args)>(args)...);
  750|    380|              }
  751|    380|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRT_EEEElEEEESG_lRKNS0_6detail9fill_typeEbEUlwE_EEDaNS3_7storageE:
  683|    380|    {
  684|    380|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    380|            return static_cast<T*>(s.m_cp);
  686|    380|        }
  687|    380|        else if constexpr (std::is_object_v<T>) {
  688|    380|            return static_cast<T*>(s.m_p);
  689|    380|        }
  690|    380|        else {
  691|    380|            return reinterpret_cast<T*>(s.m_fp);
  692|    380|        }
  693|    380|    }
_ZZN3scn2v34impl9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEElEEEESD_lRKNS0_6detail9fill_typeEbENKUlwE_clEw:
 5957|    380|        const auto pred = [=](char_type ch) { return ch == fill_ch; };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_9skip_fillINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_lRKNS0_6detail9fill_typeEbEUlwE_LPv0EEEPKSH_:
  666|    348|        {
  667|    348|        }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  7.89k|{
 2951|  7.89k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 7.61k, False: 282]
  ------------------
 2952|  7.61k|        auto it = read_while_classic_space(range);
 2953|  7.61k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  7.61k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.61k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  7.61k|        return it;
 2959|  7.61k|    }
 2960|       |
 2961|    282|    return read_while_classic_space(range);
 2962|  7.89k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  9.92k|{
 2117|  9.92k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  9.92k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  9.92k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  9.92k|        auto buf = make_contiguous_buffer(range);
 2121|  9.92k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  9.92k|        return ranges::next(range.begin(),
 2123|  9.92k|                            ranges::distance(buf.view().begin(), it));
 2124|  9.92k|    }
 2125|  9.92k|    else {
 2126|  9.92k|        auto it = range.begin();
 2127|       |
 2128|  9.92k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  9.92k|            auto seg = get_contiguous_beginning(range);
 2130|  9.92k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  9.92k|                seg_it != seg.end()) {
 2132|  9.92k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  9.92k|            }
 2134|  9.92k|            ranges::advance(it, seg.size());
 2135|  9.92k|        }
 2136|       |
 2137|  9.92k|        return read_while_code_point(
 2138|  9.92k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  9.92k|    }
 2140|  9.92k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  9.92k|{
 2082|  9.92k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  9.92k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  12.9k|{
 2061|  12.9k|    auto it = range.begin();
 2062|  60.8k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 58.1k, False: 2.78k]
  ------------------
 2063|  58.1k|        const auto val =
 2064|  58.1k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  58.1k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  58.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 58.1k, False: 0]
  |  |  ------------------
  ------------------
 2066|  58.1k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  58.1k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  58.1k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 10.1k, False: 47.9k]
  ------------------
 2069|  10.1k|                return it;
 2070|  10.1k|            }
 2071|  58.1k|        }
 2072|  47.9k|        it = val.iterator;
 2073|  47.9k|    }
 2074|       |
 2075|  2.78k|    return it;
 2076|  12.9k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  9.92k|    {
  754|  9.92k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  11.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.6k|              cvref<T> obj = *get<T>(fn);
  745|  11.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  11.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.6k|              }
  748|  11.6k|              else {
  749|  11.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.6k|              }
  751|  11.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  11.6k|    {
  684|  11.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  11.6k|            return static_cast<T*>(s.m_cp);
  686|  11.6k|        }
  687|  11.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  11.6k|            return static_cast<T*>(s.m_p);
  689|  11.6k|        }
  690|  11.6k|        else {
  691|  11.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  11.6k|        }
  693|  11.6k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  11.6k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  9.92k|        {
  662|  9.92k|        }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    924|    {
 3040|    924|        reader_error_handler eh{};
 3041|    924|        get_derived().check_specs_impl(specs, eh);
 3042|    924|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    924|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 116, False: 808]
  |  |  ------------------
  ------------------
 3043|    116|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    116|        }
 3045|    808|        return {};
 3046|    924|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3050|    924|    {
 3051|    924|        return static_cast<Derived&>(*this);
 3052|    924|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3485|    924|    {
 3486|    924|        detail::check_int_type_specs(specs, eh);
 3487|    924|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3034|  1.99k|    {
 3035|  1.99k|        return true;
 3036|  1.99k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    404|    {
 3540|    404|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    404|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    404|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 404]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    404|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 404]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    404|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    404|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 394, False: 10]
  |  |  ------------------
  ------------------
 3566|    394|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    394|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    394|                    parse_integer_digits_without_thsep(
 3568|    394|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    394|                        prefix_result.parsed_base));
 3570|       |
 3571|    394|            auto buf = make_contiguous_buffer(
 3572|    394|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    394|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    394|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 394, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    394|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    394|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    394|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    394|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    394|    }                                                  \
  |  |  |  | 3642|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    394|        }
 3581|       |
 3582|     10|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|     10|            localized_number_formatting_options<CharT>{loc};
 3587|     10|#endif
 3588|       |
 3589|     10|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|     10|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     10|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     10|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     10|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     10|    }                                                  \
  |  |  |  | 3642|     10|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEmEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3539|    966|    {
 3540|    966|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3643|    966|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    966|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    966|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    966|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 966]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    966|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    966|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3541|    966|                                   .transform_error(make_eof_scan_error));
 3542|       |
 3543|    966|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3543:13): [True: 0, False: 966]
  ------------------
 3544|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3544:27): [Folded - Ignored]
  ------------------
 3545|      0|                return unexpected_scan_error(
 3546|      0|                    scan_error::invalid_scanned_value,
 3547|      0|                    "Unexpected '-' sign when parsing an "
 3548|      0|                    "unsigned value");
 3549|      0|            }
 3550|      0|            else {
 3551|      0|                if (specs.type ==
 3552|      0|                    detail::presentation_type::int_unsigned_decimal) {
 3553|      0|                    return unexpected_scan_error(
 3554|      0|                        scan_error::invalid_scanned_value,
 3555|      0|                        "'u'-option disallows negative values");
 3556|      0|                }
 3557|      0|            }
 3558|      0|        }
 3559|       |
 3560|    966|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3560:13): [True: 0, False: 966]
  ------------------
 3561|      0|            value = T{0};
 3562|      0|            return std::next(prefix_result.iterator);
 3563|      0|        }
 3564|       |
 3565|    966|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|    966|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 966, False: 0]
  |  |  ------------------
  ------------------
 3566|    966|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    966|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    966|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    966|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    966|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 966]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    966|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    966|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3567|    966|                    parse_integer_digits_without_thsep(
 3568|    966|                        ranges::subrange{prefix_result.iterator, range.end()},
 3569|    966|                        prefix_result.parsed_base));
 3570|       |
 3571|    966|            auto buf = make_contiguous_buffer(
 3572|    966|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3573|    966|            SCN_TRY(result_it,
  ------------------
  |  | 3643|    966|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    966|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    966|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    966|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 966, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    966|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    966|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    966|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    966|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    966|    }                                                  \
  |  |  |  | 3642|    966|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3574|      0|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3575|      0|                                        prefix_result.parsed_base));
 3576|       |
 3577|      0|            return ranges::next(
 3578|      0|                prefix_result.iterator,
 3579|      0|                ranges::distance(buf.view().begin(), result_it));
 3580|    966|        }
 3581|       |
 3582|      0|        auto locale_options =
 3583|       |#if SCN_DISABLE_LOCALE
 3584|       |            localized_number_formatting_options<CharT>{};
 3585|       |#else
 3586|      0|            localized_number_formatting_options<CharT>{loc};
 3587|      0|#endif
 3588|       |
 3589|      0|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3590|      0|                parse_integer_digits_with_thsep(
 3591|      0|                    ranges::subrange{prefix_result.iterator, range.end()},
 3592|      0|                    prefix_result.parsed_base, locale_options));
 3593|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3594|      0|            parse_digits_result;
 3595|       |
 3596|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3596:13): [True: 0, False: 0]
  ------------------
 3597|      0|            if (auto e = check_thsep_grouping(
 3598|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3599|      0|                    thsep_indices, locale_options.grouping);
 3600|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3601|      0|                return unexpected(e);
 3602|      0|            }
 3603|      0|        }
 3604|       |
 3605|      0|        auto nothsep_source_view =
 3606|      0|            std::basic_string_view<CharT>{nothsep_source};
 3607|      0|        SCN_TRY(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3608|      0|            nothsep_source_it,
 3609|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3610|      0|                                prefix_result.parsed_base));
 3611|       |
 3612|      0|        return ranges::next(
 3613|      0|            prefix_result.iterator,
 3614|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3615|      0|                ranges::ssize(thsep_indices));
 3616|      0|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    462|    {
 3040|    462|        reader_error_handler eh{};
 3041|    462|        get_derived().check_specs_impl(specs, eh);
 3042|    462|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 398]
  |  |  ------------------
  ------------------
 3043|     64|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|     64|        }
 3045|    398|        return {};
 3046|    462|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|    462|    {
 3051|    462|        return static_cast<Derived&>(*this);
 3052|    462|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4145|    462|    {
 4146|    462|        detail::check_float_type_specs(specs, eh);
 4147|    462|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|    990|    {
 3035|    990|        return true;
 3036|    990|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4217|    398|    {
 4218|    398|        unsigned options{};
 4219|    398|        if (specs.localized) {
  ------------------
  |  Branch (4219:13): [True: 10, False: 388]
  ------------------
 4220|     10|            options |= float_reader_base::allow_thsep;
 4221|     10|        }
 4222|       |
 4223|    398|        SCN_GCC_COMPAT_PUSH
 4224|    398|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4225|       |
 4226|    398|        switch (specs.type) {
 4227|      4|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4227:13): [True: 4, False: 394]
  ------------------
 4228|      4|                return options | float_reader_base::allow_fixed;
 4229|       |
 4230|      2|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4230:13): [True: 2, False: 396]
  ------------------
 4231|      2|                return options | float_reader_base::allow_scientific;
 4232|       |
 4233|     10|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4233:13): [True: 10, False: 388]
  ------------------
 4234|     10|                return options | float_reader_base::allow_hex;
 4235|       |
 4236|      0|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4236:13): [True: 0, False: 398]
  ------------------
 4237|      0|                return options | float_reader_base::allow_scientific |
 4238|      0|                       float_reader_base::allow_fixed;
 4239|       |
 4240|    382|            case detail::presentation_type::none:
  ------------------
  |  Branch (4240:13): [True: 382, False: 16]
  ------------------
 4241|    382|                return options | float_reader_base::allow_scientific |
 4242|    382|                       float_reader_base::allow_fixed |
 4243|    382|                       float_reader_base::allow_hex;
 4244|       |
 4245|      0|            default:
  ------------------
  |  Branch (4245:13): [True: 0, False: 398]
  ------------------
 4246|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4247|    398|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4248|    398|        }
 4249|       |
 4250|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4251|    398|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3660|    398|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|    990|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  1.98k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4057|    984|    {
 4058|    984|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 984, False: 0]
  ------------------
 4059|    984|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 984, False: 0]
  ------------------
 4060|    984|            return;
 4061|    984|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|    990|    {
  763|    990|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|    990|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|    990|    }
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|     10|    {
 3680|     10|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|     10|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|     10|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|     10|        return read_source_impl(range);
 3686|     10|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|    990|    {
 3706|    990|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|    990|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    990|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    990|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    990|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 990]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    990|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    990|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|    990|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|    990|        auto it = sign_result.first;
 3709|    990|        m_sign = sign_result.second;
 3710|       |
 3711|    990|        auto digits_begin = it;
 3712|    990|        auto r = ranges::subrange{it, range.end()};
 3713|    990|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|    990|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|    990|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 990]
  |  |  |  Branch (859:45): [True: 0, False: 990]
  |  |  |  Branch (859:45): [True: 0, False: 990]
  |  |  ------------------
  ------------------
 3716|    990|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|    990|            else {
 3725|    990|                auto cb = [&](const auto& rr)
 3726|    990|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|    990|                    auto res = read_all(rr);
 3728|    990|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|    990|                        return unexpected_scan_error(
 3730|    990|                            scan_error::invalid_scanned_value,
 3731|    990|                            "Invalid float value");
 3732|    990|                    }
 3733|    990|                    return res;
 3734|    990|                };
 3735|    990|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|    990|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    990|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    990|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 6, False: 984]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      6|    }                                                  \
  |  | 3642|    990|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    990|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|    984|            }
 3737|    990|        }
 3738|    984|        else {
 3739|    984|            SCN_TRY_ASSIGN(
 3740|    984|                it,
 3741|    984|                do_read_source_impl(
 3742|    984|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|    984|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|    984|        }
 3745|       |
 3746|    984|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    984|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    984|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|    984|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 984, False: 0]
  |  Branch (3748:48): [True: 984, False: 0]
  ------------------
 3749|    984|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 984, False: 0]
  ------------------
 3750|    984|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 984, False: 0]
  ------------------
 3751|    984|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|    984|        }
 3753|       |
 3754|    984|        handle_separators();
 3755|       |
 3756|    984|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 984]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|    984|        return it;
 3769|    984|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|    990|    {
 3812|    990|        auto it = range.begin();
 3813|    990|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 990, False: 0]
  ------------------
 3814|    990|            return unexpected(r.error());
 3815|    990|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|    990|    {
 3835|    990|        auto it = range.begin();
 3836|    990|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 990, False: 0]
  ------------------
 3837|    990|            return r.transform_error(map_parse_error_to_scan_error(
 3838|    990|                scan_error::invalid_scanned_value,
 3839|    990|                "Invalid floating-point NaN value"));
 3840|    990|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|    984|    {
 3805|    984|        return read_matching_string_classic_nocase(range, "0x");
 3806|    984|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|      6|{
 1996|      6|    auto it = read_while_code_unit(range, pred);
 1997|      6|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 6, False: 0]
  ------------------
 1998|      6|        return unexpected(parse_error::error);
 1999|      6|    }
 2000|      0|    return it;
 2001|      6|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|      6|    {
 3945|      6|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|      6|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 2, False: 4]
  |  Branch (3946:50): [True: 2, False: 0]
  ------------------
 3947|       |
 3948|      6|        auto it = ranges::begin(range);
 3949|      6|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|      6|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|      6|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 0]
  |  |  ------------------
  ------------------
 3953|      6|            return r.transform_error(
 3954|      6|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|      6|                                              "Invalid floating-point value"));
 3956|      6|        }
 3957|      0|        else {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        m_integral_part_length = digits_count;
 3963|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 0]
  ------------------
 3964|      0|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|      0|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|      0|        auto beg_exp_it = it;
 3980|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 0, False: 0]
  ------------------
 3981|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|      0|        }
 3983|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 0, False: 0]
  |  Branch (3983:29): [True: 0, False: 0]
  ------------------
 3984|      0|            return unexpected_scan_error(
 3985|      0|                scan_error::invalid_scanned_value,
 3986|      0|                "No exponent given to scientific float");
 3987|      0|        }
 3988|       |
 3989|      0|        m_kind =
 3990|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|       |
 3992|      0|        return it;
 3993|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|      6|    {
 3775|      6|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|      6|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 6]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|      6|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|      6|        return read_while1_code_unit(
 3784|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|      6|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|      6|    {
  754|      6|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|      6|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|      6|              cvref<T> obj = *get<T>(fn);
  745|      6|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|      6|                  obj(static_cast<decltype(args)>(args)...);
  747|      6|              }
  748|      6|              else {
  749|      6|                  return obj(static_cast<decltype(args)>(args)...);
  750|      6|              }
  751|      6|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|      6|    {
  684|      6|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|      6|            return static_cast<T*>(s.m_cp);
  686|      6|        }
  687|      6|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|      6|            return static_cast<T*>(s.m_p);
  689|      6|        }
  690|      6|        else {
  691|      6|            return reinterpret_cast<T*>(s.m_fp);
  692|      6|        }
  693|      6|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3784|      6|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|      6|        {
  662|      6|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|    990|    {
 4001|    990|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|    990|        const bool allowed_nonhex =
 4003|    990|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|    990|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|    990|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 990, False: 0]
  |  Branch (4006:45): [True: 0, False: 990]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|    990|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 990]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|    990|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 990, False: 0]
  |  Branch (4015:45): [True: 0, False: 990]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|    990|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 990]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|    990|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 984, False: 6]
  |  Branch (4022:28): [True: 10, False: 974]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|     10|            auto it = range.begin();
 4026|       |
 4027|     10|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 10]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|     10|            else {
 4032|     10|                m_kind = float_kind::hex_without_prefix;
 4033|     10|            }
 4034|       |
 4035|     10|            return read_hex(ranges::subrange{it, range.end()});
 4036|     10|        }
 4037|    980|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 6, False: 974]
  |  Branch (4037:29): [True: 6, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|      6|            m_kind = float_kind::generic;
 4041|      6|            return read_regular_float(range);
 4042|      6|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|    974|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    974|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 974]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|    974|        m_kind = float_kind::generic;
 4053|    974|        return read_regular(range);
 4054|    974|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|    984|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|    984|                    auto res = read_all(rr);
 3728|    984|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|    984|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 984]
  |  |  ------------------
  ------------------
 3729|      0|                        return unexpected_scan_error(
 3730|      0|                            scan_error::invalid_scanned_value,
 3731|      0|                            "Invalid float value");
 3732|      0|                    }
 3733|    984|                    return res;
 3734|    984|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|    984|{
 1839|    984|    return ranges::next(range.begin(), range.end());
 1840|    984|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|    984|    {
  313|    984|        ranges::advance(x, bound);
  314|    984|        return x;
  315|    984|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|    984|    {
  275|    984|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|    984|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|    984|    {
 1577|    984|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|    984|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|    984|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|    984|    {
 1621|    984|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|    984|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|    984|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|    984|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|    984|            m_storage.reset();
 1627|    984|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|    984|        }
 1629|    984|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|    984|                                          std::basic_string<CharT>>) {
 1631|    984|            m_storage.emplace(SCN_FWD(range));
 1632|    984|            m_view = string_view_type{*m_storage};
 1633|    984|        }
 1634|    984|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|    984|                                          typename detail::basic_scan_buffer<
 1636|    984|                                              value_t>::forward_iterator> &&
 1637|    984|                           ranges::common_range<Range>) {
 1638|    984|            auto beg_seg = range.begin().contiguous_segment();
 1639|    984|            auto end_seg = range.end().contiguous_segment();
 1640|    984|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|    984|                             detail::to_address(end_seg.end()))) {
 1642|    984|                auto& str = m_storage.emplace();
 1643|    984|                str.reserve(range.end().position() - range.begin().position());
 1644|    984|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|    984|                m_view = string_view_type{str};
 1646|    984|                return;
 1647|    984|            }
 1648|       |
 1649|    984|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|    984|                                                            end_seg.data());
 1651|    984|            m_storage.reset();
 1652|    984|        }
 1653|    984|        else {
 1654|    984|            auto& str = m_storage.emplace();
 1655|    984|            if constexpr (ranges::sized_range<Range>) {
 1656|    984|                str.reserve(range.size());
 1657|    984|            }
 1658|    984|            if constexpr (ranges::common_range<Range>) {
 1659|    984|                std::copy(ranges::begin(range), ranges::end(range),
 1660|    984|                          std::back_inserter(str));
 1661|    984|            }
 1662|    984|            else {
 1663|    984|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|    984|                     ++it) {
 1665|    984|                    str.push_back(*it);
 1666|    984|                }
 1667|    984|            }
 1668|    984|            m_view = string_view_type{str};
 1669|    984|        }
 1670|    984|    }
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|    980|    {
 3666|    980|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|    980|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 980]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|    980|        return read_source_impl(range);
 3672|    980|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|    984|    {
 3692|    984|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    984|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    984|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|    984|        const std::ptrdiff_t sign_len =
 3695|    984|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 0, False: 984]
  ------------------
 3696|       |
 3697|    984|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|    984|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    984|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    984|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    984|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 984, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    984|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    984|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    984|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    984|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    984|    }                                                  \
  |  |  |  | 3642|    984|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|    984|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4170|    398|    {
 4171|    398|        float_reader<CharT> rd{get_options(specs)};
 4172|       |
 4173|    398|#if !SCN_DISABLE_LOCALE
 4174|    398|        if (specs.localized) {
  ------------------
  |  Branch (4174:13): [True: 10, False: 388]
  ------------------
 4175|     10|            return read_impl<Range>(
 4176|     10|                range, rd,
 4177|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4178|     10|                    return r.read_source_localized(SCN_FWD(args)...);
 4179|     10|                },
 4180|     10|                value, loc);
 4181|     10|        }
 4182|    388|#endif
 4183|       |
 4184|    388|        return read_impl<Range>(
 4185|    388|            range, rd,
 4186|    388|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    388|                return r.read_source(SCN_FWD(args)...);
 4188|    388|            },
 4189|    388|            value);
 4190|    398|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4206|    990|    {
 4207|    990|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4208|    990|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    990|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 984]
  |  |  ------------------
  ------------------
 4209|      6|            return unexpected(r.error());
 4210|      6|        }
 4211|       |
 4212|    984|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|    984|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    984|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    984|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    984|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 984, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    984|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    984|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    984|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    984|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    984|    }                                                  \
  |  |  |  | 3642|    984|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4213|      0|        return ranges::next(range.begin(), n);
 4214|    984|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|     10|    {
  754|     10|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|     10|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|     10|              cvref<T> obj = *get<T>(fn);
  745|     10|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|     10|                  obj(static_cast<decltype(args)>(args)...);
  747|     10|              }
  748|     10|              else {
  749|     10|                  return obj(static_cast<decltype(args)>(args)...);
  750|     10|              }
  751|     10|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|     10|    {
  684|     10|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|     10|            return static_cast<T*>(s.m_cp);
  686|     10|        }
  687|     10|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|     10|            return static_cast<T*>(s.m_p);
  689|     10|        }
  690|     10|        else {
  691|     10|            return reinterpret_cast<T*>(s.m_fp);
  692|     10|        }
  693|     10|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4177|     10|                [](float_reader<CharT>& r, auto&&... args) {
 4178|     10|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|     10|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4179|     10|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|     10|        {
  662|     10|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    388|    {
  754|    388|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    388|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    388|              cvref<T> obj = *get<T>(fn);
  745|    388|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    388|                  obj(static_cast<decltype(args)>(args)...);
  747|    388|              }
  748|    388|              else {
  749|    388|                  return obj(static_cast<decltype(args)>(args)...);
  750|    388|              }
  751|    388|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    388|    {
  684|    388|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    388|            return static_cast<T*>(s.m_cp);
  686|    388|        }
  687|    388|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    388|            return static_cast<T*>(s.m_p);
  689|    388|        }
  690|    388|        else {
  691|    388|            return reinterpret_cast<T*>(s.m_fp);
  692|    388|        }
  693|    388|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4186|    388|            [](float_reader<CharT>& r, auto&&... args) {
 4187|    388|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    388|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4188|    388|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    388|        {
  662|    388|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEwEEDav:
 5809|  1.04k|{
 5810|  1.04k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  1.04k|        return reader_impl_for_bool<CharT>{};
 5812|  1.04k|    }
 5813|  1.04k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  1.04k|        return reader_impl_for_char<CharT>{};
 5815|  1.04k|    }
 5816|  1.04k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  1.04k|        return reader_impl_for_wchar<CharT>{};
 5818|  1.04k|    }
 5819|  1.04k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  1.04k|        return reader_impl_for_code_point<CharT>{};
 5821|  1.04k|    }
 5822|  1.04k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.04k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  1.04k|        return reader_impl_for_string<CharT>{};
 5825|  1.04k|    }
 5826|  1.04k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  1.04k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  1.04k|        return reader_impl_for_string<CharT>{};
 5829|  1.04k|    }
 5830|  1.04k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  1.04k|                       std::is_same_v<T, wregex_matches>) {
 5832|  1.04k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  1.04k|    }
 5834|  1.04k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  1.04k|        return reader_impl_for_voidptr<CharT>{};
 5836|  1.04k|    }
 5837|  1.04k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  1.04k|        return reader_impl_for_float<CharT>{};
 5839|  1.04k|    }
 5840|  1.04k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  1.04k|                       !std::is_same_v<T, wchar_t> &&
 5842|  1.04k|                       !std::is_same_v<T, char32_t> &&
 5843|  1.04k|                       !std::is_same_v<T, bool>) {
 5844|  1.04k|        return reader_impl_for_int<CharT>{};
 5845|  1.04k|    }
 5846|  1.04k|    else {
 5847|  1.04k|        return reader_impl_for_monostate<CharT>{};
 5848|  1.04k|    }
 5849|  1.04k|}
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5206|  3.13k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.35k|    {
 3040|  1.35k|        reader_error_handler eh{};
 3041|  1.35k|        get_derived().check_specs_impl(specs, eh);
 3042|  1.35k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126, False: 1.23k]
  |  |  ------------------
  ------------------
 3043|    126|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|    126|        }
 3045|  1.23k|        return {};
 3046|  1.35k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  1.35k|    {
 3051|  1.35k|        return static_cast<Derived&>(*this);
 3052|  1.35k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5210|  1.35k|    {
 5211|  1.35k|        detail::check_string_type_specs(specs, eh);
 5212|       |
 5213|  1.35k|        SCN_GCC_PUSH
 5214|  1.35k|        SCN_GCC_IGNORE("-Wswitch")
 5215|  1.35k|        SCN_GCC_IGNORE("-Wswitch-default")
 5216|       |
 5217|  1.35k|        SCN_CLANG_PUSH
 5218|  1.35k|        SCN_CLANG_IGNORE("-Wswitch")
 5219|  1.35k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5220|       |
 5221|  1.35k|        switch (specs.type) {
  ------------------
  |  Branch (5221:17): [True: 120, False: 1.23k]
  ------------------
 5222|  1.11k|            case detail::presentation_type::none:
  ------------------
  |  Branch (5222:13): [True: 1.11k, False: 240]
  ------------------
 5223|  1.11k|                m_type = reader_type::word;
 5224|  1.11k|                break;
 5225|       |
 5226|    114|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5226:13): [True: 114, False: 1.24k]
  ------------------
 5227|    114|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5227:21): [True: 0, False: 114]
  ------------------
 5228|    114|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5228:21): [True: 0, False: 114]
  ------------------
 5229|      0|                    m_type = reader_type::custom_word;
 5230|      0|                }
 5231|    114|                else {
 5232|    114|                    m_type = reader_type::word;
 5233|    114|                }
 5234|    114|                break;
 5235|      0|            }
 5236|       |
 5237|      6|            case detail::presentation_type::character:
  ------------------
  |  Branch (5237:13): [True: 6, False: 1.35k]
  ------------------
 5238|      6|                m_type = reader_type::character;
 5239|      6|                break;
 5240|       |
 5241|      0|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5241:13): [True: 0, False: 1.35k]
  ------------------
 5242|      0|                m_type = reader_type::character_set;
 5243|      0|                break;
 5244|       |
 5245|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5245:13): [True: 0, False: 1.35k]
  ------------------
 5246|      0|                m_type = reader_type::regex;
 5247|      0|                break;
 5248|       |
 5249|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5249:13): [True: 0, False: 1.35k]
  ------------------
 5250|      0|                m_type = reader_type::regex_escaped;
 5251|      0|                break;
 5252|  1.35k|        }
 5253|       |
 5254|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5255|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5256|  1.35k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5259|  3.22k|    {
 5260|  3.22k|        return m_type == reader_type::word;
 5261|  3.22k|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  3.64k|{
 1132|  3.64k|    auto it = src.begin();
 1133|  34.1k|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 31.6k, False: 2.53k]
  ------------------
 1134|  31.6k|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  31.6k|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 31.6k]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  31.6k|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 31.6k]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  31.6k|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  31.6k|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  31.6k|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 1.10k, False: 30.5k]
  ------------------
 1144|  1.10k|            return false;
 1145|  1.10k|        }
 1146|  30.5k|        it += len;
 1147|  30.5k|    }
 1148|  2.53k|    return true;
 1149|  3.64k|}
_ZN3scn2v34impl14transcode_implIwcEENS0_10scan_errorENSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEERNS4_12basic_stringIT0_NS7_ISB_EENS4_9allocatorISB_EEEE:
 2967|    634|{
 2968|    634|    dst.clear();
 2969|    634|    transcode_valid_to_string(src, dst);
 2970|    634|    return {};
 2971|    634|}
_ZN3scn2v34impl25transcode_valid_to_stringIwcEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1402|    634|{
 1403|    634|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1404|       |
 1405|    634|    SCN_EXPECT(validate_unicode(src));
  ------------------
  |  |  924|    634|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    634|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1406|    634|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1406:19): [Folded - Ignored]
  ------------------
 1407|    634|        if constexpr (sizeof(DestCharT) == 2) {
 1408|       |            // TODO: Optimize, remove utf32-step, go direct utf8->utf16
 1409|    634|            std::u32string tmp;
 1410|    634|            transcode_valid_to_string_impl_to32(src, tmp);
 1411|    634|            return transcode_to_string_impl_32to16<true>(
 1412|    634|                std::u32string_view{tmp}, dest);
 1413|    634|        }
 1414|    634|        else if constexpr (sizeof(DestCharT) == 4) {
 1415|    634|            return transcode_valid_to_string_impl_to32(src, dest);
 1416|    634|        }
 1417|    634|    }
 1418|    634|    else if constexpr (sizeof(SourceCharT) == 2) {
  ------------------
  |  Branch (1418:24): [Folded - Ignored]
  ------------------
 1419|    634|        if constexpr (sizeof(DestCharT) == 1) {
 1420|    634|            std::u32string tmp;
 1421|    634|            transcode_valid_to_string_impl_to32(src, tmp);
 1422|    634|            return transcode_to_string_impl_32to8<true>(
 1423|    634|                std::u32string_view{tmp}, dest);
 1424|    634|        }
 1425|    634|        else if constexpr (sizeof(DestCharT) == 4) {
 1426|    634|            return trasncode_valid_to_string_impl_to32(src, dest);
 1427|    634|        }
 1428|    634|    }
 1429|    634|    else if constexpr (sizeof(SourceCharT) == 4) {
  ------------------
  |  Branch (1429:24): [Folded - Ignored]
  ------------------
 1430|    634|        if constexpr (sizeof(DestCharT) == 1) {
  ------------------
  |  Branch (1430:23): [Folded - Ignored]
  ------------------
 1431|    634|            return transcode_to_string_impl_32to8<true>(src, dest);
 1432|    634|        }
 1433|    634|        else if constexpr (sizeof(DestCharT) == 2) {
 1434|    634|            return transcode_to_string_impl_32to16<true>(src, dest);
 1435|    634|        }
 1436|    634|    }
 1437|       |
 1438|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1439|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1440|      0|}
_ZN3scn2v34impl30transcode_to_string_impl_32to8ILb1EwcEEvNSt3__117basic_string_viewIT0_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT1_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1293|    634|{
 1294|    634|    static_assert(sizeof(SourceCharT) == 4);
 1295|    634|    static_assert(sizeof(DestCharT) == 1);
 1296|       |
 1297|  5.26k|    for (auto cp : src) {
  ------------------
  |  Branch (1297:18): [True: 5.26k, False: 634]
  ------------------
 1298|  5.26k|        const auto u32cp = static_cast<uint32_t>(cp);
 1299|  5.26k|        if (SCN_UNLIKELY(!VerifiedValid && cp >= detail::invalid_code_point)) {
  ------------------
  |  |  859|  5.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [Folded - Ignored]
  |  |  |  Branch (859:45): [Folded - Ignored]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1300|       |            // Replacement character
 1301|      0|            dest.push_back(static_cast<char>(0xef));
 1302|      0|            dest.push_back(static_cast<char>(0xbf));
 1303|      0|            dest.push_back(static_cast<char>(0xbd));
 1304|      0|        }
 1305|  5.26k|        else if (cp < 128) {
  ------------------
  |  Branch (1305:18): [True: 4.19k, False: 1.06k]
  ------------------
 1306|  4.19k|            dest.push_back(static_cast<char>(cp));
 1307|  4.19k|        }
 1308|  1.06k|        else if (cp < 2048) {
  ------------------
  |  Branch (1308:18): [True: 76, False: 990]
  ------------------
 1309|     76|            dest.push_back(
 1310|     76|                static_cast<char>(0xc0 | (static_cast<char>(u32cp >> 6))));
 1311|     76|            dest.push_back(
 1312|     76|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1313|     76|        }
 1314|    990|        else if (cp < 65536) {
  ------------------
  |  Branch (1314:18): [True: 514, False: 476]
  ------------------
 1315|    514|            dest.push_back(
 1316|    514|                static_cast<char>(0xe0 | (static_cast<char>(u32cp >> 12))));
 1317|    514|            dest.push_back(static_cast<char>(
 1318|    514|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1319|    514|            dest.push_back(
 1320|    514|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1321|    514|        }
 1322|    476|        else {
 1323|    476|            dest.push_back(
 1324|    476|                static_cast<char>(0xf0 | (static_cast<char>(u32cp >> 18))));
 1325|    476|            dest.push_back(static_cast<char>(
 1326|    476|                0x80 | (static_cast<char>(u32cp >> 12) & 0x3f)));
 1327|    476|            dest.push_back(static_cast<char>(
 1328|    476|                0x80 | (static_cast<char>(u32cp >> 6) & 0x3f)));
 1329|    476|            dest.push_back(
 1330|    476|                static_cast<char>(0x80 | (static_cast<char>(u32cp) & 0x3f)));
 1331|    476|        }
 1332|  5.26k|    }
 1333|    634|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|    410|    {
 5278|    410|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    410|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    410|        return read_impl(range, specs, value);
 5280|    410|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|    410|    {
 5296|    410|        SCN_CLANG_PUSH
 5297|    410|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    410|        switch (m_type) {
 5300|    410|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 410, False: 0]
  ------------------
 5301|    410|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 410]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 410]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 0, False: 410]
  ------------------
 5311|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|      0|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 410]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 410]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 410]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    410|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    410|        }
 5332|       |
 5333|    410|        SCN_CLANG_POP
 5334|    410|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|  1.00k|    {
 4821|  1.00k|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|  1.00k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|  1.00k|{
 4753|  1.00k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  1.00k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  1.00k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 368, False: 634]
  ------------------
 4757|    368|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    368|                                     "Invalid encoding in scanned string");
 4759|    368|    }
 4760|    634|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    634|    static_cast<    \
  |  |  929|    634|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    634|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 634]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    634|    return SCN_MOVE(result);
  ------------------
  |  |  928|    634|    static_cast<    \
  |  |  929|    634|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    634|}
_ZN3scn2v34impl22transcode_if_necessaryIwcEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    634|{
 3012|    634|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    634|        dest.assign(source.view());
 3014|    634|    }
 3015|    634|    else {
 3016|    634|        return transcode_impl(source.view(), dest);
 3017|    634|    }
 3018|       |
 3019|      0|    return {};
 3020|    634|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  3.00k|{
 2088|  3.00k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  3.00k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  3.00k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  3.00k|        auto buf = make_contiguous_buffer(range);
 2092|  3.00k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  3.00k|        return ranges::next(range.begin(),
 2094|  3.00k|                            ranges::distance(buf.view().begin(), it));
 2095|  3.00k|    }
 2096|  3.00k|    else {
 2097|  3.00k|        auto it = range.begin();
 2098|       |
 2099|  3.00k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  3.00k|            auto seg = get_contiguous_beginning(range);
 2101|  3.00k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  3.00k|                seg_it != seg.end()) {
 2103|  3.00k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  3.00k|            }
 2105|  3.00k|            ranges::advance(it, seg.size());
 2106|  3.00k|        }
 2107|       |
 2108|  3.00k|        return read_until_code_point(
 2109|  3.00k|            ranges::subrange{it, range.end()},
 2110|  3.00k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  3.00k|    }
 2112|  3.00k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  3.00k|    {
  754|  3.00k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  46.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.4k|              cvref<T> obj = *get<T>(fn);
  745|  46.4k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  46.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  46.4k|              }
  748|  46.4k|              else {
  749|  46.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.4k|              }
  751|  46.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  46.4k|    {
  684|  46.4k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  46.4k|            return static_cast<T*>(s.m_cp);
  686|  46.4k|        }
  687|  46.4k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  46.4k|            return static_cast<T*>(s.m_p);
  689|  46.4k|        }
  690|  46.4k|        else {
  691|  46.4k|            return reinterpret_cast<T*>(s.m_fp);
  692|  46.4k|        }
  693|  46.4k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  46.4k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  3.00k|        {
  662|  3.00k|        }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5809|  1.04k|{
 5810|  1.04k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  1.04k|        return reader_impl_for_bool<CharT>{};
 5812|  1.04k|    }
 5813|  1.04k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  1.04k|        return reader_impl_for_char<CharT>{};
 5815|  1.04k|    }
 5816|  1.04k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  1.04k|        return reader_impl_for_wchar<CharT>{};
 5818|  1.04k|    }
 5819|  1.04k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  1.04k|        return reader_impl_for_code_point<CharT>{};
 5821|  1.04k|    }
 5822|  1.04k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.04k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  1.04k|        return reader_impl_for_string<CharT>{};
 5825|  1.04k|    }
 5826|  1.04k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  1.04k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5827:24): [Folded - Ignored]
  ------------------
 5828|  1.04k|        return reader_impl_for_string<CharT>{};
 5829|  1.04k|    }
 5830|  1.04k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  1.04k|                       std::is_same_v<T, wregex_matches>) {
 5832|  1.04k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  1.04k|    }
 5834|  1.04k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  1.04k|        return reader_impl_for_voidptr<CharT>{};
 5836|  1.04k|    }
 5837|  1.04k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  1.04k|        return reader_impl_for_float<CharT>{};
 5839|  1.04k|    }
 5840|  1.04k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  1.04k|                       !std::is_same_v<T, wchar_t> &&
 5842|  1.04k|                       !std::is_same_v<T, char32_t> &&
 5843|  1.04k|                       !std::is_same_v<T, bool>) {
 5844|  1.04k|        return reader_impl_for_int<CharT>{};
 5845|  1.04k|    }
 5846|  1.04k|    else {
 5847|  1.04k|        return reader_impl_for_monostate<CharT>{};
 5848|  1.04k|    }
 5849|  1.04k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5277|    410|    {
 5278|    410|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    410|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    410|        return read_impl(range, specs, value);
 5280|    410|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5295|    410|    {
 5296|    410|        SCN_CLANG_PUSH
 5297|    410|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    410|        switch (m_type) {
 5300|    410|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 410, False: 0]
  ------------------
 5301|    410|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 410]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 410]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 0, False: 410]
  ------------------
 5311|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|      0|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 410]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 410]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 410]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    410|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    410|        }
 5332|       |
 5333|    410|        SCN_CLANG_POP
 5334|    410|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4820|  1.00k|    {
 4821|  1.00k|        return read_string_impl(range, read_until_classic_space(range), value);
 4822|  1.00k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4752|  1.00k|{
 4753|  1.00k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4754|       |
 4755|  1.00k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4756|  1.00k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4756:9): [True: 368, False: 634]
  ------------------
 4757|    368|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4758|    368|                                     "Invalid encoding in scanned string");
 4759|    368|    }
 4760|    634|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    634|    static_cast<    \
  |  |  929|    634|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4761|    634|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    634|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 634]
  |  |  ------------------
  ------------------
 4762|      0|        return unexpected(e);
 4763|      0|    }
 4764|       |
 4765|    634|    return SCN_MOVE(result);
  ------------------
  |  |  928|    634|    static_cast<    \
  |  |  929|    634|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4766|    634|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|    634|{
 3012|    634|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|    634|        dest.assign(source.view());
 3014|    634|    }
 3015|    634|    else {
 3016|    634|        return transcode_impl(source.view(), dest);
 3017|    634|    }
 3018|       |
 3019|    634|    return {};
 3020|    634|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5809|  1.04k|{
 5810|  1.04k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5810:19): [Folded - Ignored]
  ------------------
 5811|  1.04k|        return reader_impl_for_bool<CharT>{};
 5812|  1.04k|    }
 5813|  1.04k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5813:24): [Folded - Ignored]
  ------------------
 5814|  1.04k|        return reader_impl_for_char<CharT>{};
 5815|  1.04k|    }
 5816|  1.04k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5816:24): [Folded - Ignored]
  ------------------
 5817|  1.04k|        return reader_impl_for_wchar<CharT>{};
 5818|  1.04k|    }
 5819|  1.04k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5819:24): [Folded - Ignored]
  ------------------
 5820|  1.04k|        return reader_impl_for_code_point<CharT>{};
 5821|  1.04k|    }
 5822|  1.04k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  1.04k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5823:24): [Folded - Ignored]
  ------------------
 5824|  1.04k|        return reader_impl_for_string<CharT>{};
 5825|  1.04k|    }
 5826|  1.04k|    else if constexpr (std::is_same_v<T, std::string> ||
 5827|  1.04k|                       std::is_same_v<T, std::wstring>) {
 5828|  1.04k|        return reader_impl_for_string<CharT>{};
 5829|  1.04k|    }
 5830|  1.04k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5831|  1.04k|                       std::is_same_v<T, wregex_matches>) {
 5832|  1.04k|        return reader_impl_for_regex_matches<CharT>{};
 5833|  1.04k|    }
 5834|  1.04k|    else if constexpr (std::is_same_v<T, void*>) {
 5835|  1.04k|        return reader_impl_for_voidptr<CharT>{};
 5836|  1.04k|    }
 5837|  1.04k|    else if constexpr (std::is_floating_point_v<T>) {
 5838|  1.04k|        return reader_impl_for_float<CharT>{};
 5839|  1.04k|    }
 5840|  1.04k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5841|  1.04k|                       !std::is_same_v<T, wchar_t> &&
 5842|  1.04k|                       !std::is_same_v<T, char32_t> &&
 5843|  1.04k|                       !std::is_same_v<T, bool>) {
 5844|  1.04k|        return reader_impl_for_int<CharT>{};
 5845|  1.04k|    }
 5846|  1.04k|    else {
 5847|  1.04k|        return reader_impl_for_monostate<CharT>{};
 5848|  1.04k|    }
 5849|  1.04k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5277|    410|    {
 5278|    410|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    410|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5279|    410|        return read_impl(range, specs, value);
 5280|    410|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5295|    410|    {
 5296|    410|        SCN_CLANG_PUSH
 5297|    410|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5298|       |
 5299|    410|        switch (m_type) {
 5300|    410|            case reader_type::word:
  ------------------
  |  Branch (5300:13): [True: 410, False: 0]
  ------------------
 5301|    410|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5302|       |
 5303|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5303:13): [True: 0, False: 410]
  ------------------
 5304|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5305|      0|                                                                   value);
 5306|       |
 5307|      0|            case reader_type::character:
  ------------------
  |  Branch (5307:13): [True: 0, False: 410]
  ------------------
 5308|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5309|       |
 5310|      0|            case reader_type::character_set:
  ------------------
  |  Branch (5310:13): [True: 0, False: 410]
  ------------------
 5311|      0|                return character_set_reader_impl<SourceCharT>{}.read(
 5312|      0|                    range, specs, value);
 5313|       |
 5314|      0|#if !SCN_DISABLE_REGEX
 5315|      0|            case reader_type::regex:
  ------------------
  |  Branch (5315:13): [True: 0, False: 410]
  ------------------
 5316|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5317|      0|                    range, specs.charset_string<SourceCharT>(),
 5318|      0|                    specs.regexp_flags, value);
 5319|       |
 5320|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5320:13): [True: 0, False: 410]
  ------------------
 5321|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5322|      0|                    range,
 5323|      0|                    get_unescaped_regex_pattern(
 5324|      0|                        specs.charset_string<SourceCharT>()),
 5325|      0|                    specs.regexp_flags, value);
 5326|      0|#endif
 5327|       |
 5328|      0|            default:
  ------------------
  |  Branch (5328:13): [True: 0, False: 410]
  ------------------
 5329|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5330|    410|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5331|    410|        }
 5332|       |
 5333|    410|        SCN_CLANG_POP
 5334|    410|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4827|  1.00k|    {
 4828|  1.00k|        return read_string_view_impl(range, read_until_classic_space(range),
 4829|  1.00k|                                     value);
 4830|  1.00k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4773|  1.00k|{
 4774|  1.00k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4775|       |
 4776|  1.00k|    auto src = [&]() {
 4777|  1.00k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4778|  1.00k|            return make_contiguous_buffer(
 4779|  1.00k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  1.00k|        }
 4781|  1.00k|        else {
 4782|  1.00k|            return make_contiguous_buffer(
 4783|  1.00k|                ranges::subrange{range.begin(), result});
 4784|  1.00k|        }
 4785|  1.00k|    }();
 4786|  1.00k|    using src_type = decltype(src);
 4787|       |
 4788|  1.00k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4788:9): [Folded - Ignored]
  ------------------
 4789|      0|        return unexpected_scan_error(
 4790|      0|            scan_error::invalid_scanned_value,
 4791|      0|            "Cannot read a string_view from this source range (not "
 4792|      0|            "contiguous)");
 4793|      0|    }
 4794|  1.00k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4794:19): [Folded - Ignored]
  ------------------
 4795|  1.00k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4796|  1.00k|                                     "Cannot read a string_view from "
 4797|  1.00k|                                     "this source range (would require "
 4798|  1.00k|                                     "transcoding)");
 4799|  1.00k|    }
 4800|  1.00k|    else {
 4801|  1.00k|        const auto view = src.view();
 4802|  1.00k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4803|       |
 4804|  1.00k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4804:13): [True: 368, False: 634]
  ------------------
 4805|    368|            return unexpected_scan_error(
 4806|    368|                scan_error::invalid_scanned_value,
 4807|    368|                "Invalid encoding in scanned string_view");
 4808|    368|        }
 4809|       |
 4810|    634|        return SCN_MOVE(result);
  ------------------
  |  |  928|    634|    static_cast<    \
  |  |  929|    634|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4811|  1.00k|    }
 4812|  1.00k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4776|  1.00k|    auto src = [&]() {
 4777|  1.00k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4777:23): [Folded - Ignored]
  ------------------
 4778|  1.00k|            return make_contiguous_buffer(
 4779|  1.00k|                ranges::subrange{range.begin().base(), result.base()});
 4780|  1.00k|        }
 4781|  1.00k|        else {
 4782|  1.00k|            return make_contiguous_buffer(
 4783|  1.00k|                ranges::subrange{range.begin(), result});
 4784|  1.00k|        }
 4785|  1.00k|    }();
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4100|    920|    {
 4101|    920|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 0, False: 920]
  ------------------
 4102|      0|            return std::copysign(value, T{-1.0});
 4103|      0|        }
 4104|    920|        return std::copysign(value, T{1.0});
 4105|    920|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4100|    984|    {
 4101|    984|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4101:13): [True: 0, False: 984]
  ------------------
 4102|      0|            return std::copysign(value, T{-1.0});
 4103|      0|        }
 4104|    984|        return std::copysign(value, T{1.0});
 4105|    984|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|  6.03k|{
 5796|  6.03k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.03k]
  |  |  ------------------
  ------------------
 5797|      0|        return unexpected(e);
 5798|      0|    }
 5799|       |
 5800|  6.03k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 670, False: 5.36k]
  ------------------
 5801|    670|        return range.begin();
 5802|    670|    }
 5803|       |
 5804|  5.36k|    return skip_classic_whitespace(range);
 5805|  6.03k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5871|    670|    {
 5872|    670|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    670|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    670|                          basic_contiguous_scan_context<char_type>>) {
 5876|    670|            auto rd = make_reader<T, char_type>();
 5877|    670|            return impl(rd, range, value);
 5878|    670|        }
 5879|    670|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    670|            auto rd = make_reader<T, char_type>();
 5881|    670|            if (!is_segment_contiguous(range)) {
 5882|    670|                return impl(rd, range, value);
 5883|    670|            }
 5884|    670|            auto crange = get_as_contiguous(range);
 5885|    670|            SCN_TRY(it, impl(rd, crange, value));
 5886|    670|            return ranges::next(range.begin(),
 5887|    670|                                ranges::distance(crange.begin(), it));
 5888|    670|        }
 5889|    670|        else {
 5890|    670|            SCN_EXPECT(false);
 5891|    670|            SCN_UNREACHABLE;
 5892|    670|        }
 5893|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    670|    {
 5864|    670|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    670|                        .transform_error(make_eof_scan_error));
 5866|    670|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    670|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|    670|    {
 3529|    670|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    670|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|    670|        return read_default_with_base(range, value, 10);
 3531|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5871|    670|    {
 5872|    670|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    670|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    670|                          basic_contiguous_scan_context<char_type>>) {
 5876|    670|            auto rd = make_reader<T, char_type>();
 5877|    670|            return impl(rd, range, value);
 5878|    670|        }
 5879|    670|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    670|            auto rd = make_reader<T, char_type>();
 5881|    670|            if (!is_segment_contiguous(range)) {
 5882|    670|                return impl(rd, range, value);
 5883|    670|            }
 5884|    670|            auto crange = get_as_contiguous(range);
 5885|    670|            SCN_TRY(it, impl(rd, crange, value));
 5886|    670|            return ranges::next(range.begin(),
 5887|    670|                                ranges::distance(crange.begin(), it));
 5888|    670|        }
 5889|    670|        else {
 5890|    670|            SCN_EXPECT(false);
 5891|    670|            SCN_UNREACHABLE;
 5892|    670|        }
 5893|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    670|    {
 5864|    670|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    670|                        .transform_error(make_eof_scan_error));
 5866|    670|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    670|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|    670|    {
 3529|    670|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    670|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|    670|        return read_default_with_base(range, value, 10);
 3531|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 5871|    670|    {
 5872|    670|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    670|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    670|                          basic_contiguous_scan_context<char_type>>) {
 5876|    670|            auto rd = make_reader<T, char_type>();
 5877|    670|            return impl(rd, range, value);
 5878|    670|        }
 5879|    670|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    670|            auto rd = make_reader<T, char_type>();
 5881|    670|            if (!is_segment_contiguous(range)) {
 5882|    670|                return impl(rd, range, value);
 5883|    670|            }
 5884|    670|            auto crange = get_as_contiguous(range);
 5885|    670|            SCN_TRY(it, impl(rd, crange, value));
 5886|    670|            return ranges::next(range.begin(),
 5887|    670|                                ranges::distance(crange.begin(), it));
 5888|    670|        }
 5889|    670|        else {
 5890|    670|            SCN_EXPECT(false);
 5891|    670|            SCN_UNREACHABLE;
 5892|    670|        }
 5893|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5863|    670|    {
 5864|    670|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    670|                        .transform_error(make_eof_scan_error));
 5866|    670|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    670|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIcE19skip_ws_before_readEv:
 5748|  1.21k|    {
 5749|  1.21k|        return true;
 5750|  1.21k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5765|    906|    {
 5766|    906|        detail::format_specs specs{};
 5767|    906|        specs.type = detail::presentation_type::int_hex;
 5768|       |
 5769|    906|        std::uintptr_t intvalue{};
 5770|    906|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3643|    906|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    906|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    906|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 906, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    906|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    906|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    906|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    906|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    906|    }                                                  \
  |  |  |  | 3642|    906|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5771|      0|                                                                intvalue, loc));
 5772|      0|        value = reinterpret_cast<void*>(intvalue);
 5773|      0|        return result;
 5774|    906|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 5871|    670|    {
 5872|    670|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    670|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    670|                          basic_contiguous_scan_context<char_type>>) {
 5876|    670|            auto rd = make_reader<T, char_type>();
 5877|    670|            return impl(rd, range, value);
 5878|    670|        }
 5879|    670|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    670|            auto rd = make_reader<T, char_type>();
 5881|    670|            if (!is_segment_contiguous(range)) {
 5882|    670|                return impl(rd, range, value);
 5883|    670|            }
 5884|    670|            auto crange = get_as_contiguous(range);
 5885|    670|            SCN_TRY(it, impl(rd, crange, value));
 5886|    670|            return ranges::next(range.begin(),
 5887|    670|                                ranges::distance(crange.begin(), it));
 5888|    670|        }
 5889|    670|        else {
 5890|    670|            SCN_EXPECT(false);
 5891|    670|            SCN_UNREACHABLE;
 5892|    670|        }
 5893|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    670|    {
 5864|    670|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    670|                        .transform_error(make_eof_scan_error));
 5866|    670|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    670|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE19skip_ws_before_readEv:
 3034|  1.41k|    {
 3035|  1.41k|        return true;
 3036|  1.41k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5504|    670|    {
 5505|    670|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    670|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5506|       |
 5507|    670|        return bool_reader<CharT>{}.read_classic(range, value);
 5508|    670|    }
_ZN3scn2v34impl16bool_reader_baseC2Ev:
 5349|  1.26k|    constexpr bool_reader_base() = default;
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5355|  1.05k|    {
 5356|  1.05k|        scan_error err{scan_error::invalid_scanned_value,
 5357|  1.05k|                       "Failed to read boolean"};
 5358|       |
 5359|  1.05k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5359:13): [True: 922, False: 136]
  ------------------
 5360|    922|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5360:22): [True: 0, False: 922]
  ------------------
 5361|      0|                return *r;
 5362|      0|            }
 5363|    922|            else {
 5364|    922|                err = r.error();
 5365|    922|            }
 5366|    922|        }
 5367|       |
 5368|  1.05k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5368:13): [True: 1.03k, False: 20]
  ------------------
 5369|  1.03k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5369:22): [True: 0, False: 1.03k]
  ------------------
 5370|      0|                return *r;
 5371|      0|            }
 5372|  1.03k|            else {
 5373|  1.03k|                err = r.error();
 5374|  1.03k|            }
 5375|  1.03k|        }
 5376|       |
 5377|  1.05k|        return unexpected(err);
 5378|  1.05k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5384|    934|    {
 5385|    934|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5385:18): [True: 0, False: 934]
  ------------------
 5386|      0|            value = false;
 5387|      0|            return *r;
 5388|      0|        }
 5389|    934|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5389:18): [True: 0, False: 934]
  ------------------
 5390|      0|            value = true;
 5391|      0|            return *r;
 5392|      0|        }
 5393|       |
 5394|    934|        return unexpected_scan_error(
 5395|    934|            scan_error::invalid_scanned_value,
 5396|    934|            "Failed to read numeric boolean value: No match");
 5397|    934|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5402|  1.03k|    {
 5403|  1.03k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5403:18): [True: 0, False: 1.03k]
  ------------------
 5404|      0|            value = true;
 5405|      0|            return *r;
 5406|      0|        }
 5407|  1.03k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5407:18): [True: 0, False: 1.03k]
  ------------------
 5408|      0|            value = false;
 5409|      0|            return *r;
 5410|      0|        }
 5411|       |
 5412|  1.03k|        return unexpected_scan_error(
 5413|  1.03k|            scan_error::invalid_scanned_value,
 5414|  1.03k|            "Failed to read textual boolean value: No match");
 5415|  1.03k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.07k|{
 2194|  2.07k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  2.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 102, False: 1.97k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    102|    }                                                  \
  |  |  |  | 3642|  2.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.97k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.97k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.97k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.97k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.97k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.97k|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|  1.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.97k, False: 0]
  |  |  ------------------
  ------------------
 2201|  1.97k|            return unexpected(parse_error::error);
 2202|  1.97k|        }
 2203|      0|        return it;
 2204|  1.97k|    }
 2205|  1.97k|    else {
 2206|  1.97k|        auto range_it = range.begin();
 2207|  1.97k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|  1.97k|            if (SCN_UNLIKELY(*range_it !=
 2209|  1.97k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.97k|                return unexpected(parse_error::error);
 2211|  1.97k|            }
 2212|  1.97k|        }
 2213|  1.97k|        return it;
 2214|  1.97k|    }
 2215|  1.97k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 5871|    670|    {
 5872|    670|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    670|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    670|                          basic_contiguous_scan_context<char_type>>) {
 5876|    670|            auto rd = make_reader<T, char_type>();
 5877|    670|            return impl(rd, range, value);
 5878|    670|        }
 5879|    670|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    670|            auto rd = make_reader<T, char_type>();
 5881|    670|            if (!is_segment_contiguous(range)) {
 5882|    670|                return impl(rd, range, value);
 5883|    670|            }
 5884|    670|            auto crange = get_as_contiguous(range);
 5885|    670|            SCN_TRY(it, impl(rd, crange, value));
 5886|    670|            return ranges::next(range.begin(),
 5887|    670|                                ranges::distance(crange.begin(), it));
 5888|    670|        }
 5889|    670|        else {
 5890|    670|            SCN_EXPECT(false);
 5891|    670|            SCN_UNREACHABLE;
 5892|    670|        }
 5893|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    670|    {
 5864|    670|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    670|                        .transform_error(make_eof_scan_error));
 5866|    670|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    670|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3658|    670|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3644|  1.26k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5871|    670|    {
 5872|    670|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    670|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    670|                          basic_contiguous_scan_context<char_type>>) {
 5876|    670|            auto rd = make_reader<T, char_type>();
 5877|    670|            return impl(rd, range, value);
 5878|    670|        }
 5879|    670|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    670|            auto rd = make_reader<T, char_type>();
 5881|    670|            if (!is_segment_contiguous(range)) {
 5882|    670|                return impl(rd, range, value);
 5883|    670|            }
 5884|    670|            auto crange = get_as_contiguous(range);
 5885|    670|            SCN_TRY(it, impl(rd, crange, value));
 5886|    670|            return ranges::next(range.begin(),
 5887|    670|                                ranges::distance(crange.begin(), it));
 5888|    670|        }
 5889|    670|        else {
 5890|    670|            SCN_EXPECT(false);
 5891|    670|            SCN_UNREACHABLE;
 5892|    670|        }
 5893|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    670|    {
 5864|    670|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    670|                        .transform_error(make_eof_scan_error));
 5866|    670|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    670|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|    670|    {
 4153|    670|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    670|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|    670|        float_reader<CharT> rd{};
 4156|    670|        return read_impl<Range>(
 4157|    670|            range, rd,
 4158|    670|            [](float_reader<CharT>& r, auto&&... args) {
 4159|    670|                return r.read_source(SCN_FWD(args)...);
 4160|    670|            },
 4161|    670|            value);
 4162|    670|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    670|    {
  754|    670|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    670|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    670|              cvref<T> obj = *get<T>(fn);
  745|    670|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    670|                  obj(static_cast<decltype(args)>(args)...);
  747|    670|              }
  748|    670|              else {
  749|    670|                  return obj(static_cast<decltype(args)>(args)...);
  750|    670|              }
  751|    670|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|    670|    {
  684|    670|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    670|            return static_cast<T*>(s.m_cp);
  686|    670|        }
  687|    670|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    670|            return static_cast<T*>(s.m_p);
  689|    670|        }
  690|    670|        else {
  691|    670|            return reinterpret_cast<T*>(s.m_fp);
  692|    670|        }
  693|    670|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|    670|            [](float_reader<CharT>& r, auto&&... args) {
 4159|    670|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|    670|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|    670|        {
  662|    670|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5871|    670|    {
 5872|    670|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    670|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    670|                          basic_contiguous_scan_context<char_type>>) {
 5876|    670|            auto rd = make_reader<T, char_type>();
 5877|    670|            return impl(rd, range, value);
 5878|    670|        }
 5879|    670|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    670|            auto rd = make_reader<T, char_type>();
 5881|    670|            if (!is_segment_contiguous(range)) {
 5882|    670|                return impl(rd, range, value);
 5883|    670|            }
 5884|    670|            auto crange = get_as_contiguous(range);
 5885|    670|            SCN_TRY(it, impl(rd, crange, value));
 5886|    670|            return ranges::next(range.begin(),
 5887|    670|                                ranges::distance(crange.begin(), it));
 5888|    670|        }
 5889|    670|        else {
 5890|    670|            SCN_EXPECT(false);
 5891|    670|            SCN_UNREACHABLE;
 5892|    670|        }
 5893|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5863|    670|    {
 5864|    670|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    670|                        .transform_error(make_eof_scan_error));
 5866|    670|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    670|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5266|    670|    {
 5267|    670|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    670|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|    670|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5871|    670|    {
 5872|    670|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    670|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    670|                          basic_contiguous_scan_context<char_type>>) {
 5876|    670|            auto rd = make_reader<T, char_type>();
 5877|    670|            return impl(rd, range, value);
 5878|    670|        }
 5879|    670|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    670|            auto rd = make_reader<T, char_type>();
 5881|    670|            if (!is_segment_contiguous(range)) {
 5882|    670|                return impl(rd, range, value);
 5883|    670|            }
 5884|    670|            auto crange = get_as_contiguous(range);
 5885|    670|            SCN_TRY(it, impl(rd, crange, value));
 5886|    670|            return ranges::next(range.begin(),
 5887|    670|                                ranges::distance(crange.begin(), it));
 5888|    670|        }
 5889|    670|        else {
 5890|    670|            SCN_EXPECT(false);
 5891|    670|            SCN_UNREACHABLE;
 5892|    670|        }
 5893|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|    670|    {
 5864|    670|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    670|                        .transform_error(make_eof_scan_error));
 5866|    670|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    670|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|    670|    {
 5267|    670|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    670|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|    670|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 5871|    670|    {
 5872|    670|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    670|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    670|                          basic_contiguous_scan_context<char_type>>) {
 5876|    670|            auto rd = make_reader<T, char_type>();
 5877|    670|            return impl(rd, range, value);
 5878|    670|        }
 5879|    670|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    670|            auto rd = make_reader<T, char_type>();
 5881|    670|            if (!is_segment_contiguous(range)) {
 5882|    670|                return impl(rd, range, value);
 5883|    670|            }
 5884|    670|            auto crange = get_as_contiguous(range);
 5885|    670|            SCN_TRY(it, impl(rd, crange, value));
 5886|    670|            return ranges::next(range.begin(),
 5887|    670|                                ranges::distance(crange.begin(), it));
 5888|    670|        }
 5889|    670|        else {
 5890|    670|            SCN_EXPECT(false);
 5891|    670|            SCN_UNREACHABLE;
 5892|    670|        }
 5893|    670|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|    670|    {
 5864|    670|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    670|                        .transform_error(make_eof_scan_error));
 5866|    670|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    670|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|    670|    {
 5267|    670|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    670|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|    670|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|    670|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  72.2k|    {
 2879|  72.2k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   335k|    {
 2883|   335k|        return m_current;
 2884|   335k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   397k|    {
 2888|   397k|        return m_range.end();
 2889|   397k|    }
_ZN3scn2v34impl19is_first_char_spaceIcEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   132k|{
 1221|       |    // TODO: optimize
 1222|   132k|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   132k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   132k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   132k|    auto res = get_next_code_point(str);
 1224|   132k|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   132k|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   136k|    {
 2903|   136k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   136k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   136k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 136k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   136k|        }
 2909|   136k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   136k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   126k|    {
 2893|   126k|        return ranges::subrange{begin(), end()};
 2894|   126k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|  19.5k|    {
 6038|  19.5k|        const bool need_skipped_width =
 6039|  19.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 1.91k, False: 17.6k]
  |  Branch (6039:33): [True: 4.04k, False: 13.6k]
  ------------------
 6040|  19.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  19.5k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 824, False: 18.7k]
  ------------------
 6044|  19.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 1.59k, False: 17.1k]
  ------------------
 6045|  2.42k|            return skip_fill(rng, specs.precision, specs.fill,
 6046|  2.42k|                             need_skipped_width);
 6047|  2.42k|        }
 6048|  17.1k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 16.6k, False: 540]
  |  Branch (6048:56): [True: 4.17k, False: 12.4k]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  4.17k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 2.37k, False: 1.79k]
  ------------------
 6052|  2.37k|                auto max_width_view = take_width(rng, specs.precision);
 6053|  2.37k|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|  2.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 2.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     40|    }                                                  \
  |  |  |  | 3642|  2.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|  2.33k|                                  .transform_error(make_eof_scan_error));
 6055|  2.33k|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|  2.37k|            }
 6057|  3.59k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  1.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  3.59k|                            make_eof_scan_error));
 6059|       |
 6060|  3.59k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 1.16k, False: 636]
  ------------------
 6061|  1.16k|                return result_type{
 6062|  1.16k|                    it,
 6063|  1.16k|                    calculate_text_width(make_contiguous_buffer(
 6064|  1.16k|                                             ranges::subrange{rng.begin(), it})
 6065|  1.16k|                                             .view())};
 6066|  1.16k|            }
 6067|    636|            return result_type{it, 0};
 6068|  3.59k|        }
 6069|       |
 6070|  12.9k|        return result_type{rng.begin(), 0};
 6071|  17.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|  5.04k|    {
 6080|  5.04k|        const bool need_skipped_width =
 6081|  5.04k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 460, False: 4.58k]
  |  Branch (6081:33): [True: 1.23k, False: 3.34k]
  ------------------
 6082|  5.04k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|  5.04k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 232, False: 4.80k]
  ------------------
 6085|  5.04k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 246, False: 4.56k]
  ------------------
 6086|    478|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|    478|                             specs.fill, need_skipped_width);
 6088|    478|        }
 6089|  4.56k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 4.10k, False: 456]
  ------------------
 6090|  4.56k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 3.75k, False: 354]
  ------------------
 6091|  4.56k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 248, False: 3.50k]
  |  Branch (6091:35): [True: 232, False: 16]
  ------------------
 6092|  3.75k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 444, False: 3.07k]
  ------------------
 6093|  3.52k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 364, False: 80]
  ------------------
 6094|    596|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 364, False: 232]
  ------------------
 6095|    364|                const auto initial_width =
 6096|    364|                    specs.precision - prefix_width - value_width;
 6097|    364|                auto max_width_view = take_width(rng, initial_width);
 6098|    364|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|    364|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    364|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    364|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    364|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 364]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    364|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    364|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|    364|                                  .transform_error(make_eof_scan_error));
 6100|    364|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|    364|            }
 6102|    464|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|    232|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    232|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    232|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    232|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 232]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    232|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    232|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|    464|                            make_eof_scan_error));
 6104|       |
 6105|    464|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 232, False: 0]
  ------------------
 6106|    232|                return result_type{
 6107|    232|                    it,
 6108|    232|                    calculate_text_width(make_contiguous_buffer(
 6109|    232|                                             ranges::subrange{rng.begin(), it})
 6110|    232|                                             .view())};
 6111|    232|            }
 6112|      0|            return result_type{it, 0};
 6113|    464|        }
 6114|  3.96k|        return result_type{rng.begin(), 0};
 6115|  4.56k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6178|  5.44k|    {
 6179|  5.44k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.44k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.44k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.44k|            auto rd = make_reader<T, char_type>();
 6184|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.85k, False: 596]
  |  |  ------------------
  ------------------
 6185|  4.85k|                return unexpected(e);
 6186|  4.85k|            }
 6187|       |
 6188|    596|            return impl(rd, range, value);
 6189|  5.44k|        }
 6190|  5.44k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.44k|            auto rd = make_reader<T, char_type>();
 6192|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.44k|                return unexpected(e);
 6194|  5.44k|            }
 6195|       |
 6196|  5.44k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.44k|                specs.width != 0) {
 6198|  5.44k|                return impl(rd, range, value);
 6199|  5.44k|            }
 6200|       |
 6201|  5.44k|            auto crange = get_as_contiguous(range);
 6202|  5.44k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.44k|            return ranges::next(range.begin(),
 6204|  5.44k|                                ranges::distance(crange.begin(), it));
 6205|  5.44k|        }
 6206|  5.44k|        else {
 6207|  5.44k|            SCN_EXPECT(false);
 6208|  5.44k|            SCN_UNREACHABLE;
 6209|  5.44k|        }
 6210|  5.44k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    596|    {
 6121|    596|        const bool need_skipped_width =
 6122|    596|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 184, False: 412]
  |  Branch (6122:33): [True: 334, False: 78]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    596|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    596|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    596|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    596|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    596|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 588]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      8|    }                                                  \
  |  |  |  | 3642|    596|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    588|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    588|        auto [it, prefix_width] = prefix_result;
 6127|    588|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    588|        std::ptrdiff_t value_width = 0;
 6131|    588|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 326, False: 262]
  ------------------
 6132|    326|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 326]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    326|            const auto initial_width = specs.precision - prefix_width;
 6140|    326|            auto max_width_view =
 6141|    326|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    326|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 326, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    326|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    326|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    326|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    326|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    326|    }                                                  \
  |  |  |  | 3642|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    262|        else {
 6147|    262|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 262, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    262|    }                                                  \
  |  | 3642|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6178|  5.44k|    {
 6179|  5.44k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.44k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.44k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.44k|            auto rd = make_reader<T, char_type>();
 6184|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.85k, False: 596]
  |  |  ------------------
  ------------------
 6185|  4.85k|                return unexpected(e);
 6186|  4.85k|            }
 6187|       |
 6188|    596|            return impl(rd, range, value);
 6189|  5.44k|        }
 6190|  5.44k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.44k|            auto rd = make_reader<T, char_type>();
 6192|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.44k|                return unexpected(e);
 6194|  5.44k|            }
 6195|       |
 6196|  5.44k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.44k|                specs.width != 0) {
 6198|  5.44k|                return impl(rd, range, value);
 6199|  5.44k|            }
 6200|       |
 6201|  5.44k|            auto crange = get_as_contiguous(range);
 6202|  5.44k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.44k|            return ranges::next(range.begin(),
 6204|  5.44k|                                ranges::distance(crange.begin(), it));
 6205|  5.44k|        }
 6206|  5.44k|        else {
 6207|  5.44k|            SCN_EXPECT(false);
 6208|  5.44k|            SCN_UNREACHABLE;
 6209|  5.44k|        }
 6210|  5.44k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    596|    {
 6121|    596|        const bool need_skipped_width =
 6122|    596|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 184, False: 412]
  |  Branch (6122:33): [True: 334, False: 78]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    596|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    596|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    596|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    596|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    596|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 588]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      8|    }                                                  \
  |  |  |  | 3642|    596|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    588|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    588|        auto [it, prefix_width] = prefix_result;
 6127|    588|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    588|        std::ptrdiff_t value_width = 0;
 6131|    588|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 326, False: 262]
  ------------------
 6132|    326|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 326]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    326|            const auto initial_width = specs.precision - prefix_width;
 6140|    326|            auto max_width_view =
 6141|    326|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    326|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    326|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    326|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    326|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    326|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 326, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    326|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    326|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    326|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    326|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    326|    }                                                  \
  |  |  |  | 3642|    326|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    262|        else {
 6147|    262|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    262|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    262|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    262|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 262, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    262|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    262|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    262|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    262|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    262|    }                                                  \
  |  | 3642|    262|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    262|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIPvEENS0_13scan_expectedIPKcEERT_:
 6178|  5.41k|    {
 6179|  5.41k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.41k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.41k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.41k|            auto rd = make_reader<T, char_type>();
 6184|  5.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.87k, False: 542]
  |  |  ------------------
  ------------------
 6185|  4.87k|                return unexpected(e);
 6186|  4.87k|            }
 6187|       |
 6188|    542|            return impl(rd, range, value);
 6189|  5.41k|        }
 6190|  5.41k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.41k|            auto rd = make_reader<T, char_type>();
 6192|  5.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.41k|                return unexpected(e);
 6194|  5.41k|            }
 6195|       |
 6196|  5.41k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.41k|                specs.width != 0) {
 6198|  5.41k|                return impl(rd, range, value);
 6199|  5.41k|            }
 6200|       |
 6201|  5.41k|            auto crange = get_as_contiguous(range);
 6202|  5.41k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.41k|            return ranges::next(range.begin(),
 6204|  5.41k|                                ranges::distance(crange.begin(), it));
 6205|  5.41k|        }
 6206|  5.41k|        else {
 6207|  5.41k|            SCN_EXPECT(false);
 6208|  5.41k|            SCN_UNREACHABLE;
 6209|  5.41k|        }
 6210|  5.41k|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE11check_specsERKNS0_6detail12format_specsE:
 5753|  5.41k|    {
 5754|  5.41k|        reader_error_handler eh{};
 5755|  5.41k|        detail::check_pointer_type_specs(specs, eh);
 5756|  5.41k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.87k, False: 542]
  |  |  ------------------
  ------------------
 5757|  4.87k|            return {scan_error::invalid_format_string, eh.m_msg};
 5758|  4.87k|        }
 5759|    542|        return {};
 5760|  5.41k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_23reader_impl_for_voidptrIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6120|    542|    {
 6121|    542|        const bool need_skipped_width =
 6122|    542|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 180, False: 362]
  |  Branch (6122:33): [True: 306, False: 56]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    542|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    542|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    542|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    542|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    542|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 540]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      2|    }                                                  \
  |  |  |  | 3642|    542|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    540|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    540|        auto [it, prefix_width] = prefix_result;
 6127|    540|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    540|        std::ptrdiff_t value_width = 0;
 6131|    540|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 304, False: 236]
  ------------------
 6132|    304|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 304]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    304|            const auto initial_width = specs.precision - prefix_width;
 6140|    304|            auto max_width_view =
 6141|    304|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    304|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 304, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    304|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    304|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    304|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    304|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    304|    }                                                  \
  |  |  |  | 3642|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    236|        else {
 6147|    236|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    236|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    236|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    236|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 236, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    236|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    236|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    236|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    236|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    236|    }                                                  \
  |  | 3642|    236|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    236|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERPvNSN_10locale_refE:
 5782|    304|    {
 5783|    304|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    304|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5784|    304|        return read_default(range, value, loc);
 5785|    304|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE12read_defaultINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RPvNS0_6detail10locale_refE:
 5765|    304|    {
 5766|    304|        detail::format_specs specs{};
 5767|    304|        specs.type = detail::presentation_type::int_hex;
 5768|       |
 5769|    304|        std::uintptr_t intvalue{};
 5770|    304|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3643|    304|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    304|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    304|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    304|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 304, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    304|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    304|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    304|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    304|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    304|    }                                                  \
  |  |  |  | 3642|    304|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5771|      0|                                                                intvalue, loc));
 5772|      0|        value = reinterpret_cast<void*>(intvalue);
 5773|      0|        return result;
 5774|    304|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5782|    236|    {
 5783|    236|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    236|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5784|    236|        return read_default(range, value, loc);
 5785|    236|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIbEENS0_13scan_expectedIPKcEERT_:
 6178|  5.44k|    {
 6179|  5.44k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.44k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.44k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.44k|            auto rd = make_reader<T, char_type>();
 6184|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.70k, False: 742]
  |  |  ------------------
  ------------------
 6185|  4.70k|                return unexpected(e);
 6186|  4.70k|            }
 6187|       |
 6188|    742|            return impl(rd, range, value);
 6189|  5.44k|        }
 6190|  5.44k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.44k|            auto rd = make_reader<T, char_type>();
 6192|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.44k|                return unexpected(e);
 6194|  5.44k|            }
 6195|       |
 6196|  5.44k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.44k|                specs.width != 0) {
 6198|  5.44k|                return impl(rd, range, value);
 6199|  5.44k|            }
 6200|       |
 6201|  5.44k|            auto crange = get_as_contiguous(range);
 6202|  5.44k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.44k|            return ranges::next(range.begin(),
 6204|  5.44k|                                ranges::distance(crange.begin(), it));
 6205|  5.44k|        }
 6206|  5.44k|        else {
 6207|  5.44k|            SCN_EXPECT(false);
 6208|  5.44k|            SCN_UNREACHABLE;
 6209|  5.44k|        }
 6210|  5.44k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  5.44k|    {
 3040|  5.44k|        reader_error_handler eh{};
 3041|  5.44k|        get_derived().check_specs_impl(specs, eh);
 3042|  5.44k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.70k, False: 742]
  |  |  ------------------
  ------------------
 3043|  4.70k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  4.70k|        }
 3045|    742|        return {};
 3046|  5.44k|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIcEEcE11get_derivedEv:
 3050|  5.44k|    {
 3051|  5.44k|        return static_cast<Derived&>(*this);
 3052|  5.44k|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5497|  5.44k|    {
 5498|  5.44k|        detail::check_bool_type_specs(specs, eh);
 5499|  5.44k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_boolIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    742|    {
 6121|    742|        const bool need_skipped_width =
 6122|    742|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 196, False: 546]
  |  Branch (6122:33): [True: 340, False: 206]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    742|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    742|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    742|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    742|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    742|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 734]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      8|    }                                                  \
  |  |  |  | 3642|    742|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    734|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    734|        auto [it, prefix_width] = prefix_result;
 6127|    734|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    734|        std::ptrdiff_t value_width = 0;
 6131|    734|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 332, False: 402]
  ------------------
 6132|    332|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 332]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    332|            const auto initial_width = specs.precision - prefix_width;
 6140|    332|            auto max_width_view =
 6141|    332|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    332|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    332|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    332|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    332|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    332|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 332, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    332|    }                                                  \
  |  |  |  | 3642|    332|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    402|        else {
 6147|    402|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 402, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    402|    }                                                  \
  |  | 3642|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RKNS0_6detail12format_specsERbNSN_10locale_refE:
 5516|    332|    {
 5517|    332|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5518|       |
 5519|    332|#if !SCN_DISABLE_LOCALE
 5520|    332|        if (specs.localized) {
  ------------------
  |  Branch (5520:13): [True: 10, False: 322]
  ------------------
 5521|     10|            return rd.read_localized(range, loc, value);
 5522|     10|        }
 5523|    322|#endif
 5524|       |
 5525|    322|        return rd.read_classic(range, value);
 5526|    332|    }
_ZN3scn2v34impl20reader_impl_for_boolIcE11get_optionsERKNS0_6detail12format_specsE:
 5529|    734|    {
 5530|    734|        SCN_GCC_COMPAT_PUSH
 5531|    734|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5532|       |
 5533|    734|        switch (specs.type) {
 5534|    142|            case detail::presentation_type::string:
  ------------------
  |  Branch (5534:13): [True: 142, False: 592]
  ------------------
 5535|    142|                return bool_reader_base::allow_text;
 5536|       |
 5537|     10|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5537:13): [True: 10, False: 724]
  ------------------
 5538|     20|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5538:13): [True: 10, False: 724]
  ------------------
 5539|     30|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5539:13): [True: 10, False: 724]
  ------------------
 5540|     34|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5540:13): [True: 4, False: 730]
  ------------------
 5541|     44|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5541:13): [True: 10, False: 724]
  ------------------
 5542|     48|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5542:13): [True: 4, False: 730]
  ------------------
 5543|     48|                return bool_reader_base::allow_numeric;
 5544|       |
 5545|    544|            default:
  ------------------
  |  Branch (5545:13): [True: 544, False: 190]
  ------------------
 5546|    544|                return bool_reader_base::allow_text |
 5547|    544|                       bool_reader_base::allow_numeric;
 5548|    734|        }
 5549|       |
 5550|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5551|    734|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_NS0_6detail10locale_refERb:
 5428|     10|    {
 5429|     10|        scan_error err{scan_error::invalid_scanned_value,
 5430|     10|                       "Failed to read boolean"};
 5431|       |
 5432|     10|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5432:13): [True: 8, False: 2]
  ------------------
 5433|      8|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5433:22): [True: 0, False: 8]
  ------------------
 5434|      0|                return *r;
 5435|      0|            }
 5436|      8|            else {
 5437|      8|                err = r.error();
 5438|      8|            }
 5439|      8|        }
 5440|       |
 5441|     10|        if (m_options & allow_text) {
  ------------------
  |  Branch (5441:13): [True: 8, False: 2]
  ------------------
 5442|      8|            auto stdloc = loc.get<std::locale>();
 5443|      8|            const auto& numpunct =
 5444|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5445|      8|            const auto truename = numpunct.truename();
 5446|      8|            const auto falsename = numpunct.falsename();
 5447|       |
 5448|      8|            if (auto r =
  ------------------
  |  Branch (5448:22): [True: 0, False: 8]
  ------------------
 5449|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5450|      0|                return *r;
 5451|      0|            }
 5452|      8|            else {
 5453|      8|                err = r.error();
 5454|      8|            }
 5455|      8|        }
 5456|       |
 5457|     10|        return unexpected(err);
 5458|     10|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5384|    328|    {
 5385|    328|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5385:18): [True: 0, False: 328]
  ------------------
 5386|      0|            value = false;
 5387|      0|            return *r;
 5388|      0|        }
 5389|    328|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5389:18): [True: 0, False: 328]
  ------------------
 5390|      0|            value = true;
 5391|      0|            return *r;
 5392|      0|        }
 5393|       |
 5394|    328|        return unexpected_scan_error(
 5395|    328|            scan_error::invalid_scanned_value,
 5396|    328|            "Failed to read numeric boolean value: No match");
 5397|    328|    }
_ZN3scn2v34impl23read_matching_code_unitINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NDTcl4implISF_EEE4typeE:
 2145|    656|{
 2146|    656|    auto it = read_code_unit(range);
 2147|    656|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 656]
  |  |  ------------------
  ------------------
 2148|      0|        return unexpected(make_eof_parse_error(it.error()));
 2149|      0|    }
 2150|       |
 2151|    656|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|    656|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 656, False: 0]
  |  |  ------------------
  ------------------
 2152|    656|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|    656|        return unexpected(parse_error::error);
 2154|    656|    }
 2155|       |
 2156|      0|    return *it;
 2157|    656|}
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_RbNSF_17basic_string_viewIcNSF_11char_traitsIcEEEESR_:
 5468|      8|    {
 5469|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5470|      8|        const auto shorter = std::pair{
 5471|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5471:13): [True: 8, False: 0]
  ------------------
 5472|      8|        const auto longer = std::pair{
 5473|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5473:13): [True: 0, False: 8]
  ------------------
 5474|       |
 5475|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5475:18): [True: 0, False: 8]
  ------------------
 5476|      0|            value = shorter.second;
 5477|      0|            return *r;
 5478|      0|        }
 5479|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5479:18): [True: 0, False: 8]
  ------------------
 5480|      0|            value = longer.second;
 5481|      0|            return *r;
 5482|      0|        }
 5483|       |
 5484|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5485|      8|                                     "read_textual: No match");
 5486|      8|    }
_ZN3scn2v34impl20read_matching_stringINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewINDTcl4implISF_EEE4typeENSD_11char_traitsISN_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 8]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      8|    }                                                  \
  |  |  |  | 3642|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      8|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|      8|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|      8|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|      8|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|      8|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|      8|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 0]
  |  |  ------------------
  ------------------
 2185|      8|        return unexpected(parse_error::error);
 2186|      8|    }
 2187|      0|    return it;
 2188|      8|}
_ZN3scn2v34impl25read_exactly_n_code_unitsINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_12eof_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_l:
 1856|    620|{
 1857|    620|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|    620|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    620|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|    620|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|    620|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|    620|        if (sz < count) {
 1862|    620|            return unexpected(eof_error::eof);
 1863|    620|        }
 1864|       |
 1865|    620|        return ranges::next(range.begin(), count);
 1866|    620|    }
 1867|    620|    else {
 1868|    620|        auto it = range.begin();
 1869|    620|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 0, False: 620]
  ------------------
 1870|      0|            return ranges::next(it, count);
 1871|      0|        }
 1872|       |
 1873|  3.32k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.74k, False: 582]
  ------------------
 1874|  2.74k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 38, False: 2.70k]
  ------------------
 1875|     38|                return unexpected(eof_error::eof);
 1876|     38|            }
 1877|  2.74k|        }
 1878|       |
 1879|    582|        return it;
 1880|    620|    }
 1881|    620|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEEmT_:
 1094|    620|{
 1095|    620|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|    620|        return r.size();
 1097|    620|    }
 1098|    620|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|    620|                           ranges::const_iterator_t<Range>,
 1100|    620|                           typename detail::basic_scan_buffer<
 1101|    620|                               detail::char_t<Range>>::forward_iterator>) {
 1102|    620|        if constexpr (ranges::common_range<Range>) {
 1103|    620|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|    620|        }
 1105|    620|        else {
 1106|    620|            if (r.begin().stores_parent()) {
 1107|    620|                return static_cast<size_t>(
 1108|    620|                    r.begin().parent()->chars_available() -
 1109|    620|                    r.begin().position());
 1110|    620|            }
 1111|    620|            return r.begin().contiguous_segment().size();
 1112|    620|        }
 1113|    620|    }
 1114|    620|    else {
 1115|    620|        return 0;
 1116|    620|    }
 1117|    620|}
_ZNK3scn2v34impl16bool_reader_base12read_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5355|    322|    {
 5356|    322|        scan_error err{scan_error::invalid_scanned_value,
 5357|    322|                       "Failed to read boolean"};
 5358|       |
 5359|    322|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5359:13): [True: 320, False: 2]
  ------------------
 5360|    320|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5360:22): [True: 0, False: 320]
  ------------------
 5361|      0|                return *r;
 5362|      0|            }
 5363|    320|            else {
 5364|    320|                err = r.error();
 5365|    320|            }
 5366|    320|        }
 5367|       |
 5368|    322|        if (m_options & allow_text) {
  ------------------
  |  Branch (5368:13): [True: 302, False: 20]
  ------------------
 5369|    302|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5369:22): [True: 0, False: 302]
  ------------------
 5370|      0|                return *r;
 5371|      0|            }
 5372|    302|            else {
 5373|    302|                err = r.error();
 5374|    302|            }
 5375|    302|        }
 5376|       |
 5377|    322|        return unexpected(err);
 5378|    322|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 5402|    302|    {
 5403|    302|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5403:18): [True: 0, False: 302]
  ------------------
 5404|      0|            value = true;
 5405|      0|            return *r;
 5406|      0|        }
 5407|    302|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5407:18): [True: 0, False: 302]
  ------------------
 5408|      0|            value = false;
 5409|      0|            return *r;
 5410|      0|        }
 5411|       |
 5412|    302|        return unexpected_scan_error(
 5413|    302|            scan_error::invalid_scanned_value,
 5414|    302|            "Failed to read textual boolean value: No match");
 5415|    302|    }
_ZN3scn2v34impl28read_matching_string_classicINS1_15take_width_viewINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEEEENS1_14parse_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NSD_17basic_string_viewIcNSD_11char_traitsIcEEEE:
 2193|    604|{
 2194|    604|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|    604|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    604|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    604|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    604|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 574]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     30|    }                                                  \
  |  |  |  | 3642|    604|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    574|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|    574|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|    574|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|    574|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|    574|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|    574|        if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|    574|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 574, False: 0]
  |  |  ------------------
  ------------------
 2201|    574|            return unexpected(parse_error::error);
 2202|    574|        }
 2203|      0|        return it;
 2204|    574|    }
 2205|    574|    else {
 2206|    574|        auto range_it = range.begin();
 2207|    574|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
 2208|    574|            if (SCN_UNLIKELY(*range_it !=
 2209|    574|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|    574|                return unexpected(parse_error::error);
 2211|    574|            }
 2212|    574|        }
 2213|    574|        return it;
 2214|    574|    }
 2215|    574|}
_ZNK3scn2v34impl20reader_impl_for_boolIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5516|    402|    {
 5517|    402|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5518|       |
 5519|    402|#if !SCN_DISABLE_LOCALE
 5520|    402|        if (specs.localized) {
  ------------------
  |  Branch (5520:13): [True: 14, False: 388]
  ------------------
 5521|     14|            return rd.read_localized(range, loc, value);
 5522|     14|        }
 5523|    388|#endif
 5524|       |
 5525|    388|        return rd.read_classic(range, value);
 5526|    402|    }
_ZNK3scn2v34impl11bool_readerIcE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5428|     14|    {
 5429|     14|        scan_error err{scan_error::invalid_scanned_value,
 5430|     14|                       "Failed to read boolean"};
 5431|       |
 5432|     14|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5432:13): [True: 12, False: 2]
  ------------------
 5433|     12|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5433:22): [True: 0, False: 12]
  ------------------
 5434|      0|                return *r;
 5435|      0|            }
 5436|     12|            else {
 5437|     12|                err = r.error();
 5438|     12|            }
 5439|     12|        }
 5440|       |
 5441|     14|        if (m_options & allow_text) {
  ------------------
  |  Branch (5441:13): [True: 8, False: 6]
  ------------------
 5442|      8|            auto stdloc = loc.get<std::locale>();
 5443|      8|            const auto& numpunct =
 5444|      8|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5445|      8|            const auto truename = numpunct.truename();
 5446|      8|            const auto falsename = numpunct.falsename();
 5447|       |
 5448|      8|            if (auto r =
  ------------------
  |  Branch (5448:22): [True: 0, False: 8]
  ------------------
 5449|      8|                    read_textual_custom(range, value, truename, falsename)) {
 5450|      0|                return *r;
 5451|      0|            }
 5452|      8|            else {
 5453|      8|                err = r.error();
 5454|      8|            }
 5455|      8|        }
 5456|       |
 5457|     14|        return unexpected(err);
 5458|     14|    }
_ZNK3scn2v34impl11bool_readerIcE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIcNSD_11char_traitsIcEEEESP_:
 5468|      8|    {
 5469|      8|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5470|      8|        const auto shorter = std::pair{
 5471|      8|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5471:13): [True: 8, False: 0]
  ------------------
 5472|      8|        const auto longer = std::pair{
 5473|      8|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5473:13): [True: 0, False: 8]
  ------------------
 5474|       |
 5475|      8|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5475:18): [True: 0, False: 8]
  ------------------
 5476|      0|            value = shorter.second;
 5477|      0|            return *r;
 5478|      0|        }
 5479|      8|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5479:18): [True: 0, False: 8]
  ------------------
 5480|      0|            value = longer.second;
 5481|      0|            return *r;
 5482|      0|        }
 5483|       |
 5484|      8|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5485|      8|                                     "read_textual: No match");
 5486|      8|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     16|{
 2179|     16|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|     16|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     16|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     16|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 14]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      2|    }                                                  \
  |  |  |  | 3642|     16|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     14|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     14|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     14|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     14|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     14|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     14|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 0]
  |  |  ------------------
  ------------------
 2185|     14|        return unexpected(parse_error::error);
 2186|     14|    }
 2187|      0|    return it;
 2188|     14|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIcEENS0_13scan_expectedIPKcEERT_:
 6178|  5.41k|    {
 6179|  5.41k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.41k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.41k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.41k|            auto rd = make_reader<T, char_type>();
 6184|  5.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.83k, False: 580]
  |  |  ------------------
  ------------------
 6185|  4.83k|                return unexpected(e);
 6186|  4.83k|            }
 6187|       |
 6188|    580|            return impl(rd, range, value);
 6189|  5.41k|        }
 6190|  5.41k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.41k|            auto rd = make_reader<T, char_type>();
 6192|  5.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.41k|                return unexpected(e);
 6194|  5.41k|            }
 6195|       |
 6196|  5.41k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.41k|                specs.width != 0) {
 6198|  5.41k|                return impl(rd, range, value);
 6199|  5.41k|            }
 6200|       |
 6201|  5.41k|            auto crange = get_as_contiguous(range);
 6202|  5.41k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.41k|            return ranges::next(range.begin(),
 6204|  5.41k|                                ranges::distance(crange.begin(), it));
 6205|  5.41k|        }
 6206|  5.41k|        else {
 6207|  5.41k|            SCN_EXPECT(false);
 6208|  5.41k|            SCN_UNREACHABLE;
 6209|  5.41k|        }
 6210|  5.41k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_20reader_impl_for_charIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEcEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    580|    {
 6121|    580|        const bool need_skipped_width =
 6122|    580|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 182, False: 398]
  |  Branch (6122:33): [True: 328, False: 70]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    580|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    580|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    580|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    580|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    580|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 580]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    580|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    580|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    580|        auto [it, prefix_width] = prefix_result;
 6127|    580|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    580|        std::ptrdiff_t value_width = 0;
 6131|    580|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 328, False: 252]
  ------------------
 6132|    328|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 328]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    328|            const auto initial_width = specs.precision - prefix_width;
 6140|    328|            auto max_width_view =
 6141|    328|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    328|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 302]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     26|    }                                                  \
  |  |  |  | 3642|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    302|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    302|            it = w_it.base();
 6144|    302|            value_width = initial_width - w_it.count();
 6145|    302|        }
 6146|    252|        else {
 6147|    252|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    252|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    252|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    252|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 20, False: 232]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     20|    }                                                  \
  |  | 3642|    252|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|    232|                                             specs, value, loc));
 6149|       |
 6150|    232|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 178, False: 54]
  ------------------
 6151|    178|                value_width = calculate_text_width(
 6152|    178|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    178|                        .view());
 6154|    178|            }
 6155|    232|        }
 6156|       |
 6157|       |        // Read postfix
 6158|    534|        std::ptrdiff_t postfix_width = 0;
 6159|    534|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 534, False: 0]
  ------------------
 6160|    534|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|    534|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    534|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    534|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    534|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 534]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    534|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    534|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|    534|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|    534|                                 rd.skip_ws_before_read(), prefix_width,
 6163|    534|                                 value_width));
 6164|    534|            std::tie(it, postfix_width) = postfix_result;
 6165|    534|        }
 6166|       |
 6167|    534|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|    534|                                                 value_width, postfix_width);
 6169|    534|            !e) {
  ------------------
  |  Branch (6169:13): [True: 164, False: 370]
  ------------------
 6170|    164|            return unexpected(e);
 6171|    164|        }
 6172|       |
 6173|    370|        return it;
 6174|    534|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6178|  5.44k|    {
 6179|  5.44k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.44k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.44k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.44k|            auto rd = make_reader<T, char_type>();
 6184|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.84k, False: 604]
  |  |  ------------------
  ------------------
 6185|  4.84k|                return unexpected(e);
 6186|  4.84k|            }
 6187|       |
 6188|    604|            return impl(rd, range, value);
 6189|  5.44k|        }
 6190|  5.44k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.44k|            auto rd = make_reader<T, char_type>();
 6192|  5.44k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.44k|                return unexpected(e);
 6194|  5.44k|            }
 6195|       |
 6196|  5.44k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.44k|                specs.width != 0) {
 6198|  5.44k|                return impl(rd, range, value);
 6199|  5.44k|            }
 6200|       |
 6201|  5.44k|            auto crange = get_as_contiguous(range);
 6202|  5.44k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.44k|            return ranges::next(range.begin(),
 6204|  5.44k|                                ranges::distance(crange.begin(), it));
 6205|  5.44k|        }
 6206|  5.44k|        else {
 6207|  5.44k|            SCN_EXPECT(false);
 6208|  5.44k|            SCN_UNREACHABLE;
 6209|  5.44k|        }
 6210|  5.44k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    604|    {
 6121|    604|        const bool need_skipped_width =
 6122|    604|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 188, False: 416]
  |  Branch (6122:33): [True: 324, False: 92]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    604|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    604|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    604|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    604|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    604|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 596]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      8|    }                                                  \
  |  |  |  | 3642|    604|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    596|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    596|        auto [it, prefix_width] = prefix_result;
 6127|    596|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    596|        std::ptrdiff_t value_width = 0;
 6131|    596|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 316, False: 280]
  ------------------
 6132|    316|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 316]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    316|            const auto initial_width = specs.precision - prefix_width;
 6140|    316|            auto max_width_view =
 6141|    316|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    316|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    316|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    316|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    316|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    316|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 316, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    316|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    316|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    316|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    316|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    316|    }                                                  \
  |  |  |  | 3642|    316|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    280|        else {
 6147|    280|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    280|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    280|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    280|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 280, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    280|    }                                                  \
  |  | 3642|    280|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    280|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6178|  5.41k|    {
 6179|  5.41k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.41k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.41k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.41k|            auto rd = make_reader<T, char_type>();
 6184|  5.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 5.31k]
  |  |  ------------------
  ------------------
 6185|    108|                return unexpected(e);
 6186|    108|            }
 6187|       |
 6188|  5.31k|            return impl(rd, range, value);
 6189|  5.41k|        }
 6190|  5.41k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.41k|            auto rd = make_reader<T, char_type>();
 6192|  5.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.41k|                return unexpected(e);
 6194|  5.41k|            }
 6195|       |
 6196|  5.41k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.41k|                specs.width != 0) {
 6198|  5.41k|                return impl(rd, range, value);
 6199|  5.41k|            }
 6200|       |
 6201|  5.41k|            auto crange = get_as_contiguous(range);
 6202|  5.41k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.41k|            return ranges::next(range.begin(),
 6204|  5.41k|                                ranges::distance(crange.begin(), it));
 6205|  5.41k|        }
 6206|  5.41k|        else {
 6207|  5.41k|            SCN_EXPECT(false);
 6208|  5.41k|            SCN_UNREACHABLE;
 6209|  5.41k|        }
 6210|  5.41k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6120|  5.31k|    {
 6121|  5.31k|        const bool need_skipped_width =
 6122|  5.31k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 268, False: 5.04k]
  |  Branch (6122:33): [True: 692, False: 4.35k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  5.31k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  5.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 5.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      2|    }                                                  \
  |  |  |  | 3642|  5.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  5.30k|        auto [it, prefix_width] = prefix_result;
 6127|  5.30k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  5.30k|        std::ptrdiff_t value_width = 0;
 6131|  5.30k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 692, False: 4.61k]
  ------------------
 6132|    692|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 692]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    692|            const auto initial_width = specs.precision - prefix_width;
 6140|    692|            auto max_width_view =
 6141|    692|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    692|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    692|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    692|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    692|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    692|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 342, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    342|    }                                                  \
  |  |  |  | 3642|    692|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    350|            it = w_it.base();
 6144|    350|            value_width = initial_width - w_it.count();
 6145|    350|        }
 6146|  4.61k|        else {
 6147|  4.61k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.10k, False: 1.51k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  3.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  3.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  3.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  3.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  3.10k|    }                                                  \
  |  | 3642|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  1.51k|                                             specs, value, loc));
 6149|       |
 6150|  1.51k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 230, False: 1.28k]
  ------------------
 6151|    230|                value_width = calculate_text_width(
 6152|    230|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    230|                        .view());
 6154|    230|            }
 6155|  1.51k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  1.86k|        std::ptrdiff_t postfix_width = 0;
 6159|  1.86k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 1.50k, False: 360]
  ------------------
 6160|  1.50k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  1.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.50k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  1.50k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  1.50k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  1.50k|                                 value_width));
 6164|  1.50k|            std::tie(it, postfix_width) = postfix_result;
 6165|  1.50k|        }
 6166|       |
 6167|  1.86k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  1.86k|                                                 value_width, postfix_width);
 6169|  1.86k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 128, False: 1.73k]
  ------------------
 6170|    128|            return unexpected(e);
 6171|    128|        }
 6172|       |
 6173|  1.73k|        return it;
 6174|  1.86k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6178|  5.41k|    {
 6179|  5.41k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.41k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.41k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.41k|            auto rd = make_reader<T, char_type>();
 6184|  5.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 5.31k]
  |  |  ------------------
  ------------------
 6185|    108|                return unexpected(e);
 6186|    108|            }
 6187|       |
 6188|  5.31k|            return impl(rd, range, value);
 6189|  5.41k|        }
 6190|  5.41k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.41k|            auto rd = make_reader<T, char_type>();
 6192|  5.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.41k|                return unexpected(e);
 6194|  5.41k|            }
 6195|       |
 6196|  5.41k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.41k|                specs.width != 0) {
 6198|  5.41k|                return impl(rd, range, value);
 6199|  5.41k|            }
 6200|       |
 6201|  5.41k|            auto crange = get_as_contiguous(range);
 6202|  5.41k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.41k|            return ranges::next(range.begin(),
 6204|  5.41k|                                ranges::distance(crange.begin(), it));
 6205|  5.41k|        }
 6206|  5.41k|        else {
 6207|  5.41k|            SCN_EXPECT(false);
 6208|  5.41k|            SCN_UNREACHABLE;
 6209|  5.41k|        }
 6210|  5.41k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|  5.31k|    {
 6121|  5.31k|        const bool need_skipped_width =
 6122|  5.31k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 268, False: 5.04k]
  |  Branch (6122:33): [True: 692, False: 4.35k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  5.31k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  5.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 5.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      2|    }                                                  \
  |  |  |  | 3642|  5.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  5.30k|        auto [it, prefix_width] = prefix_result;
 6127|  5.30k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  5.30k|        std::ptrdiff_t value_width = 0;
 6131|  5.30k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 692, False: 4.61k]
  ------------------
 6132|    692|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 692]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    692|            const auto initial_width = specs.precision - prefix_width;
 6140|    692|            auto max_width_view =
 6141|    692|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    692|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    692|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    692|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    692|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    692|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 342, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    342|    }                                                  \
  |  |  |  | 3642|    692|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    350|            it = w_it.base();
 6144|    350|            value_width = initial_width - w_it.count();
 6145|    350|        }
 6146|  4.61k|        else {
 6147|  4.61k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.10k, False: 1.51k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  3.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  3.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  3.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  3.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  3.10k|    }                                                  \
  |  | 3642|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  1.51k|                                             specs, value, loc));
 6149|       |
 6150|  1.51k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 230, False: 1.28k]
  ------------------
 6151|    230|                value_width = calculate_text_width(
 6152|    230|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    230|                        .view());
 6154|    230|            }
 6155|  1.51k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  1.86k|        std::ptrdiff_t postfix_width = 0;
 6159|  1.86k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 1.50k, False: 360]
  ------------------
 6160|  1.50k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  1.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.50k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  1.50k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  1.50k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  1.50k|                                 value_width));
 6164|  1.50k|            std::tie(it, postfix_width) = postfix_result;
 6165|  1.50k|        }
 6166|       |
 6167|  1.86k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  1.86k|                                                 value_width, postfix_width);
 6169|  1.86k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 128, False: 1.73k]
  ------------------
 6170|    128|            return unexpected(e);
 6171|    128|        }
 6172|       |
 6173|  1.73k|        return it;
 6174|  1.86k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKcEERT_:
 6178|  5.41k|    {
 6179|  5.41k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|  5.41k|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|  5.41k|                          basic_contiguous_scan_context<char_type>>) {
 6183|  5.41k|            auto rd = make_reader<T, char_type>();
 6184|  5.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 108, False: 5.31k]
  |  |  ------------------
  ------------------
 6185|    108|                return unexpected(e);
 6186|    108|            }
 6187|       |
 6188|  5.31k|            return impl(rd, range, value);
 6189|  5.41k|        }
 6190|  5.41k|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|  5.41k|            auto rd = make_reader<T, char_type>();
 6192|  5.41k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|  5.41k|                return unexpected(e);
 6194|  5.41k|            }
 6195|       |
 6196|  5.41k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|  5.41k|                specs.width != 0) {
 6198|  5.41k|                return impl(rd, range, value);
 6199|  5.41k|            }
 6200|       |
 6201|  5.41k|            auto crange = get_as_contiguous(range);
 6202|  5.41k|            SCN_TRY(it, impl(rd, crange, value));
 6203|  5.41k|            return ranges::next(range.begin(),
 6204|  5.41k|                                ranges::distance(crange.begin(), it));
 6205|  5.41k|        }
 6206|  5.41k|        else {
 6207|  5.41k|            SCN_EXPECT(false);
 6208|  5.41k|            SCN_UNREACHABLE;
 6209|  5.41k|        }
 6210|  5.41k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|  5.31k|    {
 6121|  5.31k|        const bool need_skipped_width =
 6122|  5.31k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 268, False: 5.04k]
  |  Branch (6122:33): [True: 692, False: 4.35k]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|  5.31k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  5.31k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.31k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.31k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.31k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2, False: 5.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      2|    }                                                  \
  |  |  |  | 3642|  5.31k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|  5.30k|        auto [it, prefix_width] = prefix_result;
 6127|  5.30k|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|  5.30k|        std::ptrdiff_t value_width = 0;
 6131|  5.30k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 692, False: 4.61k]
  ------------------
 6132|    692|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 692]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|    692|            const auto initial_width = specs.precision - prefix_width;
 6140|    692|            auto max_width_view =
 6141|    692|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|    692|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|    692|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    692|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    692|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    692|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 342, False: 350]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    342|    }                                                  \
  |  |  |  | 3642|    692|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    350|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|    350|            it = w_it.base();
 6144|    350|            value_width = initial_width - w_it.count();
 6145|    350|        }
 6146|  4.61k|        else {
 6147|  4.61k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  4.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  4.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  4.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.10k, False: 1.51k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  3.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  3.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  3.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  3.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  3.10k|    }                                                  \
  |  | 3642|  4.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|  1.51k|                                             specs, value, loc));
 6149|       |
 6150|  1.51k|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 230, False: 1.28k]
  ------------------
 6151|    230|                value_width = calculate_text_width(
 6152|    230|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    230|                        .view());
 6154|    230|            }
 6155|  1.51k|        }
 6156|       |
 6157|       |        // Read postfix
 6158|  1.86k|        std::ptrdiff_t postfix_width = 0;
 6159|  1.86k|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 1.50k, False: 360]
  ------------------
 6160|  1.50k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  1.50k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.50k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.50k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.50k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.50k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.50k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|  1.50k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|  1.50k|                                 rd.skip_ws_before_read(), prefix_width,
 6163|  1.50k|                                 value_width));
 6164|  1.50k|            std::tie(it, postfix_width) = postfix_result;
 6165|  1.50k|        }
 6166|       |
 6167|  1.86k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|  1.86k|                                                 value_width, postfix_width);
 6169|  1.86k|            !e) {
  ------------------
  |  Branch (6169:13): [True: 128, False: 1.73k]
  ------------------
 6170|    128|            return unexpected(e);
 6171|    128|        }
 6172|       |
 6173|  1.73k|        return it;
 6174|  1.86k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5795|  5.32k|{
 5796|  5.32k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.32k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.32k]
  |  |  ------------------
  ------------------
 5797|      0|        return unexpected(e);
 5798|      0|    }
 5799|       |
 5800|  5.32k|    if (!is_required) {
  ------------------
  |  Branch (5800:9): [True: 592, False: 4.73k]
  ------------------
 5801|    592|        return range.begin();
 5802|    592|    }
 5803|       |
 5804|  4.73k|    return skip_classic_whitespace(range);
 5805|  5.32k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5871|    592|    {
 5872|    592|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    592|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    592|                          basic_contiguous_scan_context<char_type>>) {
 5876|    592|            auto rd = make_reader<T, char_type>();
 5877|    592|            return impl(rd, range, value);
 5878|    592|        }
 5879|    592|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    592|            auto rd = make_reader<T, char_type>();
 5881|    592|            if (!is_segment_contiguous(range)) {
 5882|    592|                return impl(rd, range, value);
 5883|    592|            }
 5884|    592|            auto crange = get_as_contiguous(range);
 5885|    592|            SCN_TRY(it, impl(rd, crange, value));
 5886|    592|            return ranges::next(range.begin(),
 5887|    592|                                ranges::distance(crange.begin(), it));
 5888|    592|        }
 5889|    592|        else {
 5890|    592|            SCN_EXPECT(false);
 5891|    592|            SCN_UNREACHABLE;
 5892|    592|        }
 5893|    592|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    592|    {
 5864|    592|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    592|                        .transform_error(make_eof_scan_error));
 5866|    592|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    592|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|    592|    {
 3529|    592|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    592|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|    592|        return read_default_with_base(range, value, 10);
 3531|    592|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|    592|    {
 3493|    592|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|    592|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|    592|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|    592|            if (prefix_result.sign == sign_type::minus_sign) {
 3498|    592|                return unexpected_scan_error(
 3499|    592|                    scan_error::invalid_scanned_value,
 3500|    592|                    "Unexpected '-' sign when parsing an "
 3501|    592|                    "unsigned value");
 3502|    592|            }
 3503|    592|        }
 3504|       |
 3505|    592|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 592]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  1.18k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  1.18k|                parse_integer_digits_without_thsep(
 3512|  1.18k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  1.18k|                    prefix_result.parsed_base));
 3514|       |
 3515|  1.18k|        auto buf = make_contiguous_buffer(
 3516|  1.18k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  1.18k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 592, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    592|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    592|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    592|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    592|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    592|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  1.18k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5871|    592|    {
 5872|    592|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    592|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    592|                          basic_contiguous_scan_context<char_type>>) {
 5876|    592|            auto rd = make_reader<T, char_type>();
 5877|    592|            return impl(rd, range, value);
 5878|    592|        }
 5879|    592|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    592|            auto rd = make_reader<T, char_type>();
 5881|    592|            if (!is_segment_contiguous(range)) {
 5882|    592|                return impl(rd, range, value);
 5883|    592|            }
 5884|    592|            auto crange = get_as_contiguous(range);
 5885|    592|            SCN_TRY(it, impl(rd, crange, value));
 5886|    592|            return ranges::next(range.begin(),
 5887|    592|                                ranges::distance(crange.begin(), it));
 5888|    592|        }
 5889|    592|        else {
 5890|    592|            SCN_EXPECT(false);
 5891|    592|            SCN_UNREACHABLE;
 5892|    592|        }
 5893|    592|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    592|    {
 5864|    592|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    592|                        .transform_error(make_eof_scan_error));
 5866|    592|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    592|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3528|    592|    {
 3529|    592|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    592|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3530|    592|        return read_default_with_base(range, value, 10);
 3531|    592|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|    592|    {
 3493|    592|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|    592|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|    592|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|    592|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3497:17): [True: 0, False: 592]
  ------------------
 3498|      0|                return unexpected_scan_error(
 3499|      0|                    scan_error::invalid_scanned_value,
 3500|      0|                    "Unexpected '-' sign when parsing an "
 3501|      0|                    "unsigned value");
 3502|      0|            }
 3503|    592|        }
 3504|       |
 3505|    592|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 592]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  1.18k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  1.18k|                parse_integer_digits_without_thsep(
 3512|  1.18k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  1.18k|                    prefix_result.parsed_base));
 3514|       |
 3515|  1.18k|        auto buf = make_contiguous_buffer(
 3516|  1.18k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  1.18k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 592, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    592|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    592|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    592|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    592|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    592|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  1.18k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 5871|    592|    {
 5872|    592|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    592|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    592|                          basic_contiguous_scan_context<char_type>>) {
 5876|    592|            auto rd = make_reader<T, char_type>();
 5877|    592|            return impl(rd, range, value);
 5878|    592|        }
 5879|    592|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    592|            auto rd = make_reader<T, char_type>();
 5881|    592|            if (!is_segment_contiguous(range)) {
 5882|    592|                return impl(rd, range, value);
 5883|    592|            }
 5884|    592|            auto crange = get_as_contiguous(range);
 5885|    592|            SCN_TRY(it, impl(rd, crange, value));
 5886|    592|            return ranges::next(range.begin(),
 5887|    592|                                ranges::distance(crange.begin(), it));
 5888|    592|        }
 5889|    592|        else {
 5890|    592|            SCN_EXPECT(false);
 5891|    592|            SCN_UNREACHABLE;
 5892|    592|        }
 5893|    592|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 5863|    592|    {
 5864|    592|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    592|                        .transform_error(make_eof_scan_error));
 5866|    592|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    592|    }
_ZNK3scn2v34impl23reader_impl_for_voidptrIwE19skip_ws_before_readEv:
 5748|    966|    {
 5749|    966|        return true;
 5750|    966|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RPvNS0_6detail10locale_refE:
 5765|    966|    {
 5766|    966|        detail::format_specs specs{};
 5767|    966|        specs.type = detail::presentation_type::int_hex;
 5768|       |
 5769|    966|        std::uintptr_t intvalue{};
 5770|    966|        SCN_TRY(result, reader_impl_for_int<CharT>{}.read_specs(range, specs,
  ------------------
  |  | 3643|    966|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    966|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    966|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    966|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 966, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    966|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    966|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    966|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    966|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    966|    }                                                  \
  |  |  |  | 3642|    966|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5771|      0|                                                                intvalue, loc));
 5772|      0|        value = reinterpret_cast<void*>(intvalue);
 5773|      0|        return result;
 5774|    966|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 5871|    592|    {
 5872|    592|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    592|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    592|                          basic_contiguous_scan_context<char_type>>) {
 5876|    592|            auto rd = make_reader<T, char_type>();
 5877|    592|            return impl(rd, range, value);
 5878|    592|        }
 5879|    592|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    592|            auto rd = make_reader<T, char_type>();
 5881|    592|            if (!is_segment_contiguous(range)) {
 5882|    592|                return impl(rd, range, value);
 5883|    592|            }
 5884|    592|            auto crange = get_as_contiguous(range);
 5885|    592|            SCN_TRY(it, impl(rd, crange, value));
 5886|    592|            return ranges::next(range.begin(),
 5887|    592|                                ranges::distance(crange.begin(), it));
 5888|    592|        }
 5889|    592|        else {
 5890|    592|            SCN_EXPECT(false);
 5891|    592|            SCN_UNREACHABLE;
 5892|    592|        }
 5893|    592|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    592|    {
 5864|    592|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    592|                        .transform_error(make_eof_scan_error));
 5866|    592|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    592|    }
_ZNK3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE19skip_ws_before_readEv:
 3034|  1.03k|    {
 3035|  1.03k|        return true;
 3036|  1.03k|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNS0_6detail10locale_refE:
 5504|    592|    {
 5505|    592|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    592|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5506|       |
 5507|    592|        return bool_reader<CharT>{}.read_classic(range, value);
 5508|    592|    }
_ZNK3scn2v34impl16bool_reader_base12read_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5355|  1.02k|    {
 5356|  1.02k|        scan_error err{scan_error::invalid_scanned_value,
 5357|  1.02k|                       "Failed to read boolean"};
 5358|       |
 5359|  1.02k|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5359:13): [True: 986, False: 38]
  ------------------
 5360|    986|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5360:22): [True: 0, False: 986]
  ------------------
 5361|      0|                return *r;
 5362|      0|            }
 5363|    986|            else {
 5364|    986|                err = r.error();
 5365|    986|            }
 5366|    986|        }
 5367|       |
 5368|  1.02k|        if (m_options & allow_text) {
  ------------------
  |  Branch (5368:13): [True: 1.00k, False: 22]
  ------------------
 5369|  1.00k|            if (auto r = read_textual_classic(range, value)) {
  ------------------
  |  Branch (5369:22): [True: 0, False: 1.00k]
  ------------------
 5370|      0|                return *r;
 5371|      0|            }
 5372|  1.00k|            else {
 5373|  1.00k|                err = r.error();
 5374|  1.00k|            }
 5375|  1.00k|        }
 5376|       |
 5377|  1.02k|        return unexpected(err);
 5378|  1.02k|    }
_ZNK3scn2v34impl16bool_reader_base12read_numericINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5384|    996|    {
 5385|    996|        if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (5385:18): [True: 0, False: 996]
  ------------------
 5386|      0|            value = false;
 5387|      0|            return *r;
 5388|      0|        }
 5389|    996|        if (auto r = read_matching_code_unit(range, '1')) {
  ------------------
  |  Branch (5389:18): [True: 0, False: 996]
  ------------------
 5390|      0|            value = true;
 5391|      0|            return *r;
 5392|      0|        }
 5393|       |
 5394|    996|        return unexpected_scan_error(
 5395|    996|            scan_error::invalid_scanned_value,
 5396|    996|            "Failed to read numeric boolean value: No match");
 5397|    996|    }
_ZNK3scn2v34impl16bool_reader_base20read_textual_classicINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_Rb:
 5402|  1.00k|    {
 5403|  1.00k|        if (auto r = read_matching_string_classic(range, "true")) {
  ------------------
  |  Branch (5403:18): [True: 0, False: 1.00k]
  ------------------
 5404|      0|            value = true;
 5405|      0|            return *r;
 5406|      0|        }
 5407|  1.00k|        if (auto r = read_matching_string_classic(range, "false")) {
  ------------------
  |  Branch (5407:18): [True: 0, False: 1.00k]
  ------------------
 5408|      0|            value = false;
 5409|      0|            return *r;
 5410|      0|        }
 5411|       |
 5412|  1.00k|        return unexpected_scan_error(
 5413|  1.00k|            scan_error::invalid_scanned_value,
 5414|  1.00k|            "Failed to read textual boolean value: No match");
 5415|  1.00k|    }
_ZN3scn2v34impl28read_matching_string_classicINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2193|  2.00k|{
 2194|  2.00k|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  2.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 134, False: 1.87k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    134|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    134|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    134|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    134|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    134|    }                                                  \
  |  |  |  | 3642|  2.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2195|  1.87k|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2196|  1.87k|                    .transform_error(make_eof_parse_error));
 2197|       |
 2198|  1.87k|    if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2198:19): [Folded - Ignored]
  ------------------
 2199|  1.87k|        auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2200|  1.87k|        if (SCN_UNLIKELY(sv.view() != str)) {
 2201|  1.87k|            return unexpected(parse_error::error);
 2202|  1.87k|        }
 2203|  1.87k|        return it;
 2204|  1.87k|    }
 2205|  1.87k|    else {
 2206|  1.87k|        auto range_it = range.begin();
 2207|  1.87k|        for (size_t i = 0; i < str.size(); ++i, (void)++range_it) {
  ------------------
  |  Branch (2207:28): [True: 1.87k, False: 0]
  ------------------
 2208|  1.87k|            if (SCN_UNLIKELY(*range_it !=
  ------------------
  |  |  859|  1.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.87k, False: 0]
  |  |  ------------------
  ------------------
 2209|  1.87k|                             static_cast<detail::char_t<Range>>(str[i]))) {
 2210|  1.87k|                return unexpected(parse_error::error);
 2211|  1.87k|            }
 2212|  1.87k|        }
 2213|      0|        return it;
 2214|  1.87k|    }
 2215|  1.87k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 5871|    592|    {
 5872|    592|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    592|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    592|                          basic_contiguous_scan_context<char_type>>) {
 5876|    592|            auto rd = make_reader<T, char_type>();
 5877|    592|            return impl(rd, range, value);
 5878|    592|        }
 5879|    592|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    592|            auto rd = make_reader<T, char_type>();
 5881|    592|            if (!is_segment_contiguous(range)) {
 5882|    592|                return impl(rd, range, value);
 5883|    592|            }
 5884|    592|            auto crange = get_as_contiguous(range);
 5885|    592|            SCN_TRY(it, impl(rd, crange, value));
 5886|    592|            return ranges::next(range.begin(),
 5887|    592|                                ranges::distance(crange.begin(), it));
 5888|    592|        }
 5889|    592|        else {
 5890|    592|            SCN_EXPECT(false);
 5891|    592|            SCN_UNREACHABLE;
 5892|    592|        }
 5893|    592|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    592|    {
 5864|    592|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    592|                        .transform_error(make_eof_scan_error));
 5866|    592|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    592|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3658|    592|    constexpr float_reader() = default;
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5871|    592|    {
 5872|    592|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    592|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    592|                          basic_contiguous_scan_context<char_type>>) {
 5876|    592|            auto rd = make_reader<T, char_type>();
 5877|    592|            return impl(rd, range, value);
 5878|    592|        }
 5879|    592|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    592|            auto rd = make_reader<T, char_type>();
 5881|    592|            if (!is_segment_contiguous(range)) {
 5882|    592|                return impl(rd, range, value);
 5883|    592|            }
 5884|    592|            auto crange = get_as_contiguous(range);
 5885|    592|            SCN_TRY(it, impl(rd, crange, value));
 5886|    592|            return ranges::next(range.begin(),
 5887|    592|                                ranges::distance(crange.begin(), it));
 5888|    592|        }
 5889|    592|        else {
 5890|    592|            SCN_EXPECT(false);
 5891|    592|            SCN_UNREACHABLE;
 5892|    592|        }
 5893|    592|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5863|    592|    {
 5864|    592|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    592|                        .transform_error(make_eof_scan_error));
 5866|    592|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    592|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4152|    592|    {
 4153|    592|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    592|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4154|       |
 4155|    592|        float_reader<CharT> rd{};
 4156|    592|        return read_impl<Range>(
 4157|    592|            range, rd,
 4158|    592|            [](float_reader<CharT>& r, auto&&... args) {
 4159|    592|                return r.read_source(SCN_FWD(args)...);
 4160|    592|            },
 4161|    592|            value);
 4162|    592|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    592|    {
  754|    592|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    592|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    592|              cvref<T> obj = *get<T>(fn);
  745|    592|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    592|                  obj(static_cast<decltype(args)>(args)...);
  747|    592|              }
  748|    592|              else {
  749|    592|                  return obj(static_cast<decltype(args)>(args)...);
  750|    592|              }
  751|    592|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    592|    {
  684|    592|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    592|            return static_cast<T*>(s.m_cp);
  686|    592|        }
  687|    592|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    592|            return static_cast<T*>(s.m_p);
  689|    592|        }
  690|    592|        else {
  691|    592|            return reinterpret_cast<T*>(s.m_fp);
  692|    592|        }
  693|    592|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4158|    592|            [](float_reader<CharT>& r, auto&&... args) {
 4159|    592|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4160|    592|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    592|        {
  662|    592|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 5871|    592|    {
 5872|    592|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    592|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    592|                          basic_contiguous_scan_context<char_type>>) {
 5876|    592|            auto rd = make_reader<T, char_type>();
 5877|    592|            return impl(rd, range, value);
 5878|    592|        }
 5879|    592|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    592|            auto rd = make_reader<T, char_type>();
 5881|    592|            if (!is_segment_contiguous(range)) {
 5882|    592|                return impl(rd, range, value);
 5883|    592|            }
 5884|    592|            auto crange = get_as_contiguous(range);
 5885|    592|            SCN_TRY(it, impl(rd, crange, value));
 5886|    592|            return ranges::next(range.begin(),
 5887|    592|                                ranges::distance(crange.begin(), it));
 5888|    592|        }
 5889|    592|        else {
 5890|    592|            SCN_EXPECT(false);
 5891|    592|            SCN_UNREACHABLE;
 5892|    592|        }
 5893|    592|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|    592|    {
 5864|    592|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    592|                        .transform_error(make_eof_scan_error));
 5866|    592|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    592|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|    592|    {
 5267|    592|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    592|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|    592|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|    592|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5871|    592|    {
 5872|    592|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    592|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    592|                          basic_contiguous_scan_context<char_type>>) {
 5876|    592|            auto rd = make_reader<T, char_type>();
 5877|    592|            return impl(rd, range, value);
 5878|    592|        }
 5879|    592|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    592|            auto rd = make_reader<T, char_type>();
 5881|    592|            if (!is_segment_contiguous(range)) {
 5882|    592|                return impl(rd, range, value);
 5883|    592|            }
 5884|    592|            auto crange = get_as_contiguous(range);
 5885|    592|            SCN_TRY(it, impl(rd, crange, value));
 5886|    592|            return ranges::next(range.begin(),
 5887|    592|                                ranges::distance(crange.begin(), it));
 5888|    592|        }
 5889|    592|        else {
 5890|    592|            SCN_EXPECT(false);
 5891|    592|            SCN_UNREACHABLE;
 5892|    592|        }
 5893|    592|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5863|    592|    {
 5864|    592|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    592|                        .transform_error(make_eof_scan_error));
 5866|    592|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    592|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5266|    592|    {
 5267|    592|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    592|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|    592|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|    592|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5871|    592|    {
 5872|    592|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|    592|                      std::is_same_v<
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|      0|                          context_type,
 5875|    592|                          basic_contiguous_scan_context<char_type>>) {
 5876|    592|            auto rd = make_reader<T, char_type>();
 5877|    592|            return impl(rd, range, value);
 5878|    592|        }
 5879|    592|        else if constexpr (!detail::is_type_disabled<T>) {
 5880|    592|            auto rd = make_reader<T, char_type>();
 5881|    592|            if (!is_segment_contiguous(range)) {
 5882|    592|                return impl(rd, range, value);
 5883|    592|            }
 5884|    592|            auto crange = get_as_contiguous(range);
 5885|    592|            SCN_TRY(it, impl(rd, crange, value));
 5886|    592|            return ranges::next(range.begin(),
 5887|    592|                                ranges::distance(crange.begin(), it));
 5888|    592|        }
 5889|    592|        else {
 5890|    592|            SCN_EXPECT(false);
 5891|    592|            SCN_UNREACHABLE;
 5892|    592|        }
 5893|    592|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5863|    592|    {
 5864|    592|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    592|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    592|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    592|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    592|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 592]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    592|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    592|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5865|    592|                        .transform_error(make_eof_scan_error));
 5866|    592|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5867|    592|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5266|    592|    {
 5267|    592|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    592|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5268|    592|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5269|    592|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|   144k|    {
 2879|   144k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|   296M|    {
 2883|   296M|        return m_current;
 2884|   296M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   592M|    {
 2888|   592M|        return m_range.end();
 2889|   592M|    }
_ZN3scn2v34impl19is_first_char_spaceIwEENS1_26is_first_char_space_resultIT_EENSt3__117basic_string_viewIS4_NS6_11char_traitsIS4_EEEE:
 1220|   296M|{
 1221|       |    // TODO: optimize
 1222|   296M|    SCN_EXPECT(!str.empty());
  ------------------
  |  |  924|   296M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   296M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1223|   296M|    auto res = get_next_code_point(str);
 1224|   296M|    return {res.iterator, res.value, is_cp_space(res.value)};
 1225|   296M|}
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   296M|    {
 2903|   296M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   296M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   296M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   296M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   296M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 296M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   296M|        }
 2909|   296M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   296M|    static_cast<    \
  |  |  929|   296M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   296M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  11.8k|    {
 2893|  11.8k|        return ranges::subrange{begin(), end()};
 2894|  11.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6037|  3.64k|    {
 6038|  3.64k|        const bool need_skipped_width =
 6039|  3.64k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6039:13): [True: 2.72k, False: 924]
  |  Branch (6039:33): [True: 0, False: 924]
  ------------------
 6040|  3.64k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6041|       |
 6042|       |        // Read prefix
 6043|  3.64k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6043:13): [True: 90, False: 3.55k]
  ------------------
 6044|  3.64k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6044:13): [True: 198, False: 3.35k]
  ------------------
 6045|    288|            return skip_fill(rng, specs.precision, specs.fill,
 6046|    288|                             need_skipped_width);
 6047|    288|        }
 6048|  3.35k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6048:13): [True: 3.22k, False: 138]
  |  Branch (6048:56): [True: 2.87k, False: 346]
  ------------------
 6049|       |            // Default alignment:
 6050|       |            // Skip preceding whitespace, if required by the reader
 6051|  2.87k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6051:17): [True: 0, False: 2.87k]
  ------------------
 6052|      0|                auto max_width_view = take_width(rng, specs.precision);
 6053|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6054|      0|                                  .transform_error(make_eof_scan_error));
 6055|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6056|      0|            }
 6057|  5.74k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  2.87k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.87k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.87k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.87k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.87k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.87k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6058|  5.74k|                            make_eof_scan_error));
 6059|       |
 6060|  5.74k|            if (need_skipped_width) {
  ------------------
  |  Branch (6060:17): [True: 2.43k, False: 444]
  ------------------
 6061|  2.43k|                return result_type{
 6062|  2.43k|                    it,
 6063|  2.43k|                    calculate_text_width(make_contiguous_buffer(
 6064|  2.43k|                                             ranges::subrange{rng.begin(), it})
 6065|  2.43k|                                             .view())};
 6066|  2.43k|            }
 6067|    444|            return result_type{it, 0};
 6068|  5.74k|        }
 6069|       |
 6070|    484|        return result_type{rng.begin(), 0};
 6071|  3.35k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6079|    594|    {
 6080|    594|        const bool need_skipped_width =
 6081|    594|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6081:13): [True: 448, False: 146]
  |  Branch (6081:33): [True: 0, False: 146]
  ------------------
 6082|    594|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6083|       |
 6084|    594|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6084:13): [True: 26, False: 568]
  ------------------
 6085|    594|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6085:13): [True: 34, False: 534]
  ------------------
 6086|     60|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6087|     60|                             specs.fill, need_skipped_width);
 6088|     60|        }
 6089|    534|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6089:13): [True: 518, False: 16]
  ------------------
 6090|    534|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6090:13): [True: 326, False: 192]
  ------------------
 6091|    534|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6091:15): [True: 286, False: 40]
  |  Branch (6091:35): [True: 282, False: 4]
  ------------------
 6092|    326|             (specs.precision != 0 &&
  ------------------
  |  Branch (6092:15): [True: 0, False: 44]
  ------------------
 6093|    282|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|    282|            if (specs.precision != 0) {
  ------------------
  |  Branch (6094:17): [True: 0, False: 282]
  ------------------
 6095|      0|                const auto initial_width =
 6096|      0|                    specs.precision - prefix_width - value_width;
 6097|      0|                auto max_width_view = take_width(rng, initial_width);
 6098|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6099|      0|                                  .transform_error(make_eof_scan_error));
 6100|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6101|      0|            }
 6102|    564|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|    282|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    282|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    282|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    282|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 282]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    282|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    282|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6103|    564|                            make_eof_scan_error));
 6104|       |
 6105|    564|            if (need_skipped_width) {
  ------------------
  |  Branch (6105:17): [True: 282, False: 0]
  ------------------
 6106|    282|                return result_type{
 6107|    282|                    it,
 6108|    282|                    calculate_text_width(make_contiguous_buffer(
 6109|    282|                                             ranges::subrange{rng.begin(), it})
 6110|    282|                                             .view())};
 6111|    282|            }
 6112|      0|            return result_type{it, 0};
 6113|    564|        }
 6114|    252|        return result_type{rng.begin(), 0};
 6115|    534|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6178|    462|    {
 6179|    462|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    462|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    462|                          basic_contiguous_scan_context<char_type>>) {
 6183|    462|            auto rd = make_reader<T, char_type>();
 6184|    462|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 404]
  |  |  ------------------
  ------------------
 6185|     58|                return unexpected(e);
 6186|     58|            }
 6187|       |
 6188|    404|            return impl(rd, range, value);
 6189|    462|        }
 6190|    462|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    462|            auto rd = make_reader<T, char_type>();
 6192|    462|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    462|                return unexpected(e);
 6194|    462|            }
 6195|       |
 6196|    462|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    462|                specs.width != 0) {
 6198|    462|                return impl(rd, range, value);
 6199|    462|            }
 6200|       |
 6201|    462|            auto crange = get_as_contiguous(range);
 6202|    462|            SCN_TRY(it, impl(rd, crange, value));
 6203|    462|            return ranges::next(range.begin(),
 6204|    462|                                ranges::distance(crange.begin(), it));
 6205|    462|        }
 6206|    462|        else {
 6207|    462|            SCN_EXPECT(false);
 6208|    462|            SCN_UNREACHABLE;
 6209|    462|        }
 6210|    462|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    404|    {
 6121|    404|        const bool need_skipped_width =
 6122|    404|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 292, False: 112]
  |  Branch (6122:33): [True: 0, False: 112]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    404|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    404|        auto [it, prefix_width] = prefix_result;
 6127|    404|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    404|        std::ptrdiff_t value_width = 0;
 6131|    404|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 404]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    404|        else {
 6147|    404|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 404, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    404|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    404|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    404|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    404|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    404|    }                                                  \
  |  | 3642|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6178|    462|    {
 6179|    462|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    462|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    462|                          basic_contiguous_scan_context<char_type>>) {
 6183|    462|            auto rd = make_reader<T, char_type>();
 6184|    462|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 404]
  |  |  ------------------
  ------------------
 6185|     58|                return unexpected(e);
 6186|     58|            }
 6187|       |
 6188|    404|            return impl(rd, range, value);
 6189|    462|        }
 6190|    462|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    462|            auto rd = make_reader<T, char_type>();
 6192|    462|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    462|                return unexpected(e);
 6194|    462|            }
 6195|       |
 6196|    462|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    462|                specs.width != 0) {
 6198|    462|                return impl(rd, range, value);
 6199|    462|            }
 6200|       |
 6201|    462|            auto crange = get_as_contiguous(range);
 6202|    462|            SCN_TRY(it, impl(rd, crange, value));
 6203|    462|            return ranges::next(range.begin(),
 6204|    462|                                ranges::distance(crange.begin(), it));
 6205|    462|        }
 6206|    462|        else {
 6207|    462|            SCN_EXPECT(false);
 6208|    462|            SCN_UNREACHABLE;
 6209|    462|        }
 6210|    462|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    404|    {
 6121|    404|        const bool need_skipped_width =
 6122|    404|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 292, False: 112]
  |  Branch (6122:33): [True: 0, False: 112]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    404|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    404|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 404]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    404|        auto [it, prefix_width] = prefix_result;
 6127|    404|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    404|        std::ptrdiff_t value_width = 0;
 6131|    404|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 404]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    404|        else {
 6147|    404|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    404|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    404|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 404, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    404|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    404|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    404|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    404|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    404|    }                                                  \
  |  | 3642|    404|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    404|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIPvEENS0_13scan_expectedIPKwEERT_:
 6178|    452|    {
 6179|    452|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    452|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    452|                          basic_contiguous_scan_context<char_type>>) {
 6183|    452|            auto rd = make_reader<T, char_type>();
 6184|    452|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 374]
  |  |  ------------------
  ------------------
 6185|     78|                return unexpected(e);
 6186|     78|            }
 6187|       |
 6188|    374|            return impl(rd, range, value);
 6189|    452|        }
 6190|    452|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    452|            auto rd = make_reader<T, char_type>();
 6192|    452|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    452|                return unexpected(e);
 6194|    452|            }
 6195|       |
 6196|    452|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    452|                specs.width != 0) {
 6198|    452|                return impl(rd, range, value);
 6199|    452|            }
 6200|       |
 6201|    452|            auto crange = get_as_contiguous(range);
 6202|    452|            SCN_TRY(it, impl(rd, crange, value));
 6203|    452|            return ranges::next(range.begin(),
 6204|    452|                                ranges::distance(crange.begin(), it));
 6205|    452|        }
 6206|    452|        else {
 6207|    452|            SCN_EXPECT(false);
 6208|    452|            SCN_UNREACHABLE;
 6209|    452|        }
 6210|    452|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE11check_specsERKNS0_6detail12format_specsE:
 5753|    452|    {
 5754|    452|        reader_error_handler eh{};
 5755|    452|        detail::check_pointer_type_specs(specs, eh);
 5756|    452|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 78, False: 374]
  |  |  ------------------
  ------------------
 5757|     78|            return {scan_error::invalid_format_string, eh.m_msg};
 5758|     78|        }
 5759|    374|        return {};
 5760|    452|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_23reader_impl_for_voidptrIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEPvEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SI_RT1_:
 6120|    374|    {
 6121|    374|        const bool need_skipped_width =
 6122|    374|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 286, False: 88]
  |  Branch (6122:33): [True: 0, False: 88]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    374|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    374|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 374]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    374|        auto [it, prefix_width] = prefix_result;
 6127|    374|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    374|        std::ptrdiff_t value_width = 0;
 6131|    374|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 374]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    374|        else {
 6147|    374|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    374|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    374|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    374|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 374, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    374|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    374|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    374|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    374|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    374|    }                                                  \
  |  | 3642|    374|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    374|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl23reader_impl_for_voidptrIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERPvNSL_10locale_refE:
 5782|    374|    {
 5783|    374|        SCN_UNUSED(specs);
  ------------------
  |  |  909|    374|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5784|    374|        return read_default(range, value, loc);
 5785|    374|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIbEENS0_13scan_expectedIPKwEERT_:
 6178|    462|    {
 6179|    462|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    462|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    462|                          basic_contiguous_scan_context<char_type>>) {
 6183|    462|            auto rd = make_reader<T, char_type>();
 6184|    462|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 442]
  |  |  ------------------
  ------------------
 6185|     20|                return unexpected(e);
 6186|     20|            }
 6187|       |
 6188|    442|            return impl(rd, range, value);
 6189|    462|        }
 6190|    462|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    462|            auto rd = make_reader<T, char_type>();
 6192|    462|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    462|                return unexpected(e);
 6194|    462|            }
 6195|       |
 6196|    462|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    462|                specs.width != 0) {
 6198|    462|                return impl(rd, range, value);
 6199|    462|            }
 6200|       |
 6201|    462|            auto crange = get_as_contiguous(range);
 6202|    462|            SCN_TRY(it, impl(rd, crange, value));
 6203|    462|            return ranges::next(range.begin(),
 6204|    462|                                ranges::distance(crange.begin(), it));
 6205|    462|        }
 6206|    462|        else {
 6207|    462|            SCN_EXPECT(false);
 6208|    462|            SCN_UNREACHABLE;
 6209|    462|        }
 6210|    462|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|    462|    {
 3040|    462|        reader_error_handler eh{};
 3041|    462|        get_derived().check_specs_impl(specs, eh);
 3042|    462|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 442]
  |  |  ------------------
  ------------------
 3043|     20|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|     20|        }
 3045|    442|        return {};
 3046|    462|    }
_ZN3scn2v34impl11reader_baseINS1_20reader_impl_for_boolIwEEwE11get_derivedEv:
 3050|    462|    {
 3051|    462|        return static_cast<Derived&>(*this);
 3052|    462|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5497|    462|    {
 5498|    462|        detail::check_bool_type_specs(specs, eh);
 5499|    462|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_20reader_impl_for_boolIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEbEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    442|    {
 6121|    442|        const bool need_skipped_width =
 6122|    442|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 322, False: 120]
  |  Branch (6122:33): [True: 0, False: 120]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    442|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    442|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 442]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    442|        auto [it, prefix_width] = prefix_result;
 6127|    442|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    442|        std::ptrdiff_t value_width = 0;
 6131|    442|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 442]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    442|        else {
 6147|    442|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    442|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    442|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    442|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 442, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    442|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    442|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    442|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    442|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    442|    }                                                  \
  |  | 3642|    442|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    442|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl20reader_impl_for_boolIwE11get_optionsERKNS0_6detail12format_specsE:
 5529|    442|    {
 5530|    442|        SCN_GCC_COMPAT_PUSH
 5531|    442|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 5532|       |
 5533|    442|        switch (specs.type) {
 5534|     38|            case detail::presentation_type::string:
  ------------------
  |  Branch (5534:13): [True: 38, False: 404]
  ------------------
 5535|     38|                return bool_reader_base::allow_text;
 5536|       |
 5537|      2|            case detail::presentation_type::int_generic:
  ------------------
  |  Branch (5537:13): [True: 2, False: 440]
  ------------------
 5538|      6|            case detail::presentation_type::int_binary:
  ------------------
  |  Branch (5538:13): [True: 4, False: 438]
  ------------------
 5539|     10|            case detail::presentation_type::int_decimal:
  ------------------
  |  Branch (5539:13): [True: 4, False: 438]
  ------------------
 5540|     12|            case detail::presentation_type::int_hex:
  ------------------
  |  Branch (5540:13): [True: 2, False: 440]
  ------------------
 5541|     14|            case detail::presentation_type::int_octal:
  ------------------
  |  Branch (5541:13): [True: 2, False: 440]
  ------------------
 5542|     22|            case detail::presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (5542:13): [True: 8, False: 434]
  ------------------
 5543|     22|                return bool_reader_base::allow_numeric;
 5544|       |
 5545|    382|            default:
  ------------------
  |  Branch (5545:13): [True: 382, False: 60]
  ------------------
 5546|    382|                return bool_reader_base::allow_text |
 5547|    382|                       bool_reader_base::allow_numeric;
 5548|    442|        }
 5549|       |
 5550|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 5551|    442|    }
_ZNK3scn2v34impl20reader_impl_for_boolIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERbNSL_10locale_refE:
 5516|    442|    {
 5517|    442|        const auto rd = bool_reader<CharT>{get_options(specs)};
 5518|       |
 5519|    442|#if !SCN_DISABLE_LOCALE
 5520|    442|        if (specs.localized) {
  ------------------
  |  Branch (5520:13): [True: 10, False: 432]
  ------------------
 5521|     10|            return rd.read_localized(range, loc, value);
 5522|     10|        }
 5523|    432|#endif
 5524|       |
 5525|    432|        return rd.read_classic(range, value);
 5526|    442|    }
_ZNK3scn2v34impl11bool_readerIwE14read_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refERb:
 5428|     10|    {
 5429|     10|        scan_error err{scan_error::invalid_scanned_value,
 5430|     10|                       "Failed to read boolean"};
 5431|       |
 5432|     10|        if (m_options & allow_numeric) {
  ------------------
  |  Branch (5432:13): [True: 10, False: 0]
  ------------------
 5433|     10|            if (auto r = read_numeric(range, value)) {
  ------------------
  |  Branch (5433:22): [True: 0, False: 10]
  ------------------
 5434|      0|                return *r;
 5435|      0|            }
 5436|     10|            else {
 5437|     10|                err = r.error();
 5438|     10|            }
 5439|     10|        }
 5440|       |
 5441|     10|        if (m_options & allow_text) {
  ------------------
  |  Branch (5441:13): [True: 10, False: 0]
  ------------------
 5442|     10|            auto stdloc = loc.get<std::locale>();
 5443|     10|            const auto& numpunct =
 5444|     10|                get_or_add_facet<std::numpunct<CharT>>(stdloc);
 5445|     10|            const auto truename = numpunct.truename();
 5446|     10|            const auto falsename = numpunct.falsename();
 5447|       |
 5448|     10|            if (auto r =
  ------------------
  |  Branch (5448:22): [True: 0, False: 10]
  ------------------
 5449|     10|                    read_textual_custom(range, value, truename, falsename)) {
 5450|      0|                return *r;
 5451|      0|            }
 5452|     10|            else {
 5453|     10|                err = r.error();
 5454|     10|            }
 5455|     10|        }
 5456|       |
 5457|     10|        return unexpected(err);
 5458|     10|    }
_ZNK3scn2v34impl11bool_readerIwE19read_textual_customINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RbNSD_17basic_string_viewIwNSD_11char_traitsIwEEEESP_:
 5468|     10|    {
 5469|     10|        const auto is_truename_shorter = truename.size() <= falsename.size();
 5470|     10|        const auto shorter = std::pair{
 5471|     10|            is_truename_shorter ? truename : falsename, is_truename_shorter};
  ------------------
  |  Branch (5471:13): [True: 10, False: 0]
  ------------------
 5472|     10|        const auto longer = std::pair{
 5473|     10|            !is_truename_shorter ? truename : falsename, !is_truename_shorter};
  ------------------
  |  Branch (5473:13): [True: 0, False: 10]
  ------------------
 5474|       |
 5475|     10|        if (auto r = read_matching_string(range, shorter.first)) {
  ------------------
  |  Branch (5475:18): [True: 0, False: 10]
  ------------------
 5476|      0|            value = shorter.second;
 5477|      0|            return *r;
 5478|      0|        }
 5479|     10|        if (auto r = read_matching_string(range, longer.first)) {
  ------------------
  |  Branch (5479:18): [True: 0, False: 10]
  ------------------
 5480|      0|            value = longer.second;
 5481|      0|            return *r;
 5482|      0|        }
 5483|       |
 5484|     10|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 5485|     10|                                     "read_textual: No match");
 5486|     10|    }
_ZN3scn2v34impl20read_matching_stringINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewINDTcl4implISD_EEE4typeENSB_11char_traitsISL_EEEE:
 2178|     20|{
 2179|     20|    SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|     20|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     20|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     20|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     20|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 16]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      4|    }                                                  \
  |  |  |  | 3642|     20|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|     16|                    range, static_cast<std::ptrdiff_t>(str.size()))
 2181|     16|                    .transform_error(make_eof_parse_error));
 2182|       |
 2183|     16|    auto sv = make_contiguous_buffer(ranges::subrange{range.begin(), it});
 2184|     16|    if (SCN_UNLIKELY(sv.view() != str)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 2185|     16|        return unexpected(parse_error::error);
 2186|     16|    }
 2187|      0|    return it;
 2188|     16|}
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIwEENS0_13scan_expectedIPKwEERT_:
 6178|    452|    {
 6179|    452|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    452|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    452|                          basic_contiguous_scan_context<char_type>>) {
 6183|    452|            auto rd = make_reader<T, char_type>();
 6184|    452|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 58, False: 394]
  |  |  ------------------
  ------------------
 6185|     58|                return unexpected(e);
 6186|     58|            }
 6187|       |
 6188|    394|            return impl(rd, range, value);
 6189|    452|        }
 6190|    452|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    452|            auto rd = make_reader<T, char_type>();
 6192|    452|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    452|                return unexpected(e);
 6194|    452|            }
 6195|       |
 6196|    452|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    452|                specs.width != 0) {
 6198|    452|                return impl(rd, range, value);
 6199|    452|            }
 6200|       |
 6201|    452|            auto crange = get_as_contiguous(range);
 6202|    452|            SCN_TRY(it, impl(rd, crange, value));
 6203|    452|            return ranges::next(range.begin(),
 6204|    452|                                ranges::distance(crange.begin(), it));
 6205|    452|        }
 6206|    452|        else {
 6207|    452|            SCN_EXPECT(false);
 6208|    452|            SCN_UNREACHABLE;
 6209|    452|        }
 6210|    452|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_wcharIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEwEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    394|    {
 6121|    394|        const bool need_skipped_width =
 6122|    394|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 292, False: 102]
  |  Branch (6122:33): [True: 0, False: 102]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    394|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    394|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 394]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    394|        auto [it, prefix_width] = prefix_result;
 6127|    394|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    394|        std::ptrdiff_t value_width = 0;
 6131|    394|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 394]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    394|        else {
 6147|    394|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    394|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    394|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    394|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22, False: 372]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     22|    }                                                  \
  |  | 3642|    394|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    394|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|    372|                                             specs, value, loc));
 6149|       |
 6150|    372|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 286, False: 86]
  ------------------
 6151|    286|                value_width = calculate_text_width(
 6152|    286|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    286|                        .view());
 6154|    286|            }
 6155|    372|        }
 6156|       |
 6157|       |        // Read postfix
 6158|    372|        std::ptrdiff_t postfix_width = 0;
 6159|    372|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 372, False: 0]
  ------------------
 6160|    372|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|    372|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    372|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    372|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    372|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 372]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    372|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    372|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|    372|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|    372|                                 rd.skip_ws_before_read(), prefix_width,
 6163|    372|                                 value_width));
 6164|    372|            std::tie(it, postfix_width) = postfix_result;
 6165|    372|        }
 6166|       |
 6167|    372|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|    372|                                                 value_width, postfix_width);
 6169|    372|            !e) {
  ------------------
  |  Branch (6169:13): [True: 282, False: 90]
  ------------------
 6170|    282|            return unexpected(e);
 6171|    282|        }
 6172|       |
 6173|     90|        return it;
 6174|    372|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6178|    462|    {
 6179|    462|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    462|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    462|                          basic_contiguous_scan_context<char_type>>) {
 6183|    462|            auto rd = make_reader<T, char_type>();
 6184|    462|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    462|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64, False: 398]
  |  |  ------------------
  ------------------
 6185|     64|                return unexpected(e);
 6186|     64|            }
 6187|       |
 6188|    398|            return impl(rd, range, value);
 6189|    462|        }
 6190|    462|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    462|            auto rd = make_reader<T, char_type>();
 6192|    462|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    462|                return unexpected(e);
 6194|    462|            }
 6195|       |
 6196|    462|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    462|                specs.width != 0) {
 6198|    462|                return impl(rd, range, value);
 6199|    462|            }
 6200|       |
 6201|    462|            auto crange = get_as_contiguous(range);
 6202|    462|            SCN_TRY(it, impl(rd, crange, value));
 6203|    462|            return ranges::next(range.begin(),
 6204|    462|                                ranges::distance(crange.begin(), it));
 6205|    462|        }
 6206|    462|        else {
 6207|    462|            SCN_EXPECT(false);
 6208|    462|            SCN_UNREACHABLE;
 6209|    462|        }
 6210|    462|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6120|    398|    {
 6121|    398|        const bool need_skipped_width =
 6122|    398|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 290, False: 108]
  |  Branch (6122:33): [True: 0, False: 108]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    398|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    398|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    398|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    398|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    398|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 398]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    398|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    398|        auto [it, prefix_width] = prefix_result;
 6127|    398|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    398|        std::ptrdiff_t value_width = 0;
 6131|    398|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 398]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    398|        else {
 6147|    398|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    398|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    398|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    398|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 398, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    398|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    398|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    398|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    398|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    398|    }                                                  \
  |  | 3642|    398|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    398|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|      0|                                             specs, value, loc));
 6149|       |
 6150|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 0, False: 0]
  ------------------
 6151|      0|                value_width = calculate_text_width(
 6152|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|      0|                        .view());
 6154|      0|            }
 6155|      0|        }
 6156|       |
 6157|       |        // Read postfix
 6158|      0|        std::ptrdiff_t postfix_width = 0;
 6159|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 0, False: 0]
  ------------------
 6160|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6163|      0|                                 value_width));
 6164|      0|            std::tie(it, postfix_width) = postfix_result;
 6165|      0|        }
 6166|       |
 6167|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|      0|                                                 value_width, postfix_width);
 6169|      0|            !e) {
  ------------------
  |  Branch (6169:13): [True: 0, False: 0]
  ------------------
 6170|      0|            return unexpected(e);
 6171|      0|        }
 6172|       |
 6173|      0|        return it;
 6174|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKwEERT_:
 6178|    452|    {
 6179|    452|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    452|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    452|                          basic_contiguous_scan_context<char_type>>) {
 6183|    452|            auto rd = make_reader<T, char_type>();
 6184|    452|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 410]
  |  |  ------------------
  ------------------
 6185|     42|                return unexpected(e);
 6186|     42|            }
 6187|       |
 6188|    410|            return impl(rd, range, value);
 6189|    452|        }
 6190|    452|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    452|            auto rd = make_reader<T, char_type>();
 6192|    452|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    452|                return unexpected(e);
 6194|    452|            }
 6195|       |
 6196|    452|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    452|                specs.width != 0) {
 6198|    452|                return impl(rd, range, value);
 6199|    452|            }
 6200|       |
 6201|    452|            auto crange = get_as_contiguous(range);
 6202|    452|            SCN_TRY(it, impl(rd, crange, value));
 6203|    452|            return ranges::next(range.begin(),
 6204|    452|                                ranges::distance(crange.begin(), it));
 6205|    452|        }
 6206|    452|        else {
 6207|    452|            SCN_EXPECT(false);
 6208|    452|            SCN_UNREACHABLE;
 6209|    452|        }
 6210|    452|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|    410|    {
 6121|    410|        const bool need_skipped_width =
 6122|    410|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 316, False: 94]
  |  Branch (6122:33): [True: 0, False: 94]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    410|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    410|        auto [it, prefix_width] = prefix_result;
 6127|    410|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    410|        std::ptrdiff_t value_width = 0;
 6131|    410|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 410]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    410|        else {
 6147|    410|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 84, False: 326]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     84|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     84|    }                                                  \
  |  | 3642|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|    326|                                             specs, value, loc));
 6149|       |
 6150|    326|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 258, False: 68]
  ------------------
 6151|    258|                value_width = calculate_text_width(
 6152|    258|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    258|                        .view());
 6154|    258|            }
 6155|    326|        }
 6156|       |
 6157|       |        // Read postfix
 6158|    326|        std::ptrdiff_t postfix_width = 0;
 6159|    326|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 74, False: 252]
  ------------------
 6160|     74|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|     74|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     74|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     74|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     74|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 74]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     74|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|     74|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|     74|                                 rd.skip_ws_before_read(), prefix_width,
 6163|     74|                                 value_width));
 6164|     74|            std::tie(it, postfix_width) = postfix_result;
 6165|     74|        }
 6166|       |
 6167|    326|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|    326|                                                 value_width, postfix_width);
 6169|    326|            !e) {
  ------------------
  |  Branch (6169:13): [True: 18, False: 308]
  ------------------
 6170|     18|            return unexpected(e);
 6171|     18|        }
 6172|       |
 6173|    308|        return it;
 6174|    326|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6178|    452|    {
 6179|    452|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    452|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    452|                          basic_contiguous_scan_context<char_type>>) {
 6183|    452|            auto rd = make_reader<T, char_type>();
 6184|    452|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 410]
  |  |  ------------------
  ------------------
 6185|     42|                return unexpected(e);
 6186|     42|            }
 6187|       |
 6188|    410|            return impl(rd, range, value);
 6189|    452|        }
 6190|    452|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    452|            auto rd = make_reader<T, char_type>();
 6192|    452|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    452|                return unexpected(e);
 6194|    452|            }
 6195|       |
 6196|    452|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    452|                specs.width != 0) {
 6198|    452|                return impl(rd, range, value);
 6199|    452|            }
 6200|       |
 6201|    452|            auto crange = get_as_contiguous(range);
 6202|    452|            SCN_TRY(it, impl(rd, crange, value));
 6203|    452|            return ranges::next(range.begin(),
 6204|    452|                                ranges::distance(crange.begin(), it));
 6205|    452|        }
 6206|    452|        else {
 6207|    452|            SCN_EXPECT(false);
 6208|    452|            SCN_UNREACHABLE;
 6209|    452|        }
 6210|    452|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6120|    410|    {
 6121|    410|        const bool need_skipped_width =
 6122|    410|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 316, False: 94]
  |  Branch (6122:33): [True: 0, False: 94]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    410|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    410|        auto [it, prefix_width] = prefix_result;
 6127|    410|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    410|        std::ptrdiff_t value_width = 0;
 6131|    410|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 410]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    410|        else {
 6147|    410|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 84, False: 326]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     84|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     84|    }                                                  \
  |  | 3642|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|    326|                                             specs, value, loc));
 6149|       |
 6150|    326|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 258, False: 68]
  ------------------
 6151|    258|                value_width = calculate_text_width(
 6152|    258|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    258|                        .view());
 6154|    258|            }
 6155|    326|        }
 6156|       |
 6157|       |        // Read postfix
 6158|    326|        std::ptrdiff_t postfix_width = 0;
 6159|    326|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 74, False: 252]
  ------------------
 6160|     74|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|     74|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     74|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     74|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     74|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 74]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     74|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|     74|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|     74|                                 rd.skip_ws_before_read(), prefix_width,
 6163|     74|                                 value_width));
 6164|     74|            std::tie(it, postfix_width) = postfix_result;
 6165|     74|        }
 6166|       |
 6167|    326|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|    326|                                                 value_width, postfix_width);
 6169|    326|            !e) {
  ------------------
  |  Branch (6169:13): [True: 18, False: 308]
  ------------------
 6170|     18|            return unexpected(e);
 6171|     18|        }
 6172|       |
 6173|    308|        return it;
 6174|    326|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6178|    452|    {
 6179|    452|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6179:23): [Folded - Ignored]
  |  Branch (6179:23): [Folded - Ignored]
  ------------------
 6180|    452|                      std::is_same_v<
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|      0|                          context_type,
 6182|    452|                          basic_contiguous_scan_context<char_type>>) {
 6183|    452|            auto rd = make_reader<T, char_type>();
 6184|    452|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    452|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42, False: 410]
  |  |  ------------------
  ------------------
 6185|     42|                return unexpected(e);
 6186|     42|            }
 6187|       |
 6188|    410|            return impl(rd, range, value);
 6189|    452|        }
 6190|    452|        else if constexpr (!detail::is_type_disabled<T>) {
 6191|    452|            auto rd = make_reader<T, char_type>();
 6192|    452|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6193|    452|                return unexpected(e);
 6194|    452|            }
 6195|       |
 6196|    452|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6197|    452|                specs.width != 0) {
 6198|    452|                return impl(rd, range, value);
 6199|    452|            }
 6200|       |
 6201|    452|            auto crange = get_as_contiguous(range);
 6202|    452|            SCN_TRY(it, impl(rd, crange, value));
 6203|    452|            return ranges::next(range.begin(),
 6204|    452|                                ranges::distance(crange.begin(), it));
 6205|    452|        }
 6206|    452|        else {
 6207|    452|            SCN_EXPECT(false);
 6208|    452|            SCN_UNREACHABLE;
 6209|    452|        }
 6210|    452|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6120|    410|    {
 6121|    410|        const bool need_skipped_width =
 6122|    410|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6122:13): [True: 316, False: 94]
  |  Branch (6122:33): [True: 0, False: 94]
  ------------------
 6123|       |
 6124|       |        // Read prefix
 6125|    410|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    410|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 410]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6126|    410|        auto [it, prefix_width] = prefix_result;
 6127|    410|        auto prefix_end_it = it;
 6128|       |
 6129|       |        // Read value
 6130|    410|        std::ptrdiff_t value_width = 0;
 6131|    410|        if (specs.precision != 0) {
  ------------------
  |  Branch (6131:13): [True: 0, False: 410]
  ------------------
 6132|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6132:17): [True: 0, False: 0]
  ------------------
 6133|      0|                return unexpected_scan_error(
 6134|      0|                    scan_error::invalid_scanned_value,
 6135|      0|                    "Too many spaces before value, precision exceeded before "
 6136|      0|                    "reading value");
 6137|      0|            }
 6138|       |
 6139|      0|            const auto initial_width = specs.precision - prefix_width;
 6140|      0|            auto max_width_view =
 6141|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6142|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6143|      0|            it = w_it.base();
 6144|      0|            value_width = initial_width - w_it.count();
 6145|      0|        }
 6146|    410|        else {
 6147|    410|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    410|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    410|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    410|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 84, False: 326]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|     84|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|     84|    }                                                  \
  |  | 3642|    410|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    410|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6148|    326|                                             specs, value, loc));
 6149|       |
 6150|    326|            if (need_skipped_width) {
  ------------------
  |  Branch (6150:17): [True: 258, False: 68]
  ------------------
 6151|    258|                value_width = calculate_text_width(
 6152|    258|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6153|    258|                        .view());
 6154|    258|            }
 6155|    326|        }
 6156|       |
 6157|       |        // Read postfix
 6158|    326|        std::ptrdiff_t postfix_width = 0;
 6159|    326|        if (it != rng.end()) {
  ------------------
  |  Branch (6159:13): [True: 74, False: 252]
  ------------------
 6160|     74|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|     74|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     74|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     74|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     74|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 74]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|     74|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     74|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6161|     74|                    impl_postfix(ranges::subrange{it, rng.end()},
 6162|     74|                                 rd.skip_ws_before_read(), prefix_width,
 6163|     74|                                 value_width));
 6164|     74|            std::tie(it, postfix_width) = postfix_result;
 6165|     74|        }
 6166|       |
 6167|    326|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6168|    326|                                                 value_width, postfix_width);
 6169|    326|            !e) {
  ------------------
  |  Branch (6169:13): [True: 18, False: 308]
  ------------------
 6170|     18|            return unexpected(e);
 6171|     18|        }
 6172|       |
 6173|    308|        return it;
 6174|    326|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|    670|    {
 3493|    670|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|    670|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|    670|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|    670|            if (prefix_result.sign == sign_type::minus_sign) {
 3498|    670|                return unexpected_scan_error(
 3499|    670|                    scan_error::invalid_scanned_value,
 3500|    670|                    "Unexpected '-' sign when parsing an "
 3501|    670|                    "unsigned value");
 3502|    670|            }
 3503|    670|        }
 3504|       |
 3505|    670|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 670]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  1.34k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  1.34k|                parse_integer_digits_without_thsep(
 3512|  1.34k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  1.34k|                    prefix_result.parsed_base));
 3514|       |
 3515|  1.34k|        auto buf = make_contiguous_buffer(
 3516|  1.34k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  1.34k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 670, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    670|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    670|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    670|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    670|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    670|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  1.34k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3492|    670|    {
 3493|    670|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3494|    670|                                   .transform_error(make_eof_scan_error));
 3495|       |
 3496|    670|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (3496:23): [Folded - Ignored]
  ------------------
 3497|    670|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3497:17): [True: 0, False: 670]
  ------------------
 3498|      0|                return unexpected_scan_error(
 3499|      0|                    scan_error::invalid_scanned_value,
 3500|      0|                    "Unexpected '-' sign when parsing an "
 3501|      0|                    "unsigned value");
 3502|      0|            }
 3503|    670|        }
 3504|       |
 3505|    670|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3505:13): [True: 0, False: 670]
  ------------------
 3506|      0|            value = T{0};
 3507|      0|            return std::next(prefix_result.iterator);
 3508|      0|        }
 3509|       |
 3510|  1.34k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 670]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    670|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3511|  1.34k|                parse_integer_digits_without_thsep(
 3512|  1.34k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3513|  1.34k|                    prefix_result.parsed_base));
 3514|       |
 3515|  1.34k|        auto buf = make_contiguous_buffer(
 3516|  1.34k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3517|  1.34k|        SCN_TRY(result_it,
  ------------------
  |  | 3643|    670|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    670|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    670|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    670|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 670, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    670|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    670|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    670|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    670|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    670|    }                                                  \
  |  |  |  | 3642|    670|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3518|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3519|      0|                                    prefix_result.parsed_base));
 3520|       |
 3521|      0|        return ranges::next(prefix_result.iterator,
 3522|      0|                            ranges::distance(buf.view().begin(), result_it));
 3523|  1.34k|    }

LLVMFuzzerTestOneInput:
   68|  4.01k|{
   69|  4.01k|    scn::fuzz::run(data, size);
   70|  4.01k|    return 0;
   71|  4.01k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   51|  4.01k|{
   52|  4.01k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (52:9): [True: 0, False: 4.01k]
  |  Branch (52:35): [True: 0, False: 4.01k]
  ------------------
   53|      0|        return;
   54|      0|    }
   55|       |
   56|  4.01k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   57|       |
   58|  4.01k|    run_for_source(sv);
   59|  4.01k|    run_for_source(wsv_reinterpret);
   60|  4.01k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (60:9): [True: 4.01k, False: 0]
  ------------------
   61|  4.01k|        run_for_source(wsv_transcode);
   62|  4.01k|    }
   63|  4.01k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT_:
   36|  4.01k|{
   37|  4.01k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  4.01k|    run_for_type<char_type>(source);
   40|  4.01k|    run_for_type<int>(source);
   41|  4.01k|    run_for_type<unsigned>(source);
   42|  4.01k|    run_for_type<double>(source);
   43|  4.01k|    run_for_type<bool>(source);
   44|  4.01k|    run_for_type<void*>(source);
   45|  4.01k|    run_for_type<std::string>(source);
   46|  4.01k|    run_for_type<std::wstring>(source);
   47|  4.01k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  4.01k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIcNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.01k|{
   25|  4.01k|    {
   26|  4.01k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.01k|    }
   28|  4.01k|    {
   29|  4.01k|        auto _ =
   30|  4.01k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.01k|    }
   32|  4.01k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.01k|{
   25|  4.01k|    {
   26|  4.01k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.01k|    }
   28|  4.01k|    {
   29|  4.01k|        auto _ =
   30|  4.01k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.01k|    }
   32|  4.01k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.01k|{
   25|  4.01k|    {
   26|  4.01k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.01k|    }
   28|  4.01k|    {
   29|  4.01k|        auto _ =
   30|  4.01k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.01k|    }
   32|  4.01k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.01k|{
   25|  4.01k|    {
   26|  4.01k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.01k|    }
   28|  4.01k|    {
   29|  4.01k|        auto _ =
   30|  4.01k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.01k|    }
   32|  4.01k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEvRT0_:
   24|  4.01k|{
   25|  4.01k|    {
   26|  4.01k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.01k|    }
   28|  4.01k|    {
   29|  4.01k|        auto _ =
   30|  4.01k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.01k|    }
   32|  4.01k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEvRT0_:
   24|  4.01k|{
   25|  4.01k|    {
   26|  4.01k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.01k|    }
   28|  4.01k|    {
   29|  4.01k|        auto _ =
   30|  4.01k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.01k|    }
   32|  4.01k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIcS6_EEEEvRT0_:
   24|  4.01k|{
   25|  4.01k|    {
   26|  4.01k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.01k|    }
   28|  4.01k|    {
   29|  4.01k|        auto _ =
   30|  4.01k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.01k|    }
   32|  4.01k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIcNS5_IcEEEEEEvRT0_:
   24|  4.01k|{
   25|  4.01k|    {
   26|  4.01k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.01k|    }
   28|  4.01k|    {
   29|  4.01k|        auto _ =
   30|  4.01k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.01k|    }
   32|  4.01k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEES7_EEvRT0_:
   24|  4.01k|{
   25|  4.01k|    {
   26|  4.01k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  4.01k|    }
   28|  4.01k|    {
   29|  4.01k|        auto _ =
   30|  4.01k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  4.01k|    }
   32|  4.01k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_114run_for_sourceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT_:
   36|  8.03k|{
   37|  8.03k|    using char_type = ranges::range_value_t<Source>;
   38|       |
   39|  8.03k|    run_for_type<char_type>(source);
   40|  8.03k|    run_for_type<int>(source);
   41|  8.03k|    run_for_type<unsigned>(source);
   42|  8.03k|    run_for_type<double>(source);
   43|  8.03k|    run_for_type<bool>(source);
   44|  8.03k|    run_for_type<void*>(source);
   45|  8.03k|    run_for_type<std::string>(source);
   46|  8.03k|    run_for_type<std::wstring>(source);
   47|  8.03k|    run_for_type<std::basic_string_view<char_type>>(source);
   48|  8.03k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIwNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.03k|{
   25|  8.03k|    {
   26|  8.03k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.03k|    }
   28|  8.03k|    {
   29|  8.03k|        auto _ =
   30|  8.03k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.03k|    }
   32|  8.03k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIiNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.03k|{
   25|  8.03k|    {
   26|  8.03k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.03k|    }
   28|  8.03k|    {
   29|  8.03k|        auto _ =
   30|  8.03k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.03k|    }
   32|  8.03k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIjNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.03k|{
   25|  8.03k|    {
   26|  8.03k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.03k|    }
   28|  8.03k|    {
   29|  8.03k|        auto _ =
   30|  8.03k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.03k|    }
   32|  8.03k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIdNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.03k|{
   25|  8.03k|    {
   26|  8.03k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.03k|    }
   28|  8.03k|    {
   29|  8.03k|        auto _ =
   30|  8.03k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.03k|    }
   32|  8.03k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIbNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEvRT0_:
   24|  8.03k|{
   25|  8.03k|    {
   26|  8.03k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.03k|    }
   28|  8.03k|    {
   29|  8.03k|        auto _ =
   30|  8.03k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.03k|    }
   32|  8.03k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeIPvNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEvRT0_:
   24|  8.03k|{
   25|  8.03k|    {
   26|  8.03k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.03k|    }
   28|  8.03k|    {
   29|  8.03k|        auto _ =
   30|  8.03k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.03k|    }
   32|  8.03k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS3_17basic_string_viewIwNS5_IwEEEEEEvRT0_:
   24|  8.03k|{
   25|  8.03k|    {
   26|  8.03k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.03k|    }
   28|  8.03k|    {
   29|  8.03k|        auto _ =
   30|  8.03k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.03k|    }
   32|  8.03k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS3_17basic_string_viewIwS6_EEEEvRT0_:
   24|  8.03k|{
   25|  8.03k|    {
   26|  8.03k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.03k|    }
   28|  8.03k|    {
   29|  8.03k|        auto _ =
   30|  8.03k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.03k|    }
   32|  8.03k|}
format_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_112run_for_typeINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEES7_EEvRT0_:
   24|  8.03k|{
   25|  8.03k|    {
   26|  8.03k|        auto _ = scn::scan<T>(source, scn::runtime_format(source));
   27|  8.03k|    }
   28|  8.03k|    {
   29|  8.03k|        auto _ =
   30|  8.03k|            scn::scan<T>(global_locale, source, scn::runtime_format(source));
   31|  8.03k|    }
   32|  8.03k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  4.01k|{
   52|  4.01k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  4.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  4.01k|    string_buffer.resize(size);
   56|  4.01k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  4.01k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  4.01k|    const auto wsv_reinterpret_size =
   61|  4.01k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 85, False: 3.93k]
  ------------------
   62|  4.01k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  4.01k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  4.01k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  4.01k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  4.01k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  4.01k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  4.01k|}

